/* Generated by CIL v. 1.8.2 */
/* print_CIL_Input is true */

#line 143 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef long ptrdiff_t;
#line 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef unsigned long size_t;
#line 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef int wchar_t;
#line 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
struct __anonstruct_max_align_t_896270833 {
   long long __max_align_ll  __attribute__((__aligned__(__alignof__(long long )))) ;
   long double __max_align_ld  __attribute__((__aligned__(__alignof__(long double )))) ;
};
#line 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef struct __anonstruct_max_align_t_896270833 max_align_t;
#line 31 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned char __u_char;
#line 32 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned short __u_short;
#line 33 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __u_int;
#line 34 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __u_long;
#line 37 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef signed char __int8_t;
#line 38 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned char __uint8_t;
#line 39 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef short __int16_t;
#line 40 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned short __uint16_t;
#line 41 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __int32_t;
#line 42 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __uint32_t;
#line 44 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __int64_t;
#line 45 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __uint64_t;
#line 52 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int8_t __int_least8_t;
#line 53 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint8_t __uint_least8_t;
#line 54 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int16_t __int_least16_t;
#line 55 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint16_t __uint_least16_t;
#line 56 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int32_t __int_least32_t;
#line 57 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint32_t __uint_least32_t;
#line 58 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int64_t __int_least64_t;
#line 59 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint64_t __uint_least64_t;
#line 63 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __quad_t;
#line 64 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __u_quad_t;
#line 72 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __intmax_t;
#line 73 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __uintmax_t;
#line 145 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __dev_t;
#line 146 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __uid_t;
#line 147 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __gid_t;
#line 148 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __ino_t;
#line 149 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __ino64_t;
#line 150 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __mode_t;
#line 151 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __nlink_t;
#line 152 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off_t;
#line 153 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off64_t;
#line 154 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __pid_t;
#line 155 "/usr/include/x86_64-linux-gnu/bits/types.h"
struct __anonstruct___fsid_t_109580352 {
   int __val[2] ;
};
#line 155 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef struct __anonstruct___fsid_t_109580352 __fsid_t;
#line 156 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __clock_t;
#line 157 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __rlim_t;
#line 158 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __rlim64_t;
#line 159 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __id_t;
#line 160 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __time_t;
#line 161 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __useconds_t;
#line 162 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __suseconds_t;
#line 163 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __suseconds64_t;
#line 165 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __daddr_t;
#line 166 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __key_t;
#line 169 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __clockid_t;
#line 172 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef void *__timer_t;
#line 175 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blksize_t;
#line 180 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blkcnt_t;
#line 181 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blkcnt64_t;
#line 184 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsblkcnt_t;
#line 185 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsblkcnt64_t;
#line 188 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsfilcnt_t;
#line 189 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsfilcnt64_t;
#line 192 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __fsword_t;
#line 194 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __ssize_t;
#line 197 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __syscall_slong_t;
#line 199 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __syscall_ulong_t;
#line 203 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __off64_t __loff_t;
#line 204 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef char *__caddr_t;
#line 207 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __intptr_t;
#line 210 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __socklen_t;
#line 215 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __sig_atomic_t;
#line 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h"
typedef __time_t time_t;
#line 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h"
struct timespec {
   __time_t tv_sec ;
   __syscall_slong_t tv_nsec ;
};
#line 38 "/usr/include/sched.h"
typedef __pid_t pid_t;
#line 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h"
struct sched_param {
   int sched_priority ;
};
#line 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
typedef unsigned long __cpu_mask;
#line 39 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
struct __anonstruct_cpu_set_t_826868708 {
   __cpu_mask __bits[1024UL / (8UL * sizeof(__cpu_mask ))] ;
};
#line 39 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
typedef struct __anonstruct_cpu_set_t_826868708 cpu_set_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h"
typedef __clock_t clock_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
struct tm {
   int tm_sec ;
   int tm_min ;
   int tm_hour ;
   int tm_mday ;
   int tm_mon ;
   int tm_year ;
   int tm_wday ;
   int tm_yday ;
   int tm_isdst ;
   long tm_gmtoff ;
   char const   *tm_zone ;
};
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h"
typedef __clockid_t clockid_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h"
typedef __timer_t timer_t;
#line 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h"
struct itimerspec {
   struct timespec it_interval ;
   struct timespec it_value ;
};
#line 49 "/usr/include/time.h"
struct sigevent ;
#line 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
struct __locale_data ;
#line 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
struct __locale_struct {
   struct __locale_data *__locales[13] ;
   unsigned short const   *__ctype_b ;
   int const   *__ctype_tolower ;
   int const   *__ctype_toupper ;
   char const   *__names[13] ;
};
#line 42 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
typedef struct __locale_struct *__locale_t;
#line 24 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h"
typedef __locale_t locale_t;
#line 49 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_internal_list {
   struct __pthread_internal_list *__prev ;
   struct __pthread_internal_list *__next ;
};
#line 49 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __pthread_internal_list __pthread_list_t;
#line 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_internal_slist {
   struct __pthread_internal_slist *__next ;
};
#line 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __pthread_internal_slist __pthread_slist_t;
#line 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h"
struct __pthread_mutex_s {
   int __lock ;
   unsigned int __count ;
   int __owner ;
   unsigned int __nusers ;
   int __kind ;
   short __spins ;
   short __elision ;
   __pthread_list_t __list ;
};
#line 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h"
struct __pthread_rwlock_arch_t {
   unsigned int __readers ;
   unsigned int __writers ;
   unsigned int __wrphase_futex ;
   unsigned int __writers_futex ;
   unsigned int __pad3 ;
   unsigned int __pad4 ;
   int __cur_writer ;
   int __shared ;
   signed char __rwelision ;
   unsigned char __pad1[7] ;
   unsigned long __pad2 ;
   unsigned int __flags ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___wseq32_817613185 {
   unsigned int __low ;
   unsigned int __high ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
union __anonunion____missing_field_name_207979571 {
   unsigned long long __wseq ;
   struct __anonstruct___wseq32_817613185 __wseq32 ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___g1_start32_817613186 {
   unsigned int __low ;
   unsigned int __high ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
union __anonunion____missing_field_name_459614979 {
   unsigned long long __g1_start ;
   struct __anonstruct___g1_start32_817613186 __g1_start32 ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_cond_s {
   union __anonunion____missing_field_name_207979571 __annonCompField1 ;
   union __anonunion____missing_field_name_459614979 __annonCompField2 ;
   unsigned int __g_refs[2] ;
   unsigned int __g_size[2] ;
   unsigned int __g1_orig_size ;
   unsigned int __wrefs ;
   unsigned int __g_signals[2] ;
};
#line 119 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef unsigned int __tss_t;
#line 120 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef unsigned long __thrd_t;
#line 122 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___once_flag_826868709 {
   int __data ;
};
#line 122 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __anonstruct___once_flag_826868709 __once_flag;
#line 27 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 32 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_mutexattr_t_488594144 {
   char __size[4] ;
   int __align ;
};
#line 32 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_mutexattr_t_488594144 pthread_mutexattr_t;
#line 41 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_condattr_t_488594145 {
   char __size[4] ;
   int __align ;
};
#line 41 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_condattr_t_488594145 pthread_condattr_t;
#line 49 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef unsigned int pthread_key_t;
#line 53 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef int pthread_once_t;
#line 56 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union pthread_attr_t {
   char __size[56] ;
   long __align ;
};
#line 62 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union pthread_attr_t pthread_attr_t;
#line 67 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_mutex_t_335460617 {
   struct __pthread_mutex_s __data ;
   char __size[40] ;
   long __align ;
};
#line 67 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_mutex_t_335460617 pthread_mutex_t;
#line 75 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_cond_t_951761805 {
   struct __pthread_cond_s __data ;
   char __size[48] ;
   long long __align ;
};
#line 75 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_cond_t_951761805 pthread_cond_t;
#line 86 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_rwlock_t_656928968 {
   struct __pthread_rwlock_arch_t __data ;
   char __size[56] ;
   long __align ;
};
#line 86 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_rwlock_t_656928968 pthread_rwlock_t;
#line 93 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_rwlockattr_t_145707745 {
   char __size[8] ;
   long __align ;
};
#line 93 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_rwlockattr_t_145707745 pthread_rwlockattr_t;
#line 103 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef int volatile   pthread_spinlock_t;
#line 108 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_barrier_t_145707746 {
   char __size[32] ;
   long __align ;
};
#line 108 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_barrier_t_145707746 pthread_barrier_t;
#line 114 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_barrierattr_t_951761806 {
   char __size[4] ;
   int __align ;
};
#line 114 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_barrierattr_t_951761806 pthread_barrierattr_t;
#line 31 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
typedef long __jmp_buf[8];
#line 5 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h"
struct __anonstruct___sigset_t_764561023 {
   unsigned long __val[1024UL / (8UL * sizeof(unsigned long ))] ;
};
#line 5 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h"
typedef struct __anonstruct___sigset_t_764561023 __sigset_t;
#line 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h"
struct __jmp_buf_tag {
   __jmp_buf __jmpbuf ;
   int __mask_was_saved ;
   __sigset_t __saved_mask ;
};
#line 37 "/usr/include/pthread.h"
enum __anonenum_34415463 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1
} ;
#line 47
enum __anonenum_508643754 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
    PTHREAD_MUTEX_NORMAL = 0,
    PTHREAD_MUTEX_RECURSIVE = 1,
    PTHREAD_MUTEX_ERRORCHECK = 2,
    PTHREAD_MUTEX_DEFAULT = 0
} ;
#line 69
enum __anonenum_931900394 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_STALLED_NP = 0,
    PTHREAD_MUTEX_ROBUST = 1,
    PTHREAD_MUTEX_ROBUST_NP = 1
} ;
#line 81
enum __anonenum_205214487 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2
} ;
#line 104
enum __anonenum_25043950 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
    PTHREAD_RWLOCK_DEFAULT_NP = 0
} ;
#line 124
enum __anonenum_436439511 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1
} ;
#line 134
enum __anonenum_998661166 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1
} ;
#line 144
enum __anonenum_146137331 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1
} ;
#line 159 "/usr/include/pthread.h"
struct _pthread_cleanup_buffer {
   void (*__routine)(void * ) ;
   void *__arg ;
   int __canceltype ;
   struct _pthread_cleanup_buffer *__prev ;
};
#line 168
enum __anonenum_53396917 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1
} ;
#line 175
enum __anonenum_904563783 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1
} ;
#line 538 "/usr/include/pthread.h"
struct __cancel_jmp_buf_tag {
   __jmp_buf __cancel_jmp_buf ;
   int __mask_was_saved ;
};
#line 544 "/usr/include/pthread.h"
struct __anonstruct___pthread_unwind_buf_t_530692248 {
   struct __cancel_jmp_buf_tag __cancel_jmp_buf[1] ;
   void *__pad[4] ;
};
#line 544 "/usr/include/pthread.h"
typedef struct __anonstruct___pthread_unwind_buf_t_530692248  __attribute__((__aligned__)) __pthread_unwind_buf_t;
#line 557 "/usr/include/pthread.h"
struct __pthread_cleanup_frame {
   void (*__cancel_routine)(void * ) ;
   void *__cancel_arg ;
   int __do_it ;
   int __cancel_type ;
};
#line 12 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __pthread_mutex_s___0 {
   int __lock ;
   unsigned int __count ;
   int __owner ;
   unsigned int __nusers ;
   int __kind ;
   int __spins ;
   __pthread_list_t __list ;
};
#line 12 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_pthread_mutex_t_586524132 {
   struct __pthread_mutex_s___0 __data ;
   char __size[40] ;
   long __align ;
};
#line 12 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef union __anonunion_pthread_mutex_t_586524132 pthread_mutex_t___0;
#line 49
struct device ;
#line 50 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef signed char __s8;
#line 51 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned char __u8;
#line 52 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef short __s16;
#line 53 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned short __u16;
#line 54 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef int __s32;
#line 55 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned int __u32;
#line 56 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned long long __u64;
#line 57 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef signed char s8;
#line 58 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned char u8;
#line 59 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef short s16;
#line 60 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned short u16;
#line 61 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef int s32;
#line 62 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned int u32;
#line 63 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef long long s64;
#line 64 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned long long u64;
#line 65 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef long __kernel_long_t;
#line 66 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned long __kernel_ulong_t;
#line 68 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __kernel_long_t __kernel_suseconds_t;
#line 69 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned int __kernel_uid32_t;
#line 70 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned int __kernel_gid32_t;
#line 71 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __kernel_long_t __kernel_ssize_t;
#line 73 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef long long __kernel_loff_t;
#line 75 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __kernel_long_t __kernel_clock_t;
#line 76 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef int __kernel_timer_t;
#line 78 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u16 __be16;
#line 79 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u32 __be32;
#line 80 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u32 __wsum;
#line 81 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u32 __kernel_dev_t;
#line 82 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __kernel_dev_t dev_t;
#line 83 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned short umode_t;
#line 86 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef _Bool bool;
#line 87 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __kernel_uid32_t uid_t;
#line 88 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __kernel_gid32_t gid_t;
#line 89 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __kernel_loff_t loff_t;
#line 90 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned int size_t___0;
#line 91 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __kernel_ssize_t ssize_t;
#line 93 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u8 u_int8_t;
#line 94 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __s32 int32_t;
#line 95 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u8 uint8_t;
#line 96 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u32 uint32_t;
#line 97 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u64 uint64_t;
#line 98 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned long sector_t;
#line 99 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned long blkcnt_t;
#line 100 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef u64 dma_addr_t;
#line 101 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned int gfp_t;
#line 102 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned int fmode_t;
#line 103 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned int oom_flags_t;
#line 104 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef u64 phys_addr_t;
#line 105 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef phys_addr_t resource_size_t;
#line 106 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 109 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 110 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 113 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 114 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 118
struct hlist_node ;
#line 119 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct hlist_head {
   struct hlist_node *first ;
};
#line 122 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 126 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 130
struct mutex ;
#line 131 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef u16 __ticket_t;
#line 132 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef u32 __ticketpair_t;
#line 133 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 137 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 141 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct arch_spinlock {
   union __anonunion____missing_field_name_8 __annonCompField4 ;
};
#line 144 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct arch_spinlock arch_spinlock_t;
#line 145 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_10 {
   u32 read ;
   s32 write ;
};
#line 149 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct____missing_field_name_10 __annonCompField5 ;
};
#line 153 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
#line 154
struct task_struct ;
#line 155
struct lockdep_map ;
#line 156 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 160
struct module ;
#line 161 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 184 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 188 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 203 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_11 {
   struct __anonstruct____missing_field_name_12 __annonCompField6 ;
   struct __anonstruct____missing_field_name_13 __annonCompField7 ;
};
#line 207 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct desc_struct {
   union __anonunion____missing_field_name_11 __annonCompField8 ;
};
#line 210 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct gate_struct64 {
   u16 offset_low ;
   u16 segment ;
   unsigned int ist : 3 ;
   unsigned int zero0 : 5 ;
   unsigned int type : 5 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 zero1 ;
};
#line 222 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct gate_struct64 gate_desc;
#line 223 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
};
#line 227 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned long pgdval_t;
#line 228 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned long pgprotval_t;
#line 229 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 232 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct pgprot pgprot_t;
#line 233 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 236 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 237
struct page ;
#line 238 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct page *pgtable_t;
#line 239
struct file ;
#line 240
struct seq_file ;
#line 241
struct thread_struct ;
#line 242
struct tss_struct ;
#line 243
struct mm_struct ;
#line 244
struct cpumask ;
#line 245 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct paravirt_callee_save {
   void *func ;
};
#line 248 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pv_cpu_ops {
   unsigned long (*get_debugreg)(int  ) ;
   void (*set_debugreg)(int  , unsigned long  ) ;
   void (*clts)(void) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long  ) ;
   unsigned long (*read_cr4_safe)(void) ;
   unsigned long (*read_cr4)(void) ;
   void (*write_cr4)(unsigned long  ) ;
   unsigned long (*read_cr8)(void) ;
   void (*write_cr8)(unsigned long  ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr  const  * ) ;
   void (*load_idt)(struct desc_ptr  const  * ) ;
   void (*store_idt)(struct desc_ptr * ) ;
   void (*set_ldt)(void const   * , unsigned int  ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct * , unsigned int  ) ;
   void (*load_gs_index)(unsigned int  ) ;
   void (*write_ldt_entry)(struct desc_struct * , int  , void const   * ) ;
   void (*write_gdt_entry)(struct desc_struct * , int  , void const   * , int  ) ;
   void (*write_idt_entry)(gate_desc * , int  , gate_desc const   * ) ;
   void (*alloc_ldt)(struct desc_struct * , unsigned int  ) ;
   void (*free_ldt)(struct desc_struct * , unsigned int  ) ;
   void (*load_sp0)(struct tss_struct * , struct thread_struct * ) ;
   void (*set_iopl_mask)(unsigned int  ) ;
   void (*wbinvd)(void) ;
   void (*io_delay)(void) ;
   void (*cpuid)(unsigned int * , unsigned int * , unsigned int * , unsigned int * ) ;
   u64 (*read_msr)(unsigned int  , int * ) ;
   int (*write_msr)(unsigned int  , unsigned int  , unsigned int  ) ;
   u64 (*read_tsc)(void) ;
   u64 (*read_pmc)(int  ) ;
   unsigned long long (*read_tscp)(unsigned int * ) ;
   void (*irq_enable_sysexit)(void) ;
   void (*usergs_sysret64)(void) ;
   void (*usergs_sysret32)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   void (*start_context_switch)(struct task_struct * ) ;
   void (*end_context_switch)(struct task_struct * ) ;
};
#line 290 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
   void (*adjust_exception_frame)(void) ;
};
#line 299 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef void (*ctor_fn_t)(void);
#line 300
struct net_device ;
#line 301
struct file_operations ;
#line 302
struct completion ;
#line 303
struct pid ;
#line 304 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 315 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 319 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_18 __annonCompField9 ;
};
#line 323 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 329 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 332 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct cpumask cpumask_t;
#line 333 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct cpumask *cpumask_var_t;
#line 334
struct static_key ;
#line 335
struct seq_operations ;
#line 336 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct x86_hw_tss {
   u32 reserved1 ;
   u64 sp0 ;
   u64 sp1 ;
   u64 sp2 ;
   u64 reserved2 ;
   u64 ist[7U] ;
   u32 reserved3 ;
   u32 reserved4 ;
   u16 reserved5 ;
   u16 io_bitmap_base ;
};
#line 348 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tss_struct {
   struct x86_hw_tss x86_tss ;
   unsigned long io_bitmap[1025U] ;
   unsigned long stack[64U] ;
};
#line 353 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 364 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_23 {
   u64 rip ;
   u64 rdp ;
};
#line 368 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 374 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_22 {
   struct __anonstruct____missing_field_name_23 __annonCompField13 ;
   struct __anonstruct____missing_field_name_24 __annonCompField14 ;
};
#line 378 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 382 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_22 __annonCompField15 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion____missing_field_name_25 __annonCompField16 ;
};
#line 395 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 413 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 416 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct lwp_struct {
   u8 reserved[128U] ;
};
#line 419 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct bndregs_struct {
   u64 bndregs[8U] ;
};
#line 422 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct bndcsr_struct {
   u64 cfg_reg_u ;
   u64 status_reg ;
};
#line 426 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 431 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
   struct lwp_struct lwp ;
   struct bndregs_struct bndregs ;
   struct bndcsr_struct bndcsr ;
};
#line 439 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 445 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 450
struct kmem_cache ;
#line 451
struct perf_event ;
#line 452 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned char fpu_counter ;
};
#line 475 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef atomic64_t atomic_long_t;
#line 476 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 482 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 485 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 488 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 505 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 512 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 11 ;
};
#line 527 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 534 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct raw_spinlock raw_spinlock_t;
#line 535 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 539 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct____missing_field_name_29 __annonCompField18 ;
};
#line 543 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct spinlock {
   union __anonunion____missing_field_name_28 __annonCompField19 ;
};
#line 546 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct spinlock spinlock_t;
#line 547 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 554 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 555 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct plist_head {
   struct list_head node_list ;
};
#line 558 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 563 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 572 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 578
struct jump_entry ;
#line 579
struct static_key_mod ;
#line 580 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct static_key {
   atomic_t enabled ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 585 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef u64 jump_label_t;
#line 586 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};
#line 591
struct rw_semaphore ;
#line 592 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 598 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 602 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct seqcount seqcount_t;
#line 603 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_seqlock_t_35 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 607 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 608 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 612 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __wait_queue_head wait_queue_head_t;
#line 613 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 617
struct notifier_block ;
#line 622 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct timeval {
   __time_t tv_sec ;
   __kernel_suseconds_t tv_usec ;
};
#line 626 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union ktime {
   s64 tv64 ;
};
#line 629 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef union ktime ktime_t;
#line 630
struct tvec_base ;
#line 631 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 643
struct hrtimer ;
#line 644
enum hrtimer_restart ;
#line 645
struct workqueue_struct ;
#line 646
struct work_struct ;
#line 647 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 653 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 659 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 664 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 668 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 677 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct idr_layer {
   int prefix ;
   unsigned long bitmap[4U] ;
   struct idr_layer *ary[256U] ;
   int count ;
   int layer ;
   struct callback_head callback_head ;
};
#line 685 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   int cur ;
   spinlock_t lock ;
};
#line 694 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};
#line 698 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};
#line 702 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 707 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 710
struct dentry ;
#line 711
struct iattr ;
#line 712
struct vm_area_struct ;
#line 713
struct super_block ;
#line 714
struct file_system_type ;
#line 715
struct kernfs_open_node ;
#line 716
struct kernfs_iattrs ;
#line 717
struct kernfs_root ;
#line 718 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 723
struct kernfs_node ;
#line 724 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 727
struct kernfs_ops ;
#line 728 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernfs_elem_attr {
   struct kernfs_ops  const  *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
};
#line 733 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_u_36 {
   struct completion *completion ;
   struct kernfs_node *removed_list ;
};
#line 737 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_37 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 742 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const   *name ;
   struct rb_node rb ;
   union __anonunion_u_36 u ;
   void const   *ns ;
   unsigned int hash ;
   union __anonunion____missing_field_name_37 __annonCompField21 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};
#line 759 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernfs_dir_ops {
   int (*mkdir)(struct kernfs_node * , char const   * , umode_t  ) ;
   int (*rmdir)(struct kernfs_node * ) ;
   int (*rename)(struct kernfs_node * , struct kernfs_node * , char const   * ) ;
};
#line 764 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernfs_root {
   struct kernfs_node *kn ;
   struct ida ino_ida ;
   struct kernfs_dir_ops *dir_ops ;
};
#line 769
struct vm_operations_struct ;
#line 770 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   bool mmapped ;
   struct vm_operations_struct  const  *vm_ops ;
};
#line 779 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernfs_ops {
   int (*seq_show)(struct seq_file * , void * ) ;
   void *(*seq_start)(struct seq_file * , loff_t * ) ;
   void *(*seq_next)(struct seq_file * , void * , loff_t * ) ;
   void (*seq_stop)(struct seq_file * , void * ) ;
   ssize_t (*read)(struct kernfs_open_file * , char * , size_t___0  , loff_t  ) ;
   ssize_t (*write)(struct kernfs_open_file * , char * , size_t___0  , loff_t  ) ;
   int (*mmap)(struct kernfs_open_file * , struct vm_area_struct * ) ;
   struct lock_class_key lockdep_key ;
};
#line 789
struct sock ;
#line 790
struct kobject ;
#line 791
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 796 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 804
struct user_namespace ;
#line 805 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_kuid_t_38 {
   uid_t val ;
};
#line 808 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_kuid_t_38 kuid_t;
#line 809 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_kgid_t_39 {
   gid_t val ;
};
#line 812 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_kgid_t_39 kgid_t;
#line 813 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 828
struct bin_attribute ;
#line 829 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 836 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 842 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct bin_attribute {
   struct attribute attr ;
   size_t___0 size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t___0  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t___0  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 852 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t___0  ) ;
};
#line 856 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kref {
   atomic_t refcount ;
};
#line 859
struct kset ;
#line 860
struct kobj_type ;
#line 861 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 876 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 883 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 889 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 894 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 900
struct klist_node ;
#line 901 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 906 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_nodemask_t_40 {
   unsigned long bits[16U] ;
};
#line 909 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_nodemask_t_40 nodemask_t;
#line 910
struct path ;
#line 911
struct inode ;
#line 912 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct seq_file {
   char *buf ;
   size_t___0 size ;
   size_t___0 from ;
   size_t___0 count ;
   size_t___0 pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};
#line 927 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 933
struct pinctrl ;
#line 934
struct pinctrl_state ;
#line 935 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};
#line 941 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pm_message {
   int event ;
};
#line 944 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct pm_message pm_message_t;
#line 945 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 970
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 976
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 983
struct wakeup_source ;
#line 984 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};
#line 989
struct dev_pm_qos ;
#line 990 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool ignore_children : 1 ;
   bool early_init : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int run_wake : 1 ;
   unsigned int runtime_auto : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   struct dev_pm_qos *qos ;
};
#line 1032 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 1035
struct ctl_table ;
#line 1036 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_mm_context_t_105 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 1043 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_mm_context_t_105 mm_context_t;
#line 1044
struct device_node ;
#line 1045
struct llist_node ;
#line 1046 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct llist_head {
   struct llist_node *first ;
};
#line 1049 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct llist_node {
   struct llist_node *next ;
};
#line 1052
struct dma_map_ops ;
#line 1053 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 1057 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pdev_archdata {

};
#line 1059
struct device_private ;
#line 1060
struct device_driver ;
#line 1061
struct driver_private ;
#line 1062
struct class ;
#line 1063
struct subsys_private ;
#line 1064
struct bus_type ;
#line 1065
struct iommu_ops ;
#line 1066
struct iommu_group ;
#line 1067
struct device_attribute ;
#line 1068 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group  const  **bus_groups ;
   struct attribute_group  const  **dev_groups ;
   struct attribute_group  const  **drv_groups ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*online)(struct device * ) ;
   int (*offline)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};
#line 1090
struct device_type ;
#line 1091
struct of_device_id ;
#line 1092
struct acpi_device_id ;
#line 1093 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   struct acpi_device_id  const  *acpi_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 1110
struct class_attribute ;
#line 1111 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group  const  **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 1128 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t___0  ) ;
};
#line 1133 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * , kuid_t * , kgid_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 1141 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t___0  ) ;
};
#line 1147 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1151
struct acpi_device ;
#line 1152 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct acpi_dev_node {
   struct acpi_device *companion ;
};
#line 1155
struct dma_coherent_mem ;
#line 1156 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct acpi_dev_node acpi_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
};
#line 1190 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1209 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 1214 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pm_qos_flags_request {
   struct list_head node ;
   s32 flags ;
};
#line 1218
enum dev_pm_qos_req_type {
    DEV_PM_QOS_LATENCY = 1,
    DEV_PM_QOS_FLAGS = 2
} ;
#line 1222 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_data_133 {
   struct plist_node pnode ;
   struct pm_qos_flags_request flr ;
};
#line 1226 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dev_pm_qos_request {
   enum dev_pm_qos_req_type type ;
   union __anonunion_data_133 data ;
   struct device *dev ;
};
#line 1231
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 1236 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 1243 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pm_qos_flags {
   struct list_head list ;
   s32 effective_flags ;
};
#line 1247 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dev_pm_qos {
   struct pm_qos_constraints latency ;
   struct pm_qos_flags flags ;
   struct dev_pm_qos_request *latency_req ;
   struct dev_pm_qos_request *flags_req ;
};
#line 1253 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 1257 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 1262
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 1268 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_136 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 1272 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_137 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 1276 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_135 {
   struct __anonstruct____missing_field_name_136 __annonCompField34 ;
   struct __anonstruct____missing_field_name_137 __annonCompField35 ;
};
#line 1280
struct uprobe ;
#line 1281
struct return_instance ;
#line 1282 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion____missing_field_name_135 __annonCompField36 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 1290
struct xol_area ;
#line 1291 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 1294
struct address_space ;
#line 1295 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_138 {
   struct address_space *mapping ;
   void *s_mem ;
};
#line 1299 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_140 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 1304 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_144 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 1309 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_143 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_144 __annonCompField39 ;
   int units ;
};
#line 1314 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_142 {
   union __anonunion____missing_field_name_143 __annonCompField40 ;
   atomic_t _count ;
};
#line 1318 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_141 {
   unsigned long counters ;
   struct __anonstruct____missing_field_name_142 __annonCompField41 ;
   unsigned int active ;
};
#line 1323 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_139 {
   union __anonunion____missing_field_name_140 __annonCompField38 ;
   union __anonunion____missing_field_name_141 __annonCompField42 ;
};
#line 1327 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_146 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 1332
struct slab ;
#line 1333 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_145 {
   struct list_head lru ;
   struct __anonstruct____missing_field_name_146 __annonCompField44 ;
   struct list_head list ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   pgtable_t pmd_huge_pte ;
};
#line 1341 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_147 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};
#line 1347 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct page {
   unsigned long flags ;
   union __anonunion____missing_field_name_138 __annonCompField37 ;
   struct __anonstruct____missing_field_name_139 __annonCompField43 ;
   union __anonunion____missing_field_name_145 __annonCompField45 ;
   union __anonunion____missing_field_name_147 __annonCompField46 ;
   unsigned long debug_flags ;
};
#line 1355 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 1360 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_linear_149 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 1364 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_shared_148 {
   struct __anonstruct_linear_149 linear ;
   struct list_head nonlinear ;
};
#line 1368
struct anon_vma ;
#line 1369
struct mempolicy ;
#line 1370 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   union __anonunion_shared_148 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 1389 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 1393 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 1398 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};
#line 1402 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 1405
struct kioctx_table ;
#line 1406
struct linux_binfmt ;
#line 1407
struct mmu_notifier_mm ;
#line 1408 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
};
#line 1465 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   nodemask_t nodes_to_scan ;
   int nid ;
};
#line 1471 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker * , struct shrink_control * ) ;
   unsigned long (*scan_objects)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};
#line 1480
struct file_ra_state ;
#line 1481
struct user_struct ;
#line 1482
struct writeback_control ;
#line 1483 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 1489 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 1502 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 1510 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1515 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef s32 dma_cookie_t;
#line 1516 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 1531
struct sem_undo_list ;
#line 1532 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 1535 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned short __kernel_sa_family_t;
#line 1536
struct cred ;
#line 1537 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __kernel_sa_family_t sa_family_t;
#line 1538 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 1542 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_sync_serial_settings_151 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 1547 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_sync_serial_settings_151 sync_serial_settings;
#line 1548 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_te1_settings_152 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 1554 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_te1_settings_152 te1_settings;
#line 1555 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_raw_hdlc_proto_153 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 1559 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_raw_hdlc_proto_153 raw_hdlc_proto;
#line 1560 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_fr_proto_154 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 1569 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_fr_proto_154 fr_proto;
#line 1570 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_fr_proto_pvc_155 {
   unsigned int dlci ;
};
#line 1573 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_fr_proto_pvc_155 fr_proto_pvc;
#line 1574 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_fr_proto_pvc_info_156 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 1578 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_fr_proto_pvc_info_156 fr_proto_pvc_info;
#line 1579 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_cisco_proto_157 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 1583 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_cisco_proto_157 cisco_proto;
#line 1584 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 1592 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_ifs_ifsu_158 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 1601 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_158 ifs_ifsu ;
};
#line 1606 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_ifr_ifrn_159 {
   char ifrn_name[16U] ;
};
#line 1609 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_ifr_ifru_160 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 1624 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ifreq {
   union __anonunion_ifr_ifrn_159 ifr_ifrn ;
   union __anonunion_ifr_ifru_160 ifr_ifru ;
};
#line 1628
struct hlist_bl_node ;
#line 1629 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 1632 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 1636 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_163 {
   spinlock_t lock ;
   unsigned int count ;
};
#line 1640 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_162 {
   struct __anonstruct____missing_field_name_163 __annonCompField47 ;
};
#line 1643 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct lockref {
   union __anonunion____missing_field_name_162 __annonCompField48 ;
};
#line 1646
struct nameidata ;
#line 1647
struct vfsmount ;
#line 1648 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_165 {
   u32 hash ;
   u32 len ;
};
#line 1652 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_164 {
   struct __anonstruct____missing_field_name_165 __annonCompField49 ;
   u64 hash_len ;
};
#line 1656 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct qstr {
   union __anonunion____missing_field_name_164 __annonCompField50 ;
   unsigned char const   *name ;
};
#line 1660
struct dentry_operations ;
#line 1661 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_d_u_166 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 1665 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_166 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 1683 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_weak_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct dentry  const  * , unsigned int  ,
                    char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 1697 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 1701 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct list_lru_node {
   spinlock_t lock ;
   struct list_head list ;
   long nr_items ;
};
#line 1706 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct list_lru {
   struct list_lru_node *node ;
   nodemask_t active_nodes ;
};
#line 1710
struct radix_tree_node ;
#line 1711 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 1716
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 1722
struct pid_namespace ;
#line 1723 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 1728 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 1735 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 1739 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 1742 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct kernel_cap_struct kernel_cap_t;
#line 1743 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 1751
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 1756
struct block_device ;
#line 1757
struct io_context ;
#line 1758
struct cgroup_subsys_state ;
#line 1759
struct export_operations ;
#line 1760
struct kiocb ;
#line 1761
struct pipe_inode_info ;
#line 1762
struct poll_table_struct ;
#line 1763
struct kstatfs ;
#line 1764
struct swap_info_struct ;
#line 1765 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 1776 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 1782 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 1806 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 1811 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 1812 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 1825 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct fs_qfilestatv {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
   __u32 qfs_pad ;
};
#line 1831 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct fs_quota_statv {
   __s8 qs_version ;
   __u8 qs_pad1 ;
   __u16 qs_flags ;
   __u32 qs_incoredqs ;
   struct fs_qfilestatv qs_uquota ;
   struct fs_qfilestatv qs_gquota ;
   struct fs_qfilestatv qs_pquota ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
   __u64 qs_pad2[8U] ;
};
#line 1846
struct dquot ;
#line 1847 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __kernel_uid32_t projid_t;
#line 1848 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_kprojid_t_168 {
   projid_t val ;
};
#line 1851 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_kprojid_t_168 kprojid_t;
#line 1852 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 1858
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 1863 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef long long qsize_t;
#line 1864 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_169 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 1869 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kqid {
   union __anonunion____missing_field_name_169 __annonCompField51 ;
   enum quota_type type ;
};
#line 1873 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 1884
struct quota_format_type ;
#line 1885 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 1896 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 1910 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 1919 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 1929 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xstatev)(struct super_block * , struct fs_quota_statv * ) ;
};
#line 1942 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 1948 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 1957 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_arg_171 {
   char *buf ;
   void *data ;
};
#line 1961 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_read_descriptor_t_170 {
   size_t___0 written ;
   size_t___0 count ;
   union __anonunion_arg_171 arg ;
   int error ;
};
#line 1967 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_read_descriptor_t_170 read_descriptor_t;
#line 1968 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned int  , unsigned int  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   void (*is_dirty_writeback)(struct page * , bool * , bool * ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 1994
struct backing_dev_info ;
#line 1995 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};
#line 2012
struct request_queue ;
#line 2013
struct hd_struct ;
#line 2014
struct gendisk ;
#line 2015 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 2039
struct posix_acl ;
#line 2040
struct inode_operations ;
#line 2041 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_172 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 2045 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_173 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 2049
struct file_lock ;
#line 2050
struct cdev ;
#line 2051 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_174 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 2056 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion____missing_field_name_172 __annonCompField52 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion____missing_field_name_173 __annonCompField53 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_174 __annonCompField54 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 2103 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 2111 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 2119 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_f_u_175 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 2123 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct file {
   union __anonunion_f_u_175 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 2145
struct files_struct ;
#line 2146 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct files_struct *fl_owner_t;
#line 2147 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 2151 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   unsigned long (*lm_owner_key)(struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 2159
struct net ;
#line 2160
struct nlm_lockowner ;
#line 2161 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 2166
struct nfs4_lock_state ;
#line 2167 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 2170
struct fasync_struct ;
#line 2171 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_afs_177 {
   struct list_head link ;
   int state ;
};
#line 2175 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_fl_u_176 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_177 afs ;
};
#line 2180 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct file_lock {
   struct file_lock *fl_next ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_176 fl_u ;
};
#line 2201 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 2209 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 2216
struct super_operations ;
#line 2217
struct xattr_handler ;
#line 2218
struct mtd_info ;
#line 2219 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
};
#line 2266 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 2272 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dir_context {
   int (*actor)(void * , char const   * , int  , loff_t  , u64  , unsigned int  ) ;
   loff_t pos ;
};
#line 2276 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t___0  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t___0  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*iterate)(struct file * , struct dir_context * ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t___0  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t___0  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t___0  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
   int (*show_fdinfo)(struct seq_file * , struct file * ) ;
};
#line 2311 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t___0  ,
                   int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t___0  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t___0  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
   int (*tmpfile)(struct inode * , struct dentry * , umode_t  ) ;
   int (*set_acl)(struct inode * , struct posix_acl * , int  ) ;
};
#line 2339 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t___0  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t___0  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   long (*nr_cached_objects)(struct super_block * , int  ) ;
   long (*free_cached_objects)(struct super_block * , long  , int  ) ;
};
#line 2364 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 2380 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned long cputime_t;
#line 2381 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_sigset_t_178 {
   unsigned long sig[1U] ;
};
#line 2384 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_sigset_t_178 sigset_t;
#line 2385
struct siginfo ;
#line 2386 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef void __signalfn_t(int  );
#line 2387 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __signalfn_t *__sighandler_t;
#line 2388 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef void __restorefn_t(void);
#line 2389 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __restorefn_t *__sigrestore_t;
#line 2390 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 2394 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef union sigval sigval_t;
#line 2395 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct__kill_180 {
   __pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 2399 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct__timer_181 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 2406 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct__rt_182 {
   __pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 2411 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct__sigchld_183 {
   __pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 2418 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct__sigfault_184 {
   void *_addr ;
   short _addr_lsb ;
};
#line 2422 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct__sigpoll_185 {
   long _band ;
   int _fd ;
};
#line 2426 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct__sigsys_186 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 2431 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion__sifields_179 {
   int _pad[28U] ;
   struct __anonstruct__kill_180 _kill ;
   struct __anonstruct__timer_181 _timer ;
   struct __anonstruct__rt_182 _rt ;
   struct __anonstruct__sigchld_183 _sigchld ;
   struct __anonstruct__sigfault_184 _sigfault ;
   struct __anonstruct__sigpoll_185 _sigpoll ;
   struct __anonstruct__sigsys_186 _sigsys ;
};
#line 2441 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_179 _sifields ;
};
#line 2447 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct siginfo siginfo_t;
#line 2448 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 2452 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 2458 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct k_sigaction {
   struct sigaction sa ;
};
#line 2461
struct seccomp_filter ;
#line 2462 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 2466
struct rt_mutex_waiter ;
#line 2467 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 2471 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 2475 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 2479
struct hrtimer_clock_base ;
#line 2480
struct hrtimer_cpu_base ;
#line 2481
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 2485 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 2495 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 2505 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};
#line 2518 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 2527 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 2533
struct nsproxy ;
#line 2534
struct ctl_table_root ;
#line 2535
struct ctl_table_header ;
#line 2536
struct ctl_dir ;
#line 2537 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t___0 * , loff_t * );
#line 2538 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 2542 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 2553 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 2557 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_190 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 2563 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_189 {
   struct __anonstruct____missing_field_name_190 __annonCompField55 ;
   struct callback_head rcu ;
};
#line 2567
struct ctl_table_set ;
#line 2568 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ctl_table_header {
   union __anonunion____missing_field_name_189 __annonCompField56 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};
#line 2577 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 2581 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set * ) ;
   struct ctl_dir dir ;
};
#line 2585 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_header * , struct ctl_table * ) ;
};
#line 2590
struct assoc_array_ptr ;
#line 2591 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 2595 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef int32_t key_serial_t;
#line 2596 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef uint32_t key_perm_t;
#line 2597
struct key ;
#line 2598
struct signal_struct ;
#line 2599
struct key_type ;
#line 2600 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct keyring_index_key {
   struct key_type *type ;
   char const   *description ;
   size_t___0 desc_len ;
};
#line 2605 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_191 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 2609
struct key_user ;
#line 2610 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_192 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 2614 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_194 {
   struct key_type *type ;
   char *description ;
};
#line 2618 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_193 {
   struct keyring_index_key index_key ;
   struct __anonstruct____missing_field_name_194 __annonCompField59 ;
};
#line 2622 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_type_data_195 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 2628 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_payload_197 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};
#line 2634 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_196 {
   union __anonunion_payload_197 payload ;
   struct assoc_array keys ;
};
#line 2638 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion____missing_field_name_191 __annonCompField57 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion____missing_field_name_192 __annonCompField58 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion____missing_field_name_193 __annonCompField60 ;
   union __anonunion_type_data_195 type_data ;
   union __anonunion____missing_field_name_196 __annonCompField61 ;
};
#line 2657
struct audit_context ;
#line 2658 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 2665 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 2694
struct futex_pi_state ;
#line 2695
struct robust_list_head ;
#line 2696
struct bio_list ;
#line 2697
struct fs_struct ;
#line 2698
struct perf_event_context ;
#line 2699
struct blk_plug ;
#line 2700
struct cfs_rq ;
#line 2701
struct task_group ;
#line 2702 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 2708 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 2717 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 2723 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};
#line 2727 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 2732 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 2737
struct autogroup ;
#line 2738
struct tty_struct ;
#line 2739
struct taskstats ;
#line 2740
struct tty_audit_buf ;
#line 2741 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 2804 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 2821
struct reclaim_state ;
#line 2822 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 2828 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 2842
struct uts_namespace ;
#line 2843 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 2847 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sched_avg {
   u32 runnable_avg_sum ;
   u32 runnable_avg_period ;
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
};
#line 2854 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 2883 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 2899
struct rt_rq ;
#line 2900 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 2910 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   struct hrtimer dl_timer ;
};
#line 2924
struct mem_cgroup ;
#line 2925 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 2931 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int may_oom : 1 ;
};
#line 2937
struct sched_class ;
#line 2938
struct css_set ;
#line 2939
struct compat_robust_list_head ;
#line 2940
struct numa_group ;
#line 2941
struct ftrace_ret_stack ;
#line 2942 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned int brk_randomized : 1 ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int no_new_privs : 1 ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t___0 sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct task_struct *pi_top_task ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   int numa_migrate_deferred ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long *numa_faults_buffer ;
   unsigned long numa_faults_locality[2U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   unsigned int memcg_kmem_skip_account ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
};
#line 3140 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef s32 compat_long_t;
#line 3141 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef u32 compat_uptr_t;
#line 3142 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 3145 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 3150 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 3157 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 3160
struct memcg_cache_params ;
#line 3161
struct kmem_cache_node ;
#line 3162 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   struct memcg_cache_params *memcg_params ;
   int max_attr_size ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 3187 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_214 {
   struct callback_head callback_head ;
   struct kmem_cache *memcg_caches[0U] ;
};
#line 3191 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_215 {
   struct mem_cgroup *memcg ;
   struct list_head list ;
   struct kmem_cache *root_cache ;
   bool dead ;
   atomic_t nr_pages ;
   struct work_struct destroy ;
};
#line 3199 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_213 {
   struct __anonstruct____missing_field_name_214 __annonCompField63 ;
   struct __anonstruct____missing_field_name_215 __annonCompField64 ;
};
#line 3203 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct memcg_cache_params {
   bool is_root_cache ;
   union __anonunion____missing_field_name_213 __annonCompField65 ;
};
#line 3207 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 3211
struct sk_buff ;
#line 3212 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 3215
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 3221 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t___0  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t___0  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t___0  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t___0  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t___0  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t___0  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t___0  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t___0  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 3245 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef u64 netdev_features_t;
#line 3246 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nf_conntrack {
   atomic_t use ;
};
#line 3249 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nf_bridge_info {
   atomic_t use ;
   unsigned int mask ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned long data[4U] ;
};
#line 3256 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 3262 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned int sk_buff_data_t;
#line 3263
struct sec_path ;
#line 3264 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct____missing_field_name_219 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 3268 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_218 {
   __wsum csum ;
   struct __anonstruct____missing_field_name_219 __annonCompField67 ;
};
#line 3272 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_220 {
   unsigned int napi_id ;
   dma_cookie_t dma_cookie ;
};
#line 3276 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_221 {
   __u32 mark ;
   __u32 dropcount ;
   __u32 reserved_tailroom ;
};
#line 3281 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion____missing_field_name_218 __annonCompField68 ;
   __u32 priority ;
   __u8 local_df : 1 ;
   __u8 cloned : 1 ;
   __u8 ip_summed : 2 ;
   __u8 nohdr : 1 ;
   __u8 nfctinfo : 3 ;
   __u8 pkt_type : 3 ;
   __u8 fclone : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 peeked : 1 ;
   __u8 nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 rxhash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   __u8 ndisc_nodetype : 2 ;
   __u8 pfmemalloc : 1 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_rxhash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 head_frag : 1 ;
   __u8 encapsulation : 1 ;
   union __anonunion____missing_field_name_220 __annonCompField69 ;
   __u32 secmark ;
   union __anonunion____missing_field_name_221 __annonCompField70 ;
   __be16 inner_protocol ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 3343
struct dst_entry ;
#line 3344 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 3349 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 3368 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 3382 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 3388 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 3394 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 3401 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 3412 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 3418 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 3443 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 3454 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 3465 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 3471 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 3478 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 3483 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 3490 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 3496 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 3504 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 3514 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 3521 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 3530 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 3538 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 3543 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 3550 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 3559
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 3565 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_ts_info)(struct net_device * , struct ethtool_ts_info * ) ;
   int (*get_module_info)(struct net_device * , struct ethtool_modinfo * ) ;
   int (*get_module_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_eee)(struct net_device * , struct ethtool_eee * ) ;
   int (*set_eee)(struct net_device * , struct ethtool_eee * ) ;
};
#line 3613
struct prot_inuse ;
#line 3614 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 3619 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct u64_stats_sync {

};
#line 3621 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};
#line 3625 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 3628 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 3631 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 3634 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 3637 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 3640 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct udp_mib {
   unsigned long mibs[8U] ;
};
#line 3643 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct linux_mib {
   unsigned long mibs[97U] ;
};
#line 3646 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 3649
struct proc_dir_entry ;
#line 3650 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 3666 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 3670 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 3674 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_frags {
   int nqueues ;
   struct list_head lru_list ;
   spinlock_t lru_lock ;
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 3683
struct tcpm_hash_bucket ;
#line 3684
struct ipv4_devconf ;
#line 3685
struct fib_rules_ops ;
#line 3686
struct fib_table ;
#line 3687 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
};
#line 3691
struct inet_peer_base ;
#line 3692
struct xt_table ;
#line 3693 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct inet_peer_base *peers ;
   struct tcpm_hash_bucket *tcp_metrics_hash ;
   unsigned int tcp_metrics_hash_log ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports sysctl_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   kgid_t sysctl_ping_group_range[2U] ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};
#line 3736
struct neighbour ;
#line 3737 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , struct sock * , struct sk_buff * , u32  ) ;
   void (*redirect)(struct dst_entry * , struct sock * , struct sk_buff * ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , struct sk_buff * ,
                                     void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 3758 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
};
#line 3777
struct ipv6_devconf ;
#line 3778
struct rt6_info ;
#line 3779
struct rt6_statistics ;
#line 3780
struct fib6_table ;
#line 3781 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t rt_genid ;
};
#line 3813 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};
#line 3817
struct sctp_mib ;
#line 3818 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_sctp {
   struct sctp_mib *sctp_statistics[1U] ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 3855 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 3859
struct nlattr ;
#line 3860
struct nf_logger ;
#line 3861 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger  const  *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};
#line 3866
struct ebt_table ;
#line 3867 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
   bool ulog_warn_deprecated ;
   bool ebt_ulog_warn_deprecated ;
};
#line 3876
struct hlist_nulls_node ;
#line 3877 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 3880 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 3884 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};
#line 3891 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 3895 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};
#line 3902 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};
#line 3906 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 3910 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};
#line 3919
struct ip_conntrack_stat ;
#line 3920
struct nf_ct_event_notifier ;
#line 3921
struct nf_exp_event_notifier ;
#line 3922 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct hlist_nulls_head tmpl ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};
#line 3955
struct nft_af_info ;
#line 3956 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   u8 gencursor ;
   u8 genctr ;
};
#line 3967 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 3971 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_sk_bundle_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 4002
struct net_generic ;
#line 4003
struct netns_ipvs ;
#line 4004 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   unsigned int proc_inum ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};
#line 4048 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 4054 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 4059
struct dsa_switch ;
#line 4060 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 4071
struct dsa_switch_driver ;
#line 4072
struct mii_bus ;
#line 4073 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 4084 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 4098 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 4110 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 4113 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 4121 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 4129 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 4135 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 4140 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 4144 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_setmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 4190 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 4235 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct xattr_handler {
   char const   *prefix ;
   int flags ;
   size_t___0 (*list)(struct dentry * , char * , size_t___0  , char const   * , size_t___0  ,
                      int  ) ;
   int (*get)(struct dentry * , char const   * , void * , size_t___0  , int  ) ;
   int (*set)(struct dentry * , char const   * , void const   * , size_t___0  , int  ,
              int  ) ;
};
#line 4244 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct simple_xattrs {
   struct list_head head ;
   spinlock_t lock ;
};
#line 4248
struct percpu_ref ;
#line 4249 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef void percpu_ref_func_t(struct percpu_ref * );
#line 4250 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct percpu_ref {
   atomic_t count ;
   unsigned int *pcpu_count ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_kill ;
   struct callback_head rcu ;
};
#line 4257
struct cgroupfs_root ;
#line 4258
struct cgroup_subsys ;
#line 4259
struct cgroup ;
#line 4260 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   unsigned long flags ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};
#line 4269 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cgroup_name {
   struct callback_head callback_head ;
   char name[] ;
};
#line 4273 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cgroup {
   unsigned long flags ;
   int id ;
   int nr_css ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head files ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   u64 serial_nr ;
   struct cgroup_name *name ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroupfs_root *root ;
   struct list_head cset_links ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct cgroup_subsys_state dummy_css ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
   struct simple_xattrs xattrs ;
};
#line 4295 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cgroupfs_root {
   struct super_block *sb ;
   unsigned long subsys_mask ;
   int hierarchy_id ;
   struct cgroup top_cgroup ;
   int number_of_cgroups ;
   struct list_head root_list ;
   unsigned long flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 4307 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cgrp_links ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct callback_head callback_head ;
};
#line 4315 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t___0 max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   u64 (*read_u64)(struct cgroup_subsys_state * , struct cftype * ) ;
   s64 (*read_s64)(struct cgroup_subsys_state * , struct cftype * ) ;
   int (*seq_show)(struct seq_file * , void * ) ;
   void *(*seq_start)(struct seq_file * , loff_t * ) ;
   void *(*seq_next)(struct seq_file * , void * , loff_t * ) ;
   void (*seq_stop)(struct seq_file * , void * ) ;
   int (*write_u64)(struct cgroup_subsys_state * , struct cftype * , u64  ) ;
   int (*write_s64)(struct cgroup_subsys_state * , struct cftype * , s64  ) ;
   int (*write_string)(struct cgroup_subsys_state * , struct cftype * , char const   * ) ;
   int (*trigger)(struct cgroup_subsys_state * , unsigned int  ) ;
};
#line 4333 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cftype_set {
   struct list_head node ;
   struct cftype *cfts ;
};
#line 4337
struct cgroup_taskset ;
#line 4338 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state * ) ;
   int (*css_online)(struct cgroup_subsys_state * ) ;
   void (*css_offline)(struct cgroup_subsys_state * ) ;
   void (*css_free)(struct cgroup_subsys_state * ) ;
   int (*can_attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup_subsys_state * , struct cgroup_subsys_state * , struct task_struct * ) ;
   void (*bind)(struct cgroup_subsys_state * ) ;
   int subsys_id ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   char const   *name ;
   struct cgroupfs_root *root ;
   struct list_head cftsets ;
   struct cftype *base_cftypes ;
   struct cftype_set base_cftset ;
   struct module *module ;
};
#line 4361
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 4366 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef enum irqreturn irqreturn_t;
#line 4367 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 4372
struct mnt_namespace ;
#line 4373
struct ipc_namespace ;
#line 4374 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};
#line 4382 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 4389 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 4393 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr  const  *nlh ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};
#line 4406 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 4415 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 4440 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
   __u32 linkstate ;
};
#line 4449
struct netpoll_info ;
#line 4450
struct phy_device ;
#line 4451
struct wireless_dev ;
#line 4452
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 4458 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef enum netdev_tx netdev_tx_t;
#line 4459 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 4484
struct neigh_parms ;
#line 4485 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 4489 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 4495 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 4503 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct * , int  ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 4518
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 4524 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef enum rx_handler_result rx_handler_result_t;
#line 4525 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 4526
struct Qdisc ;
#line 4527 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 4540 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 4545 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 4550 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 4555 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 4561 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 4567 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 4571 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 4575 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 4585 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct netdev_phys_port_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 4589 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * , void * , u16 (*)(struct net_device * ,
                                                                                     struct sk_buff * ) ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , __be16  , u16  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , __be16  , u16  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * , gfp_t  ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_busy_poll)(struct napi_struct * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_link_state)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
   int (*ndo_fdb_add)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ,
                      u16  ) ;
   int (*ndo_fdb_del)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ) ;
   int (*ndo_fdb_dump)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
                       int  ) ;
   int (*ndo_bridge_setlink)(struct net_device * , struct nlmsghdr * ) ;
   int (*ndo_bridge_getlink)(struct sk_buff * , u32  , u32  , struct net_device * ,
                             u32  ) ;
   int (*ndo_bridge_dellink)(struct net_device * , struct nlmsghdr * ) ;
   int (*ndo_change_carrier)(struct net_device * , bool  ) ;
   int (*ndo_get_phys_port_id)(struct net_device * , struct netdev_phys_port_id * ) ;
   void (*ndo_add_vxlan_port)(struct net_device * , sa_family_t  , __be16  ) ;
   void (*ndo_del_vxlan_port)(struct net_device * , sa_family_t  , __be16  ) ;
   void *(*ndo_dfwd_add_station)(struct net_device * , struct net_device * ) ;
   void (*ndo_dfwd_del_station)(struct net_device * , void * ) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff * , struct net_device * , void * ) ;
};
#line 4656
enum ldv_28405 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
} ;
#line 4664
enum ldv_28406 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
} ;
#line 4668 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_adj_list_235 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 4672 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_all_adj_list_236 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 4676
struct iw_handler_def ;
#line 4677
struct iw_public_data ;
#line 4678
struct forwarding_accel_ops ;
#line 4679
struct vlan_info ;
#line 4680
struct tipc_bearer ;
#line 4681
struct in_device ;
#line 4682
struct dn_dev ;
#line 4683
struct inet6_dev ;
#line 4684
struct cpu_rmap ;
#line 4685
struct pcpu_lstats ;
#line 4686
struct pcpu_sw_netstats ;
#line 4687
struct pcpu_dstats ;
#line 4688
struct pcpu_vstats ;
#line 4689 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_237 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};
#line 4696
struct garp_port ;
#line 4697
struct mrp_port ;
#line 4698
struct rtnl_link_ops ;
#line 4699 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct __anonstruct_adj_list_235 adj_list ;
   struct __anonstruct_all_adj_list_236 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct forwarding_accel_ops  const  *fwd_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   unsigned char broadcast[32U] ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   struct cpu_rmap *rx_cpu_rmap ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   enum ldv_28405 reg_state : 8 ;
   bool dismantle ;
   enum ldv_28406 rtnl_link_state : 16 ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion____missing_field_name_237 __annonCompField74 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct attribute_group  const  *sysfs_rx_queue_group ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
   int group ;
   struct pm_qos_request pm_qos_req ;
};
#line 4815 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};
#line 4822 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned long kernel_ulong_t;
#line 4823 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
};
#line 4827 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pnp_device_id {
   __u8 id[8U] ;
   kernel_ulong_t driver_data ;
};
#line 4831 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_devs_240 {
   __u8 id[8U] ;
};
#line 4834 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pnp_card_device_id {
   __u8 id[8U] ;
   kernel_ulong_t driver_data ;
   struct __anonstruct_devs_240 devs[8U] ;
};
#line 4839 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
#line 4845 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 4849
struct mfd_cell ;
#line 4850 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct platform_device {
   char const   *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id  const  *id_entry ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 4861 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct platform_device_info {
   struct device *parent ;
   struct acpi_dev_node acpi_node ;
   char const   *name ;
   int id ;
   struct resource  const  *res ;
   unsigned int num_res ;
   void const   *data ;
   size_t___0 size_data ;
   u64 dma_mask ;
};
#line 4872 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct platform_driver {
   int (*probe)(struct platform_device * ) ;
   int (*remove)(struct platform_device * ) ;
   void (*shutdown)(struct platform_device * ) ;
   int (*suspend)(struct platform_device * , pm_message_t  ) ;
   int (*resume)(struct platform_device * ) ;
   struct device_driver driver ;
   struct platform_device_id  const  *id_table ;
   bool prevent_deferred_probe ;
};
#line 4882 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u64 Elf64_Addr;
#line 4883 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u16 Elf64_Half;
#line 4884 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u32 Elf64_Word;
#line 4885 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u64 Elf64_Xword;
#line 4886 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 4894 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct elf64_sym Elf64_Sym;
#line 4895
struct kernel_param ;
#line 4896 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 4902
struct kparam_string ;
#line 4903
struct kparam_array ;
#line 4904 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_245 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 4909 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion____missing_field_name_245 __annonCompField75 ;
};
#line 4916 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 4920 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 4927
struct tracepoint ;
#line 4928 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 4932 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 4939 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct mod_arch_specific {

};
#line 4941
struct module_param_attrs ;
#line 4942 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};
#line 4949 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t___0  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 4958
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
} ;
#line 4964 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 4968
struct module_sect_attrs ;
#line 4969
struct module_notes_attrs ;
#line 4970
struct ftrace_event_call ;
#line 4971 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   bool sig_ok ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint **tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 5042 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 5051
struct pnp_protocol ;
#line 5052
struct pnp_dev ;
#line 5053
struct pnp_id ;
#line 5054 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pnp_card {
   struct device dev ;
   unsigned char number ;
   struct list_head global_list ;
   struct list_head protocol_list ;
   struct list_head devices ;
   struct pnp_protocol *protocol ;
   struct pnp_id *id ;
   char name[50U] ;
   unsigned char pnpver ;
   unsigned char productver ;
   unsigned int serial ;
   unsigned char checksum ;
   struct proc_dir_entry *procdir ;
};
#line 5069
struct pnp_card_driver ;
#line 5070 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pnp_card_link {
   struct pnp_card *card ;
   struct pnp_card_driver *driver ;
   void *driver_data ;
   pm_message_t pm_state ;
};
#line 5076
struct pnp_driver ;
#line 5077 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pnp_dev {
   struct device dev ;
   u64 dma_mask ;
   unsigned int number ;
   int status ;
   struct list_head global_list ;
   struct list_head protocol_list ;
   struct list_head card_list ;
   struct list_head rdev_list ;
   struct pnp_protocol *protocol ;
   struct pnp_card *card ;
   struct pnp_driver *driver ;
   struct pnp_card_link *card_link ;
   struct pnp_id *id ;
   int active ;
   int capabilities ;
   unsigned int num_dependent_sets ;
   struct list_head resources ;
   struct list_head options ;
   char name[50U] ;
   int flags ;
   struct proc_dir_entry *procent ;
   void *data ;
};
#line 5101 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pnp_id {
   char id[8U] ;
   struct pnp_id *next ;
};
#line 5105 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pnp_driver {
   char *name ;
   struct pnp_device_id  const  *id_table ;
   unsigned int flags ;
   int (*probe)(struct pnp_dev * , struct pnp_device_id  const  * ) ;
   void (*remove)(struct pnp_dev * ) ;
   void (*shutdown)(struct pnp_dev * ) ;
   int (*suspend)(struct pnp_dev * , pm_message_t  ) ;
   int (*resume)(struct pnp_dev * ) ;
   struct device_driver driver ;
};
#line 5116 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pnp_card_driver {
   struct list_head global_list ;
   char *name ;
   struct pnp_card_device_id  const  *id_table ;
   unsigned int flags ;
   int (*probe)(struct pnp_card_link * , struct pnp_card_device_id  const  * ) ;
   void (*remove)(struct pnp_card_link * ) ;
   int (*suspend)(struct pnp_card_link * , pm_message_t  ) ;
   int (*resume)(struct pnp_card_link * ) ;
   struct pnp_driver link ;
};
#line 5127 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pnp_protocol {
   struct list_head protocol_list ;
   char *name ;
   int (*get)(struct pnp_dev * ) ;
   int (*set)(struct pnp_dev * ) ;
   int (*disable)(struct pnp_dev * ) ;
   bool (*can_wakeup)(struct pnp_dev * ) ;
   int (*suspend)(struct pnp_dev * , pm_message_t  ) ;
   int (*resume)(struct pnp_dev * ) ;
   unsigned char number ;
   struct device dev ;
   struct list_head cards ;
   struct list_head devices ;
};
#line 5141 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned char cc_t;
#line 5142 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned int speed_t;
#line 5143 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef unsigned int tcflag_t;
#line 5144 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 5154 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 5160 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5U] ;
   __u16 x_sflag ;
};
#line 5166 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 5174
struct tty_driver ;
#line 5175
struct serial_icounter_struct ;
#line 5176 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver * , struct inode * , int  ) ;
   int (*install)(struct tty_driver * , struct tty_struct * ) ;
   void (*remove)(struct tty_driver * , struct tty_struct * ) ;
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   void (*shutdown)(struct tty_struct * ) ;
   void (*cleanup)(struct tty_struct * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   int (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   int (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*tiocmget)(struct tty_struct * ) ;
   int (*tiocmset)(struct tty_struct * , unsigned int  , unsigned int  ) ;
   int (*resize)(struct tty_struct * , struct winsize * ) ;
   int (*set_termiox)(struct tty_struct * , struct termiox * ) ;
   int (*get_icount)(struct tty_struct * , struct serial_icounter_struct * ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
   struct file_operations  const  *proc_fops ;
};
#line 5212
struct tty_port ;
#line 5213 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev *cdevs ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   unsigned int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   unsigned long flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct tty_port **ports ;
   struct ktermios **termios ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 5237 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ld_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   unsigned int wait_readers ;
   struct list_head read_wait ;
   struct list_head write_wait ;
   struct lockdep_map dep_map ;
};
#line 5245 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t___0  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t___0  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   void (*dcd_change)(struct tty_struct * , unsigned int  ) ;
   void (*fasync)(struct tty_struct * , int  ) ;
   int (*receive_buf2)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   struct module *owner ;
   int refcount ;
};
#line 5270 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   struct tty_struct *tty ;
};
#line 5274
struct tty_buffer ;
#line 5274 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion____missing_field_name_249 {
   struct tty_buffer *next ;
   struct llist_node free ;
};
#line 5278 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tty_buffer {
   union __anonunion____missing_field_name_249 __annonCompField76 ;
   int used ;
   int size ;
   int commit ;
   int read ;
   int flags ;
   unsigned long data[0U] ;
};
#line 5287 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tty_bufhead {
   struct tty_buffer *head ;
   struct work_struct work ;
   struct mutex lock ;
   atomic_t priority ;
   struct tty_buffer sentinel ;
   struct llist_head free ;
   atomic_t mem_used ;
   int mem_limit ;
   struct tty_buffer *tail ;
};
#line 5298 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tty_port_operations {
   int (*carrier_raised)(struct tty_port * ) ;
   void (*dtr_rts)(struct tty_port * , int  ) ;
   void (*shutdown)(struct tty_port * ) ;
   int (*activate)(struct tty_port * , struct tty_struct * ) ;
   void (*destruct)(struct tty_port * ) ;
};
#line 5305 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tty_port {
   struct tty_bufhead buf ;
   struct tty_struct *tty ;
   struct tty_struct *itty ;
   struct tty_port_operations  const  *ops ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   wait_queue_head_t delta_msr_wait ;
   unsigned long flags ;
   unsigned char console : 1 ;
   unsigned char low_latency : 1 ;
   struct mutex mutex ;
   struct mutex buf_mutex ;
   unsigned char *xmit_buf ;
   unsigned int close_delay ;
   unsigned int closing_wait ;
   int drain_delay ;
   struct kref kref ;
};
#line 5327 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct device *dev ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct ld_semaphore ldisc_sem ;
   struct tty_ldisc *ldisc ;
   struct mutex atomic_write_lock ;
   struct mutex legacy_mutex ;
   struct mutex throttle_mutex ;
   struct rw_semaphore termios_rwsem ;
   struct mutex winsize_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios termios ;
   struct ktermios termios_locked ;
   struct termiox *termiox ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   int flow_change ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned char closing : 1 ;
   unsigned char *write_buf ;
   int write_cnt ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 5373 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct if_irda_qos {
   unsigned long baudrate ;
   unsigned short data_size ;
   unsigned short window_size ;
   unsigned short min_turn_time ;
   unsigned short max_turn_time ;
   unsigned char add_bofs ;
   unsigned char link_disc ;
};
#line 5382 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct if_irda_line {
   __u8 dtr ;
   __u8 rts ;
};
#line 5386 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_ifr_ifrn_253 {
   char ifrn_name[16U] ;
};
#line 5389 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
union __anonunion_ifr_ifru_254 {
   struct if_irda_line ifru_line ;
   struct if_irda_qos ifru_qos ;
   unsigned short ifru_flags ;
   unsigned int ifru_receiving ;
   unsigned int ifru_mode ;
   unsigned int ifru_dongle ;
};
#line 5397 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct if_irda_req {
   union __anonunion_ifr_ifrn_253 ifr_ifrn ;
   union __anonunion_ifr_ifru_254 ifr_ifru ;
};
#line 5401 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 5411 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 5421 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u32 packets ;
};
#line 5425 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct gnet_stats_rate_est64 {
   __u64 bps ;
   __u64 pps ;
};
#line 5429 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 5436 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 5446 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 5450 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t___0 priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t___0 (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t___0 (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy  const  *slave_policy ;
   int (*slave_validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*slave_changelink)(struct net_device * , struct net_device * , struct nlattr ** ,
                           struct nlattr ** ) ;
   size_t___0 (*get_slave_size)(struct net_device  const  * , struct net_device  const  * ) ;
   int (*fill_slave_info)(struct sk_buff * , struct net_device  const  * , struct net_device  const  * ) ;
};
#line 5475
struct Qdisc_ops ;
#line 5476
struct qdisc_walker ;
#line 5477
struct tcf_walker ;
#line 5478 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 5485 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct Qdisc {
   int (*enqueue)(struct sk_buff * , struct Qdisc * ) ;
   struct sk_buff *(*dequeue)(struct Qdisc * ) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops  const  *ops ;
   struct qdisc_size_table *stab ;
   struct list_head list ;
   u32 handle ;
   u32 parent ;
   int (*reshape_fail)(struct sk_buff * , struct Qdisc * ) ;
   void *u32_node ;
   struct Qdisc *__parent ;
   struct netdev_queue *dev_queue ;
   struct gnet_stats_rate_est64 rate_est ;
   struct Qdisc *next_sched ;
   struct sk_buff *gso_skb ;
   unsigned long state ;
   struct sk_buff_head q ;
   struct gnet_stats_basic_packed bstats ;
   unsigned int __state ;
   struct gnet_stats_queue qstats ;
   struct callback_head callback_head ;
   int padded ;
   atomic_t refcnt ;
   spinlock_t busylock ;
};
#line 5512
struct tcf_proto ;
#line 5513 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct Qdisc_class_ops {
   struct netdev_queue *(*select_queue)(struct Qdisc * , struct tcmsg * ) ;
   int (*graft)(struct Qdisc * , unsigned long  , struct Qdisc * , struct Qdisc ** ) ;
   struct Qdisc *(*leaf)(struct Qdisc * , unsigned long  ) ;
   void (*qlen_notify)(struct Qdisc * , unsigned long  ) ;
   unsigned long (*get)(struct Qdisc * , u32  ) ;
   void (*put)(struct Qdisc * , unsigned long  ) ;
   int (*change)(struct Qdisc * , u32  , u32  , struct nlattr ** , unsigned long * ) ;
   int (*delete)(struct Qdisc * , unsigned long  ) ;
   void (*walk)(struct Qdisc * , struct qdisc_walker * ) ;
   struct tcf_proto **(*tcf_chain)(struct Qdisc * , unsigned long  ) ;
   unsigned long (*bind_tcf)(struct Qdisc * , unsigned long  , u32  ) ;
   void (*unbind_tcf)(struct Qdisc * , unsigned long  ) ;
   int (*dump)(struct Qdisc * , unsigned long  , struct sk_buff * , struct tcmsg * ) ;
   int (*dump_stats)(struct Qdisc * , unsigned long  , struct gnet_dump * ) ;
};
#line 5529 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops  const  *cl_ops ;
   char id[16U] ;
   int priv_size ;
   int (*enqueue)(struct sk_buff * , struct Qdisc * ) ;
   struct sk_buff *(*dequeue)(struct Qdisc * ) ;
   struct sk_buff *(*peek)(struct Qdisc * ) ;
   unsigned int (*drop)(struct Qdisc * ) ;
   int (*init)(struct Qdisc * , struct nlattr * ) ;
   void (*reset)(struct Qdisc * ) ;
   void (*destroy)(struct Qdisc * ) ;
   int (*change)(struct Qdisc * , struct nlattr * ) ;
   void (*attach)(struct Qdisc * ) ;
   int (*dump)(struct Qdisc * , struct sk_buff * ) ;
   int (*dump_stats)(struct Qdisc * , struct gnet_dump * ) ;
   struct module *owner ;
};
#line 5547 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tcf_result {
   unsigned long class ;
   u32 classid ;
};
#line 5551 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff * , struct tcf_proto  const  * , struct tcf_result * ) ;
   int (*init)(struct tcf_proto * ) ;
   void (*destroy)(struct tcf_proto * ) ;
   unsigned long (*get)(struct tcf_proto * , u32  ) ;
   void (*put)(struct tcf_proto * , unsigned long  ) ;
   int (*change)(struct net * , struct sk_buff * , struct tcf_proto * , unsigned long  ,
                 u32  , struct nlattr ** , unsigned long * ) ;
   int (*delete)(struct tcf_proto * , unsigned long  ) ;
   void (*walk)(struct tcf_proto * , struct tcf_walker * ) ;
   int (*dump)(struct net * , struct tcf_proto * , unsigned long  , struct sk_buff * ,
               struct tcmsg * ) ;
   struct module *owner ;
};
#line 5567 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff * , struct tcf_proto  const  * , struct tcf_result * ) ;
   __be16 protocol ;
   u32 prio ;
   u32 classid ;
   struct Qdisc *q ;
   void *data ;
   struct tcf_proto_ops  const  *ops ;
};
#line 5578 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc * , unsigned long  , struct qdisc_walker * ) ;
};
#line 5584 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef __u32 magic_t;
#line 5585 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_qos_value_t_261 {
   __u32 value ;
   __u16 bits ;
};
#line 5589 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_qos_value_t_261 qos_value_t;
#line 5590 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct qos_info {
   magic_t magic ;
   qos_value_t baud_rate ;
   qos_value_t max_turn_time ;
   qos_value_t data_size ;
   qos_value_t window_size ;
   qos_value_t additional_bofs ;
   qos_value_t min_turn_time ;
   qos_value_t link_disc_time ;
   qos_value_t power ;
};
#line 5601
struct irlap_cb ;
#line 5602 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct irda_skb_cb {
   unsigned int default_qdisc_pad ;
   magic_t magic ;
   __u32 next_speed ;
   __u16 mtt ;
   __u16 xbofs ;
   __u16 next_xbofs ;
   void *context ;
   void (*destructor)(struct sk_buff * ) ;
   __u16 xbofs_delay ;
   __u8 line ;
};
#line 5614 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_chipio_t_263 {
   int cfg_base ;
   int sir_base ;
   int fir_base ;
   int mem_base ;
   int sir_ext ;
   int fir_ext ;
   int irq ;
   int irq2 ;
   int dma ;
   int dma2 ;
   int fifo_size ;
   int irqflags ;
   int direction ;
   int enabled ;
   int suspended ;
   __u32 speed ;
   __u32 new_speed ;
   int dongle_id ;
};
#line 5634 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_chipio_t_263 chipio_t;
#line 5635 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct __anonstruct_iobuff_t_264 {
   int state ;
   int in_frame ;
   __u8 *head ;
   __u8 *data ;
   int len ;
   int truesize ;
   __u16 fcs ;
   struct sk_buff *skb ;
};
#line 5645 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct __anonstruct_iobuff_t_264 iobuff_t;
#line 5646 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nsc_chip {
   char *name ;
   int cfg[3U] ;
   u_int8_t cid_index ;
   u_int8_t cid_value ;
   u_int8_t cid_mask ;
   int (*probe)(struct nsc_chip * , chipio_t * ) ;
   int (*init)(struct nsc_chip * , chipio_t * ) ;
};
#line 5655 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
typedef struct nsc_chip nsc_chip_t;
#line 5656 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct st_fifo_entry {
   int status ;
   int len ;
};
#line 5660 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct st_fifo {
   struct st_fifo_entry entries[7U] ;
   int pending_bytes ;
   int head ;
   int tail ;
   int len ;
};
#line 5667 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct frame_cb {
   void *start ;
   int len ;
};
#line 5671 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct tx_fifo {
   struct frame_cb queue[7U] ;
   int ptr ;
   int len ;
   int free ;
   void *tail ;
};
#line 5678 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct nsc_ircc_cb {
   struct st_fifo st_fifo ;
   struct tx_fifo tx_fifo ;
   struct net_device *netdev ;
   struct irlap_cb *irlap ;
   struct qos_info qos ;
   chipio_t io ;
   iobuff_t tx_buff ;
   iobuff_t rx_buff ;
   dma_addr_t tx_buff_dma ;
   dma_addr_t rx_buff_dma ;
   __u8 ier ;
   struct timeval stamp ;
   struct timeval now ;
   spinlock_t lock ;
   __u32 new_speed ;
   int index ;
   struct platform_device *pldev ;
};
#line 5697 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ldv_struct_free_irq_8 {
   int arg0 ;
   int signal_pending ;
};
#line 5701 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ldv_struct_interrupt_scenario_2 {
   int arg0 ;
   irqreturn_t (*arg1)(int  , void * ) ;
   irqreturn_t (*arg2)(int  , void * ) ;
   void *arg3 ;
   int signal_pending ;
};
#line 5708 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ldv_struct_platform_instance_4 {
   struct platform_driver *arg0 ;
   int signal_pending ;
};
#line 5712 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct ldv_struct_random_allocationless_scenario_3 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 5716 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct device_private {
   void *driver_data ;
};
#line 5720
struct kthread_work ;
#line 5721 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 5727 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work * ) ;
   wait_queue_head_t done ;
   struct kthread_worker *worker ;
};
#line 5733
struct spi_master ;
#line 5734 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};
#line 5747
struct spi_message ;
#line 5748
struct spi_transfer ;
#line 5749 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device * ) ;
   int (*transfer)(struct spi_device * , struct spi_message * ) ;
   void (*cleanup)(struct spi_device * ) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   struct completion xfer_completion ;
   int (*prepare_transfer_hardware)(struct spi_master * ) ;
   int (*transfer_one_message)(struct spi_master * , struct spi_message * ) ;
   int (*unprepare_transfer_hardware)(struct spi_master * ) ;
   int (*prepare_message)(struct spi_master * , struct spi_message * ) ;
   int (*unprepare_message)(struct spi_master * , struct spi_message * ) ;
   void (*set_cs)(struct spi_device * , bool  ) ;
   int (*transfer_one)(struct spi_master * , struct spi_device * , struct spi_transfer * ) ;
   int *cs_gpios ;
};
#line 5788 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct spi_transfer {
   void const   *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};
#line 5802 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void * ) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};
/* compiler builtin: 
   void __builtin_va_copy(__builtin_va_list  , __builtin_va_list  ) ;  */
/* compiler builtin: 
   void *__builtin_frob_return_address(void * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_and_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_or(...) ;  */
/* compiler builtin: 
   int __builtin_popcountll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch(...) ;  */
/* compiler builtin: 
   float __builtin_atanf(float  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_addps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   unsigned long __builtin_strcspn(char const   * , char const   * ) ;  */
/* compiler builtin: 
   float __builtin_asinf(float  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_maxps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpckhps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   double __builtin_acos(double  ) ;  */
/* compiler builtin: 
   int __builtin___sprintf_chk(char * , int  , unsigned long  , char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_16(...) ;  */
/* compiler builtin: 
   double __builtin_cosh(double  ) ;  */
/* compiler builtin: 
   float __builtin_tanhf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_16(...) ;  */
/* compiler builtin: 
   void *__builtin_mempcpy(void * , void const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_1(...) ;  */
/* compiler builtin: 
   long double __builtin_sqrtl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_parity(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or(...) ;  */
/* compiler builtin: 
   long double __builtin_coshl(long double  ) ;  */
/* compiler builtin: 
   long double __builtin_cosl(long double  ) ;  */
/* compiler builtin: 
   float __builtin_cosf(float  ) ;  */
/* compiler builtin: 
   void __sync_synchronize(...) ;  */
/* compiler builtin: 
   long double __builtin_acosl(long double  ) ;  */
/* compiler builtin: 
   void *__builtin___mempcpy_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_or_and_fetch(...) ;  */
/* compiler builtin: 
   int __builtin_clz(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_4(...) ;  */
/* compiler builtin: 
   double __builtin_log10(double  ) ;  */
/* compiler builtin: 
   char *__builtin___strcat_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_modff(float  , float * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_4(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_n(...) ;  */
/* compiler builtin: 
   double __builtin_sin(double  ) ;  */
/* compiler builtin: 
   double __builtin_frexp(double  , int * ) ;  */
/* compiler builtin: 
   float __builtin_acosf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_add_and_fetch(...) ;  */
/* compiler builtin: 
   long double __builtin_sinhl(long double  ) ;  */
/* compiler builtin: 
   char *__builtin___stpcpy_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __atomic_signal_fence(int  ) ;  */
/* compiler builtin: 
   double __builtin_fabs(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_nand(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_2(...) ;  */
/* compiler builtin: 
   void __atomic_thread_fence(int  ) ;  */
/* compiler builtin: 
   void __atomic_store_16(...) ;  */
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_8(...) ;  */
/* compiler builtin: 
   short __builtin_bswap16(short  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_2(...) ;  */
/* compiler builtin: 
   _Bool __atomic_test_and_set(void * , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_8(...) ;  */
/* compiler builtin: 
   int __builtin_ctz(unsigned int  ) ;  */
/* compiler builtin: 
   char *__builtin_strpbrk(char const   * , char const   * ) ;  */
/* compiler builtin: 
   char *__builtin_strcpy(char * , char const   * ) ;  */
/* compiler builtin: 
   double __builtin_sqrt(double  ) ;  */
/* compiler builtin: 
   __builtin_va_list __builtin_next_arg(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_16(...) ;  */
/* compiler builtin: 
   void __atomic_clear(_Bool * , int  ) ;  */
/* compiler builtin: 
   void __atomic_store(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_2(...) ;  */
/* compiler builtin: 
   float __builtin_log10f(float  ) ;  */
/* compiler builtin: 
   long double __builtin_fabsl(long double  ) ;  */
/* compiler builtin: 
   long double __builtin_floorl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch(...) ;  */
/* compiler builtin: 
   float __builtin_floorf(float  ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_4(...) ;  */
/* compiler builtin: 
   void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_sub_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_nand_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_16(...) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_subps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   int __builtin_parityll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __builtin_va_end(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __builtin_bzero(void * , unsigned long  ) ;  */
/* compiler builtin: 
   _Bool __atomic_always_lock_free(unsigned long  , void * ) ;  */
/* compiler builtin: 
   int __builtin_strncmp(char const   * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_xor_and_fetch(...) ;  */
/* compiler builtin: 
   int __builtin___vsprintf_chk(char * , int  , unsigned long  , char const   * ,
                                __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __builtin_sqrtf(float  ) ;  */
/* compiler builtin: 
   double __builtin_nans(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_8(...) ;  */
/* compiler builtin: 
   double __builtin_exp(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_1(...) ;  */
/* compiler builtin: 
   int __builtin_strcmp(char const   * , char const   * ) ;  */
/* compiler builtin: 
   float __builtin_ldexpf(float  , int  ) ;  */
/* compiler builtin: 
   float __builtin_powif(float  , int  ) ;  */
/* compiler builtin: 
   long double __builtin_log10l(long double  ) ;  */
/* compiler builtin: 
   void *__builtin___memmove_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_and(...) ;  */
/* compiler builtin: 
   void *__builtin_return_address(unsigned int  ) ;  */
/* compiler builtin: 
   void __atomic_feraiseexcept(int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_4(...) ;  */
/* compiler builtin: 
   float __builtin_fabsf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_1(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_object_size(void * , int  ) ;  */
/* compiler builtin: 
   void *__builtin_alloca(unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin_va_arg_pack_len(void) ;  */
/* compiler builtin: 
   long double __builtin_tanl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_2(...) ;  */
/* compiler builtin: 
   void __sync_lock_release(...) ;  */
/* compiler builtin: 
   long double __builtin_modfl(long double  , long double * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_8(...) ;  */
/* compiler builtin: 
   char *__builtin_stpcpy(char * , char const   * ) ;  */
/* compiler builtin: 
   long double __builtin_sinl(long double  ) ;  */
/* compiler builtin: 
   double __builtin_asin(double  ) ;  */
/* compiler builtin: 
   float __builtin_sinhf(float  ) ;  */
/* compiler builtin: 
   int __builtin_ctzl(unsigned long  ) ;  */
/* compiler builtin: 
   long double __builtin_tanhl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add(...) ;  */
/* compiler builtin: 
   long __builtin_bswap64(long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_2(...) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_mulps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   double __builtin_tan(double  ) ;  */
/* compiler builtin: 
   char *__builtin_strncpy(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_inff(void) ;  */
/* compiler builtin: 
   void *__builtin___memset_chk(void * , int  , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_n(...) ;  */
/* compiler builtin: 
   double __builtin_huge_val(void) ;  */
/* compiler builtin: 
   int __builtin_clzl(unsigned long  ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_16(...) ;  */
/* compiler builtin: 
   float __builtin_frexpf(float  , int * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_n(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_1(...) ;  */
/* compiler builtin: 
   long double __builtin_fmodl(long double  ) ;  */
/* compiler builtin: 
   double __builtin_atan(double  ) ;  */
/* compiler builtin: 
   int __builtin___fprintf_chk(void * , int  , char const   *  , ...) ;  */
/* compiler builtin: 
   float __builtin_ceilf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_1(...) ;  */
/* compiler builtin: 
   void __builtin_return(void const   * ) ;  */
/* compiler builtin: 
   long double __builtin_asinl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_ffsll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_1(...) ;  */
/* compiler builtin: 
   int __builtin_va_arg_pack(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_4(...) ;  */
/* compiler builtin: 
   char *__builtin___strncpy_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   double __builtin_powi(double  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_2(...) ;  */
/* compiler builtin: 
   char *__builtin_strchr(char * , int  ) ;  */
/* compiler builtin: 
   char *__builtin___strncat_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __atomic_store_2(...) ;  */
/* compiler builtin: 
   long double __builtin_huge_vall(void) ;  */
/* compiler builtin: 
   int __builtin_ffsl(unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin___vprintf_chk(int  , char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpcklps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   char *__builtin_strncat(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin_ctzll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __builtin_stdarg_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_xor(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_4(...) ;  */
/* compiler builtin: 
   long double __builtin_frexpl(long double  , int * ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange(...) ;  */
/* compiler builtin: 
   float __builtin_tanf(float  ) ;  */
/* compiler builtin: 
   long double __builtin_logl(long double  ) ;  */
/* compiler builtin: 
   void __builtin_va_arg(__builtin_va_list  , unsigned long  , void * ) ;  */
/* compiler builtin: 
   long __builtin_expect(long  , long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_1(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_1(...) ;  */
/* compiler builtin: 
   int __builtin___printf_chk(int  , char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_2(...) ;  */
/* compiler builtin: 
   int __builtin___vfprintf_chk(void * , int  , char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   void __builtin_prefetch(void const   *  , ...) ;  */
/* compiler builtin: 
   long double __builtin_nansl(char const   * ) ;  */
/* compiler builtin: 
   double __builtin_fmod(double  ) ;  */
/* compiler builtin: 
   void __atomic_load(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_val_compare_and_swap(...) ;  */
/* compiler builtin: 
   void __atomic_store_4(...) ;  */
/* compiler builtin: 
   double __builtin_tanh(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_16(...) ;  */
/* compiler builtin: 
   void __builtin_unreachable(void) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_2(...) ;  */
/* compiler builtin: 
   long double __builtin_ldexpl(long double  , int  ) ;  */
/* compiler builtin: 
   void *__builtin_apply(void (*)() , void * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_sinf(float  ) ;  */
/* compiler builtin: 
   double __builtin_ceil(double  ) ;  */
/* compiler builtin: 
   void __atomic_exchange(...) ;  */
/* compiler builtin: 
   long double __builtin_powil(long double  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_8(...) ;  */
/* compiler builtin: 
   long double __builtin_expl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_constant_p(int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_16(...) ;  */
/* compiler builtin: 
   double __builtin_log(double  ) ;  */
/* compiler builtin: 
   float __builtin_expf(float  ) ;  */
/* compiler builtin: 
   int __builtin_types_compatible_p(unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   long double __builtin_atan2l(long double  , long double  ) ;  */
/* compiler builtin: 
   void *__builtin_apply_args(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_2(...) ;  */
/* compiler builtin: 
   float __builtin_logf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_2(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_strlen(char const   * ) ;  */
/* compiler builtin: 
   int __builtin_ffs(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_16(...) ;  */
/* compiler builtin: 
   double __builtin_inf(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_16(...) ;  */
/* compiler builtin: 
   void *__builtin___memcpy_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_4(...) ;  */
/* compiler builtin: 
   void __atomic_store_n(...) ;  */
/* compiler builtin: 
   void __builtin_trap(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_4(...) ;  */
/* compiler builtin: 
   int __builtin_parityl(unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_lock_test_and_set(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_strspn(char const   * , char const   * ) ;  */
/* compiler builtin: 
   void __builtin_varargs_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_16(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch(...) ;  */
/* compiler builtin: 
   double __builtin_nan(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_8(...) ;  */
/* compiler builtin: 
   int __builtin___snprintf_chk(char * , unsigned long  , int  , unsigned long  ,
                                char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch(...) ;  */
/* compiler builtin: 
   long double __builtin_atanl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_clzll(unsigned long long  ) ;  */
/* compiler builtin: 
   float __builtin_huge_valf(void) ;  */
/* compiler builtin: 
   float __builtin_coshf(float  ) ;  */
/* compiler builtin: 
   float __builtin_nansf(char const   * ) ;  */
/* compiler builtin: 
   void __atomic_store_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_add(...) ;  */
/* compiler builtin: 
   int __builtin___vsnprintf_chk(char * , unsigned long  , int  , unsigned long  ,
                                 char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __builtin_nanf(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_8(...) ;  */
/* compiler builtin: 
   _Bool __sync_bool_compare_and_swap(...) ;  */
/* compiler builtin: 
   double __builtin_atan2(double  , double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __builtin_tgmath(...) ;  */
/* compiler builtin: 
   int __builtin_popcountl(unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_1(...) ;  */
/* compiler builtin: 
   long double __builtin_ceill(long double  ) ;  */
/* compiler builtin: 
   void __atomic_store_1(...) ;  */
/* compiler builtin: 
   char *__builtin___strcpy_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_16(...) ;  */
/* compiler builtin: 
   double __builtin_floor(double  ) ;  */
/* compiler builtin: 
   double __builtin_cos(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_sub(...) ;  */
/* compiler builtin: 
   void *__builtin_memset(void * , int  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_2(...) ;  */
/* compiler builtin: 
   long double __builtin_nanl(char const   * ) ;  */
/* compiler builtin: 
   float __builtin_atan2f(float  , float  ) ;  */
/* compiler builtin: 
   _Bool __atomic_is_lock_free(unsigned long  , void * ) ;  */
/* compiler builtin: 
   int __builtin_popcount(unsigned int  ) ;  */
/* compiler builtin: 
   double __builtin_sinh(double  ) ;  */
/* compiler builtin: 
   void __builtin_bcopy(void const   * , void * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub(...) ;  */
/* compiler builtin: 
   void *__builtin_extract_return_addr(void * ) ;  */
/* compiler builtin: 
   int __builtin_bswap32(int  ) ;  */
/* compiler builtin: 
   double __builtin_ldexp(double  , int  ) ;  */
/* compiler builtin: 
   long double __builtin_infl(void) ;  */
/* compiler builtin: 
   float __builtin_fmodf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_4(...) ;  */
/* compiler builtin: 
   void *__builtin_frame_address(unsigned int  ) ;  */
#line 2 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
extern void abort(void) ;
#line 2 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
void __VERIFIER_error(void) 
{ 


  {
  {
#line 2
  abort();
  }
#line 2
  return;
}
}
#line 9 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
void __VERIFIER_assume(int expression ) 
{ 


  {
#line 9
  if (! expression) {
    LOOP: 
#line 9
    goto LOOP;
  }
#line 9
  return;
}
}
#line 15 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
_Bool __VERIFIER_nondet_bool(void) 
{ 
  _Bool val ;

  {
#line 15
  return (val);
}
}
#line 16 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
char __VERIFIER_nondet_char(void) 
{ 
  char val ;

  {
#line 16
  return (val);
}
}
#line 18 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
int __VERIFIER_nondet_int(void) 
{ 
  int val ;

  {
#line 18
  return (val);
}
}
#line 19 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
float __VERIFIER_nondet_float(void) 
{ 
  float val ;

  {
#line 19
  return (val);
}
}
#line 20 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
double __VERIFIER_nondet_double(void) 
{ 
  double val ;

  {
#line 20
  return (val);
}
}
#line 22 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
long __VERIFIER_nondet_long(void) 
{ 
  long val ;

  {
#line 22
  return (val);
}
}
#line 23 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
char *__VERIFIER_nondet_pchar(void) 
{ 
  char *val ;

  {
#line 23
  return (val);
}
}
#line 26 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
short __VERIFIER_nondet_short(void) 
{ 
  short val ;

  {
#line 26
  return (val);
}
}
#line 29 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned char __VERIFIER_nondet_uchar(void) 
{ 
  unsigned char val ;

  {
#line 29
  return (val);
}
}
#line 30 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned int __VERIFIER_nondet_uint(void) 
{ 
  unsigned int val ;

  {
#line 30
  return (val);
}
}
#line 31 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned long __VERIFIER_nondet_ulong(void) 
{ 
  unsigned long val ;

  {
#line 31
  return (val);
}
}
#line 32 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned int __VERIFIER_nondet_unsigned(void) 
{ 
  unsigned int val ;

  {
#line 32
  return (val);
}
}
#line 33 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned short __VERIFIER_nondet_ushort(void) 
{ 
  unsigned short val ;

  {
#line 33
  return (val);
}
}
#line 35 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
void *__VERIFIER_nondet_pointer(void) 
{ 
  void *val ;

  {
#line 35
  return (val);
}
}
#line 6 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 7
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 7 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) ) 
{ 
  size_t i ;
  size_t j ;
  size_t i___0 ;
  size_t j___0 ;
  int r ;
  size_t k ;
  char *a ;
  char *b ;
  char c ;

  {
  {
#line 9
  i = (size_t )0;
  }
  {
#line 9
  while (1) {
    while_continue: /* CIL Label */ ;
#line 9
    if (! (i < count)) {
#line 9
      goto while_break;
    }
    {
#line 10
    j = (size_t )0;
    }
    {
#line 10
    while (1) {
      while_continue___0: /* CIL Label */ ;
#line 10
      if (! (j < count)) {
#line 10
        goto while_break___0;
      }
      {
#line 11
      (*comp)((void const   *)(ptr + i * size), (void const   *)(ptr + j * size));
#line 10
      j ++;
      }
    }
    while_break___0: /* CIL Label */ ;
    }
    {
#line 9
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 16
  i___0 = (size_t )0;
  }
  {
#line 16
  while (1) {
    while_continue___1: /* CIL Label */ ;
#line 16
    if (! (i___0 < count)) {
#line 16
      goto while_break___1;
    }
    {
#line 17
    j___0 = (size_t )0;
    }
    {
#line 17
    while (1) {
      while_continue___2: /* CIL Label */ ;
#line 17
      if (! (j___0 < count)) {
#line 17
        goto while_break___2;
      }
#line 19
      if (r) {
        {
#line 21
        k = (size_t )0;
        }
        {
#line 21
        while (1) {
          while_continue___3: /* CIL Label */ ;
#line 21
          if (! (k < size)) {
#line 21
            goto while_break___3;
          }
          {
#line 22
          a = (char *)((ptr + i___0 * size) + k);
#line 23
          b = (char *)((ptr + j___0 * size) + k);
#line 24
          c = *a;
#line 25
          *a = *b;
#line 26
          *b = c;
#line 21
          k ++;
          }
        }
        while_break___3: /* CIL Label */ ;
        }
      }
      {
#line 17
      j___0 ++;
      }
    }
    while_break___2: /* CIL Label */ ;
    }
    {
#line 16
    i___0 ++;
    }
  }
  while_break___1: /* CIL Label */ ;
  }
#line 33
  return;
}
}
#line 37
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 38
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 38 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) ) 
{ 
  size_t i ;
  void const   *a ;
  int tmp ;

  {
  {
#line 40
  i = (size_t )0;
  }
  {
#line 40
  while (1) {
    while_continue: /* CIL Label */ ;
#line 40
    if (! (i < count)) {
#line 40
      goto while_break;
    }
    {
#line 41
    a = ptr + i * size;
#line 42
    tmp = (*comp)(key, a);
    }
#line 42
    if (tmp == 0) {
#line 43
      return ((void *)a);
    }
    {
#line 40
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 47
  return ((void *)0);
}
}
#line 117 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
extern int ( __attribute__((__leaf__)) __sched_cpucount)(size_t __setsize , cpu_set_t const   *__setp )  __attribute__((__nothrow__)) ;
#line 119
extern cpu_set_t *( __attribute__((__leaf__)) __sched_cpualloc)(size_t __count )  __attribute__((__nothrow__)) ;
#line 120
extern void ( __attribute__((__leaf__)) __sched_cpufree)(cpu_set_t *__set )  __attribute__((__nothrow__)) ;
#line 54 "/usr/include/sched.h"
extern int ( __attribute__((__leaf__)) sched_setparam)(__pid_t __pid , struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 58
extern int ( __attribute__((__leaf__)) sched_getparam)(__pid_t __pid , struct sched_param *__param )  __attribute__((__nothrow__)) ;
#line 61
extern int ( __attribute__((__leaf__)) sched_setscheduler)(__pid_t __pid , int __policy ,
                                                           struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 65
extern int ( __attribute__((__leaf__)) sched_getscheduler)(__pid_t __pid )  __attribute__((__nothrow__)) ;
#line 68
extern int ( __attribute__((__leaf__)) sched_yield)(void)  __attribute__((__nothrow__)) ;
#line 71
extern int ( __attribute__((__leaf__)) sched_get_priority_max)(int __algorithm )  __attribute__((__nothrow__)) ;
#line 74
extern int ( __attribute__((__leaf__)) sched_get_priority_min)(int __algorithm )  __attribute__((__nothrow__)) ;
#line 78
extern int ( __attribute__((__leaf__)) sched_rr_get_interval)(__pid_t __pid , struct timespec *__t )  __attribute__((__nothrow__)) ;
#line 72 "/usr/include/time.h"
extern clock_t ( __attribute__((__leaf__)) clock)(void)  __attribute__((__nothrow__)) ;
#line 76
extern time_t ( __attribute__((__leaf__)) time)(time_t *__timer )  __attribute__((__nothrow__)) ;
#line 79
extern double ( __attribute__((__leaf__)) difftime)(time_t __time1 , time_t __time0 )  __attribute__((__nothrow__,
__const__)) ;
#line 83
extern time_t ( __attribute__((__leaf__)) mktime)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 100
extern size_t ( __attribute__((__leaf__)) strftime)(char * __restrict  __s , size_t __maxsize ,
                                                    char const   * __restrict  __format ,
                                                    struct tm  const  * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 116
extern size_t ( __attribute__((__leaf__)) strftime_l)(char * __restrict  __s , size_t __maxsize ,
                                                      char const   * __restrict  __format ,
                                                      struct tm  const  * __restrict  __tp ,
                                                      locale_t __loc )  __attribute__((__nothrow__)) ;
#line 132
extern struct tm *( __attribute__((__leaf__)) gmtime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 136
extern struct tm *( __attribute__((__leaf__)) localtime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 154
extern struct tm *( __attribute__((__leaf__)) gmtime_r)(time_t const   * __restrict  __timer ,
                                                        struct tm * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 159
extern struct tm *( __attribute__((__leaf__)) localtime_r)(time_t const   * __restrict  __timer ,
                                                           struct tm * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 179
extern char *( __attribute__((__leaf__)) asctime)(struct tm  const  *__tp )  __attribute__((__nothrow__)) ;
#line 183
extern char *( __attribute__((__leaf__)) ctime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 197
extern char *( __attribute__((__leaf__)) asctime_r)(struct tm  const  * __restrict  __tp ,
                                                    char * __restrict  __buf )  __attribute__((__nothrow__)) ;
#line 202
extern char *( __attribute__((__leaf__)) ctime_r)(time_t const   * __restrict  __timer ,
                                                  char * __restrict  __buf )  __attribute__((__nothrow__)) ;
#line 217
extern char *__tzname[2] ;
#line 218
extern int __daylight ;
#line 219
extern long __timezone ;
#line 224
extern char *tzname[2] ;
#line 228
extern void ( __attribute__((__leaf__)) tzset)(void)  __attribute__((__nothrow__)) ;
#line 232
extern int daylight ;
#line 233
extern long timezone ;
#line 249
extern time_t ( __attribute__((__leaf__)) timegm)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 251
extern time_t ( __attribute__((__leaf__)) timelocal)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 262
extern int ( __attribute__((__leaf__)) dysize)(int __year )  __attribute__((__nothrow__,
__const__)) ;
#line 272
extern int nanosleep(struct timespec  const  *__requested_time , struct timespec *__remaining ) ;
#line 276
extern int ( __attribute__((__leaf__)) clock_getres)(clockid_t __clock_id , struct timespec *__res )  __attribute__((__nothrow__)) ;
#line 279
extern int ( __attribute__((__leaf__)) clock_gettime)(clockid_t __clock_id , struct timespec *__tp )  __attribute__((__nothrow__)) ;
#line 282
extern int ( __attribute__((__leaf__)) clock_settime)(clockid_t __clock_id , struct timespec  const  *__tp )  __attribute__((__nothrow__)) ;
#line 311
extern int clock_nanosleep(clockid_t __clock_id , int __flags , struct timespec  const  *__req ,
                           struct timespec *__rem ) ;
#line 326
extern int ( __attribute__((__leaf__)) clock_getcpuclockid)(pid_t __pid , clockid_t *__clock_id )  __attribute__((__nothrow__)) ;
#line 331
extern int ( __attribute__((__leaf__)) timer_create)(clockid_t __clock_id , struct sigevent * __restrict  __evp ,
                                                     timer_t * __restrict  __timerid )  __attribute__((__nothrow__)) ;
#line 336
extern int ( __attribute__((__leaf__)) timer_delete)(timer_t __timerid )  __attribute__((__nothrow__)) ;
#line 340
extern int ( __attribute__((__leaf__)) timer_settime)(timer_t __timerid , int __flags ,
                                                      struct itimerspec  const  * __restrict  __value ,
                                                      struct itimerspec * __restrict  __ovalue )  __attribute__((__nothrow__)) ;
#line 345
extern int ( __attribute__((__leaf__)) timer_gettime)(timer_t __timerid , struct itimerspec *__value )  __attribute__((__nothrow__)) ;
#line 364
extern int ( __attribute__((__leaf__)) timer_getoverrun)(timer_t __timerid )  __attribute__((__nothrow__)) ;
#line 371
extern int ( __attribute__((__nonnull__(1), __leaf__)) timespec_get)(struct timespec *__ts ,
                                                                     int __base )  __attribute__((__nothrow__)) ;
#line 202 "/usr/include/pthread.h"
extern int ( __attribute__((__nonnull__(1,3))) pthread_create)(pthread_t *__newthread ,
                                                               pthread_attr_t const   *__attr ,
                                                               void *(*__start_routine)(void * ) ,
                                                               void *__arg )  __attribute__((__nothrow__)) ;
#line 211
extern void pthread_exit(void *__retval )  __attribute__((__noreturn__)) ;
#line 219
extern int pthread_join(pthread_t __th , void **__thread_return ) ;
#line 269
extern int ( __attribute__((__leaf__)) pthread_detach)(pthread_t __th )  __attribute__((__nothrow__)) ;
#line 273
extern pthread_t ( __attribute__((__leaf__)) pthread_self)(void)  __attribute__((__nothrow__,
__const__)) ;
#line 276
extern int ( __attribute__((__leaf__)) pthread_equal)(pthread_t __thread1 , pthread_t __thread2 )  __attribute__((__nothrow__,
__const__)) ;
#line 285
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_init)(pthread_attr_t *__attr )  __attribute__((__nothrow__)) ;
#line 288
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_destroy)(pthread_attr_t *__attr )  __attribute__((__nothrow__)) ;
#line 292
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getdetachstate)(pthread_attr_t const   *__attr ,
                                                                                      int *__detachstate )  __attribute__((__nothrow__)) ;
#line 297
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setdetachstate)(pthread_attr_t *__attr ,
                                                                                    int __detachstate )  __attribute__((__nothrow__)) ;
#line 303
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getguardsize)(pthread_attr_t const   *__attr ,
                                                                                    size_t *__guardsize )  __attribute__((__nothrow__)) ;
#line 308
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setguardsize)(pthread_attr_t *__attr ,
                                                                                  size_t __guardsize )  __attribute__((__nothrow__)) ;
#line 314
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getschedparam)(pthread_attr_t const   * __restrict  __attr ,
                                                                                     struct sched_param * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 319
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_setschedparam)(pthread_attr_t * __restrict  __attr ,
                                                                                     struct sched_param  const  * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 324
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getschedpolicy)(pthread_attr_t const   * __restrict  __attr ,
                                                                                      int * __restrict  __policy )  __attribute__((__nothrow__)) ;
#line 329
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setschedpolicy)(pthread_attr_t *__attr ,
                                                                                    int __policy )  __attribute__((__nothrow__)) ;
#line 333
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getinheritsched)(pthread_attr_t const   * __restrict  __attr ,
                                                                                       int * __restrict  __inherit )  __attribute__((__nothrow__)) ;
#line 338
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setinheritsched)(pthread_attr_t *__attr ,
                                                                                     int __inherit )  __attribute__((__nothrow__)) ;
#line 344
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getscope)(pthread_attr_t const   * __restrict  __attr ,
                                                                                int * __restrict  __scope )  __attribute__((__nothrow__)) ;
#line 349
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setscope)(pthread_attr_t *__attr ,
                                                                              int __scope )  __attribute__((__nothrow__)) ;
#line 353
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getstackaddr)(pthread_attr_t const   * __restrict  __attr ,
                                                                                    void ** __restrict  __stackaddr )  __attribute__((__nothrow__,
__deprecated__)) ;
#line 361
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstackaddr)(pthread_attr_t *__attr ,
                                                                                  void *__stackaddr )  __attribute__((__nothrow__,
__deprecated__)) ;
#line 366
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getstacksize)(pthread_attr_t const   * __restrict  __attr ,
                                                                                    size_t * __restrict  __stacksize )  __attribute__((__nothrow__)) ;
#line 373
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstacksize)(pthread_attr_t *__attr ,
                                                                                  size_t __stacksize )  __attribute__((__nothrow__)) ;
#line 379
extern int ( __attribute__((__nonnull__(1,2,3), __leaf__)) pthread_attr_getstack)(pthread_attr_t const   * __restrict  __attr ,
                                                                                  void ** __restrict  __stackaddr ,
                                                                                  size_t * __restrict  __stacksize )  __attribute__((__nothrow__)) ;
#line 387
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstack)(pthread_attr_t *__attr ,
                                                                              void *__stackaddr ,
                                                                              size_t __stacksize )  __attribute__((__nothrow__)) ;
#line 441
extern int ( __attribute__((__nonnull__(3), __leaf__)) pthread_setschedparam)(pthread_t __target_thread ,
                                                                              int __policy ,
                                                                              struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 446
extern int ( __attribute__((__nonnull__(2,3), __leaf__)) pthread_getschedparam)(pthread_t __target_thread ,
                                                                                int * __restrict  __policy ,
                                                                                struct sched_param * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 452
extern int ( __attribute__((__leaf__)) pthread_setschedprio)(pthread_t __target_thread ,
                                                             int __prio )  __attribute__((__nothrow__)) ;
#line 509
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) )  __attribute__((__goblint_stub__)) ;
#line 521
extern int pthread_setcancelstate(int __state , int *__oldstate ) ;
#line 525
extern int pthread_setcanceltype(int __type , int *__oldtype ) ;
#line 528
extern int pthread_cancel(pthread_t __th ) ;
#line 533
extern void pthread_testcancel(void) ;
#line 697
extern void __pthread_register_cancel(__pthread_unwind_buf_t *__buf ) ;
#line 709
extern void __pthread_unregister_cancel(__pthread_unwind_buf_t *__buf ) ;
#line 750
extern void __pthread_unwind_next(__pthread_unwind_buf_t *__buf )  __attribute__((__weak__,
__noreturn__)) ;
#line 766
extern int __sigsetjmp_cancel(struct __cancel_jmp_buf_tag *__env , int __savemask )  __asm__("__sigsetjmp") __attribute__((__returns_twice__,
__nothrow__)) ;
#line 781
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_init)(pthread_mutex_t *__mutex ,
                                                                           pthread_mutexattr_t const   *__mutexattr )  __attribute__((__nothrow__)) ;
#line 786
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_destroy)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 790
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_trylock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 794
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_lock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 800
extern int ( __attribute__((__nonnull__(1,2))) pthread_mutex_timedlock)(pthread_mutex_t * __restrict  __mutex ,
                                                                        struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 835
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_unlock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 840
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutex_getprioceiling)(pthread_mutex_t const   * __restrict  __mutex ,
                                                                                       int * __restrict  __prioceiling )  __attribute__((__nothrow__)) ;
#line 847
extern int ( __attribute__((__nonnull__(1,3), __leaf__)) pthread_mutex_setprioceiling)(pthread_mutex_t * __restrict  __mutex ,
                                                                                       int __prioceiling ,
                                                                                       int * __restrict  __old_ceiling )  __attribute__((__nothrow__)) ;
#line 855
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_consistent)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 874
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_init)(pthread_mutexattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 878
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_destroy)(pthread_mutexattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 882
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getpshared)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                       int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 888
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setpshared)(pthread_mutexattr_t *__attr ,
                                                                                     int __pshared )  __attribute__((__nothrow__)) ;
#line 894
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_gettype)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                    int * __restrict  __kind )  __attribute__((__nothrow__)) ;
#line 901
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_settype)(pthread_mutexattr_t *__attr ,
                                                                                  int __kind )  __attribute__((__nothrow__)) ;
#line 906
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getprotocol)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __protocol )  __attribute__((__nothrow__)) ;
#line 913
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setprotocol)(pthread_mutexattr_t *__attr ,
                                                                                      int __protocol )  __attribute__((__nothrow__)) ;
#line 918
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getprioceiling)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                           int * __restrict  __prioceiling )  __attribute__((__nothrow__)) ;
#line 924
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setprioceiling)(pthread_mutexattr_t *__attr ,
                                                                                         int __prioceiling )  __attribute__((__nothrow__)) ;
#line 930
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getrobust)(pthread_mutexattr_t const   *__attr ,
                                                                                      int *__robustness )  __attribute__((__nothrow__)) ;
#line 946
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setrobust)(pthread_mutexattr_t *__attr ,
                                                                                    int __robustness )  __attribute__((__nothrow__)) ;
#line 967
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlock_init)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                            pthread_rwlockattr_t const   * __restrict  __attr )  __attribute__((__nothrow__)) ;
#line 972
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlock_destroy)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 976
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_rdlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 980
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_tryrdlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 986
extern int ( __attribute__((__nonnull__(1,2))) pthread_rwlock_timedrdlock)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                           struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 1023
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_wrlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1027
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_trywrlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1033
extern int ( __attribute__((__nonnull__(1,2))) pthread_rwlock_timedwrlock)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                           struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 1071
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_unlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1078
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_init)(pthread_rwlockattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1082
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_destroy)(pthread_rwlockattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1086
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_rwlockattr_getpshared)(pthread_rwlockattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1092
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_setpshared)(pthread_rwlockattr_t *__attr ,
                                                                                      int __pshared )  __attribute__((__nothrow__)) ;
#line 1097
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_rwlockattr_getkind_np)(pthread_rwlockattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __pref )  __attribute__((__nothrow__)) ;
#line 1103
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_setkind_np)(pthread_rwlockattr_t *__attr ,
                                                                                      int __pref )  __attribute__((__nothrow__)) ;
#line 1112
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_cond_init)(pthread_cond_t * __restrict  __cond ,
                                                                          pthread_condattr_t const   * __restrict  __cond_attr )  __attribute__((__nothrow__)) ;
#line 1117
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_cond_destroy)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1121
extern int ( __attribute__((__nonnull__(1))) pthread_cond_signal)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1125
extern int ( __attribute__((__nonnull__(1))) pthread_cond_broadcast)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1133
extern int ( __attribute__((__nonnull__(1,2))) pthread_cond_wait)(pthread_cond_t * __restrict  __cond ,
                                                                  pthread_mutex_t * __restrict  __mutex ) ;
#line 1145
extern int ( __attribute__((__nonnull__(1,2,3))) pthread_cond_timedwait)(pthread_cond_t * __restrict  __cond ,
                                                                         pthread_mutex_t * __restrict  __mutex ,
                                                                         struct timespec  const  * __restrict  __abstime ) ;
#line 1194
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_init)(pthread_condattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1198
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_destroy)(pthread_condattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1202
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_condattr_getpshared)(pthread_condattr_t const   * __restrict  __attr ,
                                                                                      int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1208
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_setpshared)(pthread_condattr_t *__attr ,
                                                                                    int __pshared )  __attribute__((__nothrow__)) ;
#line 1213
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_condattr_getclock)(pthread_condattr_t const   * __restrict  __attr ,
                                                                                    __clockid_t * __restrict  __clock_id )  __attribute__((__nothrow__)) ;
#line 1219
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_setclock)(pthread_condattr_t *__attr ,
                                                                                  __clockid_t __clock_id )  __attribute__((__nothrow__)) ;
#line 1230
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_spin_init)(pthread_spinlock_t *__lock ,
                                                                          int __pshared )  __attribute__((__nothrow__)) ;
#line 1234
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_spin_destroy)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1238
extern int ( __attribute__((__nonnull__(1))) pthread_spin_lock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1242
extern int ( __attribute__((__nonnull__(1))) pthread_spin_trylock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1246
extern int ( __attribute__((__nonnull__(1))) pthread_spin_unlock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1254
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrier_init)(pthread_barrier_t * __restrict  __barrier ,
                                                                             pthread_barrierattr_t const   * __restrict  __attr ,
                                                                             unsigned int __count )  __attribute__((__nothrow__)) ;
#line 1260
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrier_destroy)(pthread_barrier_t *__barrier )  __attribute__((__nothrow__)) ;
#line 1264
extern int ( __attribute__((__nonnull__(1))) pthread_barrier_wait)(pthread_barrier_t *__barrier )  __attribute__((__nothrow__)) ;
#line 1269
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_init)(pthread_barrierattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1273
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_destroy)(pthread_barrierattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1277
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_barrierattr_getpshared)(pthread_barrierattr_t const   * __restrict  __attr ,
                                                                                         int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1283
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_setpshared)(pthread_barrierattr_t *__attr ,
                                                                                       int __pshared )  __attribute__((__nothrow__)) ;
#line 1297
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_key_create)(pthread_key_t *__key ,
                                                                           void (*__destr_function)(void * ) )  __attribute__((__nothrow__)) ;
#line 1302
extern int ( __attribute__((__leaf__)) pthread_key_delete)(pthread_key_t __key )  __attribute__((__nothrow__)) ;
#line 1305
extern void *( __attribute__((__leaf__)) pthread_getspecific)(pthread_key_t __key )  __attribute__((__nothrow__)) ;
#line 1308
extern int ( __attribute__((__leaf__)) pthread_setspecific)(pthread_key_t __key ,
                                                            void const   *__pointer )  __attribute__((__nothrow__,
__access__(__none__,2))) ;
#line 1315
extern int ( __attribute__((__nonnull__(2), __leaf__)) pthread_getcpuclockid)(pthread_t __thread_id ,
                                                                              __clockid_t *__clock_id )  __attribute__((__nothrow__)) ;
#line 1332
extern int ( __attribute__((__leaf__)) pthread_atfork)(void (*__prepare)(void) , void (*__parent)(void) ,
                                                       void (*__child)(void) )  __attribute__((__nothrow__)) ;
#line 5 "/home/simmo/dev/goblint/sv-comp/goblint/includes/pthread.c"
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) )  __attribute__((__goblint_stub__)) ;
#line 5 "/home/simmo/dev/goblint/sv-comp/goblint/includes/pthread.c"
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) ) 
{ 
  int top ;

  {
  {
#line 8
  (*init_routine)();
  }
#line 9
  return (top);
}
}
#line 5814 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
long ldv__builtin_expect(long exp , long c ) ;
#line 5815
void *ldv_dev_get_drvdata(struct device  const  *dev ) ;
#line 5816
int ldv_dev_set_drvdata(struct device *dev , void *data ) ;
#line 5817
long ldv_is_err(void const   *ptr ) ;
#line 5818
long ldv_ptr_err(void const   *ptr ) ;
#line 5819
extern struct module __this_module ;
#line 5820
extern struct pv_cpu_ops pv_cpu_ops ;
#line 5821
extern struct pv_irq_ops pv_irq_ops ;
#line 5822 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void set_bit(long nr , unsigned long volatile   *addr ) 
{ 


  {
  {
#line 5825
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
  }
#line 5826
  return;
}
}
#line 5829 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void clear_bit(long nr , unsigned long volatile   *addr ) 
{ 


  {
  {
#line 5832
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
  }
#line 5833
  return;
}
}
#line 5836 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static int test_and_clear_bit(long nr , unsigned long volatile   *addr ) 
{ 


  {
  {
#line 5839
  __asm__  volatile   ("":);
  }
#line 5840
  return (0);
#line 5841
  return (1);
}
}
#line 5844 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static int constant_test_bit(long nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 5847
  return ((int )((unsigned long )*(addr + (unsigned long )(nr >> 6)) >> ((int )nr & 63)) & 1);
}
}
#line 5850
int printk(char const   *arg0  , ...) ;
#line 5851
int sprintf(char *arg0 , char const   *arg1  , ...) ;
#line 5852
void *memcpy(void *arg0 , void const   *arg1 , size_t___0 arg2 ) ;
#line 5853
extern void *memset(void * , int  , size_t___0  ) ;
#line 5854
void warn_slowpath_null(char const   *arg0 , int const   arg1 ) ;
#line 5855 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void slow_down_io(void) 
{ 


  {
  {
#line 5859
  (*(pv_cpu_ops.io_delay))();
  }
#line 5861
  return;
}
}
#line 5864 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static unsigned long arch_local_save_flags(void) 
{ 
  unsigned long __ret ;
  unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
  {
#line 5866
  __ret = 0UL;
#line 5867
  __edi = 0UL;
#line 5868
  __esi = 0UL;
#line 5869
  __edx = 0UL;
#line 5870
  __ecx = 0UL;
#line 5871
  __eax = 0UL;
#line 5875
  tmp = ldv__builtin_expect((long )((unsigned long )pv_irq_ops.save_fl.func == (unsigned long )((void *)0)),
                            0L);
  }
#line 5878
  if (tmp != 0L) {
    {
#line 5880
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ("/home/alpha/git/klever2/klever/native-scheduler-work-dir/scheduler/jobs/d5cd53f56669d61faa91054857893dbd/klever-core-work-dir/lkbce/arch/x86/include/asm/paravirt.h"),
                         "i" (804), "i" (12UL));
#line 5882
    __builtin_unreachable();
    }
  }
  {
#line 5886
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (44UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.save_fl.func), [paravirt_clobber] "i" (1): "memory",
                       "cc");
#line 5889
  __ret = __eax;
  }
#line 5890
  return (__ret);
}
}
#line 5893
__inline static long PTR_ERR(void const   *ptr ) ;
#line 5894
__inline static long IS_ERR(void const   *ptr ) ;
#line 5895 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static int arch_irqs_disabled_flags(unsigned long flags ) 
{ 


  {
#line 5898
  return ((flags & 512UL) == 0UL);
}
}
#line 5901
void __ldv_spin_lock(spinlock_t *arg0 ) ;
#line 5902
static void ldv___ldv_spin_lock_83(spinlock_t *ldv_func_arg1 ) ;
#line 5903
static void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1 ) ;
#line 5904
static void ldv___ldv_spin_lock_91(spinlock_t *ldv_func_arg1 ) ;
#line 5905
static void ldv___ldv_spin_lock_96(spinlock_t *ldv_func_arg1 ) ;
#line 5906
static void ldv___ldv_spin_lock_98(spinlock_t *ldv_func_arg1 ) ;
#line 5907
static void ldv___ldv_spin_lock_102(spinlock_t *ldv_func_arg1 ) ;
#line 5908
static void ldv___ldv_spin_lock_104(spinlock_t *ldv_func_arg1 ) ;
#line 5909
void ldv_spin_lock_lock_of_nsc_ircc_cb(void) ;
#line 5910
void ldv_spin_unlock_lock_of_nsc_ircc_cb(void) ;
#line 5911
void ldv_initialize(void) ;
#line 5912
int ldv_post_init(int init_ret_val ) ;
#line 5913
int ldv_failed_register_netdev(void) ;
#line 5914
void ldv_check_final_state(void) ;
#line 5915
void ldv_switch_to_interrupt_context(void) ;
#line 5916
void ldv_switch_to_process_context(void) ;
#line 5918 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void assume_abort_if_not(int cond ) 
{ 


  {
#line 5919
  if (! cond) {
    {
#line 5919
    abort();
    }
  }
#line 5920
  return;
}
}
#line 5921
int ldv_undef_int(void) ;
#line 5922
int ldv_undef_int_negative(void) ;
#line 5923
void ldv_free(void *s ) ;
#line 5924
void *ldv_xmalloc(size_t___0 size ) ;
#line 5925
void __raw_spin_lock_init(raw_spinlock_t *arg0 , char const   *arg1 , struct lock_class_key *arg2 ) ;
#line 5926
void _raw_spin_lock(raw_spinlock_t *arg0 ) ;
#line 5927
void _raw_spin_unlock(raw_spinlock_t *arg0 ) ;
#line 5928
void _raw_spin_unlock_irqrestore(raw_spinlock_t *arg0 , unsigned long arg1 ) ;
#line 5929 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 5932
  return (& lock->__annonCompField19.rlock);
}
}
#line 5935 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
  {
#line 5939
  _raw_spin_lock(& lock->__annonCompField19.rlock);
#line 5941
  __VERIFIER_atomic_begin();
#line 5941
  assert(-7LL + (long long )qos_mtt_bits >= 0LL);
#line 5941
  assert((-7LL + (long long )pnp_succeeded) + (long long )qos_mtt_bits >= 0LL);
#line 5941
  assert((-7LL - (long long )pnp_succeeded) + (long long )qos_mtt_bits >= 0LL);
#line 5941
  assert(0LL - (long long )pnp_succeeded >= 0LL);
#line 5941
  assert(7LL - (long long )qos_mtt_bits >= 0LL);
#line 5941
  assert((7LL + (long long )pnp_succeeded) - (long long )qos_mtt_bits >= 0LL);
#line 5941
  assert((7LL - (long long )pnp_succeeded) - (long long )qos_mtt_bits >= 0LL);
#line 5941
  assert((long long )pnp_succeeded >= 0LL);
#line 5941
  __VERIFIER_atomic_end();
  }
#line 5941
  return;
}
}
#line 5944
__inline static void ldv_spin_lock_89(spinlock_t *lock ) ;
#line 5945 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
  {
#line 5949
  _raw_spin_unlock(& lock->__annonCompField19.rlock);
  }
#line 5951
  return;
}
}
#line 5954
__inline static void ldv_spin_unlock_90(spinlock_t *lock ) ;
#line 5955 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
  {
#line 5959
  _raw_spin_unlock_irqrestore(& lock->__annonCompField19.rlock, flags);
  }
#line 5961
  return;
}
}
#line 5964
__inline static void ldv_spin_unlock_irqrestore_84(spinlock_t *lock , unsigned long flags ) ;
#line 5973
void do_gettimeofday(struct timeval *arg0 ) ;
#line 5974
extern unsigned long volatile   jiffies ;
#line 5975
extern struct resource ioport_resource ;
#line 5976
struct resource *__request_region(struct resource *arg0 , resource_size_t arg1 , resource_size_t arg2 ,
                                  char const   *arg3 , int arg4 ) ;
#line 5978
void __release_region(struct resource *arg0 , resource_size_t arg1 , resource_size_t arg2 ) ;
#line 5979 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void outb(unsigned char value , int port ) 
{ 


  {
  {
#line 5982
  __asm__  volatile   ("outb %b0, %w1": : "a" (value), "Nd" (port));
  }
#line 5983
  return;
}
}
#line 5986 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static unsigned char inb(int port ) 
{ 
  unsigned char value ;

  {
  {
#line 5990
  __asm__  volatile   ("inb %w1, %b0": "=a" (value): "Nd" (port));
  }
#line 5991
  return (value);
}
}
#line 5994 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static unsigned char inb_p(int port ) 
{ 
  unsigned char value ;
  unsigned char tmp ;

  {
  {
#line 6000
  tmp = inb(port);
#line 6001
  value = tmp;
#line 6002
  slow_down_io();
  }
#line 6004
  return (value);
}
}
#line 6007
static void *ldv_dev_get_drvdata_65(struct device  const  *dev ) ;
#line 6008
static int ldv_dev_set_drvdata_66(struct device *dev , void *data ) ;
#line 6009
void __udelay(unsigned long arg0 ) ;
#line 6010
void __const_udelay(unsigned long arg0 ) ;
#line 6011
bool capable(int arg0 ) ;
#line 6012
int net_ratelimit(void) ;
#line 6013 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static int is_device_dma_capable(struct device *dev ) 
{ 
  int tmp ;

  {
#line 6016
  if ((unsigned long )dev->dma_mask != (unsigned long )((u64 *)0ULL)) {
#line 6016
    if (*(dev->dma_mask) != 0ULL) {
      {
#line 6016
      tmp = 1;
      }
    } else {
      {
#line 6016
      tmp = 0;
      }
    }
  } else {
    {
#line 6016
    tmp = 0;
    }
  }
#line 6016
  return (tmp);
}
}
#line 6019
void debug_dma_alloc_coherent(struct device *arg0 , size_t___0 arg1 , dma_addr_t arg2 ,
                              void *arg3 ) ;
#line 6020
void debug_dma_free_coherent(struct device *arg0 , size_t___0 arg1 , void *arg2 ,
                             dma_addr_t arg3 ) ;
#line 6021
extern struct device x86_dma_fallback_dev ;
#line 6022
extern struct dma_map_ops *dma_ops ;
#line 6023 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev ) 
{ 
  long tmp ;

  {
  {
#line 6028
  tmp = ldv__builtin_expect((long )((unsigned long )dev == (unsigned long )((struct device *)0)),
                            0L);
  }
#line 6031
  if (tmp != 0L) {
#line 6032
    return (dma_ops);
  } else
#line 6031
  if ((unsigned long )dev->archdata.dma_ops == (unsigned long )((struct dma_map_ops *)0)) {
#line 6032
    return (dma_ops);
  } else {
#line 6034
    return (dev->archdata.dma_ops);
  }
}
}
#line 6038 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static unsigned long dma_alloc_coherent_mask(struct device *dev , gfp_t gfp ) 
{ 
  unsigned long dma_mask ;

  {
  {
#line 6042
  dma_mask = 0UL;
#line 6043
  dma_mask = (unsigned long )dev->coherent_dma_mask;
  }
#line 6044
  if (dma_mask == 0UL) {
#line 6045
    if ((int )gfp & 1) {
      {
#line 6045
      dma_mask = 16777215UL;
      }
    } else {
      {
#line 6045
      dma_mask = 4294967295UL;
      }
    }
  }
#line 6048
  return (dma_mask);
}
}
#line 6051 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static gfp_t dma_alloc_coherent_gfp_flags(struct device *dev , gfp_t gfp ) 
{ 
  unsigned long dma_mask ;
  unsigned long tmp ;

  {
  {
#line 6057
  tmp = dma_alloc_coherent_mask(dev, gfp);
#line 6058
  dma_mask = tmp;
  }
#line 6060
  if ((unsigned long long )dma_mask <= 16777215ULL) {
    {
#line 6061
    gfp |= 1U;
    }
  }
#line 6064
  if ((unsigned long long )dma_mask <= 4294967295ULL) {
#line 6064
    if ((gfp & 1U) == 0U) {
      {
#line 6065
      gfp |= 4U;
      }
    }
  }
#line 6068
  return (gfp);
}
}
#line 6071 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void *dma_alloc_attrs(struct device *dev , size_t___0 size , dma_addr_t *dma_handle ,
                                      gfp_t gfp , struct dma_attrs *attrs ) 
{ 
  struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  void *memory ;
  int tmp___0 ;
  gfp_t tmp___1 ;

  {
  {
#line 6081
  tmp = get_dma_ops(dev);
#line 6082
  ops = tmp;
#line 6083
  gfp &= 4294967288U;
  }
#line 6085
  if ((unsigned long )dev == (unsigned long )((struct device *)0)) {
    {
#line 6086
    dev = & x86_dma_fallback_dev;
    }
  }
  {
#line 6090
  tmp___0 = is_device_dma_capable(dev);
  }
#line 6092
  if (tmp___0 == 0) {
#line 6093
    return ((void *)0);
  }
#line 6096
  if ((unsigned long )ops->alloc == (unsigned long )((void *(*)(struct device * ,
                                                                size_t___0  , dma_addr_t * ,
                                                                gfp_t  , struct dma_attrs * ))0)) {
#line 6099
    return ((void *)0);
  }
  {
#line 6103
  tmp___1 = dma_alloc_coherent_gfp_flags(dev, gfp);
#line 6104
  memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs);
#line 6105
  debug_dma_alloc_coherent(dev, size, *dma_handle, memory);
  }
#line 6107
  return (memory);
}
}
#line 6110 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void dma_free_attrs(struct device *dev , size_t___0 size , void *vaddr ,
                                    dma_addr_t bus , struct dma_attrs *attrs ) 
{ 
  struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  int __ret_warn_on ;
  unsigned long _flags ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 6121
  tmp = get_dma_ops(dev);
#line 6122
  ops = tmp;
#line 6123
  _flags = arch_local_save_flags();
#line 6124
  tmp___0 = arch_irqs_disabled_flags(_flags);
#line 6125
  __ret_warn_on = tmp___0 != 0;
#line 6126
  tmp___1 = ldv__builtin_expect((long )(__ret_warn_on != 0), 0L);
  }
#line 6128
  if (tmp___1 != 0L) {
    {
#line 6130
    warn_slowpath_null((char const   *)"/home/alpha/git/klever2/klever/native-scheduler-work-dir/scheduler/jobs/d5cd53f56669d61faa91054857893dbd/klever-core-work-dir/lkbce/arch/x86/include/asm/dma-mapping.h",
                       (int const   )166);
    }
  }
  {
#line 6136
  ldv__builtin_expect((long )(__ret_warn_on != 0), 0L);
#line 6137
  debug_dma_free_coherent(dev, size, vaddr, bus);
  }
#line 6139
  if ((unsigned long )ops->free != (unsigned long )((void (*)(struct device * , size_t___0  ,
                                                              void * , dma_addr_t  ,
                                                              struct dma_attrs * ))0)) {
    {
#line 6143
    (*(ops->free))(dev, size, vaddr, bus, attrs);
    }
  }
#line 6147
  return;
}
}
#line 6150
void *ldv_zalloc(size_t___0 size ) ;
#line 6151 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void *dma_zalloc_coherent(struct device *dev , size_t___0 size , dma_addr_t *dma_handle ,
                                          gfp_t flag ) 
{ 
  void *ret ;
  void *tmp ;

  {
  {
#line 6158
  tmp = dma_alloc_attrs(dev, size, dma_handle, flag | 32768U, (struct dma_attrs *)0);
#line 6159
  ret = tmp;
  }
#line 6161
  return (ret);
}
}
#line 6164
void consume_skb(struct sk_buff *arg0 ) ;
#line 6165
unsigned char *skb_put(struct sk_buff *arg0 , unsigned int arg1 ) ;
#line 6166 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void skb_reserve(struct sk_buff *skb , int len ) 
{ 


  {
  {
#line 6169
  skb->data += (unsigned long )len;
#line 6170
  skb->tail += (sk_buff_data_t )len;
  }
#line 6171
  return;
}
}
#line 6174 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void skb_reset_mac_header(struct sk_buff *skb ) 
{ 


  {
  {
#line 6177
  skb->mac_header = (__u16 )((int )((__u16 )((long )skb->data)) - (int )((__u16 )((long )skb->head)));
  }
#line 6178
  return;
}
}
#line 6181
struct sk_buff *__netdev_alloc_skb(struct net_device *arg0 , unsigned int arg1 , gfp_t arg2 ) ;
#line 6182 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev , unsigned int length ) 
{ 
  struct sk_buff *tmp ;

  {
  {
#line 6187
  tmp = __netdev_alloc_skb(dev, length, 32U);
  }
#line 6189
  return (tmp);
}
}
#line 6192 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static struct sk_buff *dev_alloc_skb(unsigned int length ) 
{ 
  struct sk_buff *tmp ;

  {
  {
#line 6197
  tmp = netdev_alloc_skb((struct net_device *)0, length);
  }
#line 6199
  return (tmp);
}
}
#line 6202 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void skb_copy_from_linear_data(struct sk_buff  const  *skb , void *to ,
                                               unsigned int const   len ) 
{ 


  {
  {
#line 6207
  memcpy(to, (void const   *)skb->data, (size_t___0 )len);
  }
#line 6209
  return;
}
}
#line 6212 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb , void const   *from ,
                                             unsigned int const   len ) 
{ 


  {
  {
#line 6217
  memcpy((void *)skb->data, from, (size_t___0 )len);
  }
#line 6219
  return;
}
}
#line 6222 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device  const  *dev ,
                                                         unsigned int index ) 
{ 


  {
#line 6226
  return ((struct netdev_queue *)(dev->_tx + (unsigned long )index));
}
}
#line 6229 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void *netdev_priv(struct net_device  const  *dev ) 
{ 


  {
#line 6232
  return ((void *)(dev + 3200U));
}
}
#line 6235
void unregister_netdevice_queue(struct net_device *arg0 , struct list_head *arg1 ) ;
#line 6236 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void unregister_netdevice(struct net_device *dev ) 
{ 


  {
  {
#line 6240
  unregister_netdevice_queue(dev, (struct list_head *)0);
  }
#line 6242
  return;
}
}
#line 6245
static void ldv_free_netdev_80(struct net_device *ldv_func_arg1 ) ;
#line 6246
static void ldv_free_netdev_82(struct net_device *ldv_func_arg1 ) ;
#line 6247
int netpoll_trap(void) ;
#line 6248
void __netif_schedule(struct Qdisc *arg0 ) ;
#line 6249 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue ) 
{ 


  {
  {
#line 6253
  clear_bit(0L, (unsigned long volatile   *)(& dev_queue->state));
  }
#line 6255
  return;
}
}
#line 6258 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void netif_start_queue(struct net_device *dev ) 
{ 
  struct netdev_queue *tmp ;

  {
  {
#line 6263
  tmp = netdev_get_tx_queue((struct net_device  const  *)dev, 0U);
#line 6264
  netif_tx_start_queue(tmp);
  }
#line 6266
  return;
}
}
#line 6269 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void netif_tx_wake_queue(struct netdev_queue *dev_queue ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 6275
  tmp = netpoll_trap();
  }
#line 6277
  if (tmp != 0) {
    {
#line 6279
    netif_tx_start_queue(dev_queue);
    }
#line 6281
    return;
  }
  {
#line 6285
  tmp___0 = test_and_clear_bit(0L, (unsigned long volatile   *)(& dev_queue->state));
  }
#line 6287
  if (tmp___0 != 0) {
    {
#line 6289
    __netif_schedule(dev_queue->qdisc);
    }
  }
#line 6293
  return;
}
}
#line 6296 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void netif_wake_queue(struct net_device *dev ) 
{ 
  struct netdev_queue *tmp ;

  {
  {
#line 6301
  tmp = netdev_get_tx_queue((struct net_device  const  *)dev, 0U);
#line 6302
  netif_tx_wake_queue(tmp);
  }
#line 6304
  return;
}
}
#line 6307 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue ) 
{ 
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 6314
  __ret_warn_on = (unsigned long )dev_queue == (unsigned long )((struct netdev_queue *)0);
#line 6315
  tmp = ldv__builtin_expect((long )(__ret_warn_on != 0), 0L);
  }
#line 6317
  if (tmp != 0L) {
    {
#line 6319
    warn_slowpath_null((char const   *)"include/linux/netdevice.h", (int const   )2128);
    }
  }
  {
#line 6324
  tmp___0 = ldv__builtin_expect((long )(__ret_warn_on != 0), 0L);
  }
#line 6326
  if (tmp___0 != 0L) {
    {
#line 6328
    printk((char const   *)"\016netif_stop_queue() cannot be called before register_netdev()\n");
    }
#line 6330
    return;
  }
  {
#line 6334
  set_bit(0L, (unsigned long volatile   *)(& dev_queue->state));
  }
#line 6336
  return;
}
}
#line 6339 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void netif_stop_queue(struct net_device *dev ) 
{ 
  struct netdev_queue *tmp ;

  {
  {
#line 6344
  tmp = netdev_get_tx_queue((struct net_device  const  *)dev, 0U);
#line 6345
  netif_tx_stop_queue(tmp);
  }
#line 6347
  return;
}
}
#line 6350 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static bool netif_running(struct net_device  const  *dev ) 
{ 
  int tmp ;

  {
  {
#line 6355
  tmp = constant_test_bit(0L, (unsigned long const volatile   *)(& dev->state));
  }
#line 6357
  return ((bool )(tmp != 0));
}
}
#line 6360
int netif_rx(struct sk_buff *arg0 ) ;
#line 6361
void netif_device_detach(struct net_device *arg0 ) ;
#line 6362
void netif_device_attach(struct net_device *arg0 ) ;
#line 6363
static int ldv_register_netdev_78(struct net_device *ldv_func_arg1 ) ;
#line 6364
static void ldv_unregister_netdev_79(struct net_device *ldv_func_arg1 ) ;
#line 6365
static void ldv_unregister_netdev_81(struct net_device *ldv_func_arg1 ) ;
#line 6366
void platform_device_unregister(struct platform_device *arg0 ) ;
#line 6367
struct platform_device *platform_device_register_full(struct platform_device_info  const  *arg0 ) ;
#line 6368 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static struct platform_device *platform_device_register_resndata(struct device *parent ,
                                                                          char const   *name ,
                                                                          int id ,
                                                                          struct resource  const  *res ,
                                                                          unsigned int num ,
                                                                          void const   *data ,
                                                                          size_t___0 size ) 
{ 
  struct platform_device_info pdevinfo ;
  struct platform_device *tmp ;

  {
  {
#line 6380
  pdevinfo.parent = parent;
#line 6381
  pdevinfo.acpi_node.companion = (struct acpi_device *)0;
#line 6382
  pdevinfo.name = name;
#line 6383
  pdevinfo.id = id;
#line 6384
  pdevinfo.res = res;
#line 6385
  pdevinfo.num_res = num;
#line 6386
  pdevinfo.data = data;
#line 6387
  pdevinfo.size_data = size;
#line 6388
  pdevinfo.dma_mask = 0ULL;
#line 6389
  tmp = platform_device_register_full((struct platform_device_info  const  *)(& pdevinfo));
  }
#line 6391
  return (tmp);
}
}
#line 6394 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static struct platform_device *platform_device_register_simple(char const   *name ,
                                                                        int id , struct resource  const  *res ,
                                                                        unsigned int num ) 
{ 
  struct platform_device *tmp ;

  {
  {
#line 6401
  tmp = platform_device_register_resndata((struct device *)0, name, id, res, num,
                                          (void const   *)0, (size_t___0 )0UL);
  }
#line 6404
  return (tmp);
}
}
#line 6407
static int ldv___platform_driver_register_75(struct platform_driver *ldv_func_arg1 ,
                                             struct module *ldv_func_arg2 ) ;
#line 6409
static void ldv_platform_driver_unregister_76(struct platform_driver *ldv_func_arg1 ) ;
#line 6410
static void ldv_platform_driver_unregister_77(struct platform_driver *ldv_func_arg1 ) ;
#line 6411
void ldv_assert(char const   *desc , int expr ) ;
#line 6412 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void *platform_get_drvdata(struct platform_device  const  *pdev ) 
{ 
  void *tmp ;

  {
  {
#line 6417
  tmp = ldv_dev_get_drvdata_65((struct device  const  *)(& pdev->dev));
  }
#line 6419
  return (tmp);
}
}
#line 6422 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void platform_set_drvdata(struct platform_device *pdev , void *data ) 
{ 


  {
  {
#line 6426
  ldv_dev_set_drvdata_66(& pdev->dev, data);
  }
#line 6428
  return;
}
}
#line 6431
__inline static int ldv_request_irq_93(unsigned int irq___0 , irqreturn_t (*handler)(int  ,
                                                                                     void * ) ,
                                       unsigned long flags , char const   *name ,
                                       void *dev ) ;
#line 6439
static void ldv_free_irq_94(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) ;
#line 6440
static void ldv_free_irq_95(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) ;
#line 6441
static void ldv_free_irq_100(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) ;
#line 6442
void rtnl_lock(void) ;
#line 6443
void rtnl_unlock(void) ;
#line 6444
struct resource *pnp_get_resource(struct pnp_dev *arg0 , unsigned long arg1 , unsigned int arg2 ) ;
#line 6445 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static int pnp_resource_valid(struct resource *res ) 
{ 


  {
#line 6448
  if ((unsigned long )res != (unsigned long )((struct resource *)0)) {
#line 6449
    return (1);
  }
#line 6452
  return (0);
}
}
#line 6455 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static resource_size_t pnp_port_start(struct pnp_dev *dev , unsigned int bar ) 
{ 
  struct resource *res ;
  struct resource *tmp ;
  int tmp___0 ;

  {
  {
#line 6462
  tmp = pnp_get_resource(dev, 256UL, bar);
#line 6463
  res = tmp;
#line 6464
  tmp___0 = pnp_resource_valid(res);
  }
#line 6466
  if (tmp___0 != 0) {
#line 6467
    return (res->start);
  }
#line 6470
  return (0ULL);
}
}
#line 6473 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static unsigned long pnp_port_flags(struct pnp_dev *dev , unsigned int bar ) 
{ 
  struct resource *res ;
  struct resource *tmp ;
  int tmp___0 ;

  {
  {
#line 6480
  tmp = pnp_get_resource(dev, 256UL, bar);
#line 6481
  res = tmp;
#line 6482
  tmp___0 = pnp_resource_valid(res);
  }
#line 6484
  if (tmp___0 != 0) {
#line 6485
    return (res->flags);
  }
#line 6488
  return (1073742080UL);
}
}
#line 6491 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static int pnp_port_valid(struct pnp_dev *dev , unsigned int bar ) 
{ 
  struct resource *tmp ;
  int tmp___0 ;

  {
  {
#line 6497
  tmp = pnp_get_resource(dev, 256UL, bar);
#line 6498
  tmp___0 = pnp_resource_valid(tmp);
  }
#line 6500
  return (tmp___0);
}
}
#line 6503 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static resource_size_t pnp_irq(struct pnp_dev *dev , unsigned int bar ) 
{ 
  struct resource *res ;
  struct resource *tmp ;
  int tmp___0 ;

  {
  {
#line 6510
  tmp = pnp_get_resource(dev, 1024UL, bar);
#line 6511
  res = tmp;
#line 6512
  tmp___0 = pnp_resource_valid(res);
  }
#line 6514
  if (tmp___0 != 0) {
#line 6515
    return (res->start);
  }
#line 6518
  return (0xffffffffffffffffULL);
}
}
#line 6521 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static unsigned long pnp_irq_flags(struct pnp_dev *dev , unsigned int bar ) 
{ 
  struct resource *res ;
  struct resource *tmp ;
  int tmp___0 ;

  {
  {
#line 6528
  tmp = pnp_get_resource(dev, 1024UL, bar);
#line 6529
  res = tmp;
#line 6530
  tmp___0 = pnp_resource_valid(res);
  }
#line 6532
  if (tmp___0 != 0) {
#line 6533
    return (res->flags);
  }
#line 6536
  return (1073742848UL);
}
}
#line 6539 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static int pnp_irq_valid(struct pnp_dev *dev , unsigned int bar ) 
{ 
  struct resource *tmp ;
  int tmp___0 ;

  {
  {
#line 6545
  tmp = pnp_get_resource(dev, 1024UL, bar);
#line 6546
  tmp___0 = pnp_resource_valid(tmp);
  }
#line 6548
  return (tmp___0);
}
}
#line 6551 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static resource_size_t pnp_dma(struct pnp_dev *dev , unsigned int bar ) 
{ 
  struct resource *res ;
  struct resource *tmp ;
  int tmp___0 ;

  {
  {
#line 6558
  tmp = pnp_get_resource(dev, 2048UL, bar);
#line 6559
  res = tmp;
#line 6560
  tmp___0 = pnp_resource_valid(res);
  }
#line 6562
  if (tmp___0 != 0) {
#line 6563
    return (res->start);
  }
#line 6566
  return (0xffffffffffffffffULL);
}
}
#line 6569 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static unsigned long pnp_dma_flags(struct pnp_dev *dev , unsigned int bar ) 
{ 
  struct resource *res ;
  struct resource *tmp ;
  int tmp___0 ;

  {
  {
#line 6576
  tmp = pnp_get_resource(dev, 2048UL, bar);
#line 6577
  res = tmp;
#line 6578
  tmp___0 = pnp_resource_valid(res);
  }
#line 6580
  if (tmp___0 != 0) {
#line 6581
    return (res->flags);
  }
#line 6584
  return (1073743872UL);
}
}
#line 6587 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static int pnp_dma_valid(struct pnp_dev *dev , unsigned int bar ) 
{ 
  struct resource *tmp ;
  int tmp___0 ;

  {
  {
#line 6593
  tmp = pnp_get_resource(dev, 2048UL, bar);
#line 6594
  tmp___0 = pnp_resource_valid(tmp);
  }
#line 6596
  return (tmp___0);
}
}
#line 6599
int pnp_register_driver(struct pnp_driver *arg0 ) ;
#line 6600
void pnp_unregister_driver(struct pnp_driver *arg0 ) ;
#line 6601 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void disable_dma(unsigned int dmanr ) 
{ 


  {
#line 6604
  if (dmanr <= 3U) {
    {
#line 6606
    outb((unsigned char )((int )((unsigned int )((unsigned char )dmanr) | 4U)), 10);
    }
  } else {
    {
#line 6610
    outb((unsigned char )((int )(((unsigned int )((unsigned char )dmanr) & 3U) | 4U)),
         212);
    }
  }
#line 6613
  return;
}
}
#line 6616
int request_dma(unsigned int arg0 , char const   *arg1 ) ;
#line 6617
void free_dma(unsigned int arg0 ) ;
#line 6618 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static bool qdisc_all_tx_empty(struct net_device  const  *dev ) 
{ 
  unsigned int i ;
  struct netdev_queue *txq ;
  struct netdev_queue *tmp ;
  struct Qdisc  const  *q ;

  {
  {
#line 6625
  i = 0U;
  }
#line 6626
  goto ldv_45048;
  ldv_45047: 
  {
#line 6629
  tmp = netdev_get_tx_queue(dev, i);
#line 6630
  txq = tmp;
#line 6631
  q = (struct Qdisc  const  *)txq->qdisc;
  }
#line 6633
  if ((unsigned int )q->q.qlen != 0U) {
#line 6634
    return ((bool )0);
  }
  {
#line 6637
  i ++;
  }
  ldv_45048: 
  {

  }
#line 6639
  if (i < (unsigned int )dev->num_tx_queues) {
#line 6640
    goto ldv_45047;
  }
#line 6643
  return ((bool )1);
}
}
#line 6646
extern unsigned int irda_debug ;
#line 6647
void irda_init_max_qos_capabilies(struct qos_info *arg0 ) ;
#line 6648
void irda_qos_bits_to_value(struct qos_info *arg0 ) ;
#line 6649
struct irlap_cb *irlap_open(struct net_device *arg0 , struct qos_info *arg1 , char const   *arg2 ) ;
#line 6650
void irlap_close(struct irlap_cb *arg0 ) ;
#line 6651
void irda_device_set_media_busy(struct net_device *arg0 , int arg1 ) ;
#line 6652 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static int irda_device_txqueue_empty(struct net_device  const  *dev ) 
{ 
  bool tmp ;

  {
  {
#line 6657
  tmp = qdisc_all_tx_empty(dev);
  }
#line 6659
  return ((int )tmp);
}
}
#line 6662
struct net_device *alloc_irdadev(int arg0 ) ;
#line 6663
void irda_setup_dma(int arg0 , dma_addr_t arg1 , int arg2 , int arg3 ) ;
#line 6664 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static __u16 irda_get_mtt(struct sk_buff  const  *skb ) 
{ 
  struct irda_skb_cb  const  *cb ;
  unsigned int tmp ;

  {
  {
#line 6668
  cb = (struct irda_skb_cb  const  *)(& skb->cb);
  }
#line 6669
  if ((unsigned int )cb->magic == 4951U) {
    {
#line 6669
    tmp = (unsigned int )((__u16 )cb->mtt);
    }
  } else {
    {
#line 6669
    tmp = 10000U;
    }
  }
#line 6669
  return ((__u16 )tmp);
}
}
#line 6672 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static __u32 irda_get_next_speed(struct sk_buff  const  *skb ) 
{ 
  struct irda_skb_cb  const  *cb ;
  __u32 tmp ;

  {
  {
#line 6676
  cb = (struct irda_skb_cb  const  *)(& skb->cb);
  }
#line 6677
  if ((unsigned int )cb->magic == 4951U) {
    {
#line 6677
    tmp = (__u32 )cb->next_speed;
    }
  } else {
    {
#line 6677
    tmp = 4294967295U;
    }
  }
#line 6677
  return (tmp);
}
}
#line 6680
int async_wrap_skb(struct sk_buff *arg0 , __u8 *arg1 , int arg2 ) ;
#line 6681
void async_unwrap_char(struct net_device *arg0 , struct net_device_stats *arg1 , iobuff_t *arg2 ,
                       __u8 arg3 ) ;
#line 6683 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void switch_bank(int iobase , int bank ) 
{ 


  {
  {
#line 6687
  outb((unsigned char )((int )((unsigned char )bank)), iobase + 3);
  }
#line 6689
  return;
}
}
#line 6692 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static char *driver_name  =    "nsc-ircc";
#line 6693
static int nsc_ircc_suspend(struct platform_device *dev , pm_message_t state ) ;
#line 6694
static int nsc_ircc_resume(struct platform_device *dev ) ;
#line 6695 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static struct platform_driver nsc_ircc_driver  = 
#line 6695
     {(int (*)(struct platform_device * ))0, (int (*)(struct platform_device * ))0,
    (void (*)(struct platform_device * ))0, & nsc_ircc_suspend, & nsc_ircc_resume,
    {(char const   *)"nsc-ircc", (struct bus_type *)0, (struct module *)0, (char const   *)0,
     (_Bool)0, (struct of_device_id  const  *)0, (struct acpi_device_id  const  *)0,
     (int (*)(struct device * ))0, (int (*)(struct device * ))0, (void (*)(struct device * ))0,
     (int (*)(struct device * , pm_message_t  ))0, (int (*)(struct device * ))0, (struct attribute_group  const  **)0,
     (struct dev_pm_ops  const  *)0, (struct driver_private *)0}, (struct platform_device_id  const  *)0,
    (_Bool)0};
#line 6699 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int qos_mtt_bits  =    7;
#line 6700 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int dongle_id  ;
#line 6701 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static unsigned int io[5U]  = {      4294967295U,      4294967295U,      4294967295U,      4294967295U, 
        4294967295U};
#line 6703 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static unsigned int irq[5U]  = {      0U,      0U,      0U,      0U, 
        0U};
#line 6705 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static unsigned int dma[5U]  = {      0U,      0U,      0U,      0U, 
        0U};
#line 6707
static int nsc_ircc_probe_108(nsc_chip_t *chip , chipio_t *info ) ;
#line 6708
static int nsc_ircc_probe_338(nsc_chip_t *chip , chipio_t *info ) ;
#line 6709
static int nsc_ircc_probe_39x(nsc_chip_t *chip , chipio_t *info ) ;
#line 6710
static int nsc_ircc_init_108(nsc_chip_t *chip , chipio_t *info ) ;
#line 6711
static int nsc_ircc_init_338(nsc_chip_t *chip , chipio_t *info ) ;
#line 6712
static int nsc_ircc_init_39x(nsc_chip_t *chip , chipio_t *info ) ;
#line 6713
static int nsc_ircc_pnp_probe(struct pnp_dev *dev , struct pnp_device_id  const  *id ) ;
#line 6714 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static nsc_chip_t chips[7U]  = {      {"PC87108", {336, 920, 234}, (u_int8_t )5U, (u_int8_t )16U, (u_int8_t )240U,
      & nsc_ircc_probe_108, & nsc_ircc_init_108}, 
        {"PC87338", {920, 348, 46}, (u_int8_t )8U, (u_int8_t )176U, (u_int8_t )248U,
      & nsc_ircc_probe_338, & nsc_ircc_init_338}, 
        {"PC8738x", {5710, 78, 46}, (u_int8_t )32U, (u_int8_t )244U, (u_int8_t )255U,
      & nsc_ircc_probe_39x, & nsc_ircc_init_39x}, 
        {"PC8739x", {46, 78, 0}, (u_int8_t )32U, (u_int8_t )234U, (u_int8_t )255U, & nsc_ircc_probe_39x,
      & nsc_ircc_init_39x}, 
        {"IBM-PC8738x", {46, 78, 0}, (u_int8_t )32U, (u_int8_t )244U, (u_int8_t )255U,
      & nsc_ircc_probe_39x, & nsc_ircc_init_39x}, 
        {"IBM-PC8394T", {46, 78, 0}, (u_int8_t )32U, (u_int8_t )249U, (u_int8_t )255U,
      & nsc_ircc_probe_39x, & nsc_ircc_init_39x}, 
        {(char *)0, {0, 0, 0}, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      (int (*)(struct nsc_chip * , chipio_t * ))0, (int (*)(struct nsc_chip * , chipio_t * ))0}};
#line 6725 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static struct nsc_ircc_cb *dev_self[5U]  = {      (struct nsc_ircc_cb *)0,      (struct nsc_ircc_cb *)0,      (struct nsc_ircc_cb *)0,      (struct nsc_ircc_cb *)0, 
        (struct nsc_ircc_cb *)0};
#line 6727 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static char *dongle_types[16U]  = 
#line 6727
  {      "Differential serial interface",      "Differential serial interface",      "Reserved",      "Reserved", 
        "Sharp RY5HD01",      "Reserved",      "Single-ended serial interface",      "Consumer-IR only", 
        "HP HSDL-2300, HP HSDL-3600/HSDL-3610",      "IBM31T1100 or Temic TFDS6000/TFDS6500",      "Reserved",      "Reserved", 
        "HP HSDL-1100/HSDL-2100",      "HP HSDL-1100/HSDL-2100",      "Supports SIR Mode only",      "No dongle connected"};
#line 6732 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static chipio_t pnp_info  ;
#line 6733 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static struct pnp_device_id  const  nsc_ircc_pnp_table[4U]  = {      {{(__u8 )'N', (__u8 )'S', (__u8 )'C', (__u8 )'6', (__u8 )'0', (__u8 )'0', (__u8 )'1',
       (__u8 )'\000'}, 0UL}, 
        {{(__u8 )'H', (__u8 )'W', (__u8 )'P', (__u8 )'C', (__u8 )'2', (__u8 )'2', (__u8 )'4',
       (__u8 )'\000'}, 0UL}, 
        {{(__u8 )'I', (__u8 )'B', (__u8 )'M', (__u8 )'0', (__u8 )'0', (__u8 )'7', (__u8 )'1',
       (__u8 )'\000'}, 1UL}};
#line 6736 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct pnp_device_id  const  __mod_pnp_device_table  ;
#line 6737 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static struct pnp_driver nsc_ircc_pnp_driver  = 
#line 6737
     {"nsc-ircc", (struct pnp_device_id  const  *)(& nsc_ircc_pnp_table), 0U, & nsc_ircc_pnp_probe,
    (void (*)(struct pnp_dev * ))0, (void (*)(struct pnp_dev * ))0, (int (*)(struct pnp_dev * ,
                                                                             pm_message_t  ))0,
    (int (*)(struct pnp_dev * ))0, {(char const   *)0, (struct bus_type *)0, (struct module *)0,
                                    (char const   *)0, (_Bool)0, (struct of_device_id  const  *)0,
                                    (struct acpi_device_id  const  *)0, (int (*)(struct device * ))0,
                                    (int (*)(struct device * ))0, (void (*)(struct device * ))0,
                                    (int (*)(struct device * , pm_message_t  ))0,
                                    (int (*)(struct device * ))0, (struct attribute_group  const  **)0,
                                    (struct dev_pm_ops  const  *)0, (struct driver_private *)0}};
#line 6741
static int nsc_ircc_open(chipio_t *info ) ;
#line 6742
static int nsc_ircc_close(struct nsc_ircc_cb *self ) ;
#line 6743
static int nsc_ircc_setup(chipio_t *info ) ;
#line 6744
static void nsc_ircc_pio_receive(struct nsc_ircc_cb *self ) ;
#line 6745
static int nsc_ircc_dma_receive(struct nsc_ircc_cb *self ) ;
#line 6746
static int nsc_ircc_dma_receive_complete(struct nsc_ircc_cb *self , int iobase ) ;
#line 6747
static netdev_tx_t nsc_ircc_hard_xmit_sir(struct sk_buff *skb , struct net_device *dev ) ;
#line 6748
static netdev_tx_t nsc_ircc_hard_xmit_fir(struct sk_buff *skb , struct net_device *dev ) ;
#line 6749
static int nsc_ircc_pio_write(int iobase , __u8 *buf , int len , int fifo_size ) ;
#line 6750
static void nsc_ircc_dma_xmit(struct nsc_ircc_cb *self , int iobase ) ;
#line 6751
static __u8 nsc_ircc_change_speed(struct nsc_ircc_cb *self , __u32 speed ) ;
#line 6752
static int nsc_ircc_is_receiving(struct nsc_ircc_cb *self ) ;
#line 6753
static int nsc_ircc_read_dongle_id(int iobase ) ;
#line 6754
static void nsc_ircc_init_dongle_interface(int iobase , int dongle_id___0 ) ;
#line 6755
static int nsc_ircc_net_open(struct net_device *dev ) ;
#line 6756
static int nsc_ircc_net_close(struct net_device *dev ) ;
#line 6757
static int nsc_ircc_net_ioctl(struct net_device *dev , struct ifreq *rq , int cmd ) ;
#line 6758 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int pnp_registered  ;
#line 6759 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int pnp_succeeded  ;
#line 6760 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_init(void) 
{ 
  chipio_t info ;
  nsc_chip_t *chip ;
  int ret ;
  int cfg_base ;
  int cfg ;
  int id ;
  int reg ;
  int i ;
  int tmp ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 6778
  i = 0;
#line 6779
  ret = ldv___platform_driver_register_75(& nsc_ircc_driver, & __this_module);
  }
#line 6781
  if (ret != 0) {
    {
#line 6783
    tmp = net_ratelimit();
    }
#line 6785
    if (tmp != 0) {
      {
#line 6787
      printk((char const   *)"\v%s, Can\'t register driver!\n", driver_name);
      }
    }
#line 6791
    return (ret);
  }
  {
#line 6795
  ret = pnp_register_driver(& nsc_ircc_pnp_driver);
  }
#line 6797
  if (ret == 0) {
    {
#line 6798
    pnp_registered = 1;
    }
  }
  {
#line 6801
  ret = -19;
#line 6802
  chip = (nsc_chip_t *)(& chips);
  }
#line 6803
  goto ldv_45784;
  ldv_45783: 
  {

  }
#line 6805
  if (irda_debug > 1U) {
    {
#line 6807
    printk((char const   *)"\017%s(), Probing for %s ...\n", "nsc_ircc_init", chip->name);
    }
  }
  {
#line 6811
  cfg = 0;
  }
#line 6812
  goto ldv_45781;
  ldv_45780: 
  {
#line 6814
  cfg_base = chip->cfg[cfg];
  }
#line 6815
  if (cfg_base == 0) {
#line 6816
    goto ldv_45779;
  }
  {
#line 6820
  tmp___0 = inb(cfg_base);
#line 6821
  reg = (int )tmp___0;
  }
#line 6823
  if (reg == 255) {
#line 6824
    if (irda_debug > 1U) {
      {
#line 6826
      printk((char const   *)"\017%s() no chip at 0x%03x\n", "nsc_ircc_init", cfg_base);
      }
    }
#line 6830
    goto ldv_45779;
  }
  {
#line 6834
  outb((unsigned char )((int )chip->cid_index), cfg_base);
#line 6835
  tmp___1 = inb(cfg_base + 1);
#line 6836
  id = (int )tmp___1;
  }
#line 6838
  if ((id & (int )chip->cid_mask) == (int )chip->cid_value) {
#line 6839
    if (irda_debug > 1U) {
      {
#line 6841
      printk((char const   *)"\017%s() Found %s chip, revision=%d\n", "nsc_ircc_init",
             chip->name, id & ~ ((int )chip->cid_mask));
      }
    }
#line 6846
    if (pnp_succeeded != 0) {
      {
#line 6848
      memset((void *)(& info), 0, (size_t___0 )72UL);
#line 6849
      info.cfg_base = cfg_base;
#line 6850
      info.fir_base = pnp_info.fir_base;
#line 6851
      info.dma = pnp_info.dma;
#line 6852
      info.irq = pnp_info.irq;
      }
#line 6854
      if (info.fir_base <= 8191) {
        {
#line 6856
        tmp___2 = net_ratelimit();
        }
#line 6858
        if (tmp___2 != 0) {
          {
#line 6860
          printk((char const   *)"\016%s, chip->init\n", driver_name);
          }
        }
        {
#line 6865
        (*(chip->init))(chip, & info);
        }
      } else {
        {
#line 6869
        (*(chip->probe))(chip, & info);
        }
      }
      {
#line 6873
      tmp___3 = nsc_ircc_open(& info);
      }
#line 6875
      if (tmp___3 >= 0) {
        {
#line 6876
        ret = 0;
        }
      }
    }
#line 6881
    if (ret != 0) {
#line 6882
      if (irda_debug > 1U) {
        {
#line 6884
        printk((char const   *)"\017%s, PnP init failed\n", driver_name);
        }
      }
      {
#line 6889
      memset((void *)(& info), 0, (size_t___0 )72UL);
#line 6890
      info.cfg_base = cfg_base;
#line 6891
      info.fir_base = (int )io[i];
#line 6892
      info.dma = (int )dma[i];
#line 6893
      info.irq = (int )irq[i];
      }
#line 6895
      if (io[i] <= 8191U) {
        {
#line 6897
        (*(chip->init))(chip, & info);
        }
      } else {
        {
#line 6901
        (*(chip->probe))(chip, & info);
        }
      }
      {
#line 6905
      tmp___4 = nsc_ircc_open(& info);
      }
#line 6907
      if (tmp___4 >= 0) {
        {
#line 6908
        ret = 0;
        }
      }
    }
    {
#line 6913
    i ++;
    }
  } else
#line 6915
  if (irda_debug > 1U) {
    {
#line 6917
    printk((char const   *)"\017%s(), Wrong chip id=0x%02x\n", "nsc_ircc_init", id);
    }
  }
  ldv_45779: 
  {
#line 6922
  cfg ++;
  }
  ldv_45781: 
  {

  }
#line 6924
  if ((unsigned int )cfg <= 2U) {
#line 6925
    goto ldv_45780;
  }
  {
#line 6928
  chip ++;
  }
  ldv_45784: 
  {

  }
#line 6930
  if ((unsigned long )chip->name != (unsigned long )((char *)0)) {
#line 6931
    goto ldv_45783;
  }
#line 6934
  if (ret != 0) {
    {
#line 6936
    ldv_platform_driver_unregister_76(& nsc_ircc_driver);
#line 6937
    pnp_unregister_driver(& nsc_ircc_pnp_driver);
#line 6938
    pnp_registered = 0;
    }
  }
#line 6942
  return (ret);
}
}
#line 6945 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void nsc_ircc_cleanup(void) 
{ 
  int i ;

  {
  {
#line 6949
  i = 0;
  }
#line 6950
  goto ldv_45793;
  ldv_45792: 
  {

  }
#line 6952
  if ((unsigned long )dev_self[i] != (unsigned long )((struct nsc_ircc_cb *)0)) {
    {
#line 6954
    nsc_ircc_close(dev_self[i]);
    }
  }
  {
#line 6958
  i ++;
  }
  ldv_45793: 
  {

  }
#line 6960
  if ((unsigned int )i <= 4U) {
#line 6961
    goto ldv_45792;
  }
  {
#line 6965
  ldv_platform_driver_unregister_77(& nsc_ircc_driver);
  }
#line 6967
  if (pnp_registered != 0) {
    {
#line 6969
    pnp_unregister_driver(& nsc_ircc_pnp_driver);
    }
  }
  {
#line 6973
  pnp_registered = 0;
  }
#line 6974
  return;
}
}
#line 6977 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static struct net_device_ops  const  nsc_ircc_sir_ops  = 
#line 6977
     {(int (*)(struct net_device * ))0, (void (*)(struct net_device * ))0, & nsc_ircc_net_open,
    & nsc_ircc_net_close, & nsc_ircc_hard_xmit_sir, (u16 (*)(struct net_device * ,
                                                             struct sk_buff * , void * ,
                                                             u16 (*)(struct net_device * ,
                                                                     struct sk_buff * ) ))0,
    (void (*)(struct net_device * , int  ))0, (void (*)(struct net_device * ))0, (int (*)(struct net_device * ,
                                                                                          void * ))0,
    (int (*)(struct net_device * ))0, & nsc_ircc_net_ioctl, (int (*)(struct net_device * ,
                                                                     struct ifmap * ))0,
    (int (*)(struct net_device * , int  ))0, (int (*)(struct net_device * , struct neigh_parms * ))0,
    (void (*)(struct net_device * ))0, (struct rtnl_link_stats64 *(*)(struct net_device * ,
                                                                      struct rtnl_link_stats64 * ))0,
    (struct net_device_stats *(*)(struct net_device * ))0, (int (*)(struct net_device * ,
                                                                    __be16  , u16  ))0,
    (int (*)(struct net_device * , __be16  , u16  ))0, (void (*)(struct net_device * ))0,
    (int (*)(struct net_device * , struct netpoll_info * , gfp_t  ))0, (void (*)(struct net_device * ))0,
    (int (*)(struct napi_struct * ))0, (int (*)(struct net_device * , int  , u8 * ))0,
    (int (*)(struct net_device * , int  , u16  , u8  ))0, (int (*)(struct net_device * ,
                                                                   int  , int  ))0,
    (int (*)(struct net_device * , int  , bool  ))0, (int (*)(struct net_device * ,
                                                              int  , struct ifla_vf_info * ))0,
    (int (*)(struct net_device * , int  , int  ))0, (int (*)(struct net_device * ,
                                                             int  , struct nlattr ** ))0,
    (int (*)(struct net_device * , int  , struct sk_buff * ))0, (int (*)(struct net_device * ,
                                                                         u8  ))0,
    (int (*)(struct net_device * ))0, (int (*)(struct net_device * ))0, (int (*)(struct net_device * ,
                                                                                 u16  ,
                                                                                 struct scatterlist * ,
                                                                                 unsigned int  ))0,
    (int (*)(struct net_device * , u16  ))0, (int (*)(struct net_device * , u16  ,
                                                      struct scatterlist * , unsigned int  ))0,
    (int (*)(struct net_device * , struct netdev_fcoe_hbainfo * ))0, (int (*)(struct net_device * ,
                                                                              u64 * ,
                                                                              int  ))0,
    (int (*)(struct net_device * , struct sk_buff  const  * , u16  , u32  ))0, (int (*)(struct net_device * ,
                                                                                        struct net_device * ))0,
    (int (*)(struct net_device * , struct net_device * ))0, (netdev_features_t (*)(struct net_device * ,
                                                                                   netdev_features_t  ))0,
    (int (*)(struct net_device * , netdev_features_t  ))0, (int (*)(struct neighbour * ))0,
    (void (*)(struct neighbour * ))0, (int (*)(struct ndmsg * , struct nlattr ** ,
                                               struct net_device * , unsigned char const   * ,
                                               u16  ))0, (int (*)(struct ndmsg * ,
                                                                  struct nlattr ** ,
                                                                  struct net_device * ,
                                                                  unsigned char const   * ))0,
    (int (*)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
             int  ))0, (int (*)(struct net_device * , struct nlmsghdr * ))0, (int (*)(struct sk_buff * ,
                                                                                      u32  ,
                                                                                      u32  ,
                                                                                      struct net_device * ,
                                                                                      u32  ))0,
    (int (*)(struct net_device * , struct nlmsghdr * ))0, (int (*)(struct net_device * ,
                                                                   bool  ))0, (int (*)(struct net_device * ,
                                                                                       struct netdev_phys_port_id * ))0,
    (void (*)(struct net_device * , sa_family_t  , __be16  ))0, (void (*)(struct net_device * ,
                                                                          sa_family_t  ,
                                                                          __be16  ))0,
    (void *(*)(struct net_device * , struct net_device * ))0, (void (*)(struct net_device * ,
                                                                        void * ))0,
    (netdev_tx_t (*)(struct sk_buff * , struct net_device * , void * ))0};
#line 6982 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static struct net_device_ops  const  nsc_ircc_fir_ops  = 
#line 6982
     {(int (*)(struct net_device * ))0, (void (*)(struct net_device * ))0, & nsc_ircc_net_open,
    & nsc_ircc_net_close, & nsc_ircc_hard_xmit_fir, (u16 (*)(struct net_device * ,
                                                             struct sk_buff * , void * ,
                                                             u16 (*)(struct net_device * ,
                                                                     struct sk_buff * ) ))0,
    (void (*)(struct net_device * , int  ))0, (void (*)(struct net_device * ))0, (int (*)(struct net_device * ,
                                                                                          void * ))0,
    (int (*)(struct net_device * ))0, & nsc_ircc_net_ioctl, (int (*)(struct net_device * ,
                                                                     struct ifmap * ))0,
    (int (*)(struct net_device * , int  ))0, (int (*)(struct net_device * , struct neigh_parms * ))0,
    (void (*)(struct net_device * ))0, (struct rtnl_link_stats64 *(*)(struct net_device * ,
                                                                      struct rtnl_link_stats64 * ))0,
    (struct net_device_stats *(*)(struct net_device * ))0, (int (*)(struct net_device * ,
                                                                    __be16  , u16  ))0,
    (int (*)(struct net_device * , __be16  , u16  ))0, (void (*)(struct net_device * ))0,
    (int (*)(struct net_device * , struct netpoll_info * , gfp_t  ))0, (void (*)(struct net_device * ))0,
    (int (*)(struct napi_struct * ))0, (int (*)(struct net_device * , int  , u8 * ))0,
    (int (*)(struct net_device * , int  , u16  , u8  ))0, (int (*)(struct net_device * ,
                                                                   int  , int  ))0,
    (int (*)(struct net_device * , int  , bool  ))0, (int (*)(struct net_device * ,
                                                              int  , struct ifla_vf_info * ))0,
    (int (*)(struct net_device * , int  , int  ))0, (int (*)(struct net_device * ,
                                                             int  , struct nlattr ** ))0,
    (int (*)(struct net_device * , int  , struct sk_buff * ))0, (int (*)(struct net_device * ,
                                                                         u8  ))0,
    (int (*)(struct net_device * ))0, (int (*)(struct net_device * ))0, (int (*)(struct net_device * ,
                                                                                 u16  ,
                                                                                 struct scatterlist * ,
                                                                                 unsigned int  ))0,
    (int (*)(struct net_device * , u16  ))0, (int (*)(struct net_device * , u16  ,
                                                      struct scatterlist * , unsigned int  ))0,
    (int (*)(struct net_device * , struct netdev_fcoe_hbainfo * ))0, (int (*)(struct net_device * ,
                                                                              u64 * ,
                                                                              int  ))0,
    (int (*)(struct net_device * , struct sk_buff  const  * , u16  , u32  ))0, (int (*)(struct net_device * ,
                                                                                        struct net_device * ))0,
    (int (*)(struct net_device * , struct net_device * ))0, (netdev_features_t (*)(struct net_device * ,
                                                                                   netdev_features_t  ))0,
    (int (*)(struct net_device * , netdev_features_t  ))0, (int (*)(struct neighbour * ))0,
    (void (*)(struct neighbour * ))0, (int (*)(struct ndmsg * , struct nlattr ** ,
                                               struct net_device * , unsigned char const   * ,
                                               u16  ))0, (int (*)(struct ndmsg * ,
                                                                  struct nlattr ** ,
                                                                  struct net_device * ,
                                                                  unsigned char const   * ))0,
    (int (*)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
             int  ))0, (int (*)(struct net_device * , struct nlmsghdr * ))0, (int (*)(struct sk_buff * ,
                                                                                      u32  ,
                                                                                      u32  ,
                                                                                      struct net_device * ,
                                                                                      u32  ))0,
    (int (*)(struct net_device * , struct nlmsghdr * ))0, (int (*)(struct net_device * ,
                                                                   bool  ))0, (int (*)(struct net_device * ,
                                                                                       struct netdev_phys_port_id * ))0,
    (void (*)(struct net_device * , sa_family_t  , __be16  ))0, (void (*)(struct net_device * ,
                                                                          sa_family_t  ,
                                                                          __be16  ))0,
    (void *(*)(struct net_device * , struct net_device * ))0, (void (*)(struct net_device * ,
                                                                        void * ))0,
    (netdev_tx_t (*)(struct sk_buff * , struct net_device * , void * ))0};
#line 6987 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_open(chipio_t *info ) 
{ 
  struct net_device *dev ;
  struct nsc_ircc_cb *self ;
  void *ret ;
  int err ;
  int chip_index ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  struct lock_class_key __key ;
  struct resource *tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  long tmp___15 ;
  long tmp___16 ;

  {
#line 7014
  if (irda_debug > 1U) {
    {
#line 7016
    printk((char const   *)"\017%s()\n", "nsc_ircc_open");
    }
  }
  {
#line 7020
  chip_index = 0;
  }
#line 7021
  goto ldv_45810;
  ldv_45809: 
  {

  }
#line 7023
  if ((unsigned long )dev_self[chip_index] == (unsigned long )((struct nsc_ircc_cb *)0)) {
#line 7024
    goto ldv_45808;
  }
  {
#line 7027
  chip_index ++;
  }
  ldv_45810: 
  {

  }
#line 7029
  if ((unsigned int )chip_index <= 4U) {
#line 7030
    goto ldv_45809;
  }
  ldv_45808: 
  {

  }
#line 7034
  if (chip_index == 5) {
    {
#line 7036
    tmp = net_ratelimit();
    }
#line 7038
    if (tmp != 0) {
      {
#line 7040
      printk((char const   *)"\v%s(), maximum number of supported chips reached!\n",
             "nsc_ircc_open");
      }
    }
#line 7044
    return (-12);
  }
  {
#line 7048
  tmp___0 = net_ratelimit();
  }
#line 7050
  if (tmp___0 != 0) {
    {
#line 7052
    printk((char const   *)"\016%s, Found chip at base=0x%03x\n", driver_name, info->cfg_base);
    }
  }
  {
#line 7057
  tmp___1 = nsc_ircc_setup(info);
  }
#line 7059
  if (tmp___1 == -1) {
#line 7060
    return (-1);
  }
  {
#line 7064
  tmp___2 = net_ratelimit();
  }
#line 7066
  if (tmp___2 != 0) {
    {
#line 7068
    printk((char const   *)"\016%s, driver loaded (Dag Brattli)\n", driver_name);
    }
  }
  {
#line 7073
  dev = alloc_irdadev(608);
  }
#line 7075
  if ((unsigned long )dev == (unsigned long )((struct net_device *)0)) {
    {
#line 7077
    tmp___3 = net_ratelimit();
    }
#line 7079
    if (tmp___3 != 0) {
      {
#line 7081
      printk((char const   *)"\v%s(), can\'t allocate memory for control block!\n",
             "nsc_ircc_open");
      }
    }
#line 7085
    return (-12);
  }
  {
#line 7089
  tmp___4 = netdev_priv((struct net_device  const  *)dev);
#line 7090
  self = (struct nsc_ircc_cb *)tmp___4;
#line 7091
  self->netdev = dev;
#line 7092
  spinlock_check(& self->lock);
#line 7093
  __raw_spin_lock_init(& self->lock.__annonCompField19.rlock, (char const   *)"&(&self->lock)->rlock",
                       & __key);
#line 7095
  dev_self[chip_index] = self;
#line 7096
  self->index = chip_index;
#line 7097
  self->io.cfg_base = info->cfg_base;
#line 7098
  self->io.fir_base = info->fir_base;
#line 7099
  self->io.irq = info->irq;
#line 7100
  self->io.fir_ext = 8;
#line 7101
  self->io.dma = info->dma;
#line 7102
  self->io.fifo_size = 32;
#line 7103
  tmp___5 = __request_region(& ioport_resource, (resource_size_t )self->io.fir_base,
                             (resource_size_t )self->io.fir_ext, (char const   *)driver_name,
                             0);
#line 7106
  ret = (void *)tmp___5;
  }
#line 7108
  if ((unsigned long )ret == (unsigned long )((void *)0)) {
    {
#line 7110
    tmp___6 = net_ratelimit();
    }
#line 7112
    if (tmp___6 != 0) {
      {
#line 7114
      printk((char const   *)"\f%s(), can\'t get iobase of 0x%03x\n", "nsc_ircc_open",
             self->io.fir_base);
      }
    }
    {
#line 7118
    err = -19;
    }
#line 7119
    goto out1;
  }
  {
#line 7123
  irda_init_max_qos_capabilies(& self->qos);
#line 7124
  self->qos.baud_rate.bits = (__u16 )510U;
#line 7125
  self->qos.min_turn_time.bits = (__u16 )qos_mtt_bits;
#line 7126
  irda_qos_bits_to_value(& self->qos);
#line 7127
  self->rx_buff.truesize = 14384;
#line 7128
  self->tx_buff.truesize = 14384;
#line 7129
  tmp___7 = dma_zalloc_coherent((struct device *)0, (size_t___0 )self->rx_buff.truesize,
                                & self->rx_buff_dma, 208U);
#line 7131
  self->rx_buff.head = (__u8 *)tmp___7;
  }
#line 7133
  if ((unsigned long )self->rx_buff.head == (unsigned long )((__u8 *)0U)) {
    {
#line 7134
    err = -12;
    }
#line 7135
    goto out2;
  }
  {
#line 7139
  tmp___8 = dma_zalloc_coherent((struct device *)0, (size_t___0 )self->tx_buff.truesize,
                                & self->tx_buff_dma, 208U);
#line 7141
  self->tx_buff.head = (__u8 *)tmp___8;
  }
#line 7143
  if ((unsigned long )self->tx_buff.head == (unsigned long )((__u8 *)0U)) {
    {
#line 7144
    err = -12;
    }
#line 7145
    goto out3;
  }
  {
#line 7149
  self->rx_buff.in_frame = 0;
#line 7150
  self->rx_buff.state = 0;
#line 7151
  self->tx_buff.data = self->tx_buff.head;
#line 7152
  self->rx_buff.data = self->rx_buff.head;
#line 7153
  tmp___10 = 0;
#line 7154
  self->tx_fifo.free = tmp___10;
#line 7155
  tmp___9 = tmp___10;
#line 7156
  self->tx_fifo.ptr = tmp___9;
#line 7157
  self->tx_fifo.len = tmp___9;
#line 7158
  self->tx_fifo.tail = (void *)self->tx_buff.head;
#line 7159
  dev->netdev_ops = & nsc_ircc_sir_ops;
#line 7160
  err = ldv_register_netdev_78(dev);
  }
#line 7162
  if (err != 0) {
    {
#line 7164
    tmp___11 = net_ratelimit();
    }
#line 7166
    if (tmp___11 != 0) {
      {
#line 7168
      printk((char const   *)"\v%s(), register_netdev() failed!\n", "nsc_ircc_open");
      }
    }
#line 7172
    goto out4;
  }
  {
#line 7176
  tmp___12 = net_ratelimit();
  }
#line 7178
  if (tmp___12 != 0) {
    {
#line 7180
    printk((char const   *)"\016IrDA: Registered device %s\n", (char *)(& dev->name));
    }
  }
#line 7184
  if ((unsigned int )dongle_id - 1U > 14U) {
    {
#line 7186
    dongle_id = nsc_ircc_read_dongle_id(self->io.fir_base);
#line 7187
    tmp___13 = net_ratelimit();
    }
#line 7189
    if (tmp___13 != 0) {
      {
#line 7191
      printk((char const   *)"\016%s, Found dongle: %s\n", driver_name, dongle_types[dongle_id]);
      }
    }
  } else {
    {
#line 7197
    tmp___14 = net_ratelimit();
    }
#line 7199
    if (tmp___14 != 0) {
      {
#line 7201
      printk((char const   *)"\016%s, Using dongle: %s\n", driver_name, dongle_types[dongle_id]);
      }
    }
  }
  {
#line 7207
  self->io.dongle_id = dongle_id;
#line 7208
  nsc_ircc_init_dongle_interface(self->io.fir_base, dongle_id);
#line 7209
  self->pldev = platform_device_register_simple((char const   *)"nsc-ircc", self->index,
                                                (struct resource  const  *)0, 0U);
#line 7211
  tmp___16 = IS_ERR((void const   *)self->pldev);
  }
#line 7213
  if (tmp___16 != 0L) {
    {
#line 7215
    tmp___15 = PTR_ERR((void const   *)self->pldev);
#line 7216
    err = (int )tmp___15;
    }
#line 7218
    goto out5;
  }
  {
#line 7222
  platform_set_drvdata(self->pldev, (void *)self);
  }
#line 7224
  return (chip_index);
  out5: 
  {
#line 7227
  ldv_unregister_netdev_79(dev);
  }
  out4: 
  {
#line 7231
  dma_free_attrs((struct device *)0, (size_t___0 )self->tx_buff.truesize, (void *)self->tx_buff.head,
                 self->tx_buff_dma, (struct dma_attrs *)0);
  }
  out3: 
  {
#line 7236
  dma_free_attrs((struct device *)0, (size_t___0 )self->rx_buff.truesize, (void *)self->rx_buff.head,
                 self->rx_buff_dma, (struct dma_attrs *)0);
  }
  out2: 
  {
#line 7241
  __release_region(& ioport_resource, (resource_size_t )self->io.fir_base, (resource_size_t )self->io.fir_ext);
  }
  out1: 
  {
#line 7245
  ldv_free_netdev_80(dev);
#line 7246
  dev_self[chip_index] = (struct nsc_ircc_cb *)0;
  }
#line 7248
  return (err);
}
}
#line 7251 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_close(struct nsc_ircc_cb *self ) 
{ 
  int iobase ;

  {
#line 7255
  if (irda_debug > 3U) {
    {
#line 7257
    printk((char const   *)"\017%s()\n", "nsc_ircc_close");
    }
  }
#line 7261
  if ((unsigned long )self == (unsigned long )((struct nsc_ircc_cb *)0)) {
    {
#line 7263
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/nsc-ircc.c",
           "nsc_ircc_close", 521, "self != NULL");
    }
#line 7266
    return (-1);
  }
  {
#line 7270
  iobase = self->io.fir_base;
#line 7271
  platform_device_unregister(self->pldev);
#line 7272
  ldv_unregister_netdev_81(self->netdev);
  }
#line 7274
  if (irda_debug > 3U) {
    {
#line 7276
    printk((char const   *)"\017%s(), Releasing Region %03x\n", "nsc_ircc_close",
           self->io.fir_base);
    }
  }
  {
#line 7281
  __release_region(& ioport_resource, (resource_size_t )self->io.fir_base, (resource_size_t )self->io.fir_ext);
  }
#line 7283
  if ((unsigned long )self->tx_buff.head != (unsigned long )((__u8 *)0U)) {
    {
#line 7285
    dma_free_attrs((struct device *)0, (size_t___0 )self->tx_buff.truesize, (void *)self->tx_buff.head,
                   self->tx_buff_dma, (struct dma_attrs *)0);
    }
  }
#line 7290
  if ((unsigned long )self->rx_buff.head != (unsigned long )((__u8 *)0U)) {
    {
#line 7292
    dma_free_attrs((struct device *)0, (size_t___0 )self->rx_buff.truesize, (void *)self->rx_buff.head,
                   self->rx_buff_dma, (struct dma_attrs *)0);
    }
  }
  {
#line 7298
  dev_self[self->index] = (struct nsc_ircc_cb *)0;
#line 7299
  ldv_free_netdev_82(self->netdev);
  }
#line 7301
  return (0);
}
}
#line 7304 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_init_108(nsc_chip_t *chip , chipio_t *info ) 
{ 
  int cfg_base ;
  __u8 temp ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 7313
  cfg_base = info->cfg_base;
#line 7314
  temp = (__u8 )0U;
#line 7315
  outb((unsigned char)2, cfg_base);
#line 7316
  outb((unsigned char)0, cfg_base + 1);
#line 7317
  outb((unsigned char)0, cfg_base);
  }
#line 7320
  if (info->fir_base == 1000) {
#line 7321
    goto case_1000;
  }
#line 7324
  if (info->fir_base == 744) {
#line 7325
    goto case_744;
  }
#line 7328
  if (info->fir_base == 1016) {
#line 7329
    goto case_1016;
  }
#line 7332
  if (info->fir_base == 760) {
#line 7333
    goto case_760;
  }
#line 7336
  goto switch_default;
  case_1000: 
  {
#line 7339
  outb((unsigned char)20, cfg_base + 1);
  }
#line 7341
  goto ldv_45833;
  case_744: 
  {
#line 7344
  outb((unsigned char)21, cfg_base + 1);
  }
#line 7346
  goto ldv_45833;
  case_1016: 
  {
#line 7349
  outb((unsigned char)22, cfg_base + 1);
  }
#line 7351
  goto ldv_45833;
  case_760: 
  {
#line 7354
  outb((unsigned char)23, cfg_base + 1);
  }
#line 7356
  goto ldv_45833;
  switch_default: 
  {
#line 7359
  tmp = net_ratelimit();
  }
#line 7361
  if (tmp != 0) {
    {
#line 7363
    printk((char const   *)"\v%s(), invalid base_address", "nsc_ircc_init_108");
    }
  }
  switch_break: 
  {

  }
  ldv_45833: 
  {

  }
#line 7371
  if (info->irq == 3) {
#line 7372
    goto case_3;
  }
#line 7375
  if (info->irq == 4) {
#line 7376
    goto case_4;
  }
#line 7379
  if (info->irq == 5) {
#line 7380
    goto case_5;
  }
#line 7383
  if (info->irq == 7) {
#line 7384
    goto case_7;
  }
#line 7387
  if (info->irq == 9) {
#line 7388
    goto case_9;
  }
#line 7391
  if (info->irq == 11) {
#line 7392
    goto case_11;
  }
#line 7395
  if (info->irq == 15) {
#line 7396
    goto case_15;
  }
#line 7399
  goto switch_default___0;
  case_3: 
  {
#line 7401
  temp = (__u8 )1U;
  }
#line 7402
  goto ldv_45840;
  case_4: 
  {
#line 7404
  temp = (__u8 )2U;
  }
#line 7405
  goto ldv_45840;
  case_5: 
  {
#line 7407
  temp = (__u8 )3U;
  }
#line 7408
  goto ldv_45840;
  case_7: 
  {
#line 7410
  temp = (__u8 )4U;
  }
#line 7411
  goto ldv_45840;
  case_9: 
  {
#line 7413
  temp = (__u8 )5U;
  }
#line 7414
  goto ldv_45840;
  case_11: 
  {
#line 7416
  temp = (__u8 )6U;
  }
#line 7417
  goto ldv_45840;
  case_15: 
  {
#line 7419
  temp = (__u8 )7U;
  }
#line 7420
  goto ldv_45840;
  switch_default___0: 
  {
#line 7423
  tmp___0 = net_ratelimit();
  }
#line 7425
  if (tmp___0 != 0) {
    {
#line 7427
    printk((char const   *)"\v%s(), invalid irq", "nsc_ircc_init_108");
    }
  }
  switch_break___0: 
  {

  }
  ldv_45840: 
  {
#line 7435
  outb((unsigned char)1, cfg_base);
  }
#line 7438
  if (info->dma == 0) {
#line 7439
    goto case_0;
  }
#line 7442
  if (info->dma == 1) {
#line 7443
    goto case_1;
  }
#line 7446
  if (info->dma == 3) {
#line 7447
    goto case_3___0;
  }
#line 7450
  goto switch_default___1;
  case_0: 
  {
#line 7453
  outb((unsigned char )((int )((unsigned int )temp + 8U)), cfg_base + 1);
  }
#line 7455
  goto ldv_45849;
  case_1: 
  {
#line 7458
  outb((unsigned char )((int )((unsigned int )temp + 16U)), cfg_base + 1);
  }
#line 7460
  goto ldv_45849;
  case_3___0: 
  {
#line 7463
  outb((unsigned char )((int )((unsigned int )temp + 24U)), cfg_base + 1);
  }
#line 7465
  goto ldv_45849;
  switch_default___1: 
  {
#line 7468
  tmp___1 = net_ratelimit();
  }
#line 7470
  if (tmp___1 != 0) {
    {
#line 7472
    printk((char const   *)"\v%s(), invalid dma", "nsc_ircc_init_108");
    }
  }
  switch_break___1: 
  {

  }
  ldv_45849: 
  {
#line 7480
  outb((unsigned char)2, cfg_base);
#line 7481
  outb((unsigned char)3, cfg_base + 1);
  }
#line 7483
  return (0);
}
}
#line 7486 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_probe_108(nsc_chip_t *chip , chipio_t *info ) 
{ 
  int cfg_base ;
  int reg ;
  unsigned char tmp ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;

  {
  {
#line 7495
  cfg_base = info->cfg_base;
#line 7496
  outb((unsigned char)0, cfg_base);
#line 7497
  tmp = inb(cfg_base + 1);
#line 7498
  reg = (int )tmp;
  }
#line 7501
  if ((reg & 3) == 0) {
#line 7502
    goto case_0;
  }
#line 7505
  if ((reg & 3) == 1) {
#line 7506
    goto case_1;
  }
#line 7509
  if ((reg & 3) == 2) {
#line 7510
    goto case_2;
  }
#line 7513
  if ((reg & 3) == 3) {
#line 7514
    goto case_3;
  }
#line 7517
  goto switch_break;
  case_0: 
  {
#line 7519
  info->fir_base = 1000;
  }
#line 7520
  goto ldv_45860;
  case_1: 
  {
#line 7522
  info->fir_base = 744;
  }
#line 7523
  goto ldv_45860;
  case_2: 
  {
#line 7525
  info->fir_base = 1016;
  }
#line 7526
  goto ldv_45860;
  case_3: 
  {
#line 7528
  info->fir_base = 760;
  }
#line 7529
  goto ldv_45860;
  switch_break: 
  {

  }
  ldv_45860: 
  {
#line 7533
  info->sir_base = info->fir_base;
  }
#line 7534
  if (irda_debug > 1U) {
    {
#line 7536
    printk((char const   *)"\017%s(), probing fir_base=0x%03x\n", "nsc_ircc_probe_108",
           info->fir_base);
    }
  }
  {
#line 7541
  outb((unsigned char)1, cfg_base);
#line 7542
  tmp___0 = inb(cfg_base + 1);
#line 7543
  reg = (int )tmp___0;
  }
#line 7546
  if ((reg & 7) == 0) {
#line 7547
    goto case_0___0;
  }
#line 7550
  if ((reg & 7) == 1) {
#line 7551
    goto case_1___0;
  }
#line 7554
  if ((reg & 7) == 2) {
#line 7555
    goto case_2___0;
  }
#line 7558
  if ((reg & 7) == 3) {
#line 7559
    goto case_3___0;
  }
#line 7562
  if ((reg & 7) == 4) {
#line 7563
    goto case_4;
  }
#line 7566
  if ((reg & 7) == 5) {
#line 7567
    goto case_5;
  }
#line 7570
  if ((reg & 7) == 6) {
#line 7571
    goto case_6;
  }
#line 7574
  if ((reg & 7) == 7) {
#line 7575
    goto case_7;
  }
#line 7578
  goto switch_break___0;
  case_0___0: 
  {
#line 7580
  info->irq = -1;
  }
#line 7581
  goto ldv_45866;
  case_1___0: 
  {
#line 7583
  info->irq = 3;
  }
#line 7584
  goto ldv_45866;
  case_2___0: 
  {
#line 7586
  info->irq = 4;
  }
#line 7587
  goto ldv_45866;
  case_3___0: 
  {
#line 7589
  info->irq = 5;
  }
#line 7590
  goto ldv_45866;
  case_4: 
  {
#line 7592
  info->irq = 7;
  }
#line 7593
  goto ldv_45866;
  case_5: 
  {
#line 7595
  info->irq = 9;
  }
#line 7596
  goto ldv_45866;
  case_6: 
  {
#line 7598
  info->irq = 11;
  }
#line 7599
  goto ldv_45866;
  case_7: 
  {
#line 7601
  info->irq = 15;
  }
#line 7602
  goto ldv_45866;
  switch_break___0: 
  {

  }
  ldv_45866: 
  {

  }
#line 7606
  if (irda_debug > 1U) {
    {
#line 7608
    printk((char const   *)"\017%s(), probing irq=%d\n", "nsc_ircc_probe_108", info->irq);
    }
  }
#line 7613
  if (((reg >> 3) & 3) == 0) {
#line 7614
    goto case_0___1;
  }
#line 7617
  if (((reg >> 3) & 3) == 1) {
#line 7618
    goto case_1___1;
  }
#line 7621
  if (((reg >> 3) & 3) == 2) {
#line 7622
    goto case_2___1;
  }
#line 7625
  if (((reg >> 3) & 3) == 3) {
#line 7626
    goto case_3___1;
  }
#line 7629
  goto switch_break___1;
  case_0___1: 
  {
#line 7631
  info->dma = -1;
  }
#line 7632
  goto ldv_45875;
  case_1___1: 
  {
#line 7634
  info->dma = 0;
  }
#line 7635
  goto ldv_45875;
  case_2___1: 
  {
#line 7637
  info->dma = 1;
  }
#line 7638
  goto ldv_45875;
  case_3___1: 
  {
#line 7640
  info->dma = 3;
  }
#line 7641
  goto ldv_45875;
  switch_break___1: 
  {

  }
  ldv_45875: 
  {

  }
#line 7645
  if (irda_debug > 1U) {
    {
#line 7647
    printk((char const   *)"\017%s(), probing dma=%d\n", "nsc_ircc_probe_108", info->dma);
    }
  }
  {
#line 7652
  outb((unsigned char)2, cfg_base);
#line 7653
  tmp___1 = inb(cfg_base + 1);
#line 7654
  reg = (int )tmp___1;
#line 7655
  info->enabled = reg & 1;
#line 7656
  info->suspended = (reg & 2) == 0;
  }
#line 7658
  return (0);
}
}
#line 7661 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_init_338(nsc_chip_t *chip , chipio_t *info ) 
{ 


  {
#line 7664
  return (0);
}
}
#line 7667 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_probe_338(nsc_chip_t *chip , chipio_t *info ) 
{ 
  int cfg_base ;
  int reg ;
  int com ;
  int pnp ;
  unsigned char tmp ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;
  unsigned char tmp___2 ;
  unsigned char tmp___3 ;
  unsigned char tmp___4 ;
  unsigned char tmp___5 ;
  unsigned char tmp___6 ;

  {
  {
#line 7683
  cfg_base = info->cfg_base;
#line 7684
  com = 0;
#line 7685
  outb((unsigned char)0, cfg_base);
#line 7686
  tmp = inb(cfg_base + 1);
#line 7687
  reg = (int )tmp;
#line 7688
  info->enabled = (reg >> 2) & 1;
#line 7689
  outb((unsigned char)27, cfg_base);
#line 7690
  tmp___0 = inb(cfg_base + 1);
#line 7691
  reg = (int )tmp___0;
#line 7692
  pnp = (reg >> 3) & 1;
  }
#line 7694
  if (pnp != 0) {
#line 7695
    if (irda_debug > 1U) {
      {
#line 7697
      printk((char const   *)"\017(), Chip is in PnP mode\n");
      }
    }
    {
#line 7702
    outb((unsigned char)70, cfg_base);
#line 7703
    tmp___1 = inb(cfg_base + 1);
#line 7704
    reg = ((int )tmp___1 & 254) << 2;
#line 7705
    outb((unsigned char)71, cfg_base);
#line 7706
    tmp___2 = inb(cfg_base + 1);
#line 7707
    reg |= ((int )tmp___2 & 252) << 8;
#line 7708
    info->fir_base = reg;
    }
  } else {
    {
#line 7712
    outb((unsigned char)1, cfg_base);
#line 7713
    tmp___3 = inb(cfg_base + 1);
#line 7714
    reg = (int )tmp___3;
    }
#line 7717
    if (((reg >> 4) & 3) == 0) {
#line 7718
      goto case_0;
    }
#line 7721
    if (((reg >> 4) & 3) == 1) {
#line 7722
      goto case_1;
    }
#line 7725
    if (((reg >> 4) & 3) == 2) {
#line 7726
      goto case_2;
    }
#line 7729
    if (((reg >> 4) & 3) == 3) {
#line 7730
      goto case_3;
    }
#line 7733
    goto switch_break;
    case_0: 
    {
#line 7735
    info->fir_base = 1016;
    }
#line 7736
    goto ldv_45892;
    case_1: 
    {
#line 7738
    info->fir_base = 760;
    }
#line 7739
    goto ldv_45892;
    case_2: 
    {
#line 7741
    com = 3;
    }
#line 7742
    goto ldv_45892;
    case_3: 
    {
#line 7744
    com = 4;
    }
#line 7745
    goto ldv_45892;
    switch_break: 
    {

    }
    ldv_45892: 
    {

    }
#line 7749
    if (com != 0) {
#line 7751
      if (((reg >> 6) & 3) == 0) {
#line 7752
        goto case_0___0;
      }
#line 7755
      if (((reg >> 6) & 3) == 1) {
#line 7756
        goto case_1___0;
      }
#line 7759
      if (((reg >> 6) & 3) == 2) {
#line 7760
        goto case_2___0;
      }
#line 7763
      if (((reg >> 6) & 3) == 3) {
#line 7764
        goto case_3___0;
      }
#line 7767
      goto switch_break___0;
      case_0___0: 
      {

      }
#line 7769
      if (com == 3) {
        {
#line 7770
        info->fir_base = 1000;
        }
      } else {
        {
#line 7772
        info->fir_base = 744;
        }
      }
#line 7774
      goto ldv_45897;
      case_1___0: 
      {

      }
#line 7776
      if (com == 3) {
        {
#line 7777
        info->fir_base = 824;
        }
      } else {
        {
#line 7779
        info->fir_base = 568;
        }
      }
#line 7781
      goto ldv_45897;
      case_2___0: 
      {

      }
#line 7783
      if (com == 3) {
        {
#line 7784
        info->fir_base = 744;
        }
      } else {
        {
#line 7786
        info->fir_base = 736;
        }
      }
#line 7788
      goto ldv_45897;
      case_3___0: 
      {

      }
#line 7790
      if (com == 3) {
        {
#line 7791
        info->fir_base = 544;
        }
      } else {
        {
#line 7793
        info->fir_base = 552;
        }
      }
#line 7795
      goto ldv_45897;
      switch_break___0: 
      {

      }
      ldv_45897: 
      {

      }
    }
  }
  {
#line 7803
  info->sir_base = info->fir_base;
#line 7804
  outb((unsigned char)28, cfg_base);
#line 7805
  tmp___4 = inb(cfg_base + 1);
#line 7806
  reg = (int )tmp___4;
#line 7807
  info->irq = reg >> 4;
#line 7808
  outb((unsigned char)79, cfg_base);
#line 7809
  tmp___5 = inb(cfg_base + 1);
#line 7810
  reg = (int )tmp___5;
#line 7811
  info->dma = (reg & 7) + -1;
#line 7812
  outb((unsigned char)2, cfg_base);
#line 7813
  tmp___6 = inb(cfg_base + 1);
#line 7814
  reg = (int )tmp___6;
#line 7815
  info->suspended = reg & 1;
  }
#line 7817
  return (0);
}
}
#line 7820 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_init_39x(nsc_chip_t *chip , chipio_t *info ) 
{ 
  int cfg_base ;
  int enabled ;
  unsigned char tmp ;

  {
  {
#line 7826
  cfg_base = info->cfg_base;
  }
#line 7827
  if (irda_debug > 1U) {
    {
#line 7829
    printk((char const   *)"\017%s(): nsc_ircc_init_39x (user settings): io=0x%04x, irq=%d, dma=%d\n",
           "nsc_ircc_init_39x", info->fir_base, info->irq, info->dma);
    }
  }
  {
#line 7835
  outb((unsigned char)7, cfg_base);
#line 7836
  outb((unsigned char)2, cfg_base + 1);
#line 7837
  outb((unsigned char)48, cfg_base);
#line 7838
  tmp = inb(cfg_base + 1);
#line 7839
  enabled = (int )tmp & 1;
  }
#line 7841
  if (enabled == 0) {
    {
#line 7843
    outb((unsigned char)33, cfg_base);
#line 7844
    outb((unsigned char)1, cfg_base + 1);
    }
  }
  {
#line 7849
  outb((unsigned char)240, cfg_base);
#line 7850
  outb((unsigned char)130, cfg_base + 1);
  }
#line 7852
  return (0);
}
}
#line 7855 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_probe_39x(nsc_chip_t *chip , chipio_t *info ) 
{ 
  int cfg_base ;
  int reg1 ;
  int reg2 ;
  int irq___0 ;
  int irqt ;
  int dma1 ;
  int dma2 ;
  int enabled ;
  int susp ;
  unsigned char tmp ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;
  unsigned char tmp___2 ;
  unsigned char tmp___3 ;
  unsigned char tmp___4 ;
  unsigned char tmp___5 ;
  unsigned char tmp___6 ;
  unsigned char tmp___7 ;

  {
  {
#line 7876
  cfg_base = info->cfg_base;
  }
#line 7877
  if (irda_debug > 1U) {
    {
#line 7879
    printk((char const   *)"\017%s(), nsc_ircc_probe_39x, base=%d\n", "nsc_ircc_probe_39x",
           cfg_base);
    }
  }
  {
#line 7884
  outb((unsigned char)7, cfg_base);
#line 7885
  outb((unsigned char)2, cfg_base + 1);
#line 7886
  outb((unsigned char)96, cfg_base);
#line 7887
  tmp = inb(cfg_base + 1);
#line 7888
  reg1 = (int )tmp;
#line 7889
  outb((unsigned char)97, cfg_base);
#line 7890
  tmp___0 = inb(cfg_base + 1);
#line 7891
  reg2 = (int )tmp___0;
#line 7892
  info->fir_base = (reg1 << 8) | reg2;
#line 7893
  outb((unsigned char)112, cfg_base);
#line 7894
  tmp___1 = inb(cfg_base + 1);
#line 7895
  irq___0 = (int )tmp___1;
#line 7896
  outb((unsigned char)113, cfg_base);
#line 7897
  tmp___2 = inb(cfg_base + 1);
#line 7898
  irqt = (int )tmp___2;
#line 7899
  info->irq = irq___0;
#line 7900
  outb((unsigned char)116, cfg_base);
#line 7901
  tmp___3 = inb(cfg_base + 1);
#line 7902
  dma1 = (int )tmp___3;
#line 7903
  outb((unsigned char)117, cfg_base);
#line 7904
  tmp___4 = inb(cfg_base + 1);
#line 7905
  dma2 = (int )tmp___4;
#line 7906
  info->dma = dma1 + -1;
#line 7907
  outb((unsigned char)48, cfg_base);
#line 7908
  tmp___5 = inb(cfg_base + 1);
#line 7909
  enabled = (int )tmp___5 & 1;
#line 7910
  info->enabled = enabled;
#line 7911
  outb((unsigned char)240, cfg_base);
#line 7912
  tmp___6 = inb(cfg_base + 1);
#line 7913
  susp = 1 - (((int )tmp___6 & 2) >> 1);
  }
#line 7915
  if (irda_debug > 1U) {
    {
#line 7917
    printk((char const   *)"\017%s(): io=0x%02x%02x, irq=%d (type %d), rxdma=%d, txdma=%d, enabled=%d (suspended=%d)\n",
           "nsc_ircc_probe_39x", reg1, reg2, irq___0, irqt, dma1, dma2, enabled, susp);
    }
  }
  {
#line 7923
  outb((unsigned char)48, cfg_base);
#line 7924
  tmp___7 = inb(cfg_base + 1);
#line 7925
  enabled = (int )tmp___7 & 1;
  }
#line 7927
  if (enabled == 0) {
    {
#line 7929
    outb((unsigned char)33, cfg_base);
#line 7930
    outb((unsigned char)1, cfg_base + 1);
    }
  }
  {
#line 7935
  outb((unsigned char)240, cfg_base);
#line 7936
  outb((unsigned char)130, cfg_base + 1);
  }
#line 7938
  return (0);
}
}
#line 7941 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_pnp_probe(struct pnp_dev *dev , struct pnp_device_id  const  *id ) 
{ 
  resource_size_t tmp ;
  int tmp___0 ;
  unsigned long tmp___1 ;
  resource_size_t tmp___2 ;
  int tmp___3 ;
  unsigned long tmp___4 ;
  resource_size_t tmp___5 ;
  int tmp___6 ;
  unsigned long tmp___7 ;

  {
  {
#line 7954
  memset((void *)(& pnp_info), 0, (size_t___0 )72UL);
#line 7955
  pnp_info.irq = -1;
#line 7956
  pnp_info.dma = -1;
#line 7957
  pnp_succeeded = 1;
  }
#line 7959
  if ((int )id->driver_data & 1) {
    {
#line 7960
    dongle_id = 9;
    }
  }
  {
#line 7964
  tmp___0 = pnp_port_valid(dev, 0U);
  }
#line 7966
  if (tmp___0 != 0) {
    {
#line 7968
    tmp___1 = pnp_port_flags(dev, 0U);
    }
#line 7970
    if ((tmp___1 & 268435456UL) == 0UL) {
      {
#line 7972
      tmp = pnp_port_start(dev, 0U);
#line 7973
      pnp_info.fir_base = (int )tmp;
      }
    }
  }
  {
#line 7980
  tmp___3 = pnp_irq_valid(dev, 0U);
  }
#line 7982
  if (tmp___3 != 0) {
    {
#line 7984
    tmp___4 = pnp_irq_flags(dev, 0U);
    }
#line 7986
    if ((tmp___4 & 268435456UL) == 0UL) {
      {
#line 7988
      tmp___2 = pnp_irq(dev, 0U);
#line 7989
      pnp_info.irq = (int )tmp___2;
      }
    }
  }
  {
#line 7996
  tmp___6 = pnp_dma_valid(dev, 0U);
  }
#line 7998
  if (tmp___6 != 0) {
    {
#line 8000
    tmp___7 = pnp_dma_flags(dev, 0U);
    }
#line 8002
    if ((tmp___7 & 268435456UL) == 0UL) {
      {
#line 8004
      tmp___5 = pnp_dma(dev, 0U);
#line 8005
      pnp_info.dma = (int )tmp___5;
      }
    }
  }
  {
#line 8012
  printk((char const   *)"\017%s() : From PnP, found firbase 0x%03X ; irq %d ; dma %d.\n",
         "nsc_ircc_pnp_probe", pnp_info.fir_base, pnp_info.irq, pnp_info.dma);
  }
#line 8015
  if (pnp_info.fir_base == 0) {
    {
#line 8016
    pnp_succeeded = 0;
    }
  } else
#line 8015
  if (pnp_info.irq == -1) {
    {
#line 8016
    pnp_succeeded = 0;
    }
  } else
#line 8015
  if (pnp_info.dma == -1) {
    {
#line 8016
    pnp_succeeded = 0;
    }
  }
#line 8019
  return (0);
}
}
#line 8022 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_setup(chipio_t *info ) 
{ 
  int version ;
  int iobase ;
  unsigned char tmp ;
  int tmp___0 ;

  {
  {
#line 8030
  iobase = info->fir_base;
#line 8031
  switch_bank(iobase, 228);
#line 8032
  tmp = inb(iobase);
#line 8033
  version = (int )tmp;
  }
#line 8035
  if (irda_debug > 1U) {
    {
#line 8037
    printk((char const   *)"\017%s() Driver %s Found chip version %02x\n", "nsc_ircc_setup",
           driver_name, version);
    }
  }
#line 8042
  if ((version & 240) != 32) {
    {
#line 8044
    tmp___0 = net_ratelimit();
    }
#line 8046
    if (tmp___0 != 0) {
      {
#line 8048
      printk((char const   *)"\v%s, Wrong chip version %02x\n", driver_name, version);
      }
    }
#line 8052
    return (-1);
  }
  {
#line 8056
  switch_bank(iobase, 224);
#line 8057
  outb((unsigned char)1, iobase + 2);
#line 8058
  switch_bank(iobase, 3);
#line 8059
  switch_bank(iobase, 3);
#line 8060
  outb((unsigned char)103, iobase + 2);
#line 8061
  outb((unsigned char)3, iobase + 3);
#line 8062
  outb((unsigned char)96, iobase + 4);
#line 8063
  switch_bank(iobase, 224);
#line 8064
  outb((unsigned char)5, iobase + 4);
#line 8065
  switch_bank(iobase, 236);
#line 8066
  outb((unsigned char)2, iobase + 4);
#line 8067
  switch_bank(iobase, 240);
#line 8068
  outb((unsigned char)32, iobase);
#line 8069
  outb((unsigned char)10, iobase + 1);
#line 8070
  outb((unsigned char)13, iobase + 2);
#line 8071
  outb((unsigned char)42, iobase + 4);
#line 8072
  switch_bank(iobase, 3);
#line 8073
  outb((unsigned char)1, iobase + 1);
  }
#line 8075
  return (0);
}
}
#line 8078 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_read_dongle_id(int iobase ) 
{ 
  int dongle_id___0 ;
  __u8 bank ;
  unsigned char tmp ;

  {
  {
#line 8085
  bank = inb(iobase + 3);
#line 8086
  switch_bank(iobase, 244);
#line 8087
  outb((unsigned char)0, iobase + 7);
#line 8088
  __const_udelay(214750UL);
#line 8089
  tmp = inb(iobase + 4);
#line 8090
  dongle_id___0 = (int )tmp & 15;
  }
#line 8092
  if (dongle_id___0 == 10) {
    {
#line 8093
    dongle_id___0 = 9;
    }
  }
  {
#line 8097
  switch_bank(iobase, 3);
#line 8098
  outb((unsigned char )((int )bank), iobase + 3);
  }
#line 8100
  return (dongle_id___0);
}
}
#line 8103 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void nsc_ircc_init_dongle_interface(int iobase , int dongle_id___0 ) 
{ 
  int bank ;
  unsigned char tmp ;

  {
  {
#line 8109
  tmp = inb(iobase + 3);
#line 8110
  bank = (int )tmp;
#line 8111
  switch_bank(iobase, 244);
  }
#line 8114
  if (dongle_id___0 == 0) {
#line 8115
    goto case_0;
  }
#line 8118
  if (dongle_id___0 == 1) {
#line 8119
    goto case_1;
  }
#line 8122
  if (dongle_id___0 == 2) {
#line 8123
    goto case_2;
  }
#line 8126
  if (dongle_id___0 == 3) {
#line 8127
    goto case_3;
  }
#line 8130
  if (dongle_id___0 == 4) {
#line 8131
    goto case_4;
  }
#line 8134
  if (dongle_id___0 == 5) {
#line 8135
    goto case_5;
  }
#line 8138
  if (dongle_id___0 == 6) {
#line 8139
    goto case_6;
  }
#line 8142
  if (dongle_id___0 == 7) {
#line 8143
    goto case_7;
  }
#line 8146
  if (dongle_id___0 == 8) {
#line 8147
    goto case_8;
  }
#line 8150
  if (dongle_id___0 == 9) {
#line 8151
    goto case_9;
  }
#line 8154
  if (dongle_id___0 == 10) {
#line 8155
    goto case_10;
  }
#line 8158
  if (dongle_id___0 == 11) {
#line 8159
    goto case_11;
  }
#line 8162
  if (dongle_id___0 == 12) {
#line 8163
    goto case_12;
  }
#line 8166
  if (dongle_id___0 == 13) {
#line 8167
    goto case_13;
  }
#line 8170
  if (dongle_id___0 == 14) {
#line 8171
    goto case_14;
  }
#line 8174
  if (dongle_id___0 == 15) {
#line 8175
    goto case_15;
  }
#line 8178
  goto switch_default;
  case_0: 
  {

  }
  case_1: 
  {
#line 8182
  printk((char const   *)"\017%s(), %s not defined by irda yet\n", "nsc_ircc_init_dongle_interface",
         dongle_types[dongle_id___0]);
  }
#line 8185
  goto ldv_45946;
  case_2: 
  {

  }
  case_3: 
  {
#line 8189
  printk((char const   *)"\017%s(), %s not defined by irda yet\n", "nsc_ircc_init_dongle_interface",
         dongle_types[dongle_id___0]);
  }
#line 8192
  goto ldv_45946;
  case_4: 
  {

  }
#line 8194
  goto ldv_45946;
  case_5: 
  {
#line 8197
  printk((char const   *)"\017%s(), %s not defined by irda yet\n", "nsc_ircc_init_dongle_interface",
         dongle_types[dongle_id___0]);
  }
#line 8200
  goto ldv_45946;
  case_6: 
  {
#line 8203
  printk((char const   *)"\017%s(), %s not defined by irda yet\n", "nsc_ircc_init_dongle_interface",
         dongle_types[dongle_id___0]);
  }
#line 8206
  goto ldv_45946;
  case_7: 
  {
#line 8209
  printk((char const   *)"\017%s(), %s is not for IrDA mode\n", "nsc_ircc_init_dongle_interface",
         dongle_types[dongle_id___0]);
  }
#line 8212
  goto ldv_45946;
  case_8: 
  {
#line 8215
  printk((char const   *)"\017%s(), %s\n", "nsc_ircc_init_dongle_interface", dongle_types[dongle_id___0]);
  }
#line 8217
  goto ldv_45946;
  case_9: 
  {
#line 8220
  outb((unsigned char)40, iobase + 7);
  }
#line 8222
  goto ldv_45946;
  case_10: 
  {

  }
  case_11: 
  {
#line 8226
  printk((char const   *)"\017%s(), %s not defined by irda yet\n", "nsc_ircc_init_dongle_interface",
         dongle_types[dongle_id___0]);
  }
#line 8229
  goto ldv_45946;
  case_12: 
  {

  }
  case_13: 
  {
#line 8233
  outb((unsigned char)72, iobase + 7);
  }
#line 8235
  goto ldv_45946;
  case_14: 
  {
#line 8238
  outb((unsigned char)40, iobase + 7);
  }
#line 8240
  goto ldv_45946;
  case_15: 
  {
#line 8243
  printk((char const   *)"\017%s(), %s\n", "nsc_ircc_init_dongle_interface", dongle_types[dongle_id___0]);
#line 8244
  switch_bank(iobase, 3);
#line 8245
  outb((unsigned char)98, iobase + 4);
  }
#line 8247
  goto ldv_45946;
  switch_default: 
  {
#line 8250
  printk((char const   *)"\017%s(), invalid dongle_id %#x", "nsc_ircc_init_dongle_interface",
         dongle_id___0);
  }
  switch_break: 
  {

  }
  ldv_45946: 
  {
#line 8256
  outb((unsigned char)0, iobase + 4);
#line 8257
  outb((unsigned char )((int )((unsigned char )bank)), iobase + 3);
  }
#line 8259
  return;
}
}
#line 8262 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void nsc_ircc_change_dongle_speed(int iobase , int speed , int dongle_id___0 ) 
{ 
  __u8 bank ;

  {
  {
#line 8267
  bank = inb(iobase + 3);
#line 8268
  switch_bank(iobase, 244);
  }
#line 8271
  if (dongle_id___0 == 0) {
#line 8272
    goto case_0;
  }
#line 8275
  if (dongle_id___0 == 1) {
#line 8276
    goto case_1;
  }
#line 8279
  if (dongle_id___0 == 2) {
#line 8280
    goto case_2;
  }
#line 8283
  if (dongle_id___0 == 3) {
#line 8284
    goto case_3;
  }
#line 8287
  if (dongle_id___0 == 4) {
#line 8288
    goto case_4;
  }
#line 8291
  if (dongle_id___0 == 5) {
#line 8292
    goto case_5;
  }
#line 8295
  if (dongle_id___0 == 6) {
#line 8296
    goto case_6;
  }
#line 8299
  if (dongle_id___0 == 7) {
#line 8300
    goto case_7;
  }
#line 8303
  if (dongle_id___0 == 8) {
#line 8304
    goto case_8;
  }
#line 8307
  if (dongle_id___0 == 9) {
#line 8308
    goto case_9;
  }
#line 8311
  if (dongle_id___0 == 10) {
#line 8312
    goto case_10;
  }
#line 8315
  if (dongle_id___0 == 11) {
#line 8316
    goto case_11;
  }
#line 8319
  if (dongle_id___0 == 12) {
#line 8320
    goto case_12;
  }
#line 8323
  if (dongle_id___0 == 13) {
#line 8324
    goto case_13;
  }
#line 8327
  if (dongle_id___0 == 14) {
#line 8328
    goto case_14;
  }
#line 8331
  if (dongle_id___0 == 15) {
#line 8332
    goto case_15;
  }
#line 8335
  goto switch_default;
  case_0: 
  {

  }
  case_1: 
  {
#line 8339
  printk((char const   *)"\017%s(), %s not defined by irda yet\n", "nsc_ircc_change_dongle_speed",
         dongle_types[dongle_id___0]);
  }
#line 8342
  goto ldv_45971;
  case_2: 
  {

  }
  case_3: 
  {
#line 8346
  printk((char const   *)"\017%s(), %s not defined by irda yet\n", "nsc_ircc_change_dongle_speed",
         dongle_types[dongle_id___0]);
  }
#line 8349
  goto ldv_45971;
  case_4: 
  {

  }
#line 8351
  goto ldv_45971;
  case_5: 
  {
#line 8354
  printk((char const   *)"\017%s(), %s not defined by irda yet\n", "nsc_ircc_change_dongle_speed",
         dongle_types[dongle_id___0]);
  }
#line 8357
  goto ldv_45971;
  case_6: 
  {
#line 8360
  printk((char const   *)"\017%s(), %s not defined by irda yet\n", "nsc_ircc_change_dongle_speed",
         dongle_types[dongle_id___0]);
  }
#line 8363
  goto ldv_45971;
  case_7: 
  {
#line 8366
  printk((char const   *)"\017%s(), %s is not for IrDA mode\n", "nsc_ircc_change_dongle_speed",
         dongle_types[dongle_id___0]);
  }
#line 8368
  goto ldv_45971;
  case_8: 
  {
#line 8371
  printk((char const   *)"\017%s(), %s\n", "nsc_ircc_change_dongle_speed", dongle_types[dongle_id___0]);
#line 8372
  outb((unsigned char)0, iobase + 4);
  }
#line 8374
  if (speed > 115200) {
    {
#line 8376
    outb((unsigned char)1, iobase + 4);
    }
  }
#line 8380
  goto ldv_45971;
  case_9: 
  {
#line 8383
  outb((unsigned char)1, iobase + 4);
  }
#line 8385
  if (speed == 4000000) {
    {
#line 8387
    outb((unsigned char)129, iobase + 4);
#line 8388
    outb((unsigned char)128, iobase + 4);
    }
  } else {
    {
#line 8392
    outb((unsigned char)0, iobase + 4);
    }
  }
#line 8395
  goto ldv_45971;
  case_10: 
  {

  }
  case_11: 
  {
#line 8399
  printk((char const   *)"\017%s(), %s not defined by irda yet\n", "nsc_ircc_change_dongle_speed",
         dongle_types[dongle_id___0]);
  }
#line 8402
  goto ldv_45971;
  case_12: 
  {

  }
  case_13: 
  {

  }
#line 8405
  goto ldv_45971;
  case_14: 
  {

  }
#line 8407
  goto ldv_45971;
  case_15: 
  {
#line 8410
  printk((char const   *)"\017%s(), %s is not for IrDA mode\n", "nsc_ircc_change_dongle_speed",
         dongle_types[dongle_id___0]);
#line 8411
  switch_bank(iobase, 3);
#line 8412
  outb((unsigned char)98, iobase + 4);
  }
#line 8414
  goto ldv_45971;
  switch_default: 
  {
#line 8417
  printk((char const   *)"\017%s(), invalid data_rate\n", "nsc_ircc_change_dongle_speed");
  }
  switch_break: 
  {

  }
  ldv_45971: 
  {
#line 8423
  outb((unsigned char )((int )bank), iobase + 3);
  }
#line 8425
  return;
}
}
#line 8428 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static __u8 nsc_ircc_change_speed(struct nsc_ircc_cb *self , __u32 speed ) 
{ 
  struct net_device *dev ;
  __u8 mcr ;
  int iobase ;
  __u8 bank ;
  __u8 ier ;
  unsigned char tmp ;
  int tmp_2 ;

  {
  {
#line 8438
  dev = self->netdev;
#line 8439
  mcr = (__u8 )96U;
  }
#line 8440
  if (irda_debug > 1U) {
    {
#line 8442
    printk((char const   *)"\017%s(), speed=%d\n", "nsc_ircc_change_speed", speed);
    }
  }
#line 8446
  if ((unsigned long )self == (unsigned long )((struct nsc_ircc_cb *)0)) {
    {
#line 8448
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/nsc-ircc.c",
           "nsc_ircc_change_speed", 1261, "self != NULL");
    }
#line 8451
    return ((__u8 )0U);
  }
  {
#line 8455
  iobase = self->io.fir_base;
#line 8456
  self->io.speed = speed;
#line 8457
  bank = inb(iobase + 3);
#line 8458
  switch_bank(iobase, 3);
#line 8459
  outb((unsigned char)0, iobase + 1);
#line 8460
  switch_bank(iobase, 224);
#line 8461
  outb((unsigned char)0, iobase + 1);
  }
#line 8464
  if (speed == 9600U) {
#line 8465
    goto case_9600;
  }
#line 8468
  if (speed == 19200U) {
#line 8469
    goto case_19200;
  }
#line 8472
  if (speed == 38400U) {
#line 8473
    goto case_38400;
  }
#line 8476
  if (speed == 57600U) {
#line 8477
    goto case_57600;
  }
#line 8480
  if (speed == 115200U) {
#line 8481
    goto case_115200;
  }
#line 8484
  if (speed == 576000U) {
#line 8485
    goto case_576000;
  }
#line 8488
  if (speed == 1152000U) {
#line 8489
    goto case_1152000;
  }
#line 8492
  if (speed == 4000000U) {
#line 8493
    goto case_4000000;
  }
#line 8496
  goto switch_default;
  case_9600: 
  {
#line 8499
  outb((unsigned char)12, iobase);
  }
#line 8501
  goto ldv_45998;
  case_19200: 
  {
#line 8504
  outb((unsigned char)6, iobase);
  }
#line 8506
  goto ldv_45998;
  case_38400: 
  {
#line 8509
  outb((unsigned char)3, iobase);
  }
#line 8511
  goto ldv_45998;
  case_57600: 
  {
#line 8514
  outb((unsigned char)2, iobase);
  }
#line 8516
  goto ldv_45998;
  case_115200: 
  {
#line 8519
  outb((unsigned char)1, iobase);
  }
#line 8521
  goto ldv_45998;
  case_576000: 
  {
#line 8524
  switch_bank(iobase, 236);
#line 8525
  tmp = inb(iobase + 4);
#line 8526
  outb((unsigned char )((int )((unsigned int )tmp | 4U)), iobase + 4);
#line 8527
  mcr = (__u8 )128U;
#line 8528
  printk((char const   *)"\017%s(), handling baud of 576000\n", "nsc_ircc_change_speed");
  }
#line 8530
  goto ldv_45998;
  case_1152000: 
  {
#line 8533
  mcr = (__u8 )128U;
#line 8534
  printk((char const   *)"\017%s(), handling baud of 1152000\n", "nsc_ircc_change_speed");
  }
#line 8536
  goto ldv_45998;
  case_4000000: 
  {
#line 8539
  mcr = (__u8 )160U;
#line 8540
  printk((char const   *)"\017%s(), handling baud of 4000000\n", "nsc_ircc_change_speed");
  }
#line 8542
  goto ldv_45998;
  switch_default: 
  {
#line 8545
  mcr = (__u8 )160U;
#line 8546
  printk((char const   *)"\017%s(), unknown baud rate of %d\n", "nsc_ircc_change_speed",
         speed);
  }
#line 8548
  goto ldv_45998;
  switch_break: 
  {

  }
  ldv_45998: 
  {
#line 8553
  switch_bank(iobase, 3);
#line 8554
  outb((unsigned char )((int )((unsigned int )mcr | 8U)), iobase + 4);
#line 8555
  tmp_2 = self->io.dongle_id;
#line 8556
  ldv_assert((char const   *)"", tmp_2 == self->io.dongle_id);
#line 8557
  nsc_ircc_change_dongle_speed(iobase, (int )speed, self->io.dongle_id);
#line 8558
  switch_bank(iobase, 3);
#line 8559
  outb((unsigned char)0, iobase + 2);
#line 8560
  outb((unsigned char)1, iobase + 2);
#line 8561
  outb((unsigned char)103, iobase + 2);
#line 8562
  switch_bank(iobase, 224);
#line 8563
  outb((unsigned char)5, iobase + 4);
#line 8564
  switch_bank(iobase, 3);
  }
#line 8566
  if (speed > 115200U) {
    {
#line 8568
    dev->netdev_ops = & nsc_ircc_fir_ops;
#line 8569
    ier = (__u8 )64U;
#line 8570
    nsc_ircc_dma_receive(self);
    }
  } else {
    {
#line 8573
    dev->netdev_ops = & nsc_ircc_sir_ops;
#line 8574
    ier = (__u8 )1U;
    }
  }
  {
#line 8577
  outb((unsigned char )((int )ier), iobase + 1);
#line 8578
  outb((unsigned char )((int )bank), iobase + 3);
  }
#line 8580
  return (ier);
}
}
#line 8583 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static netdev_tx_t nsc_ircc_hard_xmit_sir(struct sk_buff *skb , struct net_device *dev ) 
{ 
  struct nsc_ircc_cb *self ;
  unsigned long flags ;
  int iobase ;
  __s32 speed ;
  __u8 bank ;
  void *tmp ;
  __u32 tmp___0 ;

  {
  {
#line 8586
  flags = 0UL;
#line 8594
  tmp = netdev_priv((struct net_device  const  *)dev);
#line 8595
  self = (struct nsc_ircc_cb *)tmp;
  }
#line 8597
  if ((unsigned long )self == (unsigned long )((struct nsc_ircc_cb *)0)) {
    {
#line 8599
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/nsc-ircc.c",
           "nsc_ircc_hard_xmit_sir", 1370, "self != NULL");
    }
#line 8602
    return ((netdev_tx_t )0);
  }
  {
#line 8606
  iobase = self->io.fir_base;
#line 8607
  netif_stop_queue(dev);
#line 8608
  ldv___ldv_spin_lock_83(& self->lock);
#line 8609
  tmp___0 = irda_get_next_speed((struct sk_buff  const  *)skb);
#line 8610
  speed = (__s32 )tmp___0;
  }
#line 8612
  if ((__u32 )speed != self->io.speed) {
#line 8612
    if (speed != -1) {
#line 8613
      if (skb->len == 0U) {
#line 8614
        if (self->io.direction == 2) {
          {
#line 8616
          nsc_ircc_change_speed(self, (__u32 )speed);
#line 8617
          netif_wake_queue(dev);
          }
        } else {
          {
#line 8620
          self->new_speed = (__u32 )speed;
          }
        }
        {
#line 8623
        dev->trans_start = (unsigned long )jiffies;
#line 8624
        ldv_spin_unlock_irqrestore_84(& self->lock, flags);
#line 8625
        consume_skb(skb);
        }
#line 8627
        return ((netdev_tx_t )0);
      } else {
        {
#line 8629
        self->new_speed = (__u32 )speed;
        }
      }
    }
  }
  {
#line 8634
  bank = inb(iobase + 3);
#line 8635
  self->tx_buff.data = self->tx_buff.head;
#line 8636
  self->tx_buff.len = async_wrap_skb(skb, self->tx_buff.data, self->tx_buff.truesize);
#line 8637
  dev->stats.tx_bytes += (unsigned long )self->tx_buff.len;
#line 8638
  switch_bank(iobase, 3);
#line 8639
  outb((unsigned char)2, iobase + 1);
#line 8640
  outb((unsigned char )((int )bank), iobase + 3);
#line 8641
  dev->trans_start = (unsigned long )jiffies;
#line 8642
  ldv_spin_unlock_irqrestore_84(& self->lock, flags);
#line 8643
  consume_skb(skb);
  }
#line 8645
  return ((netdev_tx_t )0);
}
}
#line 8648 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static netdev_tx_t nsc_ircc_hard_xmit_fir(struct sk_buff *skb , struct net_device *dev ) 
{ 
  struct nsc_ircc_cb *self ;
  unsigned long flags ;
  int iobase ;
  __s32 speed ;
  __u8 bank ;
  int mtt ;
  int diff ;
  void *tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;

  {
  {
#line 8651
  flags = 0UL;
#line 8662
  tmp = netdev_priv((struct net_device  const  *)dev);
#line 8663
  self = (struct nsc_ircc_cb *)tmp;
#line 8664
  iobase = self->io.fir_base;
#line 8665
  netif_stop_queue(dev);
#line 8666
  ldv___ldv_spin_lock_86(& self->lock);
#line 8667
  tmp___0 = irda_get_next_speed((struct sk_buff  const  *)skb);
#line 8668
  speed = (__s32 )tmp___0;
  }
#line 8670
  if ((__u32 )speed != self->io.speed) {
#line 8670
    if (speed != -1) {
#line 8671
      if (skb->len == 0U) {
#line 8672
        if (self->tx_fifo.len == 0) {
          {
#line 8674
          nsc_ircc_change_speed(self, (__u32 )speed);
#line 8675
          netif_wake_queue(dev);
          }
        } else {
          {
#line 8678
          self->new_speed = (__u32 )speed;
          }
        }
        {
#line 8681
        dev->trans_start = (unsigned long )jiffies;
#line 8682
        ldv_spin_unlock_irqrestore_84(& self->lock, flags);
#line 8683
        consume_skb(skb);
        }
#line 8685
        return ((netdev_tx_t )0);
      } else {
        {
#line 8687
        self->new_speed = (__u32 )speed;
        }
      }
    }
  }
  {
#line 8692
  bank = inb(iobase + 3);
#line 8693
  self->tx_fifo.queue[self->tx_fifo.free].start = self->tx_fifo.tail;
#line 8694
  self->tx_fifo.queue[self->tx_fifo.free].len = (int )skb->len;
#line 8695
  self->tx_fifo.tail += (unsigned long )skb->len;
#line 8696
  dev->stats.tx_bytes += (unsigned long )skb->len;
#line 8697
  skb_copy_from_linear_data((struct sk_buff  const  *)skb, self->tx_fifo.queue[self->tx_fifo.free].start,
                            (unsigned int const   )skb->len);
#line 8699
  (self->tx_fifo.len) ++;
#line 8700
  (self->tx_fifo.free) ++;
  }
#line 8702
  if (self->tx_fifo.len == 1) {
    {
#line 8704
    tmp___1 = irda_get_mtt((struct sk_buff  const  *)skb);
#line 8705
    mtt = (int )tmp___1;
    }
#line 8707
    if (mtt != 0) {
      {
#line 8709
      do_gettimeofday(& self->now);
#line 8710
      diff = (int )((unsigned int )self->now.tv_usec - (unsigned int )self->stamp.tv_usec);
      }
#line 8712
      if (diff < 0) {
        {
#line 8713
        diff += 1000000;
        }
      }
#line 8716
      if (mtt > diff) {
        {
#line 8717
        mtt -= diff;
        }
#line 8718
        if (mtt > 125) {
          {
#line 8720
          mtt /= 125;
#line 8721
          switch_bank(iobase, 232);
#line 8722
          outb((unsigned char )((int )((unsigned char )mtt)), iobase);
#line 8723
          outb((unsigned char )((int )((unsigned char )(mtt >> 8)) & 15), iobase + 1);
#line 8724
          outb((unsigned char)1, iobase + 2);
#line 8725
          self->io.direction = 1;
#line 8726
          switch_bank(iobase, 3);
#line 8727
          outb((unsigned char)128, iobase + 1);
          }
#line 8729
          goto out;
        } else {
          {
#line 8732
          __udelay((unsigned long )mtt);
          }
        }
      }
    }
    {
#line 8740
    switch_bank(iobase, 3);
#line 8741
    outb((unsigned char)16, iobase + 1);
#line 8742
    nsc_ircc_dma_xmit(self, iobase);
    }
  }
  out: 
  {

  }
#line 8747
  if (self->tx_fifo.free <= 6) {
#line 8747
    if (self->new_speed == 0U) {
      {
#line 8749
      netif_wake_queue(self->netdev);
      }
    }
  }
  {
#line 8754
  outb((unsigned char )((int )bank), iobase + 3);
#line 8755
  dev->trans_start = (unsigned long )jiffies;
#line 8756
  ldv_spin_unlock_irqrestore_84(& self->lock, flags);
#line 8757
  consume_skb(skb);
  }
#line 8759
  return ((netdev_tx_t )0);
}
}
#line 8762 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void nsc_ircc_dma_xmit(struct nsc_ircc_cb *self , int iobase ) 
{ 
  int bsr ;
  unsigned char tmp ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;

  {
  {
#line 8770
  tmp = inb(iobase + 3);
#line 8771
  bsr = (int )tmp;
#line 8772
  switch_bank(iobase, 3);
#line 8773
  tmp___0 = inb(iobase + 4);
#line 8774
  outb((unsigned char )((int )tmp___0 & 251), iobase + 4);
#line 8775
  self->io.direction = 1;
#line 8776
  switch_bank(iobase, 224);
#line 8777
  outb((unsigned char)11, iobase + 2);
#line 8778
  irda_setup_dma(self->io.dma, (unsigned long long )((long )self->tx_fifo.queue[self->tx_fifo.ptr].start - (long )self->tx_buff.head) + self->tx_buff_dma,
                 self->tx_fifo.queue[self->tx_fifo.ptr].len, 8);
#line 8780
  switch_bank(iobase, 3);
#line 8781
  tmp___1 = inb(iobase + 4);
#line 8782
  outb((unsigned char )((int )((unsigned int )tmp___1 | 28U)), iobase + 4);
#line 8783
  outb((unsigned char )((int )((unsigned char )bsr)), iobase + 3);
  }
#line 8785
  return;
}
}
#line 8788 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_pio_write(int iobase , __u8 *buf , int len , int fifo_size ) 
{ 
  int actual ;
  __u8 bank ;
  unsigned char tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 8796
  actual = 0;
  }
#line 8797
  if (irda_debug > 3U) {
    {
#line 8799
    printk((char const   *)"\017%s()\n", "nsc_ircc_pio_write");
    }
  }
  {
#line 8804
  bank = inb(iobase + 3);
#line 8805
  switch_bank(iobase, 3);
#line 8806
  tmp = inb_p(iobase + 5);
  }
#line 8808
  if (((int )tmp & 64) == 0) {
#line 8809
    if (irda_debug > 3U) {
      {
#line 8811
      printk((char const   *)"\017%s(), warning, FIFO not empty yet!\n", "nsc_ircc_pio_write");
      }
    }
    {
#line 8815
    fifo_size += -17;
    }
  }
#line 8818
  goto ldv_46044;
  ldv_46043: 
  {
#line 8821
  tmp___0 = actual;
#line 8822
  actual ++;
#line 8823
  outb((unsigned char )((int )*(buf + (unsigned long )tmp___0)), iobase);
  }
  ldv_46044: 
  {
#line 8826
  tmp___1 = fifo_size;
#line 8827
  fifo_size --;
  }
#line 8828
  if (tmp___1 > 0) {
#line 8828
    if (actual < len) {
#line 8829
      goto ldv_46043;
    }
  }
#line 8832
  if (irda_debug > 3U) {
    {
#line 8834
    printk((char const   *)"\017%s(), fifo_size %d ; %d sent of %d\n", "nsc_ircc_pio_write",
           fifo_size, actual, len);
    }
  }
  {
#line 8840
  outb((unsigned char )((int )bank), iobase + 3);
  }
#line 8842
  return (actual);
}
}
#line 8845 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_dma_xmit_complete(struct nsc_ircc_cb *self ) 
{ 
  int iobase ;
  __u8 bank ;
  int ret ;
  unsigned char tmp ;
  unsigned char tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 8855
  ret = 1;
  }
#line 8856
  if (irda_debug > 1U) {
    {
#line 8858
    printk((char const   *)"\017%s()\n", "nsc_ircc_dma_xmit_complete");
    }
  }
  {
#line 8863
  iobase = self->io.fir_base;
#line 8864
  bank = inb(iobase + 3);
#line 8865
  switch_bank(iobase, 3);
#line 8866
  tmp = inb(iobase + 4);
#line 8867
  outb((unsigned char )((int )tmp & 251), iobase + 4);
#line 8868
  tmp___0 = inb(iobase + 7);
  }
#line 8870
  if (((int )tmp___0 & 64) != 0) {
    {
#line 8872
    ((self->netdev)->stats.tx_errors) ++;
#line 8873
    ((self->netdev)->stats.tx_fifo_errors) ++;
#line 8874
    outb((unsigned char)64, iobase + 7);
    }
  } else {
    {
#line 8877
    ((self->netdev)->stats.tx_packets) ++;
    }
  }
  {
#line 8879
  (self->tx_fifo.ptr) ++;
#line 8880
  (self->tx_fifo.len) --;
  }
#line 8881
  if (self->tx_fifo.len != 0) {
    {
#line 8883
    nsc_ircc_dma_xmit(self, iobase);
#line 8884
    ret = 0;
    }
  } else {
    {
#line 8887
    tmp___2 = 0;
#line 8888
    self->tx_fifo.free = tmp___2;
#line 8889
    tmp___1 = tmp___2;
#line 8890
    self->tx_fifo.ptr = tmp___1;
#line 8891
    self->tx_fifo.len = tmp___1;
#line 8892
    self->tx_fifo.tail = (void *)self->tx_buff.head;
    }
  }
#line 8894
  if (self->tx_fifo.free <= 6) {
#line 8894
    if (self->new_speed == 0U) {
      {
#line 8896
      netif_wake_queue(self->netdev);
      }
    }
  }
  {
#line 8901
  outb((unsigned char )((int )bank), iobase + 3);
  }
#line 8903
  return (ret);
}
}
#line 8906 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_dma_receive(struct nsc_ircc_cb *self ) 
{ 
  int iobase ;
  __u8 bsr ;
  int tmp ;
  int tmp___0 ;
  unsigned char tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned char tmp___4 ;

  {
  {
#line 8918
  iobase = self->io.fir_base;
#line 8919
  tmp___0 = 0;
#line 8920
  self->tx_fifo.free = tmp___0;
#line 8921
  tmp = tmp___0;
#line 8922
  self->tx_fifo.ptr = tmp;
#line 8923
  self->tx_fifo.len = tmp;
#line 8924
  self->tx_fifo.tail = (void *)self->tx_buff.head;
#line 8925
  bsr = inb(iobase + 3);
#line 8926
  switch_bank(iobase, 3);
#line 8927
  tmp___1 = inb(iobase + 4);
#line 8928
  outb((unsigned char )((int )tmp___1 & 251), iobase + 4);
#line 8929
  switch_bank(iobase, 224);
#line 8930
  outb((unsigned char)3, iobase + 2);
#line 8931
  self->io.direction = 2;
#line 8932
  self->rx_buff.data = self->rx_buff.head;
#line 8933
  switch_bank(iobase, 3);
#line 8934
  outb((unsigned char)3, iobase + 2);
#line 8935
  tmp___2 = 0;
#line 8936
  self->st_fifo.pending_bytes = tmp___2;
#line 8937
  self->st_fifo.len = tmp___2;
#line 8938
  tmp___3 = 0;
#line 8939
  self->st_fifo.head = tmp___3;
#line 8940
  self->st_fifo.tail = tmp___3;
#line 8941
  irda_setup_dma(self->io.dma, self->rx_buff_dma, self->rx_buff.truesize, 4);
#line 8942
  switch_bank(iobase, 3);
#line 8943
  tmp___4 = inb(iobase + 4);
#line 8944
  outb((unsigned char )((int )((unsigned int )tmp___4 | 4U)), iobase + 4);
#line 8945
  outb((unsigned char )((int )bsr), iobase + 3);
  }
#line 8947
  return (0);
}
}
#line 8950 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_dma_receive_complete(struct nsc_ircc_cb *self , int iobase ) 
{ 
  struct st_fifo *st_fifo ;
  struct sk_buff *skb ;
  __u8 status ;
  __u8 bank ;
  int len ;
  unsigned char tmp ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;
  int tmp___2 ;

  {
  {
#line 8963
  st_fifo = & self->st_fifo;
#line 8964
  bank = inb(iobase + 3);
#line 8965
  switch_bank(iobase, 236);
  }
#line 8967
  goto ldv_46068;
  ldv_46069: 
  {
#line 8970
  tmp = inb(iobase + 6);
#line 8971
  tmp___0 = inb(iobase + 7);
#line 8972
  len = (int )tmp | (((int )tmp___0 & 31) << 8);
  }
#line 8974
  if (st_fifo->tail > 6) {
    {
#line 8976
    printk((char const   *)"\017%s(), window is full!\n", "nsc_ircc_dma_receive_complete");
    }
#line 8978
    goto ldv_46068;
  }
  {
#line 8981
  st_fifo->entries[st_fifo->tail].status = (int )status;
#line 8982
  st_fifo->entries[st_fifo->tail].len = len;
#line 8983
  st_fifo->pending_bytes += len;
#line 8984
  (st_fifo->tail) ++;
#line 8985
  (st_fifo->len) ++;
  }
  ldv_46068: 
  {
#line 8988
  status = inb(iobase + 5);
  }
#line 8990
  if ((int )((signed char )status) < 0) {
#line 8991
    goto ldv_46069;
  }
#line 8994
  goto ldv_46072;
  ldv_46071: 
  {
#line 8996
  status = (__u8 )st_fifo->entries[st_fifo->head].status;
#line 8997
  len = st_fifo->entries[st_fifo->head].len;
#line 8998
  st_fifo->pending_bytes -= len;
#line 8999
  (st_fifo->head) ++;
#line 9000
  (st_fifo->len) --;
  }
#line 9001
  if (((int )status & 95) != 0) {
#line 9002
    if (((int )status & 64) != 0) {
      {
#line 9003
      (self->netdev)->stats.rx_errors += (unsigned long )len;
      }
    } else {
      {
#line 9005
      ((self->netdev)->stats.rx_errors) ++;
#line 9006
      self->rx_buff.data += (unsigned long )len;
      }
#line 9007
      if (((int )status & 16) != 0) {
        {
#line 9008
        ((self->netdev)->stats.rx_length_errors) ++;
        }
      }
#line 9011
      if (((int )status & 8) != 0) {
        {
#line 9012
        ((self->netdev)->stats.rx_frame_errors) ++;
        }
      }
#line 9015
      if (((int )status & 4) != 0) {
        {
#line 9016
        ((self->netdev)->stats.rx_crc_errors) ++;
        }
      }
    }
#line 9020
    if (((int )status & 2) != 0) {
      {
#line 9021
      ((self->netdev)->stats.rx_fifo_errors) ++;
      }
    }
#line 9024
    if ((int )status & 1) {
      {
#line 9025
      ((self->netdev)->stats.rx_fifo_errors) ++;
      }
    }
  } else {
#line 9029
    if (st_fifo->pending_bytes < self->io.fifo_size) {
      {
#line 9031
      switch_bank(iobase, 3);
#line 9032
      tmp___1 = inb(iobase + 5);
      }
#line 9034
      if ((int )tmp___1 & 1) {
        {
#line 9036
        (st_fifo->head) --;
#line 9037
        (st_fifo->len) ++;
#line 9038
        st_fifo->pending_bytes += len;
#line 9039
        st_fifo->entries[st_fifo->head].status = (int )status;
#line 9040
        st_fifo->entries[st_fifo->head].len = len;
#line 9041
        switch_bank(iobase, 232);
#line 9042
        outb((unsigned char)2, iobase);
#line 9043
        outb((unsigned char)0, iobase + 1);
#line 9044
        outb((unsigned char)1, iobase + 2);
#line 9045
        outb((unsigned char )((int )bank), iobase + 3);
        }
#line 9047
        return (0);
      }
    }
    {
#line 9053
    do_gettimeofday(& self->stamp);
#line 9054
    skb = dev_alloc_skb((unsigned int )(len + 1));
    }
#line 9056
    if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
      {
#line 9058
      tmp___2 = net_ratelimit();
      }
#line 9060
      if (tmp___2 != 0) {
        {
#line 9062
        printk((char const   *)"\f%s(), memory squeeze, dropping frame.\n", "nsc_ircc_dma_receive_complete");
        }
      }
      {
#line 9067
      ((self->netdev)->stats.rx_dropped) ++;
#line 9068
      outb((unsigned char )((int )bank), iobase + 3);
      }
#line 9070
      return (0);
    }
    {
#line 9074
    skb_reserve(skb, 1);
    }
#line 9076
    if (self->io.speed <= 3999999U) {
      {
#line 9078
      skb_put(skb, (unsigned int )(len + -2));
#line 9079
      skb_copy_to_linear_data(skb, (void const   *)self->rx_buff.data, (unsigned int const   )(len + -2));
      }
    } else {
      {
#line 9083
      skb_put(skb, (unsigned int )(len + -4));
#line 9084
      skb_copy_to_linear_data(skb, (void const   *)self->rx_buff.data, (unsigned int const   )(len + -4));
      }
    }
    {
#line 9088
    self->rx_buff.data += (unsigned long )len;
#line 9089
    (self->netdev)->stats.rx_bytes += (unsigned long )len;
#line 9090
    ((self->netdev)->stats.rx_packets) ++;
#line 9091
    skb->dev = self->netdev;
#line 9092
    skb_reset_mac_header(skb);
#line 9093
    skb->protocol = (__be16 )5888U;
#line 9094
    netif_rx(skb);
    }
  }
  ldv_46072: 
  {

  }
#line 9098
  if (st_fifo->len > 0) {
#line 9099
    goto ldv_46071;
  }
  {
#line 9103
  outb((unsigned char )((int )bank), iobase + 3);
  }
#line 9105
  return (1);
}
}
#line 9108 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void nsc_ircc_pio_receive(struct nsc_ircc_cb *self ) 
{ 
  __u8 byte ;
  int iobase ;
  unsigned char tmp ;

  {
  {
#line 9114
  iobase = self->io.fir_base;
  }
  ldv_46079: 
  {
#line 9117
  byte = inb(iobase);
#line 9118
  async_unwrap_char(self->netdev, & (self->netdev)->stats, & self->rx_buff, (__u8 )((int )byte));
#line 9119
  tmp = inb(iobase + 5);
  }
#line 9121
  if ((int )tmp & 1) {
#line 9122
    goto ldv_46079;
  }
#line 9125
  return;
}
}
#line 9128 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void nsc_ircc_sir_interrupt(struct nsc_ircc_cb *self , int eir ) 
{ 
  int actual ;

  {
#line 9132
  if ((eir & 2) != 0) {
    {
#line 9134
    actual = nsc_ircc_pio_write(self->io.fir_base, self->tx_buff.data, self->tx_buff.len,
                                self->io.fifo_size);
#line 9136
    self->tx_buff.data += (unsigned long )actual;
#line 9137
    self->tx_buff.len -= actual;
#line 9138
    self->io.direction = 1;
    }
#line 9140
    if (self->tx_buff.len > 0) {
      {
#line 9141
      self->ier = (__u8 )2U;
      }
    } else {
      {
#line 9144
      ((self->netdev)->stats.tx_packets) ++;
#line 9145
      netif_wake_queue(self->netdev);
#line 9146
      self->ier = (__u8 )32U;
      }
    }
  }
#line 9151
  if ((eir & 32) != 0) {
    {
#line 9152
    self->io.direction = 2;
#line 9153
    self->ier = (__u8 )1U;
    }
#line 9154
    if (self->new_speed != 0U) {
#line 9155
      if (irda_debug > 1U) {
        {
#line 9157
        printk((char const   *)"\017%s(), Changing speed!\n", "nsc_ircc_sir_interrupt");
        }
      }
      {
#line 9162
      self->ier = nsc_ircc_change_speed(self, self->new_speed);
#line 9163
      self->new_speed = 0U;
#line 9164
      netif_wake_queue(self->netdev);
      }
#line 9166
      if (self->io.speed > 115200U) {
#line 9167
        return;
      }
    }
  }
#line 9174
  if (eir & 1) {
    {
#line 9176
    nsc_ircc_pio_receive(self);
#line 9177
    self->ier = (__u8 )1U;
    }
  }
#line 9181
  return;
}
}
#line 9184 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void nsc_ircc_fir_interrupt(struct nsc_ircc_cb *self , int iobase , int eir ) 
{ 
  __u8 bank ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 9194
  bank = inb(iobase + 3);
  }
#line 9196
  if ((eir & 64) != 0) {
    {
#line 9198
    tmp = nsc_ircc_dma_receive_complete(self, iobase);
    }
#line 9200
    if (tmp != 0) {
      {
#line 9201
      self->ier = (__u8 )64U;
      }
    } else {
      {
#line 9203
      self->ier = (__u8 )192U;
      }
    }
  } else
#line 9206
  if ((eir & 128) != 0) {
    {
#line 9208
    switch_bank(iobase, 232);
#line 9209
    outb((unsigned char)0, iobase + 2);
#line 9210
    switch_bank(iobase, 3);
#line 9211
    outb((unsigned char)128, iobase + 7);
    }
#line 9213
    if (self->io.direction == 1) {
      {
#line 9215
      nsc_ircc_dma_xmit(self, iobase);
#line 9216
      self->ier = (__u8 )16U;
      }
    } else {
      {
#line 9220
      tmp___0 = nsc_ircc_dma_receive_complete(self, iobase);
      }
#line 9222
      if (tmp___0 != 0) {
        {
#line 9223
        self->ier = (__u8 )64U;
        }
      } else {
        {
#line 9225
        self->ier = (__u8 )192U;
        }
      }
    }
  } else
#line 9229
  if ((eir & 16) != 0) {
    {
#line 9231
    tmp___3 = nsc_ircc_dma_xmit_complete(self);
    }
#line 9233
    if (tmp___3 != 0) {
#line 9234
      if (self->new_speed != 0U) {
        {
#line 9235
        self->ier = (__u8 )32U;
        }
      } else {
        {
#line 9238
        tmp___2 = irda_device_txqueue_empty((struct net_device  const  *)self->netdev);
        }
#line 9240
        if (tmp___2 != 0) {
          {
#line 9242
          nsc_ircc_dma_receive(self);
#line 9243
          self->ier = (__u8 )64U;
          }
        } else {
          {
#line 9247
          tmp___1 = net_ratelimit();
          }
#line 9249
          if (tmp___1 != 0) {
            {
#line 9251
            printk((char const   *)"\f%s(), potential Tx queue lockup !\n", "nsc_ircc_fir_interrupt");
            }
          }
        }
      }
    } else {
      {
#line 9258
      self->ier = (__u8 )16U;
      }
    }
  } else
#line 9261
  if ((eir & 32) != 0) {
    {
#line 9263
    self->ier = nsc_ircc_change_speed(self, self->new_speed);
#line 9264
    self->new_speed = 0U;
#line 9265
    netif_wake_queue(self->netdev);
    }
  }
  {
#line 9270
  outb((unsigned char )((int )bank), iobase + 3);
  }
#line 9272
  return;
}
}
#line 9275 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static irqreturn_t nsc_ircc_interrupt(int irq___0 , void *dev_id ) 
{ 
  struct net_device *dev ;
  struct nsc_ircc_cb *self ;
  __u8 bsr ;
  __u8 eir ;
  int iobase ;
  void *tmp ;
  unsigned char tmp___0 ;

  {
  {
#line 9286
  dev = (struct net_device *)dev_id;
#line 9287
  tmp = netdev_priv((struct net_device  const  *)dev);
#line 9288
  self = (struct nsc_ircc_cb *)tmp;
#line 9289
  ldv_spin_lock_89(& self->lock);
#line 9290
  iobase = self->io.fir_base;
#line 9291
  bsr = inb(iobase + 3);
#line 9292
  switch_bank(iobase, 3);
#line 9293
  self->ier = inb(iobase + 1);
#line 9294
  tmp___0 = inb(iobase + 2);
#line 9295
  eir = (__u8 )((int )tmp___0 & (int )self->ier);
#line 9296
  outb((unsigned char)0, iobase + 1);
  }
#line 9298
  if ((unsigned int )eir != 0U) {
#line 9299
    if (self->io.speed > 115200U) {
      {
#line 9301
      nsc_ircc_fir_interrupt(self, iobase, (int )eir);
      }
    } else {
      {
#line 9305
      nsc_ircc_sir_interrupt(self, (int )eir);
      }
    }
  }
  {
#line 9311
  outb((unsigned char )((int )self->ier), iobase + 1);
#line 9312
  outb((unsigned char )((int )bsr), iobase + 3);
#line 9313
  ldv_spin_unlock_90(& self->lock);
  }
#line 9315
  return ((irqreturn_t )((unsigned int )eir != 0U));
}
}
#line 9318 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_is_receiving(struct nsc_ircc_cb *self ) 
{ 
  unsigned long flags ;
  int status ;
  int iobase ;
  __u8 bank ;
  unsigned char tmp ;

  {
  {
#line 9320
  flags = 0UL;
#line 9326
  status = 0;
  }
#line 9327
  if ((unsigned long )self == (unsigned long )((struct nsc_ircc_cb *)0)) {
    {
#line 9329
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/nsc-ircc.c",
           "nsc_ircc_is_receiving", 2141, "self != NULL");
    }
#line 9332
    return (0);
  }
  {
#line 9336
  ldv___ldv_spin_lock_91(& self->lock);
  }
#line 9338
  if (self->io.speed > 115200U) {
    {
#line 9340
    iobase = self->io.fir_base;
#line 9341
    bank = inb(iobase + 3);
#line 9342
    switch_bank(iobase, 224);
#line 9343
    tmp = inb(iobase + 7);
    }
#line 9345
    if (((int )tmp & 63) != 0) {
      {
#line 9346
      status = 1;
      }
    }
    {
#line 9350
    outb((unsigned char )((int )bank), iobase + 3);
    }
  } else {
    {
#line 9353
    status = self->rx_buff.state != 0;
    }
  }
  {
#line 9356
  ldv_spin_unlock_irqrestore_84(& self->lock, flags);
  }
#line 9358
  return (status);
}
}
#line 9361 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_net_open(struct net_device *dev ) 
{ 
  struct nsc_ircc_cb *self ;
  int iobase ;
  char hwname[32U] ;
  __u8 bank ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 9373
  if (irda_debug > 3U) {
    {
#line 9375
    printk((char const   *)"\017%s()\n", "nsc_ircc_net_open");
    }
  }
#line 9379
  if ((unsigned long )dev == (unsigned long )((struct net_device *)0)) {
    {
#line 9381
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/nsc-ircc.c",
           "nsc_ircc_net_open", 2179, "dev != NULL");
    }
#line 9384
    return (-1);
  }
  {
#line 9388
  tmp = netdev_priv((struct net_device  const  *)dev);
#line 9389
  self = (struct nsc_ircc_cb *)tmp;
  }
#line 9391
  if ((unsigned long )self == (unsigned long )((struct nsc_ircc_cb *)0)) {
    {
#line 9393
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/nsc-ircc.c",
           "nsc_ircc_net_open", 2182, "self != NULL");
    }
#line 9396
    return (0);
  }
  {
#line 9400
  iobase = self->io.fir_base;
#line 9401
  tmp___1 = ldv_request_irq_93((unsigned int )self->io.irq, & nsc_ircc_interrupt,
                               0UL, (char const   *)(& dev->name), (void *)dev);
  }
#line 9404
  if (tmp___1 != 0) {
    {
#line 9406
    tmp___0 = net_ratelimit();
    }
#line 9408
    if (tmp___0 != 0) {
      {
#line 9410
      printk((char const   *)"\f%s, unable to allocate irq=%d\n", driver_name, self->io.irq);
      }
    }
#line 9414
    return (-11);
  }
  {
#line 9418
  tmp___3 = request_dma((unsigned int )self->io.dma, (char const   *)(& dev->name));
  }
#line 9420
  if (tmp___3 != 0) {
    {
#line 9422
    tmp___2 = net_ratelimit();
    }
#line 9424
    if (tmp___2 != 0) {
      {
#line 9426
      printk((char const   *)"\f%s, unable to allocate dma=%d\n", driver_name, self->io.dma);
      }
    }
    {
#line 9431
    ldv_free_irq_94((unsigned int )self->io.irq, (void *)dev);
    }
#line 9433
    return (-11);
  }
  {
#line 9437
  bank = inb(iobase + 3);
#line 9438
  switch_bank(iobase, 3);
#line 9439
  outb((unsigned char)5, iobase + 1);
#line 9440
  outb((unsigned char )((int )bank), iobase + 3);
#line 9441
  netif_start_queue(dev);
#line 9442
  sprintf((char *)(& hwname), (char const   *)"NSC-FIR @ 0x%03x", self->io.fir_base);
#line 9443
  self->irlap = irlap_open(dev, & self->qos, (char const   *)(& hwname));
  }
#line 9445
  return (0);
}
}
#line 9448 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_net_close(struct net_device *dev ) 
{ 
  struct nsc_ircc_cb *self ;
  int iobase ;
  __u8 bank ;
  void *tmp ;

  {
#line 9455
  if (irda_debug > 3U) {
    {
#line 9457
    printk((char const   *)"\017%s()\n", "nsc_ircc_net_close");
    }
  }
#line 9461
  if ((unsigned long )dev == (unsigned long )((struct net_device *)0)) {
    {
#line 9463
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/nsc-ircc.c",
           "nsc_ircc_net_close", 2241, "dev != NULL");
    }
#line 9466
    return (-1);
  }
  {
#line 9470
  tmp = netdev_priv((struct net_device  const  *)dev);
#line 9471
  self = (struct nsc_ircc_cb *)tmp;
  }
#line 9473
  if ((unsigned long )self == (unsigned long )((struct nsc_ircc_cb *)0)) {
    {
#line 9475
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/nsc-ircc.c",
           "nsc_ircc_net_close", 2244, "self != NULL");
    }
#line 9478
    return (0);
  }
  {
#line 9482
  netif_stop_queue(dev);
  }
#line 9484
  if ((unsigned long )self->irlap != (unsigned long )((struct irlap_cb *)0)) {
    {
#line 9486
    irlap_close(self->irlap);
    }
  }
  {
#line 9491
  self->irlap = (struct irlap_cb *)0;
#line 9492
  iobase = self->io.fir_base;
#line 9493
  disable_dma((unsigned int )self->io.dma);
#line 9494
  bank = inb(iobase + 3);
#line 9495
  switch_bank(iobase, 3);
#line 9496
  outb((unsigned char)0, iobase + 1);
#line 9497
  ldv_free_irq_95((unsigned int )self->io.irq, (void *)dev);
#line 9498
  free_dma((unsigned int )self->io.dma);
#line 9499
  outb((unsigned char )((int )bank), iobase + 3);
  }
#line 9501
  return (0);
}
}
#line 9504 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_net_ioctl(struct net_device *dev , struct ifreq *rq , int cmd ) 
{ 
  struct if_irda_req *irq___0 ;
  struct nsc_ircc_cb *self ;
  unsigned long flags ;
  int ret ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 9508
  flags = 0UL;
#line 9517
  irq___0 = (struct if_irda_req *)rq;
#line 9518
  ret = 0;
  }
#line 9519
  if ((unsigned long )dev == (unsigned long )((struct net_device *)0)) {
    {
#line 9521
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/nsc-ircc.c",
           "nsc_ircc_net_ioctl", 2287, "dev != NULL");
    }
#line 9524
    return (-1);
  }
  {
#line 9528
  tmp = netdev_priv((struct net_device  const  *)dev);
#line 9529
  self = (struct nsc_ircc_cb *)tmp;
  }
#line 9531
  if ((unsigned long )self == (unsigned long )((struct nsc_ircc_cb *)0)) {
    {
#line 9533
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/nsc-ircc.c",
           "nsc_ircc_net_ioctl", 2291, "self != NULL");
    }
#line 9536
    return (-1);
  }
#line 9539
  if (irda_debug > 1U) {
    {
#line 9541
    printk((char const   *)"\017%s(), %s, (cmd=0x%X)\n", "nsc_ircc_net_ioctl", (char *)(& dev->name),
           cmd);
    }
  }
#line 9547
  if (cmd == 35314) {
#line 9548
    goto case_35314;
  }
#line 9551
  if (cmd == 35315) {
#line 9552
    goto case_35315;
  }
#line 9555
  if (cmd == 35317) {
#line 9556
    goto case_35317;
  }
#line 9559
  goto switch_default;
  case_35314: 
  {
#line 9562
  tmp___0 = capable(12);
  }
#line 9564
  if (tmp___0) {
    {
#line 9565
    tmp___1 = 0;
    }
  } else {
    {
#line 9567
    tmp___1 = 1;
    }
  }
#line 9569
  if (tmp___1) {
    {
#line 9570
    ret = -1;
    }
#line 9571
    goto ldv_46137;
  }
  {
#line 9575
  ldv___ldv_spin_lock_96(& self->lock);
#line 9576
  nsc_ircc_change_speed(self, (__u32 )irq___0->ifr_ifru.ifru_qos.baudrate);
#line 9577
  ldv_spin_unlock_irqrestore_84(& self->lock, flags);
  }
#line 9579
  goto ldv_46137;
  case_35315: 
  {
#line 9582
  tmp___2 = capable(12);
  }
#line 9584
  if (tmp___2) {
    {
#line 9585
    tmp___3 = 0;
    }
  } else {
    {
#line 9587
    tmp___3 = 1;
    }
  }
#line 9589
  if (tmp___3) {
    {
#line 9590
    ret = -1;
    }
#line 9591
    goto ldv_46137;
  }
  {
#line 9595
  irda_device_set_media_busy(self->netdev, 1);
  }
#line 9597
  goto ldv_46137;
  case_35317: 
  {
#line 9600
  tmp___4 = nsc_ircc_is_receiving(self);
#line 9601
  irq___0->ifr_ifru.ifru_receiving = (unsigned int )tmp___4;
  }
#line 9603
  goto ldv_46137;
  switch_default: 
  {
#line 9605
  ret = -95;
  }
  switch_break: 
  {

  }
  ldv_46137: 
  {

  }
#line 9609
  return (ret);
}
}
#line 9612 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_suspend(struct platform_device *dev , pm_message_t state ) 
{ 
  struct nsc_ircc_cb *self ;
  void *tmp ;
  int bank ;
  unsigned long flags ;
  int iobase ;
  unsigned char tmp___0 ;
  bool tmp___1 ;

  {
  {
#line 9617
  flags = 0UL;
#line 9623
  tmp = platform_get_drvdata((struct platform_device  const  *)dev);
#line 9624
  self = (struct nsc_ircc_cb *)tmp;
#line 9625
  iobase = self->io.fir_base;
  }
#line 9627
  if (self->io.suspended != 0) {
#line 9628
    return (0);
  }
#line 9631
  if (irda_debug != 0U) {
    {
#line 9633
    printk((char const   *)"\017%s, Suspending\n", driver_name);
    }
  }
  {
#line 9638
  rtnl_lock();
#line 9639
  tmp___1 = netif_running((struct net_device  const  *)self->netdev);
  }
#line 9641
  if ((int )tmp___1) {
    {
#line 9643
    netif_device_detach(self->netdev);
#line 9644
    ldv___ldv_spin_lock_98(& self->lock);
#line 9645
    tmp___0 = inb(iobase + 3);
#line 9646
    bank = (int )tmp___0;
#line 9647
    switch_bank(iobase, 3);
#line 9648
    outb((unsigned char)0, iobase + 1);
#line 9649
    outb((unsigned char )((int )((unsigned char )bank)), iobase + 3);
#line 9650
    ldv_spin_unlock_irqrestore_84(& self->lock, flags);
#line 9651
    ldv_free_irq_100((unsigned int )self->io.irq, (void *)self->netdev);
#line 9652
    disable_dma((unsigned int )self->io.dma);
    }
  }
  {
#line 9657
  self->io.suspended = 1;
#line 9658
  rtnl_unlock();
  }
#line 9660
  return (0);
}
}
#line 9663 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int nsc_ircc_resume(struct platform_device *dev ) 
{ 
  struct nsc_ircc_cb *self ;
  void *tmp ;
  unsigned long flags ;
  int tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;

  {
  {
#line 9667
  flags = 0UL;
#line 9673
  tmp = platform_get_drvdata((struct platform_device  const  *)dev);
#line 9674
  self = (struct nsc_ircc_cb *)tmp;
  }
#line 9676
  if (self->io.suspended == 0) {
#line 9677
    return (0);
  }
#line 9680
  if (irda_debug != 0U) {
    {
#line 9682
    printk((char const   *)"\017%s, Waking up\n", driver_name);
    }
  }
  {
#line 9687
  rtnl_lock();
#line 9688
  nsc_ircc_setup(& self->io);
#line 9689
  nsc_ircc_init_dongle_interface(self->io.fir_base, self->io.dongle_id);
#line 9690
  tmp___2 = netif_running((struct net_device  const  *)self->netdev);
  }
#line 9692
  if ((int )tmp___2) {
    {
#line 9694
    tmp___1 = ldv_request_irq_93((unsigned int )self->io.irq, & nsc_ircc_interrupt,
                                 0UL, (char const   *)(& (self->netdev)->name), (void *)self->netdev);
    }
#line 9697
    if (tmp___1 != 0) {
      {
#line 9699
      tmp___0 = net_ratelimit();
      }
#line 9701
      if (tmp___0 != 0) {
        {
#line 9703
        printk((char const   *)"\f%s, unable to allocate irq=%d\n", driver_name, self->io.irq);
        }
      }
      {
#line 9708
      unregister_netdevice(self->netdev);
      }
    } else {
      {
#line 9712
      ldv___ldv_spin_lock_102(& self->lock);
#line 9713
      nsc_ircc_change_speed(self, self->io.speed);
#line 9714
      ldv_spin_unlock_irqrestore_84(& self->lock, flags);
#line 9715
      netif_device_attach(self->netdev);
      }
    }
  } else {
    {
#line 9720
    ldv___ldv_spin_lock_104(& self->lock);
#line 9721
    nsc_ircc_change_speed(self, 9600U);
#line 9722
    ldv_spin_unlock_irqrestore_84(& self->lock, flags);
    }
  }
  {
#line 9726
  self->io.suspended = 0;
#line 9727
  rtnl_unlock();
  }
#line 9729
  return (0);
}
}
#line 9732
void ldv_dispatch_deregister_10_1(struct platform_driver *arg0 ) ;
#line 9733
void ldv_dispatch_deregister_13_1(struct net_device *arg0 ) ;
#line 9734
void ldv_dispatch_insmod_deregister_14_2(void) ;
#line 9735
void ldv_dispatch_insmod_register_14_3(void) ;
#line 9736
void ldv_dispatch_irq_deregister_8_1(int arg0 ) ;
#line 9737
void ldv_dispatch_irq_register_12_3(int arg0 , irqreturn_t (*arg1)(int  , void * ) ,
                                    irqreturn_t (*arg2)(int  , void * ) , void *arg3 ) ;
#line 9739
void ldv_dispatch_pm_deregister_4_5(void) ;
#line 9740
void ldv_dispatch_pm_register_4_6(void) ;
#line 9741
void ldv_dispatch_register_11_4(struct net_device *arg0 ) ;
#line 9742
void ldv_dispatch_register_7_3(struct platform_driver *arg0 ) ;
#line 9743
int ldv_emg___platform_driver_register(struct platform_driver *arg0 , struct module *arg1 ) ;
#line 9744
void ldv_emg_free_irq(int arg0 , void *arg1 ) ;
#line 9745
void ldv_emg_free_netdev(struct net_device *arg0 ) ;
#line 9746
void ldv_emg_platform_driver_unregister(struct platform_driver *arg0 ) ;
#line 9747
int ldv_emg_register_netdev(struct net_device *arg0 ) ;
#line 9748
int ldv_emg_request_irq(unsigned int arg0 , irqreturn_t (*arg1)(int  , void * ) ,
                        unsigned long arg2 , char *arg3 , void *arg4 ) ;
#line 9750
void ldv_emg_unregister_netdev(struct net_device *arg0 ) ;
#line 9751
void *ldv_insmod_6(void *arg0 ) ;
#line 9752
void ldv_insmod_nsc_ircc_cleanup_6_2(void (*arg0)(void) ) ;
#line 9753
int ldv_insmod_nsc_ircc_init_6_6(int (*arg0)(void) ) ;
#line 9754
void *ldv_interrupt_scenario_2(void *arg0 ) ;
#line 9755
enum irqreturn ldv_interrupt_scenario_handler_2_5(irqreturn_t (*arg0)(int  , void * ) ,
                                                  int arg1 , void *arg2 ) ;
#line 9757
void *ldv_main_14(void *arg0 ) ;
#line 9758
void *ldv_platform_instance_4(void *arg0 ) ;
#line 9759
void ldv_platform_instance_callback_4_18(int (*arg0)(struct platform_device * , pm_message_t  ) ,
                                         struct platform_device *arg1 , struct pm_message *arg2 ) ;
#line 9761
void ldv_platform_instance_callback_4_7(int (*arg0)(struct platform_device * ) , struct platform_device *arg1 ) ;
#line 9762
void *ldv_pm_ops_scenario_5(void *arg0 ) ;
#line 9763
void *ldv_random_allocationless_scenario_3(void *arg0 ) ;
#line 9764
void ldv_random_allocationless_scenario_callback_3_3(int (*arg0)(struct net_device * ,
                                                                 struct ifreq * ,
                                                                 int  ) , struct net_device *arg1 ,
                                                     struct ifreq *arg2 , int arg3 ) ;
#line 9768
void ldv_random_allocationless_scenario_callback_3_8(netdev_tx_t (*arg0)(struct sk_buff * ,
                                                                         struct net_device * ) ,
                                                     struct sk_buff *arg1 , struct net_device *arg2 ) ;
#line 9771
int ldv_register_netdev_open_11_6(int (*arg0)(struct net_device * ) , struct net_device *arg1 ) ;
#line 9772
void ldv_unregister_netdev_stop_13_2(int (*arg0)(struct net_device * ) , struct net_device *arg1 ) ;
#line 9773
int main(void) ;
#line 9774 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_t ldv_thread_2  ;
#line 9775 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_t ldv_thread_3  ;
#line 9776 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_t ldv_thread_4  ;
#line 9777 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_t ldv_thread_5  ;
#line 9778 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_t ldv_thread_6  ;
#line 9779 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_dispatch_deregister_10_1(struct platform_driver *arg0 ) 
{ 
  int ret ;

  {
  {
#line 9784
  ret = pthread_join(ldv_thread_4, (void **)0);
#line 9785
  assume_abort_if_not(ret == 0);
  }
#line 9787
  return;
}
}
#line 9790 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_dispatch_deregister_13_1(struct net_device *arg0 ) 
{ 
  int ret ;

  {
  {
#line 9795
  ret = pthread_join(ldv_thread_3, (void **)0);
#line 9796
  assume_abort_if_not(ret == 0);
  }
#line 9798
  return;
}
}
#line 9801 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_dispatch_insmod_deregister_14_2(void) 
{ 
  int ret ;

  {
  {
#line 9806
  ret = pthread_join(ldv_thread_6, (void **)0);
#line 9807
  assume_abort_if_not(ret == 0);
  }
#line 9809
  return;
}
}
#line 9812 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_dispatch_insmod_register_14_3(void) 
{ 
  int ret ;
  struct ldv_struct_platform_instance_4 *cf_arg_6 ;
  void *tmp ;

  {
  {
#line 9819
  tmp = ldv_xmalloc((size_t___0 )16UL);
#line 9820
  cf_arg_6 = (struct ldv_struct_platform_instance_4 *)tmp;
#line 9821
  ret = pthread_create((pthread_t * __restrict  )(& ldv_thread_6), (pthread_attr_t const   * __restrict  )((pthread_attr_t const   *)0),
                       & ldv_insmod_6, (void * __restrict  )((void *)cf_arg_6));
#line 9823
  assume_abort_if_not(ret == 0);
  }
#line 9825
  return;
}
}
#line 9828 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_dispatch_irq_deregister_8_1(int arg0 ) 
{ 
  int ret ;

  {
  {
#line 9833
  ret = pthread_join(ldv_thread_2, (void **)0);
#line 9834
  assume_abort_if_not(ret == 0);
  }
#line 9836
  return;
}
}
#line 9839 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_dispatch_irq_register_12_3(int arg0 , irqreturn_t (*arg1)(int  , void * ) ,
                                    irqreturn_t (*arg2)(int  , void * ) , void *arg3 ) 
{ 
  int ret ;
  struct ldv_struct_interrupt_scenario_2 *cf_arg_2 ;
  void *tmp ;

  {
  {
#line 9847
  tmp = ldv_xmalloc((size_t___0 )40UL);
#line 9848
  cf_arg_2 = (struct ldv_struct_interrupt_scenario_2 *)tmp;
#line 9849
  cf_arg_2->arg0 = arg0;
#line 9850
  cf_arg_2->arg1 = arg1;
#line 9851
  cf_arg_2->arg2 = arg2;
#line 9852
  cf_arg_2->arg3 = arg3;
#line 9853
  ret = pthread_create((pthread_t * __restrict  )(& ldv_thread_2), (pthread_attr_t const   * __restrict  )((pthread_attr_t const   *)0),
                       & ldv_interrupt_scenario_2, (void * __restrict  )((void *)cf_arg_2));
#line 9855
  assume_abort_if_not(ret == 0);
  }
#line 9857
  return;
}
}
#line 9860 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_dispatch_pm_deregister_4_5(void) 
{ 
  int ret ;

  {
  {
#line 9865
  ret = pthread_join(ldv_thread_5, (void **)0);
#line 9866
  assume_abort_if_not(ret == 0);
  }
#line 9868
  return;
}
}
#line 9871 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_dispatch_pm_register_4_6(void) 
{ 
  int ret ;
  struct ldv_struct_platform_instance_4 *cf_arg_5 ;
  void *tmp ;

  {
  {
#line 9878
  tmp = ldv_xmalloc((size_t___0 )16UL);
#line 9879
  cf_arg_5 = (struct ldv_struct_platform_instance_4 *)tmp;
#line 9880
  ret = pthread_create((pthread_t * __restrict  )(& ldv_thread_5), (pthread_attr_t const   * __restrict  )((pthread_attr_t const   *)0),
                       & ldv_pm_ops_scenario_5, (void * __restrict  )((void *)cf_arg_5));
#line 9882
  assume_abort_if_not(ret == 0);
  }
#line 9884
  return;
}
}
#line 9887 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_dispatch_register_11_4(struct net_device *arg0 ) 
{ 
  int ret ;
  struct ldv_struct_random_allocationless_scenario_3 *cf_arg_3 ;
  void *tmp ;

  {
  {
#line 9894
  tmp = ldv_xmalloc((size_t___0 )16UL);
#line 9895
  cf_arg_3 = (struct ldv_struct_random_allocationless_scenario_3 *)tmp;
#line 9896
  cf_arg_3->arg0 = arg0;
#line 9897
  ret = pthread_create((pthread_t * __restrict  )(& ldv_thread_3), (pthread_attr_t const   * __restrict  )((pthread_attr_t const   *)0),
                       & ldv_random_allocationless_scenario_3, (void * __restrict  )((void *)cf_arg_3));
#line 9899
  assume_abort_if_not(ret == 0);
  }
#line 9901
  return;
}
}
#line 9904 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_dispatch_register_7_3(struct platform_driver *arg0 ) 
{ 
  int ret ;
  struct ldv_struct_platform_instance_4 *cf_arg_4 ;
  void *tmp ;

  {
  {
#line 9911
  tmp = ldv_xmalloc((size_t___0 )16UL);
#line 9912
  cf_arg_4 = (struct ldv_struct_platform_instance_4 *)tmp;
#line 9913
  cf_arg_4->arg0 = arg0;
#line 9914
  ret = pthread_create((pthread_t * __restrict  )(& ldv_thread_4), (pthread_attr_t const   * __restrict  )((pthread_attr_t const   *)0),
                       & ldv_platform_instance_4, (void * __restrict  )((void *)cf_arg_4));
#line 9916
  assume_abort_if_not(ret == 0);
  }
#line 9918
  return;
}
}
#line 9921 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_emg___platform_driver_register(struct platform_driver *arg0 , struct module *arg1 ) 
{ 
  struct platform_driver *ldv_7_platform_driver_platform_driver ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 9928
  tmp___1 = ldv_undef_int();
  }
#line 9930
  if (tmp___1 != 0) {
    {
#line 9932
    ldv_7_platform_driver_platform_driver = arg0;
#line 9933
    ldv_dispatch_register_7_3(ldv_7_platform_driver_platform_driver);
    }
#line 9935
    return (0);
  } else {
    {
#line 9938
    tmp___0 = ldv_undef_int_negative();
    }
#line 9940
    return (tmp___0);
  }
}
}
#line 9944 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_emg_free_irq(int arg0 , void *arg1 ) 
{ 
  int ldv_8_line_line ;

  {
  {
#line 9949
  ldv_8_line_line = arg0;
#line 9950
  ldv_dispatch_irq_deregister_8_1(ldv_8_line_line);
  }
#line 9952
  return;
#line 9953
  return;
}
}
#line 9956 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_emg_free_netdev(struct net_device *arg0 ) 
{ 
  struct net_device *ldv_9_netdev_net_device ;

  {
  {
#line 9961
  ldv_9_netdev_net_device = arg0;
#line 9962
  ldv_free((void *)ldv_9_netdev_net_device);
  }
#line 9964
  return;
#line 9965
  return;
}
}
#line 9968 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_emg_platform_driver_unregister(struct platform_driver *arg0 ) 
{ 
  struct platform_driver *ldv_10_platform_driver_platform_driver ;

  {
  {
#line 9973
  ldv_10_platform_driver_platform_driver = arg0;
#line 9974
  ldv_dispatch_deregister_10_1(ldv_10_platform_driver_platform_driver);
  }
#line 9976
  return;
#line 9977
  return;
}
}
#line 9980 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_emg_register_netdev(struct net_device *arg0 ) 
{ 
  struct net_device *ldv_11_netdev_net_device ;
  int ldv_11_ret_default ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 9990
  ldv_11_ret_default = ldv_undef_int();
#line 9991
  tmp___3 = ldv_undef_int();
  }
#line 9993
  if (tmp___3 != 0) {
    {
#line 9995
    ldv_11_netdev_net_device = arg0;
#line 9996
    ldv_11_ret_default = ldv_register_netdev_open_11_6((int (*)(struct net_device * ))(ldv_11_netdev_net_device->netdev_ops)->ndo_open,
                                                       ldv_11_netdev_net_device);
#line 9998
    tmp___1 = ldv_undef_int();
    }
#line 10000
    if (tmp___1 != 0) {
      {
#line 10002
      assume_abort_if_not(ldv_11_ret_default == 0);
#line 10003
      ldv_dispatch_register_11_4(ldv_11_netdev_net_device);
      }
#line 10005
      return (0);
    } else {
      {
#line 10008
      assume_abort_if_not(ldv_11_ret_default == 0);
#line 10009
      ldv_failed_register_netdev();
#line 10010
      tmp___0 = ldv_undef_int_negative();
      }
#line 10012
      return (tmp___0);
    }
  } else {
    {
#line 10016
    ldv_failed_register_netdev();
#line 10017
    tmp___2 = ldv_undef_int_negative();
    }
#line 10019
    return (tmp___2);
  }
}
}
#line 10023 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_emg_request_irq(unsigned int arg0 , irqreturn_t (*arg1)(int  , void * ) ,
                        unsigned long arg2 , char *arg3 , void *arg4 ) 
{ 
  irqreturn_t (*ldv_12_callback_handler)(int  , void * ) ;
  void *ldv_12_data_data ;
  int ldv_12_line_line ;
  irqreturn_t (*ldv_12_thread_thread)(int  , void * ) ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 10034
  tmp___2 = ldv_undef_int();
  }
#line 10036
  if (tmp___2 != 0) {
    {
#line 10038
    ldv_12_line_line = (int )arg0;
#line 10039
    ldv_12_callback_handler = arg1;
#line 10040
    ldv_12_thread_thread = (irqreturn_t (*)(int  , void * ))0;
#line 10041
    ldv_12_data_data = arg4;
#line 10042
    ldv_dispatch_irq_register_12_3(ldv_12_line_line, ldv_12_callback_handler, ldv_12_thread_thread,
                                   ldv_12_data_data);
    }
#line 10045
    return (0);
  } else {
    {
#line 10048
    tmp___1 = ldv_undef_int_negative();
    }
#line 10050
    return (tmp___1);
  }
}
}
#line 10054 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_emg_unregister_netdev(struct net_device *arg0 ) 
{ 
  struct net_device *ldv_13_netdev_net_device ;

  {
  {
#line 10059
  ldv_13_netdev_net_device = arg0;
#line 10060
  ldv_unregister_netdev_stop_13_2((int (*)(struct net_device * ))(ldv_13_netdev_net_device->netdev_ops)->ndo_stop,
                                  ldv_13_netdev_net_device);
#line 10062
  ldv_dispatch_deregister_13_1(ldv_13_netdev_net_device);
  }
#line 10064
  return;
#line 10065
  return;
}
}
#line 10068 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_insmod_6(void *arg0 ) 
{ 
  void (*ldv_6_nsc_ircc_cleanup_default)(void) ;
  int (*ldv_6_nsc_ircc_init_default)(void) ;
  int ldv_6_ret_default ;
  int tmp___1 ;

  {
  {
#line 10076
  ldv_6_nsc_ircc_cleanup_default = (void (*)(void))0;
#line 10077
  ldv_6_nsc_ircc_init_default = (int (*)(void))0;
#line 10078
  ldv_free(arg0);
#line 10079
  ldv_6_ret_default = ldv_insmod_nsc_ircc_init_6_6(ldv_6_nsc_ircc_init_default);
#line 10080
  ldv_6_ret_default = ldv_post_init(ldv_6_ret_default);
#line 10081
  tmp___1 = ldv_undef_int();
  }
#line 10083
  if (tmp___1 != 0) {
    {
#line 10085
    assume_abort_if_not(ldv_6_ret_default != 0);
    }
#line 10087
    return ((void *)0);
  } else {
    {
#line 10090
    assume_abort_if_not(ldv_6_ret_default == 0);
#line 10091
    ldv_insmod_nsc_ircc_cleanup_6_2(ldv_6_nsc_ircc_cleanup_default);
    }
#line 10093
    return ((void *)0);
  }
#line 10095
  return ((void *)0);
}
}
#line 10098 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_insmod_nsc_ircc_cleanup_6_2(void (*arg0)(void) ) 
{ 


  {
  {
#line 10102
  nsc_ircc_cleanup();
  }
#line 10104
  return;
}
}
#line 10107 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_insmod_nsc_ircc_init_6_6(int (*arg0)(void) ) 
{ 
  int tmp ;

  {
  {
#line 10112
  tmp = nsc_ircc_init();
  }
#line 10114
  return (tmp);
}
}
#line 10117 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_interrupt_scenario_2(void *arg0 ) 
{ 
  irqreturn_t (*ldv_2_callback_handler)(int  , void * ) ;
  void *ldv_2_data_data ;
  int ldv_2_line_line ;
  int tmp ;
  enum irqreturn ldv_2_ret_val_default ;
  irqreturn_t (*ldv_2_thread_thread)(int  , void * ) ;
  struct ldv_struct_interrupt_scenario_2 *data ;
  int tmp___1 ;

  {
  {
#line 10121
  tmp = ldv_undef_int();
#line 10121
  ldv_2_line_line = tmp;
#line 10128
  data = (struct ldv_struct_interrupt_scenario_2 *)arg0;
#line 10129
  ldv_2_callback_handler = (irqreturn_t (*)(int  , void * ))0;
#line 10130
  ldv_2_data_data = (void *)0;
  }
#line 10132
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_interrupt_scenario_2 *)0)) {
    {
#line 10134
    ldv_2_line_line = data->arg0;
#line 10135
    ldv_2_callback_handler = data->arg1;
#line 10136
    ldv_2_thread_thread = data->arg2;
#line 10137
    ldv_2_data_data = data->arg3;
#line 10138
    ldv_free((void *)data);
    }
  }
  {
#line 10143
  ldv_switch_to_interrupt_context();
#line 10144
  ldv_2_ret_val_default = ldv_interrupt_scenario_handler_2_5(ldv_2_callback_handler,
                                                             ldv_2_line_line, ldv_2_data_data);
#line 10146
  ldv_switch_to_process_context();
#line 10147
  tmp___1 = ldv_undef_int();
  }
#line 10149
  if (tmp___1 != 0) {
    {
#line 10151
    assume_abort_if_not((unsigned int )ldv_2_ret_val_default == 2U);
    }
  } else {
    {
#line 10155
    assume_abort_if_not((unsigned int )ldv_2_ret_val_default != 2U);
    }
  }
#line 10158
  return ((void *)0);
#line 10159
  return ((void *)0);
}
}
#line 10162 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
enum irqreturn ldv_interrupt_scenario_handler_2_5(irqreturn_t (*arg0)(int  , void * ) ,
                                                  int arg1 , void *arg2 ) 
{ 
  irqreturn_t tmp ;

  {
  {
#line 10168
  tmp = nsc_ircc_interrupt(arg1, arg2);
  }
#line 10170
  return (tmp);
}
}
#line 10173 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_main_14(void *arg0 ) 
{ 


  {
  {
#line 10177
  ldv_initialize();
#line 10178
  ldv_dispatch_insmod_register_14_3();
#line 10179
  ldv_dispatch_insmod_deregister_14_2();
#line 10180
  ldv_check_final_state();
#line 10181
  assume_abort_if_not(0);
  }
#line 10183
  return ((void *)0);
#line 10184
  return ((void *)0);
}
}
#line 10187 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_platform_instance_4(void *arg0 ) 
{ 
  int (*ldv_4_callback_resume)(struct platform_device * ) ;
  int (*ldv_4_callback_suspend)(struct platform_device * , pm_message_t  ) ;
  struct platform_driver *ldv_4_container_platform_driver ;
  struct pm_message *ldv_4_ldv_param_18_1_default ;
  int ldv_4_probed_default ;
  struct platform_device *ldv_4_resource_platform_device ;
  struct ldv_struct_platform_instance_4 *data ;
  void *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;

  {
  {
#line 10203
  data = (struct ldv_struct_platform_instance_4 *)arg0;
#line 10204
  ldv_4_callback_resume = (int (*)(struct platform_device * ))0;
#line 10205
  ldv_4_callback_suspend = (int (*)(struct platform_device * , pm_message_t  ))0;
#line 10206
  ldv_4_container_platform_driver = (struct platform_driver *)0;
#line 10207
  ldv_4_probed_default = ldv_undef_int();
  }
#line 10209
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_platform_instance_4 *)0)) {
    {
#line 10211
    ldv_4_container_platform_driver = data->arg0;
#line 10212
    ldv_free((void *)data);
    }
  }
  {
#line 10217
  tmp___4 = ldv_xmalloc((size_t___0 )1432UL);
#line 10218
  ldv_4_resource_platform_device = (struct platform_device *)tmp___4;
  }
#line 10220
  goto ldv_main_4;
#line 10221
  return ((void *)0);
  ldv_main_4: 
  {
#line 10224
  tmp___6 = ldv_undef_int();
  }
#line 10226
  if (tmp___6 != 0) {
    {
#line 10228
    tmp___5 = ldv_undef_int();
    }
#line 10230
    if (tmp___5 != 0) {
      {
#line 10232
      assume_abort_if_not(ldv_4_probed_default == 0);
      }
#line 10234
      goto ldv_call_4;
    } else {
      {
#line 10237
      assume_abort_if_not(ldv_4_probed_default != 0);
      }
#line 10239
      goto ldv_main_4;
    }
  } else {
    {
#line 10243
    ldv_free((void *)ldv_4_resource_platform_device);
    }
#line 10245
    return ((void *)0);
  }
#line 10247
  return ((void *)0);
  ldv_call_4: 
  {
#line 10250
  tmp___7 = ldv_undef_int();
  }
#line 10253
  if (tmp___7 == 1) {
#line 10254
    goto case_1;
  }
#line 10257
  if (tmp___7 == 2) {
#line 10258
    goto case_2;
  }
#line 10261
  if (tmp___7 == 3) {
#line 10262
    goto case_3;
  }
#line 10265
  if (tmp___7 == 4) {
#line 10266
    goto case_4;
  }
#line 10269
  goto switch_default;
  case_1: 
  {
#line 10272
  tmp___8 = ldv_xmalloc((size_t___0 )0UL);
#line 10273
  ldv_4_ldv_param_18_1_default = (struct pm_message *)tmp___8;
#line 10274
  ldv_platform_instance_callback_4_18(ldv_4_callback_suspend, ldv_4_resource_platform_device,
                                      ldv_4_ldv_param_18_1_default);
#line 10276
  ldv_free((void *)ldv_4_ldv_param_18_1_default);
  }
#line 10278
  goto ldv_call_4;
  case_2: 
  {
#line 10281
  ldv_platform_instance_callback_4_7(ldv_4_callback_resume, ldv_4_resource_platform_device);
  }
#line 10283
  goto ldv_call_4;
  case_3: 
  {
#line 10286
  ldv_dispatch_pm_register_4_6();
#line 10287
  ldv_dispatch_pm_deregister_4_5();
  }
#line 10289
  goto ldv_call_4;
  case_4: 
  {
#line 10291
  ldv_4_probed_default = 1;
  }
#line 10292
  goto ldv_main_4;
  switch_default: 
  {
#line 10295
  assume_abort_if_not(0);
  }
  switch_break: 
  {

  }
#line 10299
  return ((void *)0);
}
}
#line 10302 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_platform_instance_callback_4_18(int (*arg0)(struct platform_device * , pm_message_t  ) ,
                                         struct platform_device *arg1 , struct pm_message *arg2 ) 
{ 


  {
  {
#line 10307
  nsc_ircc_suspend(arg1, *arg2);
  }
#line 10309
  return;
}
}
#line 10312 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_platform_instance_callback_4_7(int (*arg0)(struct platform_device * ) , struct platform_device *arg1 ) 
{ 


  {
  {
#line 10316
  nsc_ircc_resume(arg1);
  }
#line 10318
  return;
}
}
#line 10321 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_pm_ops_scenario_5(void *arg0 ) 
{ 
  struct device *ldv_5_device_device ;
  struct dev_pm_ops *ldv_5_pm_ops_dev_pm_ops ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  {
#line 10332
  ldv_5_device_device = (struct device *)0;
#line 10333
  ldv_5_pm_ops_dev_pm_ops = (struct dev_pm_ops *)0;
#line 10334
  ldv_free(arg0);
  }
#line 10336
  goto ldv_do_5;
#line 10337
  return ((void *)0);
  ldv_do_5: 
  {
#line 10340
  tmp___1 = ldv_undef_int();
  }
#line 10343
  if (tmp___1 == 1) {
#line 10344
    goto case_1;
  }
#line 10347
  if (tmp___1 == 2) {
#line 10348
    goto case_2;
  }
#line 10351
  if (tmp___1 == 3) {
#line 10352
    goto case_3;
  }
#line 10355
  if (tmp___1 == 4) {
#line 10356
    goto case_4;
  }
#line 10359
  goto switch_default___0;
  case_1: 
  {

  }
#line 10361
  goto ldv_do_5;
  case_2: 
  {

  }
#line 10363
  goto ldv_do_5;
  case_3: 
  {
#line 10366
  tmp___2 = ldv_undef_int();
  }
#line 10369
  if (tmp___2 == 1) {
#line 10370
    goto case_1___0;
  }
#line 10373
  if (tmp___2 == 2) {
#line 10374
    goto case_2___0;
  }
#line 10377
  if (tmp___2 == 3) {
#line 10378
    goto case_3___0;
  }
#line 10381
  goto switch_default;
  case_1___0: 
  {
#line 10384
  tmp___3 = ldv_undef_int();
  }
#line 10386
  goto ldv_46543;
  case_2___0: 
  {
#line 10389
  tmp___4 = ldv_undef_int();
  }
#line 10391
  goto ldv_46543;
  case_3___0: 
  {
#line 10394
  tmp___5 = ldv_undef_int();
  }
#line 10396
  goto ldv_46543;
  switch_default: 
  {
#line 10399
  assume_abort_if_not(0);
  }
  switch_break___0: 
  {

  }
  ldv_46543: 
  {

  }
#line 10404
  goto ldv_do_5;
  case_4: 
  {

  }
#line 10406
  return ((void *)0);
  switch_default___0: 
  {
#line 10409
  assume_abort_if_not(0);
  }
  switch_break: 
  {

  }
#line 10413
  return ((void *)0);
}
}
#line 10416 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_random_allocationless_scenario_3(void *arg0 ) 
{ 
  int (*ldv_3_callback_ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
  netdev_tx_t (*ldv_3_callback_ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
  struct net_device *ldv_3_container_net_device ;
  struct ifreq *ldv_3_ldv_param_3_1_default ;
  int ldv_3_ldv_param_3_2_default ;
  struct sk_buff *ldv_3_ldv_param_8_0_default ;
  struct ldv_struct_random_allocationless_scenario_3 *data ;
  void *tmp___4 ;
  void *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
  {
#line 10422
  ldv_3_ldv_param_3_2_default = 0;
#line 10431
  data = (struct ldv_struct_random_allocationless_scenario_3 *)arg0;
#line 10432
  ldv_3_callback_ndo_do_ioctl = (int (*)(struct net_device * , struct ifreq * , int  ))0;
#line 10433
  ldv_3_callback_ndo_start_xmit = (netdev_tx_t (*)(struct sk_buff * , struct net_device * ))0;
#line 10434
  ldv_3_container_net_device = (struct net_device *)0;
  }
#line 10436
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_random_allocationless_scenario_3 *)0)) {
    {
#line 10438
    ldv_3_container_net_device = data->arg0;
#line 10439
    ldv_free((void *)data);
    }
  }
#line 10443
  goto ldv_call_3;
#line 10444
  return ((void *)0);
  ldv_call_3: 
  {
#line 10447
  tmp___7 = ldv_undef_int();
  }
#line 10449
  if (tmp___7 != 0) {
    {
#line 10451
    tmp___4 = ldv_xmalloc((size_t___0 )0UL);
#line 10452
    ldv_3_ldv_param_3_1_default = (struct ifreq *)tmp___4;
#line 10453
    tmp___6 = ldv_undef_int();
    }
#line 10455
    if (tmp___6 != 0) {
      {
#line 10457
      tmp___5 = ldv_xmalloc((size_t___0 )0UL);
#line 10458
      ldv_3_ldv_param_8_0_default = (struct sk_buff *)tmp___5;
#line 10459
      ldv_random_allocationless_scenario_callback_3_8(ldv_3_callback_ndo_start_xmit,
                                                      ldv_3_ldv_param_8_0_default,
                                                      ldv_3_container_net_device);
#line 10462
      ldv_free((void *)ldv_3_ldv_param_8_0_default);
      }
    } else {
      {
#line 10466
      ldv_random_allocationless_scenario_callback_3_3(ldv_3_callback_ndo_do_ioctl,
                                                      ldv_3_container_net_device,
                                                      ldv_3_ldv_param_3_1_default,
                                                      ldv_3_ldv_param_3_2_default);
      }
    }
    {
#line 10473
    ldv_free((void *)ldv_3_ldv_param_3_1_default);
    }
#line 10475
    goto ldv_call_3;
  } else {
#line 10477
    return ((void *)0);
  }
#line 10479
  return ((void *)0);
}
}
#line 10482 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_random_allocationless_scenario_callback_3_3(int (*arg0)(struct net_device * ,
                                                                 struct ifreq * ,
                                                                 int  ) , struct net_device *arg1 ,
                                                     struct ifreq *arg2 , int arg3 ) 
{ 


  {
  {
#line 10489
  nsc_ircc_net_ioctl(arg1, arg2, arg3);
  }
#line 10491
  return;
}
}
#line 10494 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_random_allocationless_scenario_callback_3_8(netdev_tx_t (*arg0)(struct sk_buff * ,
                                                                         struct net_device * ) ,
                                                     struct sk_buff *arg1 , struct net_device *arg2 ) 
{ 


  {
  {
#line 10500
  nsc_ircc_hard_xmit_sir(arg1, arg2);
  }
#line 10502
  return;
}
}
#line 10505 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_register_netdev_open_11_6(int (*arg0)(struct net_device * ) , struct net_device *arg1 ) 
{ 
  int tmp ;

  {
  {
#line 10510
  tmp = nsc_ircc_net_open(arg1);
  }
#line 10512
  return (tmp);
}
}
#line 10515 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_unregister_netdev_stop_13_2(int (*arg0)(struct net_device * ) , struct net_device *arg1 ) 
{ 


  {
  {
#line 10519
  nsc_ircc_net_close(arg1);
  }
#line 10521
  return;
}
}
#line 10524 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int main(void) 
{ 


  {
  {
#line 10528
  ldv_main_14((void *)0);
  }
#line 10530
  return (0);
}
}
#line 10533 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static long PTR_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  {
#line 10538
  tmp = ldv_ptr_err(ptr);
  }
#line 10540
  return (tmp);
}
}
#line 10543 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  {
#line 10548
  tmp = ldv_is_err(ptr);
  }
#line 10550
  return (tmp);
}
}
#line 10553 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void *ldv_dev_get_drvdata_65(struct device  const  *dev ) 
{ 
  void *tmp ;

  {
  {
#line 10558
  tmp = ldv_dev_get_drvdata(dev);
  }
#line 10560
  return (tmp);
}
}
#line 10563 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int ldv_dev_set_drvdata_66(struct device *dev , void *data ) 
{ 
  int tmp ;

  {
  {
#line 10568
  tmp = ldv_dev_set_drvdata(dev, data);
  }
#line 10570
  return (tmp);
}
}
#line 10573 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int ldv___platform_driver_register_75(struct platform_driver *ldv_func_arg1 ,
                                             struct module *ldv_func_arg2 ) 
{ 
  int tmp ;

  {
  {
#line 10579
  tmp = ldv_emg___platform_driver_register(ldv_func_arg1, ldv_func_arg2);
  }
#line 10581
  return (tmp);
}
}
#line 10584 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv_platform_driver_unregister_76(struct platform_driver *ldv_func_arg1 ) 
{ 


  {
  {
#line 10588
  ldv_emg_platform_driver_unregister(ldv_func_arg1);
  }
#line 10590
  return;
}
}
#line 10593 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv_platform_driver_unregister_77(struct platform_driver *ldv_func_arg1 ) 
{ 


  {
  {
#line 10597
  ldv_emg_platform_driver_unregister(ldv_func_arg1);
  }
#line 10599
  return;
}
}
#line 10602 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int ldv_register_netdev_78(struct net_device *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 10607
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  }
#line 10609
  return (tmp);
}
}
#line 10612 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv_unregister_netdev_79(struct net_device *ldv_func_arg1 ) 
{ 


  {
  {
#line 10616
  ldv_emg_unregister_netdev(ldv_func_arg1);
  }
#line 10618
  return;
}
}
#line 10621 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv_free_netdev_80(struct net_device *ldv_func_arg1 ) 
{ 


  {
  {
#line 10625
  ldv_emg_free_netdev(ldv_func_arg1);
  }
#line 10627
  return;
}
}
#line 10630 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv_unregister_netdev_81(struct net_device *ldv_func_arg1 ) 
{ 


  {
  {
#line 10634
  ldv_emg_unregister_netdev(ldv_func_arg1);
  }
#line 10636
  return;
}
}
#line 10639 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv_free_netdev_82(struct net_device *ldv_func_arg1 ) 
{ 


  {
  {
#line 10643
  ldv_emg_free_netdev(ldv_func_arg1);
  }
#line 10645
  return;
}
}
#line 10648 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv___ldv_spin_lock_83(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  {
#line 10652
  ldv_spin_lock_lock_of_nsc_ircc_cb();
#line 10653
  __ldv_spin_lock(ldv_func_arg1);
  }
#line 10655
  return;
}
}
#line 10658 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void ldv_spin_unlock_irqrestore_84(spinlock_t *lock , unsigned long flags ) 
{ 


  {
  {
#line 10662
  ldv_spin_unlock_lock_of_nsc_ircc_cb();
#line 10663
  spin_unlock_irqrestore(lock, flags);
  }
#line 10665
  return;
}
}
#line 10668 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv___ldv_spin_lock_86(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  {
#line 10672
  ldv_spin_lock_lock_of_nsc_ircc_cb();
#line 10673
  __ldv_spin_lock(ldv_func_arg1);
  }
#line 10675
  return;
}
}
#line 10678 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void ldv_spin_lock_89(spinlock_t *lock ) 
{ 


  {
  {
#line 10682
  ldv_spin_lock_lock_of_nsc_ircc_cb();
#line 10683
  spin_lock(lock);
#line 10685
  __VERIFIER_atomic_begin();
#line 10685
  assert(-7LL + (long long )qos_mtt_bits >= 0LL);
#line 10685
  assert((-7LL + (long long )pnp_succeeded) + (long long )qos_mtt_bits >= 0LL);
#line 10685
  assert((-7LL - (long long )pnp_succeeded) + (long long )qos_mtt_bits >= 0LL);
#line 10685
  assert(0LL - (long long )pnp_succeeded >= 0LL);
#line 10685
  assert(7LL - (long long )qos_mtt_bits >= 0LL);
#line 10685
  assert((7LL + (long long )pnp_succeeded) - (long long )qos_mtt_bits >= 0LL);
#line 10685
  assert((7LL - (long long )pnp_succeeded) - (long long )qos_mtt_bits >= 0LL);
#line 10685
  assert((long long )pnp_succeeded >= 0LL);
#line 10685
  __VERIFIER_atomic_end();
  }
#line 10685
  return;
}
}
#line 10688 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static void ldv_spin_unlock_90(spinlock_t *lock ) 
{ 


  {
  {
#line 10692
  ldv_spin_unlock_lock_of_nsc_ircc_cb();
#line 10693
  spin_unlock(lock);
  }
#line 10695
  return;
}
}
#line 10698 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv___ldv_spin_lock_91(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  {
#line 10702
  ldv_spin_lock_lock_of_nsc_ircc_cb();
#line 10703
  __ldv_spin_lock(ldv_func_arg1);
  }
#line 10705
  return;
}
}
#line 10708 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
__inline static int ldv_request_irq_93(unsigned int irq___0 , irqreturn_t (*handler)(int  ,
                                                                                     void * ) ,
                                       unsigned long flags , char const   *name ,
                                       void *dev ) 
{ 
  int tmp ;

  {
  {
#line 10716
  tmp = ldv_emg_request_irq(irq___0, handler, flags, (char *)name, dev);
  }
#line 10718
  return (tmp);
}
}
#line 10721 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv_free_irq_94(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) 
{ 


  {
  {
#line 10725
  ldv_emg_free_irq((int )ldv_func_arg1, ldv_func_arg2);
  }
#line 10727
  return;
}
}
#line 10730 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv_free_irq_95(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) 
{ 


  {
  {
#line 10734
  ldv_emg_free_irq((int )ldv_func_arg1, ldv_func_arg2);
  }
#line 10736
  return;
}
}
#line 10739 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv___ldv_spin_lock_96(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  {
#line 10743
  ldv_spin_lock_lock_of_nsc_ircc_cb();
#line 10744
  __ldv_spin_lock(ldv_func_arg1);
  }
#line 10746
  return;
}
}
#line 10749 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv___ldv_spin_lock_98(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  {
#line 10753
  ldv_spin_lock_lock_of_nsc_ircc_cb();
#line 10754
  __ldv_spin_lock(ldv_func_arg1);
  }
#line 10756
  return;
}
}
#line 10759 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv_free_irq_100(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) 
{ 


  {
  {
#line 10763
  ldv_emg_free_irq((int )ldv_func_arg1, ldv_func_arg2);
  }
#line 10765
  return;
}
}
#line 10768 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv___ldv_spin_lock_102(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  {
#line 10772
  ldv_spin_lock_lock_of_nsc_ircc_cb();
#line 10773
  __ldv_spin_lock(ldv_func_arg1);
  }
#line 10775
  return;
}
}
#line 10778 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static void ldv___ldv_spin_lock_104(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  {
#line 10782
  ldv_spin_lock_lock_of_nsc_ircc_cb();
#line 10783
  __ldv_spin_lock(ldv_func_arg1);
  }
#line 10785
  return;
}
}
#line 10788
void *ldv_xzalloc(size_t___0 size ) ;
#line 10789 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 10792
  if ((unsigned long )dev != (unsigned long )((struct device  const  *)0)) {
#line 10792
    if ((unsigned long )dev->p != (unsigned long )((struct device_private *)0)) {
#line 10793
      return ((dev->p)->driver_data);
    }
  }
#line 10796
  return ((void *)0);
}
}
#line 10799 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_dev_set_drvdata(struct device *dev , void *data ) 
{ 
  void *tmp ;

  {
  {
#line 10804
  tmp = ldv_xzalloc((size_t___0 )8UL);
#line 10805
  dev->p = (struct device_private *)tmp;
#line 10806
  (dev->p)->driver_data = data;
  }
#line 10808
  return (0);
}
}
#line 10811 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct spi_master *ldv_spi_alloc_master(struct device *host , unsigned int size ) 
{ 
  struct spi_master *master ;
  void *tmp ;

  {
  {
#line 10817
  tmp = ldv_zalloc((size_t___0 )((unsigned long )size + 2200UL));
#line 10818
  master = (struct spi_master *)tmp;
  }
#line 10820
  if ((unsigned long )master == (unsigned long )((struct spi_master *)0)) {
#line 10821
    return ((struct spi_master *)0);
  }
  {
#line 10825
  ldv_dev_set_drvdata(& master->dev, (void *)(master + 1U));
  }
#line 10827
  return (master);
}
}
#line 10830 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
long ldv_is_err(void const   *ptr ) 
{ 


  {
#line 10833
  return ((long )((unsigned long )ptr > 4294967295UL));
}
}
#line 10836 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_err_ptr(long error ) 
{ 


  {
#line 10839
  return ((void *)(4294967295L - error));
}
}
#line 10842 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
long ldv_ptr_err(void const   *ptr ) 
{ 


  {
#line 10845
  return ((long )(4294967295UL - (unsigned long )ptr));
}
}
#line 10848 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
long ldv_is_err_or_null(void const   *ptr ) 
{ 
  long tmp ;
  int tmp___0 ;

  {
#line 10853
  if ((unsigned long )ptr == (unsigned long )((void const   *)0)) {
    {
#line 10854
    tmp___0 = 1;
    }
  } else {
    {
#line 10857
    tmp = ldv_is_err(ptr);
    }
#line 10859
    if (tmp != 0L) {
      {
#line 10860
      tmp___0 = 1;
      }
    } else {
      {
#line 10862
      tmp___0 = 0;
      }
    }
  }
#line 10865
  return ((long )tmp___0);
}
}
#line 10868
int ldv_post_probe(int probe_ret_val ) ;
#line 10869
int ldv_filter_err_code(int ret_val ) ;
#line 10870 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
static int ldv_filter_positive_int(int val ) 
{ 


  {
  {
#line 10874
  assume_abort_if_not(val <= 0);
  }
#line 10876
  return (val);
}
}
#line 10879 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_post_init(int init_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 10884
  tmp = ldv_filter_positive_int(init_ret_val);
  }
#line 10886
  return (tmp);
}
}
#line 10889 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_post_probe(int probe_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 10894
  tmp = ldv_filter_positive_int(probe_ret_val);
  }
#line 10896
  return (tmp);
}
}
#line 10899 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_filter_err_code(int ret_val ) 
{ 
  int tmp ;

  {
  {
#line 10904
  tmp = ldv_filter_positive_int(ret_val);
  }
#line 10906
  return (tmp);
}
}
#line 10909
void ldv_check_alloc_flags(gfp_t arg0 ) ;
#line 10910
void ldv_after_alloc(void *arg0 ) ;
#line 10911 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_kzalloc(size_t___0 size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 10916
  ldv_check_alloc_flags(flags);
#line 10917
  res = ldv_zalloc(size);
#line 10918
  ldv_after_alloc(res);
  }
#line 10920
  return (res);
}
}
#line 10923 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
long ldv__builtin_expect(long exp , long c ) 
{ 


  {
#line 10926
  return (exp);
}
}
#line 10929 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv__builtin_trap(void) 
{ 


  {
  {
#line 10933
  ldv_assert((char const   *)"", 0);
  }
#line 10935
  return;
}
}
#line 10938
void *ldv_malloc(size_t___0 size ) ;
#line 10939
void *ldv_calloc(size_t___0 nmemb , size_t___0 size ) ;
#line 10940
extern void *malloc(size_t___0  ) ;
#line 10941
extern void *calloc(size_t___0  , size_t___0  ) ;
#line 10942
extern void free(void * ) ;
#line 10943 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_malloc(size_t___0 size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 10951
  tmp___1 = ldv_undef_int();
  }
#line 10953
  if (tmp___1 != 0) {
    {
#line 10955
    tmp = malloc(size);
#line 10956
    res = tmp;
#line 10957
    assume_abort_if_not((unsigned long )res != (unsigned long )((void *)0));
#line 10958
    tmp___0 = ldv_is_err((void const   *)res);
#line 10959
    assume_abort_if_not(tmp___0 == 0L);
    }
#line 10961
    return (res);
  } else {
#line 10963
    return ((void *)0);
  }
}
}
#line 10967 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_calloc(size_t___0 nmemb , size_t___0 size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 10975
  tmp___1 = ldv_undef_int();
  }
#line 10977
  if (tmp___1 != 0) {
    {
#line 10979
    tmp = calloc(nmemb, size);
#line 10980
    res = tmp;
#line 10981
    assume_abort_if_not((unsigned long )res != (unsigned long )((void *)0));
#line 10982
    tmp___0 = ldv_is_err((void const   *)res);
#line 10983
    assume_abort_if_not(tmp___0 == 0L);
    }
#line 10985
    return (res);
  } else {
#line 10987
    return ((void *)0);
  }
}
}
#line 10991 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_zalloc(size_t___0 size ) 
{ 
  void *tmp ;

  {
  {
#line 10996
  tmp = ldv_calloc((size_t___0 )1UL, size);
  }
#line 10998
  return (tmp);
}
}
#line 11001 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_free(void *s ) 
{ 


  {
  {
#line 11005
  free(s);
  }
#line 11007
  return;
}
}
#line 11010 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_xmalloc(size_t___0 size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 11017
  tmp = malloc(size);
#line 11018
  res = tmp;
#line 11019
  assume_abort_if_not((unsigned long )res != (unsigned long )((void *)0));
#line 11020
  tmp___0 = ldv_is_err((void const   *)res);
#line 11021
  assume_abort_if_not(tmp___0 == 0L);
  }
#line 11023
  return (res);
}
}
#line 11026 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *ldv_xzalloc(size_t___0 size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 11033
  tmp = calloc((size_t___0 )1UL, size);
#line 11034
  res = tmp;
#line 11035
  assume_abort_if_not((unsigned long )res != (unsigned long )((void *)0));
#line 11036
  tmp___0 = ldv_is_err((void const   *)res);
#line 11037
  assume_abort_if_not(tmp___0 == 0L);
  }
#line 11039
  return (res);
}
}
#line 11042
unsigned long ldv_undef_ulong(void) ;
#line 11043
int ldv_undef_int_nonpositive(void) ;
#line 11046 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_undef_int(void) 
{ 
  int tmp ;

  {
  {
#line 11051
  tmp = __VERIFIER_nondet_int();
  }
#line 11053
  return (tmp);
}
}
#line 11056 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
unsigned long ldv_undef_ulong(void) 
{ 
  unsigned long tmp ;

  {
  {
#line 11061
  tmp = __VERIFIER_nondet_ulong();
  }
#line 11063
  return (tmp);
}
}
#line 11066 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_undef_int_negative(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 11072
  tmp = ldv_undef_int();
#line 11073
  ret = tmp;
#line 11074
  assume_abort_if_not(ret < 0);
  }
#line 11076
  return (ret);
}
}
#line 11079 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_undef_int_nonpositive(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 11085
  tmp = ldv_undef_int();
#line 11086
  ret = tmp;
#line 11087
  assume_abort_if_not(ret <= 0);
  }
#line 11089
  return (ret);
}
}
#line 11094
extern void ( __attribute__((__leaf__)) __assert_fail)(char const   *__assertion ,
                                                       char const   *__file , unsigned int __line ,
                                                       char const   *__function )  __attribute__((__nothrow__,
__noreturn__)) ;
#line 11097
extern void ( __attribute__((__leaf__)) __assert_perror_fail)(int __errnum , char const   *__file ,
                                                              unsigned int __line ,
                                                              char const   *__function )  __attribute__((__nothrow__,
__noreturn__)) ;
#line 11100
extern void ( __attribute__((__leaf__)) __assert)(char const   *__assertion , char const   *__file ,
                                                  int __line )  __attribute__((__nothrow__,
__noreturn__)) ;
#line 11103 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void reach_error(void) 
{ 


  {
  {
#line 11103
  __assert_fail((char const   *)"0", (char const   *)"linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.c",
                11545U, (char const   *)"reach_error");
  }
}
}
#line 11106 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 pmutex_i_mutex_of_inode  ;
#line 11107 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_mutex_lock_i_mutex_of_inode(struct mutex *lock ) 
{ 


  {
  {
#line 11111
  pthread_mutex_lock(& pmutex_i_mutex_of_inode);
  }
#line 11113
  return;
}
}
#line 11116 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_mutex_lock_interruptible_or_killable_i_mutex_of_inode(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 11121
  tmp = ldv_undef_int();
  }
#line 11123
  if (tmp != 0) {
    {
#line 11125
    pthread_mutex_lock(& pmutex_i_mutex_of_inode);
    }
#line 11127
    return (0);
  } else {
#line 11129
    return (-4);
  }
}
}
#line 11133 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_mutex_is_locked_i_mutex_of_inode(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 11138
  tmp = ldv_undef_int();
  }
#line 11140
  if (tmp != 0) {
#line 11141
    return (1);
  } else {
#line 11143
    return (0);
  }
}
}
#line 11147 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_mutex_trylock_i_mutex_of_inode(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 11152
  tmp = pthread_mutex_trylock(& pmutex_i_mutex_of_inode);
  }
#line 11154
  return (tmp);
}
}
#line 11157 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_mutex_lock_i_mutex_of_inode(atomic_t *cnt , struct mutex *lock ) 
{ 


  {
  {
#line 11160
  (cnt->counter) --;
  }
#line 11161
  if (cnt->counter != 0) {
#line 11162
    return (0);
  } else {
    {
#line 11165
    pthread_mutex_lock(& pmutex_i_mutex_of_inode);
    }
#line 11167
    return (1);
  }
}
}
#line 11171 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_mutex_unlock_i_mutex_of_inode(struct mutex *lock ) 
{ 


  {
  {
#line 11175
  pthread_mutex_unlock(& pmutex_i_mutex_of_inode);
  }
#line 11177
  return;
}
}
#line 11180 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 pmutex_lock  ;
#line 11181 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_mutex_lock_lock(struct mutex *lock ) 
{ 


  {
  {
#line 11185
  pthread_mutex_lock(& pmutex_lock);
  }
#line 11187
  return;
}
}
#line 11190 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_mutex_lock_interruptible_or_killable_lock(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 11195
  tmp = ldv_undef_int();
  }
#line 11197
  if (tmp != 0) {
    {
#line 11199
    pthread_mutex_lock(& pmutex_lock);
    }
#line 11201
    return (0);
  } else {
#line 11203
    return (-4);
  }
}
}
#line 11207 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_mutex_is_locked_lock(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 11212
  tmp = ldv_undef_int();
  }
#line 11214
  if (tmp != 0) {
#line 11215
    return (1);
  } else {
#line 11217
    return (0);
  }
}
}
#line 11221 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_mutex_trylock_lock(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 11226
  tmp = pthread_mutex_trylock(& pmutex_lock);
  }
#line 11228
  return (tmp);
}
}
#line 11231 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_mutex_lock_lock(atomic_t *cnt , struct mutex *lock ) 
{ 


  {
  {
#line 11234
  (cnt->counter) --;
  }
#line 11235
  if (cnt->counter != 0) {
#line 11236
    return (0);
  } else {
    {
#line 11239
    pthread_mutex_lock(& pmutex_lock);
    }
#line 11241
    return (1);
  }
}
}
#line 11245 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_mutex_unlock_lock(struct mutex *lock ) 
{ 


  {
  {
#line 11249
  pthread_mutex_unlock(& pmutex_lock);
  }
#line 11251
  return;
}
}
#line 11254 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 pmutex_mutex_of_device  ;
#line 11255 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
  {
#line 11259
  pthread_mutex_lock(& pmutex_mutex_of_device);
  }
#line 11261
  return;
}
}
#line 11264 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_mutex_lock_interruptible_or_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 11269
  tmp = ldv_undef_int();
  }
#line 11271
  if (tmp != 0) {
    {
#line 11273
    pthread_mutex_lock(& pmutex_mutex_of_device);
    }
#line 11275
    return (0);
  } else {
#line 11277
    return (-4);
  }
}
}
#line 11281 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 11286
  tmp = ldv_undef_int();
  }
#line 11288
  if (tmp != 0) {
#line 11289
    return (1);
  } else {
#line 11291
    return (0);
  }
}
}
#line 11295 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 11300
  tmp = pthread_mutex_trylock(& pmutex_mutex_of_device);
  }
#line 11302
  return (tmp);
}
}
#line 11305 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 


  {
  {
#line 11308
  (cnt->counter) --;
  }
#line 11309
  if (cnt->counter != 0) {
#line 11310
    return (0);
  } else {
    {
#line 11313
    pthread_mutex_lock(& pmutex_mutex_of_device);
    }
#line 11315
    return (1);
  }
}
}
#line 11319 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
  {
#line 11323
  pthread_mutex_unlock(& pmutex_mutex_of_device);
  }
#line 11325
  return;
}
}
#line 11328 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_initialize(void) 
{ 


  {
#line 11331
  return;
}
}
#line 11334 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_check_final_state(void) 
{ 


  {
#line 11337
  return;
}
}
#line 11340 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_assert(char const   *desc , int expr ) 
{ 


  {
#line 11343
  if (expr == 0) {
    {
#line 11345
    reach_error();
    }
  }
#line 11349
  return;
}
}
#line 11353 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_NOT_ARG_SIGN  ;
#line 11354 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 11358
  pthread_mutex_lock(& smutex_NOT_ARG_SIGN);
  }
#line 11360
  return;
}
}
#line 11363 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 11367
  pthread_mutex_unlock(& smutex_NOT_ARG_SIGN);
  }
#line 11369
  return;
}
}
#line 11372 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 11377
  tmp = pthread_mutex_trylock(& smutex_NOT_ARG_SIGN);
  }
#line 11379
  return (tmp);
}
}
#line 11382 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_NOT_ARG_SIGN(void) 
{ 


  {
#line 11385
  return;
}
}
#line 11388 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 11393
  tmp = ldv_undef_int();
  }
#line 11395
  if (tmp != 0) {
#line 11396
    return (1);
  } else {
#line 11398
    return (0);
  }
}
}
#line 11402 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 11407
  tmp = ldv_spin_is_locked_NOT_ARG_SIGN();
  }
#line 11409
  return (tmp == 0);
}
}
#line 11412 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 11417
  is_spin_contended = ldv_undef_int();
  }
#line 11419
  if (is_spin_contended != 0) {
#line 11420
    return (0);
  } else {
#line 11422
    return (1);
  }
}
}
#line 11426 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 11431
  atomic_value_after_dec = ldv_undef_int();
  }
#line 11433
  if (atomic_value_after_dec == 0) {
    {
#line 11435
    ldv_spin_lock_NOT_ARG_SIGN();
    }
#line 11437
    return (1);
  }
#line 11440
  return (0);
}
}
#line 11443 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex__xmit_lock_of_netdev_queue  ;
#line 11444 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock__xmit_lock_of_netdev_queue(void) 
{ 


  {
  {
#line 11448
  pthread_mutex_lock(& smutex__xmit_lock_of_netdev_queue);
  }
#line 11450
  return;
}
}
#line 11453 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock__xmit_lock_of_netdev_queue(void) 
{ 


  {
  {
#line 11457
  pthread_mutex_unlock(& smutex__xmit_lock_of_netdev_queue);
  }
#line 11459
  return;
}
}
#line 11462 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock__xmit_lock_of_netdev_queue(void) 
{ 
  int tmp ;

  {
  {
#line 11467
  tmp = pthread_mutex_trylock(& smutex__xmit_lock_of_netdev_queue);
  }
#line 11469
  return (tmp);
}
}
#line 11472 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait__xmit_lock_of_netdev_queue(void) 
{ 


  {
#line 11475
  return;
}
}
#line 11478 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked__xmit_lock_of_netdev_queue(void) 
{ 
  int tmp ;

  {
  {
#line 11483
  tmp = ldv_undef_int();
  }
#line 11485
  if (tmp != 0) {
#line 11486
    return (1);
  } else {
#line 11488
    return (0);
  }
}
}
#line 11492 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock__xmit_lock_of_netdev_queue(void) 
{ 
  int tmp ;

  {
  {
#line 11497
  tmp = ldv_spin_is_locked__xmit_lock_of_netdev_queue();
  }
#line 11499
  return (tmp == 0);
}
}
#line 11502 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 11507
  is_spin_contended = ldv_undef_int();
  }
#line 11509
  if (is_spin_contended != 0) {
#line 11510
    return (0);
  } else {
#line 11512
    return (1);
  }
}
}
#line 11516 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock__xmit_lock_of_netdev_queue(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 11521
  atomic_value_after_dec = ldv_undef_int();
  }
#line 11523
  if (atomic_value_after_dec == 0) {
    {
#line 11525
    ldv_spin_lock__xmit_lock_of_netdev_queue();
    }
#line 11527
    return (1);
  }
#line 11530
  return (0);
}
}
#line 11533 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_addr_list_lock_of_net_device  ;
#line 11534 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_addr_list_lock_of_net_device(void) 
{ 


  {
  {
#line 11538
  pthread_mutex_lock(& smutex_addr_list_lock_of_net_device);
  }
#line 11540
  return;
}
}
#line 11543 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_addr_list_lock_of_net_device(void) 
{ 


  {
  {
#line 11547
  pthread_mutex_unlock(& smutex_addr_list_lock_of_net_device);
  }
#line 11549
  return;
}
}
#line 11552 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_addr_list_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 11557
  tmp = pthread_mutex_trylock(& smutex_addr_list_lock_of_net_device);
  }
#line 11559
  return (tmp);
}
}
#line 11562 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_addr_list_lock_of_net_device(void) 
{ 


  {
#line 11565
  return;
}
}
#line 11568 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_addr_list_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 11573
  tmp = ldv_undef_int();
  }
#line 11575
  if (tmp != 0) {
#line 11576
    return (1);
  } else {
#line 11578
    return (0);
  }
}
}
#line 11582 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_addr_list_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 11587
  tmp = ldv_spin_is_locked_addr_list_lock_of_net_device();
  }
#line 11589
  return (tmp == 0);
}
}
#line 11592 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 11597
  is_spin_contended = ldv_undef_int();
  }
#line 11599
  if (is_spin_contended != 0) {
#line 11600
    return (0);
  } else {
#line 11602
    return (1);
  }
}
}
#line 11606 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_addr_list_lock_of_net_device(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 11611
  atomic_value_after_dec = ldv_undef_int();
  }
#line 11613
  if (atomic_value_after_dec == 0) {
    {
#line 11615
    ldv_spin_lock_addr_list_lock_of_net_device();
    }
#line 11617
    return (1);
  }
#line 11620
  return (0);
}
}
#line 11623 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_alloc_lock_of_task_struct  ;
#line 11624 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
  {
#line 11628
  pthread_mutex_lock(& smutex_alloc_lock_of_task_struct);
  }
#line 11630
  return;
}
}
#line 11633 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
  {
#line 11637
  pthread_mutex_unlock(& smutex_alloc_lock_of_task_struct);
  }
#line 11639
  return;
}
}
#line 11642 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;

  {
  {
#line 11647
  tmp = pthread_mutex_trylock(& smutex_alloc_lock_of_task_struct);
  }
#line 11649
  return (tmp);
}
}
#line 11652 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
#line 11655
  return;
}
}
#line 11658 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;

  {
  {
#line 11663
  tmp = ldv_undef_int();
  }
#line 11665
  if (tmp != 0) {
#line 11666
    return (1);
  } else {
#line 11668
    return (0);
  }
}
}
#line 11672 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;

  {
  {
#line 11677
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
  }
#line 11679
  return (tmp == 0);
}
}
#line 11682 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 11687
  is_spin_contended = ldv_undef_int();
  }
#line 11689
  if (is_spin_contended != 0) {
#line 11690
    return (0);
  } else {
#line 11692
    return (1);
  }
}
}
#line 11696 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 11701
  atomic_value_after_dec = ldv_undef_int();
  }
#line 11703
  if (atomic_value_after_dec == 0) {
    {
#line 11705
    ldv_spin_lock_alloc_lock_of_task_struct();
    }
#line 11707
    return (1);
  }
#line 11710
  return (0);
}
}
#line 11713 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_dma_spin_lock  ;
#line 11714 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_dma_spin_lock(void) 
{ 


  {
  {
#line 11718
  pthread_mutex_lock(& smutex_dma_spin_lock);
  }
#line 11720
  return;
}
}
#line 11723 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_dma_spin_lock(void) 
{ 


  {
  {
#line 11727
  pthread_mutex_unlock(& smutex_dma_spin_lock);
  }
#line 11729
  return;
}
}
#line 11732 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_dma_spin_lock(void) 
{ 
  int tmp ;

  {
  {
#line 11737
  tmp = pthread_mutex_trylock(& smutex_dma_spin_lock);
  }
#line 11739
  return (tmp);
}
}
#line 11742 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_dma_spin_lock(void) 
{ 


  {
#line 11745
  return;
}
}
#line 11748 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_dma_spin_lock(void) 
{ 
  int tmp ;

  {
  {
#line 11753
  tmp = ldv_undef_int();
  }
#line 11755
  if (tmp != 0) {
#line 11756
    return (1);
  } else {
#line 11758
    return (0);
  }
}
}
#line 11762 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_dma_spin_lock(void) 
{ 
  int tmp ;

  {
  {
#line 11767
  tmp = ldv_spin_is_locked_dma_spin_lock();
  }
#line 11769
  return (tmp == 0);
}
}
#line 11772 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_dma_spin_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 11777
  is_spin_contended = ldv_undef_int();
  }
#line 11779
  if (is_spin_contended != 0) {
#line 11780
    return (0);
  } else {
#line 11782
    return (1);
  }
}
}
#line 11786 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_dma_spin_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 11791
  atomic_value_after_dec = ldv_undef_int();
  }
#line 11793
  if (atomic_value_after_dec == 0) {
    {
#line 11795
    ldv_spin_lock_dma_spin_lock();
    }
#line 11797
    return (1);
  }
#line 11800
  return (0);
}
}
#line 11803 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_i_lock_of_inode  ;
#line 11804 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_i_lock_of_inode(void) 
{ 


  {
  {
#line 11808
  pthread_mutex_lock(& smutex_i_lock_of_inode);
  }
#line 11810
  return;
}
}
#line 11813 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_i_lock_of_inode(void) 
{ 


  {
  {
#line 11817
  pthread_mutex_unlock(& smutex_i_lock_of_inode);
  }
#line 11819
  return;
}
}
#line 11822 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_i_lock_of_inode(void) 
{ 
  int tmp ;

  {
  {
#line 11827
  tmp = pthread_mutex_trylock(& smutex_i_lock_of_inode);
  }
#line 11829
  return (tmp);
}
}
#line 11832 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_i_lock_of_inode(void) 
{ 


  {
#line 11835
  return;
}
}
#line 11838 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_i_lock_of_inode(void) 
{ 
  int tmp ;

  {
  {
#line 11843
  tmp = ldv_undef_int();
  }
#line 11845
  if (tmp != 0) {
#line 11846
    return (1);
  } else {
#line 11848
    return (0);
  }
}
}
#line 11852 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_i_lock_of_inode(void) 
{ 
  int tmp ;

  {
  {
#line 11857
  tmp = ldv_spin_is_locked_i_lock_of_inode();
  }
#line 11859
  return (tmp == 0);
}
}
#line 11862 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_i_lock_of_inode(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 11867
  is_spin_contended = ldv_undef_int();
  }
#line 11869
  if (is_spin_contended != 0) {
#line 11870
    return (0);
  } else {
#line 11872
    return (1);
  }
}
}
#line 11876 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_i_lock_of_inode(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 11881
  atomic_value_after_dec = ldv_undef_int();
  }
#line 11883
  if (atomic_value_after_dec == 0) {
    {
#line 11885
    ldv_spin_lock_i_lock_of_inode();
    }
#line 11887
    return (1);
  }
#line 11890
  return (0);
}
}
#line 11893 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_lock  ;
#line 11894 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_lock(void) 
{ 


  {
  {
#line 11898
  pthread_mutex_lock(& smutex_lock);
  }
#line 11900
  return;
}
}
#line 11903 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_lock(void) 
{ 


  {
  {
#line 11907
  pthread_mutex_unlock(& smutex_lock);
  }
#line 11909
  return;
}
}
#line 11912 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_lock(void) 
{ 
  int tmp ;

  {
  {
#line 11917
  tmp = pthread_mutex_trylock(& smutex_lock);
  }
#line 11919
  return (tmp);
}
}
#line 11922 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_lock(void) 
{ 


  {
#line 11925
  return;
}
}
#line 11928 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_lock(void) 
{ 
  int tmp ;

  {
  {
#line 11933
  tmp = ldv_undef_int();
  }
#line 11935
  if (tmp != 0) {
#line 11936
    return (1);
  } else {
#line 11938
    return (0);
  }
}
}
#line 11942 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_lock(void) 
{ 
  int tmp ;

  {
  {
#line 11947
  tmp = ldv_spin_is_locked_lock();
  }
#line 11949
  return (tmp == 0);
}
}
#line 11952 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 11957
  is_spin_contended = ldv_undef_int();
  }
#line 11959
  if (is_spin_contended != 0) {
#line 11960
    return (0);
  } else {
#line 11962
    return (1);
  }
}
}
#line 11966 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 11971
  atomic_value_after_dec = ldv_undef_int();
  }
#line 11973
  if (atomic_value_after_dec == 0) {
    {
#line 11975
    ldv_spin_lock_lock();
    }
#line 11977
    return (1);
  }
#line 11980
  return (0);
}
}
#line 11983 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_lock_of_NOT_ARG_SIGN  ;
#line 11984 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 11988
  pthread_mutex_lock(& smutex_lock_of_NOT_ARG_SIGN);
  }
#line 11990
  return;
}
}
#line 11993 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 11997
  pthread_mutex_unlock(& smutex_lock_of_NOT_ARG_SIGN);
  }
#line 11999
  return;
}
}
#line 12002 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 12007
  tmp = pthread_mutex_trylock(& smutex_lock_of_NOT_ARG_SIGN);
  }
#line 12009
  return (tmp);
}
}
#line 12012 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 12015
  return;
}
}
#line 12018 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 12023
  tmp = ldv_undef_int();
  }
#line 12025
  if (tmp != 0) {
#line 12026
    return (1);
  } else {
#line 12028
    return (0);
  }
}
}
#line 12032 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 12037
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
  }
#line 12039
  return (tmp == 0);
}
}
#line 12042 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 12047
  is_spin_contended = ldv_undef_int();
  }
#line 12049
  if (is_spin_contended != 0) {
#line 12050
    return (0);
  } else {
#line 12052
    return (1);
  }
}
}
#line 12056 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 12061
  atomic_value_after_dec = ldv_undef_int();
  }
#line 12063
  if (atomic_value_after_dec == 0) {
    {
#line 12065
    ldv_spin_lock_lock_of_NOT_ARG_SIGN();
    }
#line 12067
    return (1);
  }
#line 12070
  return (0);
}
}
#line 12073 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_lock_of_nsc_ircc_cb  ;
#line 12074 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_lock_of_nsc_ircc_cb(void) 
{ 


  {
  {
#line 12078
  pthread_mutex_lock(& smutex_lock_of_nsc_ircc_cb);
#line 12080
  __VERIFIER_atomic_begin();
#line 12080
  assert(-7LL + (long long )qos_mtt_bits >= 0LL);
#line 12080
  assert((-7LL + (long long )pnp_succeeded) + (long long )qos_mtt_bits >= 0LL);
#line 12080
  assert((-7LL - (long long )pnp_succeeded) + (long long )qos_mtt_bits >= 0LL);
#line 12080
  assert(0LL - (long long )pnp_succeeded >= 0LL);
#line 12080
  assert(7LL - (long long )qos_mtt_bits >= 0LL);
#line 12080
  assert((7LL + (long long )pnp_succeeded) - (long long )qos_mtt_bits >= 0LL);
#line 12080
  assert((7LL - (long long )pnp_succeeded) - (long long )qos_mtt_bits >= 0LL);
#line 12080
  assert((long long )pnp_succeeded >= 0LL);
#line 12080
  __VERIFIER_atomic_end();
  }
#line 12080
  return;
}
}
#line 12083 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_lock_of_nsc_ircc_cb(void) 
{ 


  {
  {
#line 12087
  pthread_mutex_unlock(& smutex_lock_of_nsc_ircc_cb);
  }
#line 12089
  return;
}
}
#line 12092 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_lock_of_nsc_ircc_cb(void) 
{ 
  int tmp ;

  {
  {
#line 12097
  tmp = pthread_mutex_trylock(& smutex_lock_of_nsc_ircc_cb);
  }
#line 12099
  return (tmp);
}
}
#line 12102 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_lock_of_nsc_ircc_cb(void) 
{ 


  {
#line 12105
  return;
}
}
#line 12108 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_lock_of_nsc_ircc_cb(void) 
{ 
  int tmp ;

  {
  {
#line 12113
  tmp = ldv_undef_int();
  }
#line 12115
  if (tmp != 0) {
#line 12116
    return (1);
  } else {
#line 12118
    return (0);
  }
}
}
#line 12122 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_lock_of_nsc_ircc_cb(void) 
{ 
  int tmp ;

  {
  {
#line 12127
  tmp = ldv_spin_is_locked_lock_of_nsc_ircc_cb();
  }
#line 12129
  return (tmp == 0);
}
}
#line 12132 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_lock_of_nsc_ircc_cb(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 12137
  is_spin_contended = ldv_undef_int();
  }
#line 12139
  if (is_spin_contended != 0) {
#line 12140
    return (0);
  } else {
#line 12142
    return (1);
  }
}
}
#line 12146 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_lock_of_nsc_ircc_cb(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 12151
  atomic_value_after_dec = ldv_undef_int();
  }
#line 12153
  if (atomic_value_after_dec == 0) {
    {
#line 12155
    ldv_spin_lock_lock_of_nsc_ircc_cb();
    }
#line 12157
    return (1);
  }
#line 12160
  return (0);
}
}
#line 12163 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_lru_lock_of_netns_frags  ;
#line 12164 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_lru_lock_of_netns_frags(void) 
{ 


  {
  {
#line 12168
  pthread_mutex_lock(& smutex_lru_lock_of_netns_frags);
  }
#line 12170
  return;
}
}
#line 12173 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_lru_lock_of_netns_frags(void) 
{ 


  {
  {
#line 12177
  pthread_mutex_unlock(& smutex_lru_lock_of_netns_frags);
  }
#line 12179
  return;
}
}
#line 12182 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_lru_lock_of_netns_frags(void) 
{ 
  int tmp ;

  {
  {
#line 12187
  tmp = pthread_mutex_trylock(& smutex_lru_lock_of_netns_frags);
  }
#line 12189
  return (tmp);
}
}
#line 12192 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_lru_lock_of_netns_frags(void) 
{ 


  {
#line 12195
  return;
}
}
#line 12198 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_lru_lock_of_netns_frags(void) 
{ 
  int tmp ;

  {
  {
#line 12203
  tmp = ldv_undef_int();
  }
#line 12205
  if (tmp != 0) {
#line 12206
    return (1);
  } else {
#line 12208
    return (0);
  }
}
}
#line 12212 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_lru_lock_of_netns_frags(void) 
{ 
  int tmp ;

  {
  {
#line 12217
  tmp = ldv_spin_is_locked_lru_lock_of_netns_frags();
  }
#line 12219
  return (tmp == 0);
}
}
#line 12222 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_lru_lock_of_netns_frags(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 12227
  is_spin_contended = ldv_undef_int();
  }
#line 12229
  if (is_spin_contended != 0) {
#line 12230
    return (0);
  } else {
#line 12232
    return (1);
  }
}
}
#line 12236 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_lru_lock_of_netns_frags(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 12241
  atomic_value_after_dec = ldv_undef_int();
  }
#line 12243
  if (atomic_value_after_dec == 0) {
    {
#line 12245
    ldv_spin_lock_lru_lock_of_netns_frags();
    }
#line 12247
    return (1);
  }
#line 12250
  return (0);
}
}
#line 12253 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_node_size_lock_of_pglist_data  ;
#line 12254 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_node_size_lock_of_pglist_data(void) 
{ 


  {
  {
#line 12258
  pthread_mutex_lock(& smutex_node_size_lock_of_pglist_data);
  }
#line 12260
  return;
}
}
#line 12263 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_node_size_lock_of_pglist_data(void) 
{ 


  {
  {
#line 12267
  pthread_mutex_unlock(& smutex_node_size_lock_of_pglist_data);
  }
#line 12269
  return;
}
}
#line 12272 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;

  {
  {
#line 12277
  tmp = pthread_mutex_trylock(& smutex_node_size_lock_of_pglist_data);
  }
#line 12279
  return (tmp);
}
}
#line 12282 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 12285
  return;
}
}
#line 12288 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;

  {
  {
#line 12293
  tmp = ldv_undef_int();
  }
#line 12295
  if (tmp != 0) {
#line 12296
    return (1);
  } else {
#line 12298
    return (0);
  }
}
}
#line 12302 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;

  {
  {
#line 12307
  tmp = ldv_spin_is_locked_node_size_lock_of_pglist_data();
  }
#line 12309
  return (tmp == 0);
}
}
#line 12312 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 12317
  is_spin_contended = ldv_undef_int();
  }
#line 12319
  if (is_spin_contended != 0) {
#line 12320
    return (0);
  } else {
#line 12322
    return (1);
  }
}
}
#line 12326 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_node_size_lock_of_pglist_data(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 12331
  atomic_value_after_dec = ldv_undef_int();
  }
#line 12333
  if (atomic_value_after_dec == 0) {
    {
#line 12335
    ldv_spin_lock_node_size_lock_of_pglist_data();
    }
#line 12337
    return (1);
  }
#line 12340
  return (0);
}
}
#line 12343 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_ptl  ;
#line 12344 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_ptl(void) 
{ 


  {
  {
#line 12348
  pthread_mutex_lock(& smutex_ptl);
  }
#line 12350
  return;
}
}
#line 12353 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_ptl(void) 
{ 


  {
  {
#line 12357
  pthread_mutex_unlock(& smutex_ptl);
  }
#line 12359
  return;
}
}
#line 12362 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_ptl(void) 
{ 
  int tmp ;

  {
  {
#line 12367
  tmp = pthread_mutex_trylock(& smutex_ptl);
  }
#line 12369
  return (tmp);
}
}
#line 12372 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_ptl(void) 
{ 


  {
#line 12375
  return;
}
}
#line 12378 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_ptl(void) 
{ 
  int tmp ;

  {
  {
#line 12383
  tmp = ldv_undef_int();
  }
#line 12385
  if (tmp != 0) {
#line 12386
    return (1);
  } else {
#line 12388
    return (0);
  }
}
}
#line 12392 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_ptl(void) 
{ 
  int tmp ;

  {
  {
#line 12397
  tmp = ldv_spin_is_locked_ptl();
  }
#line 12399
  return (tmp == 0);
}
}
#line 12402 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_ptl(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 12407
  is_spin_contended = ldv_undef_int();
  }
#line 12409
  if (is_spin_contended != 0) {
#line 12410
    return (0);
  } else {
#line 12412
    return (1);
  }
}
}
#line 12416 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_ptl(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 12421
  atomic_value_after_dec = ldv_undef_int();
  }
#line 12423
  if (atomic_value_after_dec == 0) {
    {
#line 12425
    ldv_spin_lock_ptl();
    }
#line 12427
    return (1);
  }
#line 12430
  return (0);
}
}
#line 12433 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_siglock_of_sighand_struct  ;
#line 12434 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
  {
#line 12438
  pthread_mutex_lock(& smutex_siglock_of_sighand_struct);
  }
#line 12440
  return;
}
}
#line 12443 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
  {
#line 12447
  pthread_mutex_unlock(& smutex_siglock_of_sighand_struct);
  }
#line 12449
  return;
}
}
#line 12452 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;

  {
  {
#line 12457
  tmp = pthread_mutex_trylock(& smutex_siglock_of_sighand_struct);
  }
#line 12459
  return (tmp);
}
}
#line 12462 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
#line 12465
  return;
}
}
#line 12468 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int tmp ;

  {
  {
#line 12473
  tmp = ldv_undef_int();
  }
#line 12475
  if (tmp != 0) {
#line 12476
    return (1);
  } else {
#line 12478
    return (0);
  }
}
}
#line 12482 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;

  {
  {
#line 12487
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
  }
#line 12489
  return (tmp == 0);
}
}
#line 12492 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 12497
  is_spin_contended = ldv_undef_int();
  }
#line 12499
  if (is_spin_contended != 0) {
#line 12500
    return (0);
  } else {
#line 12502
    return (1);
  }
}
}
#line 12506 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 12511
  atomic_value_after_dec = ldv_undef_int();
  }
#line 12513
  if (atomic_value_after_dec == 0) {
    {
#line 12515
    ldv_spin_lock_siglock_of_sighand_struct();
    }
#line 12517
    return (1);
  }
#line 12520
  return (0);
}
}
#line 12523 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
pthread_mutex_t___0 smutex_tx_global_lock_of_net_device  ;
#line 12524 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_lock_tx_global_lock_of_net_device(void) 
{ 


  {
  {
#line 12528
  pthread_mutex_lock(& smutex_tx_global_lock_of_net_device);
  }
#line 12530
  return;
}
}
#line 12533 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_tx_global_lock_of_net_device(void) 
{ 


  {
  {
#line 12537
  pthread_mutex_unlock(& smutex_tx_global_lock_of_net_device);
  }
#line 12539
  return;
}
}
#line 12542 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_trylock_tx_global_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 12547
  tmp = pthread_mutex_trylock(& smutex_tx_global_lock_of_net_device);
  }
#line 12549
  return (tmp);
}
}
#line 12552 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_spin_unlock_wait_tx_global_lock_of_net_device(void) 
{ 


  {
#line 12555
  return;
}
}
#line 12558 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_locked_tx_global_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 12563
  tmp = ldv_undef_int();
  }
#line 12565
  if (tmp != 0) {
#line 12566
    return (1);
  } else {
#line 12568
    return (0);
  }
}
}
#line 12572 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_can_lock_tx_global_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 12577
  tmp = ldv_spin_is_locked_tx_global_lock_of_net_device();
  }
#line 12579
  return (tmp == 0);
}
}
#line 12582 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_spin_is_contended_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 12587
  is_spin_contended = ldv_undef_int();
  }
#line 12589
  if (is_spin_contended != 0) {
#line 12590
    return (0);
  } else {
#line 12592
    return (1);
  }
}
}
#line 12596 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_atomic_dec_and_lock_tx_global_lock_of_net_device(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 12601
  atomic_value_after_dec = ldv_undef_int();
  }
#line 12603
  if (atomic_value_after_dec == 0) {
    {
#line 12605
    ldv_spin_lock_tx_global_lock_of_net_device();
    }
#line 12607
    return (1);
  }
#line 12610
  return (0);
}
}
#line 12614 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void kfree(void const   *p ) 
{ 


  {
  {
#line 12615
  free((void *)p);
  }
#line 12616
  return;
}
}
#line 12617 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct platform_device *platform_device_register_full(struct platform_device_info  const  *arg0 ) 
{ 
  void *tmp ;

  {
  {
#line 12618
  tmp = ldv_malloc((size_t___0 )sizeof(struct platform_device ));
  }
#line 12618
  return ((struct platform_device *)tmp);
}
}
#line 12620 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void debug_dma_alloc_coherent(struct device *arg0 , size_t___0 arg1 , dma_addr_t arg2 ,
                              void *arg3 ) 
{ 


  {
#line 12621
  return;
}
}
#line 12624 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int async_wrap_skb(struct sk_buff *arg0 , __u8 *arg1 , int arg2 ) 
{ 
  int tmp ;

  {
  {
#line 12625
  tmp = __VERIFIER_nondet_int();
  }
#line 12625
  return (tmp);
}
}
#line 12627 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void async_unwrap_char(struct net_device *arg0 , struct net_device_stats *arg1 , iobuff_t *arg2 ,
                       __u8 arg3 ) 
{ 


  {
#line 12628
  return;
}
}
#line 12630 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void __raw_spin_lock_init(raw_spinlock_t *arg0 , char const   *arg1 , struct lock_class_key *arg2 ) 
{ 


  {
#line 12631
  return;
}
}
#line 12633 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct resource *pnp_get_resource(struct pnp_dev *arg0 , unsigned long arg1 , unsigned int arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 12634
  tmp = ldv_malloc((size_t___0 )sizeof(struct resource ));
  }
#line 12634
  return ((struct resource *)tmp);
}
}
#line 12636 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void consume_skb(struct sk_buff *arg0 ) 
{ 


  {
#line 12637
  return;
}
}
#line 12639 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void __const_udelay(unsigned long arg0 ) 
{ 


  {
#line 12640
  return;
}
}
#line 12643 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int sprintf(char *arg0 , char const   *arg1  , ...) 
{ 
  int tmp ;

  {
  {
#line 12644
  tmp = __VERIFIER_nondet_int();
  }
#line 12644
  return (tmp);
}
}
#line 12646 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void _raw_spin_unlock_irqrestore(raw_spinlock_t *arg0 , unsigned long arg1 ) 
{ 


  {
#line 12647
  return;
}
}
#line 12649 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void irda_setup_dma(int arg0 , dma_addr_t arg1 , int arg2 , int arg3 ) 
{ 


  {
#line 12650
  return;
}
}
#line 12652 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void rtnl_lock(void) 
{ 


  {
#line 12653
  return;
}
}
#line 12655 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_after_alloc(void *arg0 ) 
{ 


  {
#line 12656
  return;
}
}
#line 12658 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void irda_qos_bits_to_value(struct qos_info *arg0 ) 
{ 


  {
#line 12659
  return;
}
}
#line 12662 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int netif_rx(struct sk_buff *arg0 ) 
{ 
  int tmp ;

  {
  {
#line 12663
  tmp = __VERIFIER_nondet_int();
  }
#line 12663
  return (tmp);
}
}
#line 12665 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void pnp_unregister_driver(struct pnp_driver *arg0 ) 
{ 


  {
#line 12666
  return;
}
}
#line 12668 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void platform_device_unregister(struct platform_device *arg0 ) 
{ 


  {
#line 12669
  return;
}
}
#line 12671 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_switch_to_interrupt_context(void) 
{ 


  {
#line 12672
  return;
}
}
#line 12674 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void _raw_spin_unlock(raw_spinlock_t *arg0 ) 
{ 


  {
#line 12675
  return;
}
}
#line 12677 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_check_alloc_flags(gfp_t arg0 ) 
{ 


  {
#line 12678
  return;
}
}
#line 12680 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void irda_init_max_qos_capabilies(struct qos_info *arg0 ) 
{ 


  {
#line 12681
  return;
}
}
#line 12683 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void rtnl_unlock(void) 
{ 


  {
#line 12684
  return;
}
}
#line 12686 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void netif_device_attach(struct net_device *arg0 ) 
{ 


  {
#line 12687
  return;
}
}
#line 12689 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void __release_region(struct resource *arg0 , resource_size_t arg1 , resource_size_t arg2 ) 
{ 


  {
#line 12690
  return;
}
}
#line 12692 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void __ldv_spin_lock(spinlock_t *arg0 ) 
{ 


  {
#line 12693
  return;
}
}
#line 12695 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void ldv_switch_to_process_context(void) 
{ 


  {
#line 12696
  return;
}
}
#line 12698 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void unregister_netdevice_queue(struct net_device *arg0 , struct list_head *arg1 ) 
{ 


  {
#line 12699
  return;
}
}
#line 12701 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct sk_buff *__netdev_alloc_skb(struct net_device *arg0 , unsigned int arg1 , gfp_t arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 12702
  tmp = ldv_malloc((size_t___0 )sizeof(struct sk_buff ));
  }
#line 12702
  return ((struct sk_buff *)tmp);
}
}
#line 12705 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int printk(char const   *arg0  , ...) 
{ 
  int tmp ;

  {
  {
#line 12706
  tmp = __VERIFIER_nondet_int();
  }
#line 12706
  return (tmp);
}
}
#line 12708 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void warn_slowpath_null(char const   *arg0 , int const   arg1 ) 
{ 


  {
#line 12709
  return;
}
}
#line 12712 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
bool capable(int arg0 ) 
{ 
  bool tmp ;

  {
  {
#line 12713
  tmp = __VERIFIER_nondet_bool();
  }
#line 12713
  return (tmp);
}
}
#line 12715 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
unsigned char *skb_put(struct sk_buff *arg0 , unsigned int arg1 ) 
{ 
  unsigned char *ret_val ;

  {
  {
#line 12716
  ret_val = arg0->data + arg0->tail;
#line 12717
  arg0->tail += arg1;
  }
#line 12718
  return (ret_val);
}
}
#line 12720 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void do_gettimeofday(struct timeval *arg0 ) 
{ 


  {
#line 12721
  return;
}
}
#line 12723 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void netif_device_detach(struct net_device *arg0 ) 
{ 


  {
#line 12724
  return;
}
}
#line 12727 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int net_ratelimit(void) 
{ 
  int tmp ;

  {
  {
#line 12728
  tmp = __VERIFIER_nondet_int();
  }
#line 12728
  return (tmp);
}
}
#line 12730 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void __udelay(unsigned long arg0 ) 
{ 


  {
#line 12731
  return;
}
}
#line 12734 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int request_dma(unsigned int arg0 , char const   *arg1 ) 
{ 
  int tmp ;

  {
  {
#line 12735
  tmp = __VERIFIER_nondet_int();
  }
#line 12735
  return (tmp);
}
}
#line 12737 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void irlap_close(struct irlap_cb *arg0 ) 
{ 


  {
#line 12738
  return;
}
}
#line 12741 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int ldv_failed_register_netdev(void) 
{ 
  int tmp ;

  {
  {
#line 12742
  tmp = __VERIFIER_nondet_int();
  }
#line 12742
  return (tmp);
}
}
#line 12744 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void _raw_spin_lock(raw_spinlock_t *arg0 ) 
{ 


  {
#line 12745
  return;
}
}
#line 12747 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct resource *__request_region(struct resource *arg0 , resource_size_t arg1 , resource_size_t arg2 ,
                                  char const   *arg3 , int arg4 ) 
{ 
  void *tmp ;

  {
  {
#line 12748
  tmp = ldv_malloc((size_t___0 )sizeof(struct resource ));
  }
#line 12748
  return ((struct resource *)tmp);
}
}
#line 12750 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void debug_dma_free_coherent(struct device *arg0 , size_t___0 arg1 , void *arg2 ,
                             dma_addr_t arg3 ) 
{ 


  {
#line 12751
  return;
}
}
#line 12753 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct net_device *alloc_irdadev(int arg0 ) 
{ 
  void *tmp ;

  {
  {
#line 12754
  tmp = ldv_malloc((size_t___0 )sizeof(struct net_device ));
  }
#line 12754
  return ((struct net_device *)tmp);
}
}
#line 12756 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void *memcpy(void *arg0 , void const   *arg1 , size_t___0 arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 12757
  tmp = ldv_malloc((size_t___0 )0UL);
  }
#line 12757
  return (tmp);
}
}
#line 12759 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void free_dma(unsigned int arg0 ) 
{ 


  {
#line 12760
  return;
}
}
#line 12762 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
struct irlap_cb *irlap_open(struct net_device *arg0 , struct qos_info *arg1 , char const   *arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 12763
  tmp = ldv_malloc((size_t___0 )0UL);
  }
#line 12763
  return ((struct irlap_cb *)tmp);
}
}
#line 12766 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int netpoll_trap(void) 
{ 
  int tmp ;

  {
  {
#line 12767
  tmp = __VERIFIER_nondet_int();
  }
#line 12767
  return (tmp);
}
}
#line 12769 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void irda_device_set_media_busy(struct net_device *arg0 , int arg1 ) 
{ 


  {
#line 12770
  return;
}
}
#line 12772 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
void __netif_schedule(struct Qdisc *arg0 ) 
{ 


  {
#line 12773
  return;
}
}
#line 12776 "linux-3.14--drivers--net--irda--nsc-ircc.ko.cil.i"
int pnp_register_driver(struct pnp_driver *arg0 ) 
{ 
  int tmp ;

  {
  {
#line 12777
  tmp = __VERIFIER_nondet_int();
  }
#line 12777
  return (tmp);
}
}
