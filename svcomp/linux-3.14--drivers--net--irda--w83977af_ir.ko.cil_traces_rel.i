/* Generated by CIL v. 1.8.2 */
/* print_CIL_Input is true */

#line 143 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef long ptrdiff_t;
#line 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef unsigned long size_t;
#line 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef int wchar_t;
#line 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
struct __anonstruct_max_align_t_896270833 {
   long long __max_align_ll  __attribute__((__aligned__(__alignof__(long long )))) ;
   long double __max_align_ld  __attribute__((__aligned__(__alignof__(long double )))) ;
};
#line 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef struct __anonstruct_max_align_t_896270833 max_align_t;
#line 31 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned char __u_char;
#line 32 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned short __u_short;
#line 33 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __u_int;
#line 34 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __u_long;
#line 37 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef signed char __int8_t;
#line 38 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned char __uint8_t;
#line 39 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef short __int16_t;
#line 40 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned short __uint16_t;
#line 41 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __int32_t;
#line 42 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __uint32_t;
#line 44 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __int64_t;
#line 45 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __uint64_t;
#line 52 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int8_t __int_least8_t;
#line 53 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint8_t __uint_least8_t;
#line 54 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int16_t __int_least16_t;
#line 55 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint16_t __uint_least16_t;
#line 56 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int32_t __int_least32_t;
#line 57 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint32_t __uint_least32_t;
#line 58 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int64_t __int_least64_t;
#line 59 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint64_t __uint_least64_t;
#line 63 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __quad_t;
#line 64 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __u_quad_t;
#line 72 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __intmax_t;
#line 73 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __uintmax_t;
#line 145 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __dev_t;
#line 146 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __uid_t;
#line 147 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __gid_t;
#line 148 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __ino_t;
#line 149 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __ino64_t;
#line 150 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __mode_t;
#line 151 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __nlink_t;
#line 152 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off_t;
#line 153 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off64_t;
#line 154 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __pid_t;
#line 155 "/usr/include/x86_64-linux-gnu/bits/types.h"
struct __anonstruct___fsid_t_109580352 {
   int __val[2] ;
};
#line 155 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef struct __anonstruct___fsid_t_109580352 __fsid_t;
#line 156 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __clock_t;
#line 157 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __rlim_t;
#line 158 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __rlim64_t;
#line 159 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __id_t;
#line 160 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __time_t;
#line 161 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __useconds_t;
#line 162 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __suseconds_t;
#line 163 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __suseconds64_t;
#line 165 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __daddr_t;
#line 166 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __key_t;
#line 169 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __clockid_t;
#line 172 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef void *__timer_t;
#line 175 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blksize_t;
#line 180 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blkcnt_t;
#line 181 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blkcnt64_t;
#line 184 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsblkcnt_t;
#line 185 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsblkcnt64_t;
#line 188 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsfilcnt_t;
#line 189 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsfilcnt64_t;
#line 192 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __fsword_t;
#line 194 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __ssize_t;
#line 197 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __syscall_slong_t;
#line 199 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __syscall_ulong_t;
#line 203 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __off64_t __loff_t;
#line 204 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef char *__caddr_t;
#line 207 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __intptr_t;
#line 210 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __socklen_t;
#line 215 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __sig_atomic_t;
#line 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h"
typedef __time_t time_t;
#line 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h"
struct timespec {
   __time_t tv_sec ;
   __syscall_slong_t tv_nsec ;
};
#line 38 "/usr/include/sched.h"
typedef __pid_t pid_t;
#line 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h"
struct sched_param {
   int sched_priority ;
};
#line 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
typedef unsigned long __cpu_mask;
#line 39 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
struct __anonstruct_cpu_set_t_826868708 {
   __cpu_mask __bits[1024UL / (8UL * sizeof(__cpu_mask ))] ;
};
#line 39 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
typedef struct __anonstruct_cpu_set_t_826868708 cpu_set_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h"
typedef __clock_t clock_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
struct tm {
   int tm_sec ;
   int tm_min ;
   int tm_hour ;
   int tm_mday ;
   int tm_mon ;
   int tm_year ;
   int tm_wday ;
   int tm_yday ;
   int tm_isdst ;
   long tm_gmtoff ;
   char const   *tm_zone ;
};
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h"
typedef __clockid_t clockid_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h"
typedef __timer_t timer_t;
#line 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h"
struct itimerspec {
   struct timespec it_interval ;
   struct timespec it_value ;
};
#line 49 "/usr/include/time.h"
struct sigevent ;
#line 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
struct __locale_data ;
#line 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
struct __locale_struct {
   struct __locale_data *__locales[13] ;
   unsigned short const   *__ctype_b ;
   int const   *__ctype_tolower ;
   int const   *__ctype_toupper ;
   char const   *__names[13] ;
};
#line 42 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
typedef struct __locale_struct *__locale_t;
#line 24 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h"
typedef __locale_t locale_t;
#line 49 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_internal_list {
   struct __pthread_internal_list *__prev ;
   struct __pthread_internal_list *__next ;
};
#line 49 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __pthread_internal_list __pthread_list_t;
#line 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_internal_slist {
   struct __pthread_internal_slist *__next ;
};
#line 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __pthread_internal_slist __pthread_slist_t;
#line 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h"
struct __pthread_mutex_s {
   int __lock ;
   unsigned int __count ;
   int __owner ;
   unsigned int __nusers ;
   int __kind ;
   short __spins ;
   short __elision ;
   __pthread_list_t __list ;
};
#line 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h"
struct __pthread_rwlock_arch_t {
   unsigned int __readers ;
   unsigned int __writers ;
   unsigned int __wrphase_futex ;
   unsigned int __writers_futex ;
   unsigned int __pad3 ;
   unsigned int __pad4 ;
   int __cur_writer ;
   int __shared ;
   signed char __rwelision ;
   unsigned char __pad1[7] ;
   unsigned long __pad2 ;
   unsigned int __flags ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___wseq32_817613185 {
   unsigned int __low ;
   unsigned int __high ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
union __anonunion____missing_field_name_207979571 {
   unsigned long long __wseq ;
   struct __anonstruct___wseq32_817613185 __wseq32 ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___g1_start32_817613186 {
   unsigned int __low ;
   unsigned int __high ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
union __anonunion____missing_field_name_459614979 {
   unsigned long long __g1_start ;
   struct __anonstruct___g1_start32_817613186 __g1_start32 ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_cond_s {
   union __anonunion____missing_field_name_207979571 __annonCompField1 ;
   union __anonunion____missing_field_name_459614979 __annonCompField2 ;
   unsigned int __g_refs[2] ;
   unsigned int __g_size[2] ;
   unsigned int __g1_orig_size ;
   unsigned int __wrefs ;
   unsigned int __g_signals[2] ;
};
#line 119 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef unsigned int __tss_t;
#line 120 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef unsigned long __thrd_t;
#line 122 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___once_flag_826868709 {
   int __data ;
};
#line 122 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __anonstruct___once_flag_826868709 __once_flag;
#line 27 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 32 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_mutexattr_t_488594144 {
   char __size[4] ;
   int __align ;
};
#line 32 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_mutexattr_t_488594144 pthread_mutexattr_t;
#line 41 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_condattr_t_488594145 {
   char __size[4] ;
   int __align ;
};
#line 41 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_condattr_t_488594145 pthread_condattr_t;
#line 49 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef unsigned int pthread_key_t;
#line 53 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef int pthread_once_t;
#line 56 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union pthread_attr_t {
   char __size[56] ;
   long __align ;
};
#line 62 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union pthread_attr_t pthread_attr_t;
#line 67 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_mutex_t_335460617 {
   struct __pthread_mutex_s __data ;
   char __size[40] ;
   long __align ;
};
#line 67 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_mutex_t_335460617 pthread_mutex_t;
#line 75 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_cond_t_951761805 {
   struct __pthread_cond_s __data ;
   char __size[48] ;
   long long __align ;
};
#line 75 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_cond_t_951761805 pthread_cond_t;
#line 86 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_rwlock_t_656928968 {
   struct __pthread_rwlock_arch_t __data ;
   char __size[56] ;
   long __align ;
};
#line 86 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_rwlock_t_656928968 pthread_rwlock_t;
#line 93 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_rwlockattr_t_145707745 {
   char __size[8] ;
   long __align ;
};
#line 93 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_rwlockattr_t_145707745 pthread_rwlockattr_t;
#line 103 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef int volatile   pthread_spinlock_t;
#line 108 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_barrier_t_145707746 {
   char __size[32] ;
   long __align ;
};
#line 108 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_barrier_t_145707746 pthread_barrier_t;
#line 114 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_barrierattr_t_951761806 {
   char __size[4] ;
   int __align ;
};
#line 114 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_barrierattr_t_951761806 pthread_barrierattr_t;
#line 31 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
typedef long __jmp_buf[8];
#line 5 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h"
struct __anonstruct___sigset_t_764561023 {
   unsigned long __val[1024UL / (8UL * sizeof(unsigned long ))] ;
};
#line 5 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h"
typedef struct __anonstruct___sigset_t_764561023 __sigset_t;
#line 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h"
struct __jmp_buf_tag {
   __jmp_buf __jmpbuf ;
   int __mask_was_saved ;
   __sigset_t __saved_mask ;
};
#line 37 "/usr/include/pthread.h"
enum __anonenum_34415463 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1
} ;
#line 47
enum __anonenum_508643754 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
    PTHREAD_MUTEX_NORMAL = 0,
    PTHREAD_MUTEX_RECURSIVE = 1,
    PTHREAD_MUTEX_ERRORCHECK = 2,
    PTHREAD_MUTEX_DEFAULT = 0
} ;
#line 69
enum __anonenum_931900394 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_STALLED_NP = 0,
    PTHREAD_MUTEX_ROBUST = 1,
    PTHREAD_MUTEX_ROBUST_NP = 1
} ;
#line 81
enum __anonenum_205214487 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2
} ;
#line 104
enum __anonenum_25043950 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
    PTHREAD_RWLOCK_DEFAULT_NP = 0
} ;
#line 124
enum __anonenum_436439511 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1
} ;
#line 134
enum __anonenum_998661166 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1
} ;
#line 144
enum __anonenum_146137331 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1
} ;
#line 159 "/usr/include/pthread.h"
struct _pthread_cleanup_buffer {
   void (*__routine)(void * ) ;
   void *__arg ;
   int __canceltype ;
   struct _pthread_cleanup_buffer *__prev ;
};
#line 168
enum __anonenum_53396917 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1
} ;
#line 175
enum __anonenum_904563783 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1
} ;
#line 538 "/usr/include/pthread.h"
struct __cancel_jmp_buf_tag {
   __jmp_buf __cancel_jmp_buf ;
   int __mask_was_saved ;
};
#line 544 "/usr/include/pthread.h"
struct __anonstruct___pthread_unwind_buf_t_530692248 {
   struct __cancel_jmp_buf_tag __cancel_jmp_buf[1] ;
   void *__pad[4] ;
};
#line 544 "/usr/include/pthread.h"
typedef struct __anonstruct___pthread_unwind_buf_t_530692248  __attribute__((__aligned__)) __pthread_unwind_buf_t;
#line 557 "/usr/include/pthread.h"
struct __pthread_cleanup_frame {
   void (*__cancel_routine)(void * ) ;
   void *__cancel_arg ;
   int __do_it ;
   int __cancel_type ;
};
#line 12 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __pthread_mutex_s___0 {
   int __lock ;
   unsigned int __count ;
   int __owner ;
   unsigned int __nusers ;
   int __kind ;
   int __spins ;
   __pthread_list_t __list ;
};
#line 12 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_pthread_mutex_t_1057493082 {
   struct __pthread_mutex_s___0 __data ;
   char __size[40] ;
   long __align ;
};
#line 12 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef union __anonunion_pthread_mutex_t_1057493082 pthread_mutex_t___0;
#line 49
struct device ;
#line 50 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef signed char __s8;
#line 51 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned char __u8;
#line 52 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef short __s16;
#line 53 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned short __u16;
#line 54 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef int __s32;
#line 55 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned int __u32;
#line 56 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned long long __u64;
#line 57 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef signed char s8;
#line 58 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned char u8;
#line 59 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef short s16;
#line 60 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned short u16;
#line 61 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef int s32;
#line 62 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned int u32;
#line 63 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef long long s64;
#line 64 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned long long u64;
#line 65 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef long __kernel_long_t;
#line 66 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned long __kernel_ulong_t;
#line 68 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned int __kernel_uid32_t;
#line 69 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned int __kernel_gid32_t;
#line 70 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __kernel_ulong_t __kernel_size_t;
#line 71 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __kernel_long_t __kernel_ssize_t;
#line 72 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef long long __kernel_loff_t;
#line 74 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __kernel_long_t __kernel_clock_t;
#line 75 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef int __kernel_timer_t;
#line 77 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __u16 __be16;
#line 78 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __u32 __be32;
#line 79 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __u32 __wsum;
#line 80 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __u32 __kernel_dev_t;
#line 81 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __kernel_dev_t dev_t;
#line 82 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned short umode_t;
#line 85 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef _Bool bool;
#line 86 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __kernel_uid32_t uid_t;
#line 87 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __kernel_gid32_t gid_t;
#line 88 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __kernel_loff_t loff_t;
#line 89 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned int size_t___0;
#line 90 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __kernel_ssize_t ssize_t;
#line 92 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __s32 int32_t;
#line 93 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __u8 uint8_t;
#line 94 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __u32 uint32_t;
#line 95 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __u64 uint64_t;
#line 96 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned long sector_t;
#line 97 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned long blkcnt_t;
#line 98 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef u64 dma_addr_t;
#line 99 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned int gfp_t;
#line 100 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned int fmode_t;
#line 101 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned int oom_flags_t;
#line 102 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef u64 phys_addr_t;
#line 103 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef phys_addr_t resource_size_t;
#line 104 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 107 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 108 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 111 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 112 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 116
struct hlist_node ;
#line 117 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct hlist_head {
   struct hlist_node *first ;
};
#line 120 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 124 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 128
struct mutex ;
#line 129 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef u16 __ticket_t;
#line 130 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef u32 __ticketpair_t;
#line 131 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 135 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 139 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct arch_spinlock {
   union __anonunion____missing_field_name_8 __annonCompField4 ;
};
#line 142 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct arch_spinlock arch_spinlock_t;
#line 143 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_10 {
   u32 read ;
   s32 write ;
};
#line 147 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct____missing_field_name_10 __annonCompField5 ;
};
#line 151 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
#line 152
struct task_struct ;
#line 153
struct lockdep_map ;
#line 154 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 158
struct module ;
#line 159 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 182 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 186 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 201 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_11 {
   struct __anonstruct____missing_field_name_12 __annonCompField6 ;
   struct __anonstruct____missing_field_name_13 __annonCompField7 ;
};
#line 205 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct desc_struct {
   union __anonunion____missing_field_name_11 __annonCompField8 ;
};
#line 208 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct gate_struct64 {
   u16 offset_low ;
   u16 segment ;
   unsigned int ist : 3 ;
   unsigned int zero0 : 5 ;
   unsigned int type : 5 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 zero1 ;
};
#line 220 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct gate_struct64 gate_desc;
#line 221 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
};
#line 225 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned long pgdval_t;
#line 226 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned long pgprotval_t;
#line 227 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 230 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct pgprot pgprot_t;
#line 231 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 234 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 235
struct page ;
#line 236 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct page *pgtable_t;
#line 237
struct file ;
#line 238
struct seq_file ;
#line 239
struct thread_struct ;
#line 240
struct tss_struct ;
#line 241
struct mm_struct ;
#line 242
struct cpumask ;
#line 243 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct paravirt_callee_save {
   void *func ;
};
#line 246 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pv_cpu_ops {
   unsigned long (*get_debugreg)(int  ) ;
   void (*set_debugreg)(int  , unsigned long  ) ;
   void (*clts)(void) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long  ) ;
   unsigned long (*read_cr4_safe)(void) ;
   unsigned long (*read_cr4)(void) ;
   void (*write_cr4)(unsigned long  ) ;
   unsigned long (*read_cr8)(void) ;
   void (*write_cr8)(unsigned long  ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr  const  * ) ;
   void (*load_idt)(struct desc_ptr  const  * ) ;
   void (*store_idt)(struct desc_ptr * ) ;
   void (*set_ldt)(void const   * , unsigned int  ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct * , unsigned int  ) ;
   void (*load_gs_index)(unsigned int  ) ;
   void (*write_ldt_entry)(struct desc_struct * , int  , void const   * ) ;
   void (*write_gdt_entry)(struct desc_struct * , int  , void const   * , int  ) ;
   void (*write_idt_entry)(gate_desc * , int  , gate_desc const   * ) ;
   void (*alloc_ldt)(struct desc_struct * , unsigned int  ) ;
   void (*free_ldt)(struct desc_struct * , unsigned int  ) ;
   void (*load_sp0)(struct tss_struct * , struct thread_struct * ) ;
   void (*set_iopl_mask)(unsigned int  ) ;
   void (*wbinvd)(void) ;
   void (*io_delay)(void) ;
   void (*cpuid)(unsigned int * , unsigned int * , unsigned int * , unsigned int * ) ;
   u64 (*read_msr)(unsigned int  , int * ) ;
   int (*write_msr)(unsigned int  , unsigned int  , unsigned int  ) ;
   u64 (*read_tsc)(void) ;
   u64 (*read_pmc)(int  ) ;
   unsigned long long (*read_tscp)(unsigned int * ) ;
   void (*irq_enable_sysexit)(void) ;
   void (*usergs_sysret64)(void) ;
   void (*usergs_sysret32)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   void (*start_context_switch)(struct task_struct * ) ;
   void (*end_context_switch)(struct task_struct * ) ;
};
#line 288 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
   void (*adjust_exception_frame)(void) ;
};
#line 297 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef void (*ctor_fn_t)(void);
#line 298
struct net_device ;
#line 299
struct file_operations ;
#line 300
struct completion ;
#line 301
struct pid ;
#line 302 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 313 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 317 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_18 __annonCompField9 ;
};
#line 321 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 327 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 330 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct cpumask cpumask_t;
#line 331 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct cpumask *cpumask_var_t;
#line 332
struct static_key ;
#line 333
struct seq_operations ;
#line 334 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct x86_hw_tss {
   u32 reserved1 ;
   u64 sp0 ;
   u64 sp1 ;
   u64 sp2 ;
   u64 reserved2 ;
   u64 ist[7U] ;
   u32 reserved3 ;
   u32 reserved4 ;
   u16 reserved5 ;
   u16 io_bitmap_base ;
};
#line 346 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tss_struct {
   struct x86_hw_tss x86_tss ;
   unsigned long io_bitmap[1025U] ;
   unsigned long stack[64U] ;
};
#line 351 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 362 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_23 {
   u64 rip ;
   u64 rdp ;
};
#line 366 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 372 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_22 {
   struct __anonstruct____missing_field_name_23 __annonCompField13 ;
   struct __anonstruct____missing_field_name_24 __annonCompField14 ;
};
#line 376 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 380 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_22 __annonCompField15 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion____missing_field_name_25 __annonCompField16 ;
};
#line 393 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 411 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 414 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct lwp_struct {
   u8 reserved[128U] ;
};
#line 417 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct bndregs_struct {
   u64 bndregs[8U] ;
};
#line 420 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct bndcsr_struct {
   u64 cfg_reg_u ;
   u64 status_reg ;
};
#line 424 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 429 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
   struct lwp_struct lwp ;
   struct bndregs_struct bndregs ;
   struct bndcsr_struct bndcsr ;
};
#line 437 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 443 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 448
struct kmem_cache ;
#line 449
struct perf_event ;
#line 450 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned char fpu_counter ;
};
#line 473 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef atomic64_t atomic_long_t;
#line 474 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 480 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 483 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 486 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 503 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 510 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 11 ;
};
#line 525 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 532 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct raw_spinlock raw_spinlock_t;
#line 533 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 537 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct____missing_field_name_29 __annonCompField18 ;
};
#line 541 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct spinlock {
   union __anonunion____missing_field_name_28 __annonCompField19 ;
};
#line 544 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct spinlock spinlock_t;
#line 545 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 552 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 553 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct plist_head {
   struct list_head node_list ;
};
#line 556 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 561 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 570 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 576
struct jump_entry ;
#line 577
struct static_key_mod ;
#line 578 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct static_key {
   atomic_t enabled ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 583 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef u64 jump_label_t;
#line 584 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};
#line 589
struct rw_semaphore ;
#line 590 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 596 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 600 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct seqcount seqcount_t;
#line 601 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_seqlock_t_35 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 605 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 606 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 610 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __wait_queue_head wait_queue_head_t;
#line 611 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 615
struct notifier_block ;
#line 620 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union ktime {
   s64 tv64 ;
};
#line 623 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef union ktime ktime_t;
#line 624
struct tvec_base ;
#line 625 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 637
struct hrtimer ;
#line 638
enum hrtimer_restart ;
#line 639
struct workqueue_struct ;
#line 640
struct work_struct ;
#line 641 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 647 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 653 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 658 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 662 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 671 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct idr_layer {
   int prefix ;
   unsigned long bitmap[4U] ;
   struct idr_layer *ary[256U] ;
   int count ;
   int layer ;
   struct callback_head callback_head ;
};
#line 679 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   int cur ;
   spinlock_t lock ;
};
#line 688 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};
#line 692 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};
#line 696 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 701 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 704
struct dentry ;
#line 705
struct iattr ;
#line 706
struct vm_area_struct ;
#line 707
struct super_block ;
#line 708
struct file_system_type ;
#line 709
struct kernfs_open_node ;
#line 710
struct kernfs_iattrs ;
#line 711
struct kernfs_root ;
#line 712 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 717
struct kernfs_node ;
#line 718 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 721
struct kernfs_ops ;
#line 722 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernfs_elem_attr {
   struct kernfs_ops  const  *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
};
#line 727 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_u_36 {
   struct completion *completion ;
   struct kernfs_node *removed_list ;
};
#line 731 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_37 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 736 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const   *name ;
   struct rb_node rb ;
   union __anonunion_u_36 u ;
   void const   *ns ;
   unsigned int hash ;
   union __anonunion____missing_field_name_37 __annonCompField21 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};
#line 753 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernfs_dir_ops {
   int (*mkdir)(struct kernfs_node * , char const   * , umode_t  ) ;
   int (*rmdir)(struct kernfs_node * ) ;
   int (*rename)(struct kernfs_node * , struct kernfs_node * , char const   * ) ;
};
#line 758 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernfs_root {
   struct kernfs_node *kn ;
   struct ida ino_ida ;
   struct kernfs_dir_ops *dir_ops ;
};
#line 763
struct vm_operations_struct ;
#line 764 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   bool mmapped ;
   struct vm_operations_struct  const  *vm_ops ;
};
#line 773 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernfs_ops {
   int (*seq_show)(struct seq_file * , void * ) ;
   void *(*seq_start)(struct seq_file * , loff_t * ) ;
   void *(*seq_next)(struct seq_file * , void * , loff_t * ) ;
   void (*seq_stop)(struct seq_file * , void * ) ;
   ssize_t (*read)(struct kernfs_open_file * , char * , size_t___0  , loff_t  ) ;
   ssize_t (*write)(struct kernfs_open_file * , char * , size_t___0  , loff_t  ) ;
   int (*mmap)(struct kernfs_open_file * , struct vm_area_struct * ) ;
   struct lock_class_key lockdep_key ;
};
#line 783
struct sock ;
#line 784
struct kobject ;
#line 785
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 790 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 798
struct user_namespace ;
#line 799 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_kuid_t_38 {
   uid_t val ;
};
#line 802 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_kuid_t_38 kuid_t;
#line 803 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_kgid_t_39 {
   gid_t val ;
};
#line 806 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_kgid_t_39 kgid_t;
#line 807 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 822
struct bin_attribute ;
#line 823 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 830 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 836 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct bin_attribute {
   struct attribute attr ;
   size_t___0 size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t___0  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t___0  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 846 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t___0  ) ;
};
#line 850 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kref {
   atomic_t refcount ;
};
#line 853
struct kset ;
#line 854
struct kobj_type ;
#line 855 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 870 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 877 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 883 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 888 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 894
struct klist_node ;
#line 895 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 900 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_nodemask_t_40 {
   unsigned long bits[16U] ;
};
#line 903 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_nodemask_t_40 nodemask_t;
#line 904
struct path ;
#line 905
struct inode ;
#line 906 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct seq_file {
   char *buf ;
   size_t___0 size ;
   size_t___0 from ;
   size_t___0 count ;
   size_t___0 pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};
#line 921 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 927
struct pinctrl ;
#line 928
struct pinctrl_state ;
#line 929 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};
#line 935 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pm_message {
   int event ;
};
#line 938 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct pm_message pm_message_t;
#line 939 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 964
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 970
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 977
struct wakeup_source ;
#line 978 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};
#line 983
struct dev_pm_qos ;
#line 984 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool ignore_children : 1 ;
   bool early_init : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int run_wake : 1 ;
   unsigned int runtime_auto : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   struct dev_pm_qos *qos ;
};
#line 1026 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 1029
struct ctl_table ;
#line 1030 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_mm_context_t_105 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 1037 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_mm_context_t_105 mm_context_t;
#line 1038
struct device_node ;
#line 1039
struct llist_node ;
#line 1040 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct llist_head {
   struct llist_node *first ;
};
#line 1043 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct llist_node {
   struct llist_node *next ;
};
#line 1046
struct dma_map_ops ;
#line 1047 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 1051
struct device_private ;
#line 1052
struct device_driver ;
#line 1053
struct driver_private ;
#line 1054
struct class ;
#line 1055
struct subsys_private ;
#line 1056
struct bus_type ;
#line 1057
struct iommu_ops ;
#line 1058
struct iommu_group ;
#line 1059
struct device_attribute ;
#line 1060 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group  const  **bus_groups ;
   struct attribute_group  const  **dev_groups ;
   struct attribute_group  const  **drv_groups ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*online)(struct device * ) ;
   int (*offline)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};
#line 1082
struct device_type ;
#line 1083
struct of_device_id ;
#line 1084
struct acpi_device_id ;
#line 1085 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   struct acpi_device_id  const  *acpi_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 1102
struct class_attribute ;
#line 1103 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group  const  **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 1120 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t___0  ) ;
};
#line 1125 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * , kuid_t * , kgid_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 1133 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t___0  ) ;
};
#line 1139 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1143
struct acpi_device ;
#line 1144 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct acpi_dev_node {
   struct acpi_device *companion ;
};
#line 1147
struct dma_coherent_mem ;
#line 1148 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct acpi_dev_node acpi_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
};
#line 1182 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1201 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 1206 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pm_qos_flags_request {
   struct list_head node ;
   s32 flags ;
};
#line 1210
enum dev_pm_qos_req_type {
    DEV_PM_QOS_LATENCY = 1,
    DEV_PM_QOS_FLAGS = 2
} ;
#line 1214 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_data_133 {
   struct plist_node pnode ;
   struct pm_qos_flags_request flr ;
};
#line 1218 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dev_pm_qos_request {
   enum dev_pm_qos_req_type type ;
   union __anonunion_data_133 data ;
   struct device *dev ;
};
#line 1223
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 1228 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 1235 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pm_qos_flags {
   struct list_head list ;
   s32 effective_flags ;
};
#line 1239 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dev_pm_qos {
   struct pm_qos_constraints latency ;
   struct pm_qos_flags flags ;
   struct dev_pm_qos_request *latency_req ;
   struct dev_pm_qos_request *flags_req ;
};
#line 1245 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 1249 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 1254
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 1260 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_136 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 1264 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_137 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 1268 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_135 {
   struct __anonstruct____missing_field_name_136 __annonCompField34 ;
   struct __anonstruct____missing_field_name_137 __annonCompField35 ;
};
#line 1272
struct uprobe ;
#line 1273
struct return_instance ;
#line 1274 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion____missing_field_name_135 __annonCompField36 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 1282
struct xol_area ;
#line 1283 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 1286
struct address_space ;
#line 1287 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_138 {
   struct address_space *mapping ;
   void *s_mem ;
};
#line 1291 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_140 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 1296 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_144 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 1301 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_143 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_144 __annonCompField39 ;
   int units ;
};
#line 1306 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_142 {
   union __anonunion____missing_field_name_143 __annonCompField40 ;
   atomic_t _count ;
};
#line 1310 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_141 {
   unsigned long counters ;
   struct __anonstruct____missing_field_name_142 __annonCompField41 ;
   unsigned int active ;
};
#line 1315 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_139 {
   union __anonunion____missing_field_name_140 __annonCompField38 ;
   union __anonunion____missing_field_name_141 __annonCompField42 ;
};
#line 1319 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_146 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 1324
struct slab ;
#line 1325 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_145 {
   struct list_head lru ;
   struct __anonstruct____missing_field_name_146 __annonCompField44 ;
   struct list_head list ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   pgtable_t pmd_huge_pte ;
};
#line 1333 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_147 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};
#line 1339 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct page {
   unsigned long flags ;
   union __anonunion____missing_field_name_138 __annonCompField37 ;
   struct __anonstruct____missing_field_name_139 __annonCompField43 ;
   union __anonunion____missing_field_name_145 __annonCompField45 ;
   union __anonunion____missing_field_name_147 __annonCompField46 ;
   unsigned long debug_flags ;
};
#line 1347 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 1352 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_linear_149 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 1356 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_shared_148 {
   struct __anonstruct_linear_149 linear ;
   struct list_head nonlinear ;
};
#line 1360
struct anon_vma ;
#line 1361
struct mempolicy ;
#line 1362 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   union __anonunion_shared_148 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 1381 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 1385 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 1390 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};
#line 1394 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 1397
struct kioctx_table ;
#line 1398
struct linux_binfmt ;
#line 1399
struct mmu_notifier_mm ;
#line 1400 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
};
#line 1457 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   nodemask_t nodes_to_scan ;
   int nid ;
};
#line 1463 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker * , struct shrink_control * ) ;
   unsigned long (*scan_objects)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};
#line 1472
struct file_ra_state ;
#line 1473
struct user_struct ;
#line 1474
struct writeback_control ;
#line 1475 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 1481 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 1494 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 1502 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1507 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef s32 dma_cookie_t;
#line 1508 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 1523
struct sem_undo_list ;
#line 1524 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 1527 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned short __kernel_sa_family_t;
#line 1528
struct cred ;
#line 1529 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __kernel_sa_family_t sa_family_t;
#line 1530 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 1534 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_sync_serial_settings_151 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 1539 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_sync_serial_settings_151 sync_serial_settings;
#line 1540 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_te1_settings_152 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 1546 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_te1_settings_152 te1_settings;
#line 1547 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_raw_hdlc_proto_153 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 1551 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_raw_hdlc_proto_153 raw_hdlc_proto;
#line 1552 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_fr_proto_154 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 1561 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_fr_proto_154 fr_proto;
#line 1562 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_fr_proto_pvc_155 {
   unsigned int dlci ;
};
#line 1565 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_fr_proto_pvc_155 fr_proto_pvc;
#line 1566 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_fr_proto_pvc_info_156 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 1570 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_fr_proto_pvc_info_156 fr_proto_pvc_info;
#line 1571 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_cisco_proto_157 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 1575 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_cisco_proto_157 cisco_proto;
#line 1576 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 1584 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_ifs_ifsu_158 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 1593 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_158 ifs_ifsu ;
};
#line 1598 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_ifr_ifrn_159 {
   char ifrn_name[16U] ;
};
#line 1601 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_ifr_ifru_160 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 1616 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ifreq {
   union __anonunion_ifr_ifrn_159 ifr_ifrn ;
   union __anonunion_ifr_ifru_160 ifr_ifru ;
};
#line 1620
struct hlist_bl_node ;
#line 1621 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 1624 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 1628 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_163 {
   spinlock_t lock ;
   unsigned int count ;
};
#line 1632 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_162 {
   struct __anonstruct____missing_field_name_163 __annonCompField47 ;
};
#line 1635 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct lockref {
   union __anonunion____missing_field_name_162 __annonCompField48 ;
};
#line 1638
struct nameidata ;
#line 1639
struct vfsmount ;
#line 1640 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_165 {
   u32 hash ;
   u32 len ;
};
#line 1644 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_164 {
   struct __anonstruct____missing_field_name_165 __annonCompField49 ;
   u64 hash_len ;
};
#line 1648 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct qstr {
   union __anonunion____missing_field_name_164 __annonCompField50 ;
   unsigned char const   *name ;
};
#line 1652
struct dentry_operations ;
#line 1653 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_d_u_166 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 1657 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_166 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 1675 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_weak_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct dentry  const  * , unsigned int  ,
                    char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 1689 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 1693 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct list_lru_node {
   spinlock_t lock ;
   struct list_head list ;
   long nr_items ;
};
#line 1698 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct list_lru {
   struct list_lru_node *node ;
   nodemask_t active_nodes ;
};
#line 1702
struct radix_tree_node ;
#line 1703 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 1708
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 1714
struct pid_namespace ;
#line 1715 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 1720 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 1727 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 1731 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 1734 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct kernel_cap_struct kernel_cap_t;
#line 1735 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 1743
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 1748
struct block_device ;
#line 1749
struct io_context ;
#line 1750
struct cgroup_subsys_state ;
#line 1751
struct export_operations ;
#line 1752
struct kiocb ;
#line 1753
struct pipe_inode_info ;
#line 1754
struct poll_table_struct ;
#line 1755
struct kstatfs ;
#line 1756
struct swap_info_struct ;
#line 1757 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 1768 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 1774 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 1798 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 1803 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 1804 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 1817 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct fs_qfilestatv {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
   __u32 qfs_pad ;
};
#line 1823 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct fs_quota_statv {
   __s8 qs_version ;
   __u8 qs_pad1 ;
   __u16 qs_flags ;
   __u32 qs_incoredqs ;
   struct fs_qfilestatv qs_uquota ;
   struct fs_qfilestatv qs_gquota ;
   struct fs_qfilestatv qs_pquota ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
   __u64 qs_pad2[8U] ;
};
#line 1838
struct dquot ;
#line 1839 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __kernel_uid32_t projid_t;
#line 1840 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_kprojid_t_168 {
   projid_t val ;
};
#line 1843 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_kprojid_t_168 kprojid_t;
#line 1844 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 1850
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 1855 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef long long qsize_t;
#line 1856 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_169 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 1861 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kqid {
   union __anonunion____missing_field_name_169 __annonCompField51 ;
   enum quota_type type ;
};
#line 1865 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 1876
struct quota_format_type ;
#line 1877 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 1888 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 1902 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 1911 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 1921 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xstatev)(struct super_block * , struct fs_quota_statv * ) ;
};
#line 1934 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 1940 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 1949 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_arg_171 {
   char *buf ;
   void *data ;
};
#line 1953 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_read_descriptor_t_170 {
   size_t___0 written ;
   size_t___0 count ;
   union __anonunion_arg_171 arg ;
   int error ;
};
#line 1959 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_read_descriptor_t_170 read_descriptor_t;
#line 1960 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned int  , unsigned int  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   void (*is_dirty_writeback)(struct page * , bool * , bool * ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 1986
struct backing_dev_info ;
#line 1987 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};
#line 2004
struct request_queue ;
#line 2005
struct hd_struct ;
#line 2006
struct gendisk ;
#line 2007 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 2031
struct posix_acl ;
#line 2032
struct inode_operations ;
#line 2033 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_172 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 2037 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_173 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 2041
struct file_lock ;
#line 2042
struct cdev ;
#line 2043 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_174 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 2048 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion____missing_field_name_172 __annonCompField52 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion____missing_field_name_173 __annonCompField53 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_174 __annonCompField54 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 2095 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 2103 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 2111 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_f_u_175 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 2115 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct file {
   union __anonunion_f_u_175 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 2137
struct files_struct ;
#line 2138 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct files_struct *fl_owner_t;
#line 2139 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 2143 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   unsigned long (*lm_owner_key)(struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 2151
struct net ;
#line 2152
struct nlm_lockowner ;
#line 2153 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 2158
struct nfs4_lock_state ;
#line 2159 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 2162
struct fasync_struct ;
#line 2163 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_afs_177 {
   struct list_head link ;
   int state ;
};
#line 2167 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_fl_u_176 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_177 afs ;
};
#line 2172 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct file_lock {
   struct file_lock *fl_next ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_176 fl_u ;
};
#line 2193 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 2201 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 2208
struct super_operations ;
#line 2209
struct xattr_handler ;
#line 2210
struct mtd_info ;
#line 2211 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
};
#line 2258 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 2264 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dir_context {
   int (*actor)(void * , char const   * , int  , loff_t  , u64  , unsigned int  ) ;
   loff_t pos ;
};
#line 2268 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t___0  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t___0  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*iterate)(struct file * , struct dir_context * ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t___0  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t___0  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t___0  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
   int (*show_fdinfo)(struct seq_file * , struct file * ) ;
};
#line 2303 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t___0  ,
                   int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t___0  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t___0  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
   int (*tmpfile)(struct inode * , struct dentry * , umode_t  ) ;
   int (*set_acl)(struct inode * , struct posix_acl * , int  ) ;
};
#line 2331 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t___0  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t___0  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   long (*nr_cached_objects)(struct super_block * , int  ) ;
   long (*free_cached_objects)(struct super_block * , long  , int  ) ;
};
#line 2356 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 2372 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned long cputime_t;
#line 2373 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_sigset_t_178 {
   unsigned long sig[1U] ;
};
#line 2376 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_sigset_t_178 sigset_t;
#line 2377
struct siginfo ;
#line 2378 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef void __signalfn_t(int  );
#line 2379 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __signalfn_t *__sighandler_t;
#line 2380 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef void __restorefn_t(void);
#line 2381 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __restorefn_t *__sigrestore_t;
#line 2382 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 2386 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef union sigval sigval_t;
#line 2387 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct__kill_180 {
   __pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 2391 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct__timer_181 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 2398 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct__rt_182 {
   __pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 2403 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct__sigchld_183 {
   __pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 2410 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct__sigfault_184 {
   void *_addr ;
   short _addr_lsb ;
};
#line 2414 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct__sigpoll_185 {
   long _band ;
   int _fd ;
};
#line 2418 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct__sigsys_186 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 2423 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion__sifields_179 {
   int _pad[28U] ;
   struct __anonstruct__kill_180 _kill ;
   struct __anonstruct__timer_181 _timer ;
   struct __anonstruct__rt_182 _rt ;
   struct __anonstruct__sigchld_183 _sigchld ;
   struct __anonstruct__sigfault_184 _sigfault ;
   struct __anonstruct__sigpoll_185 _sigpoll ;
   struct __anonstruct__sigsys_186 _sigsys ;
};
#line 2433 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_179 _sifields ;
};
#line 2439 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct siginfo siginfo_t;
#line 2440 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 2444 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 2450 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct k_sigaction {
   struct sigaction sa ;
};
#line 2453
struct seccomp_filter ;
#line 2454 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 2458
struct rt_mutex_waiter ;
#line 2459 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 2463 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 2467 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 2471
struct hrtimer_clock_base ;
#line 2472
struct hrtimer_cpu_base ;
#line 2473
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 2477 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 2487 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 2497 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};
#line 2510 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 2519 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 2525
struct nsproxy ;
#line 2526
struct ctl_table_root ;
#line 2527
struct ctl_table_header ;
#line 2528
struct ctl_dir ;
#line 2529 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t___0 * , loff_t * );
#line 2530 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 2534 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 2545 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 2549 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_190 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 2555 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_189 {
   struct __anonstruct____missing_field_name_190 __annonCompField55 ;
   struct callback_head rcu ;
};
#line 2559
struct ctl_table_set ;
#line 2560 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ctl_table_header {
   union __anonunion____missing_field_name_189 __annonCompField56 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};
#line 2569 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 2573 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set * ) ;
   struct ctl_dir dir ;
};
#line 2577 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_header * , struct ctl_table * ) ;
};
#line 2582
struct assoc_array_ptr ;
#line 2583 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 2587 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef int32_t key_serial_t;
#line 2588 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef uint32_t key_perm_t;
#line 2589
struct key ;
#line 2590
struct signal_struct ;
#line 2591
struct key_type ;
#line 2592 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct keyring_index_key {
   struct key_type *type ;
   char const   *description ;
   size_t___0 desc_len ;
};
#line 2597 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_191 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 2601
struct key_user ;
#line 2602 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_192 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 2606 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_194 {
   struct key_type *type ;
   char *description ;
};
#line 2610 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_193 {
   struct keyring_index_key index_key ;
   struct __anonstruct____missing_field_name_194 __annonCompField59 ;
};
#line 2614 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_type_data_195 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 2620 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_payload_197 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};
#line 2626 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_196 {
   union __anonunion_payload_197 payload ;
   struct assoc_array keys ;
};
#line 2630 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion____missing_field_name_191 __annonCompField57 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion____missing_field_name_192 __annonCompField58 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion____missing_field_name_193 __annonCompField60 ;
   union __anonunion_type_data_195 type_data ;
   union __anonunion____missing_field_name_196 __annonCompField61 ;
};
#line 2649
struct audit_context ;
#line 2650 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 2657 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 2686
struct futex_pi_state ;
#line 2687
struct robust_list_head ;
#line 2688
struct bio_list ;
#line 2689
struct fs_struct ;
#line 2690
struct perf_event_context ;
#line 2691
struct blk_plug ;
#line 2692
struct cfs_rq ;
#line 2693
struct task_group ;
#line 2694 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 2700 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 2709 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 2715 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};
#line 2719 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 2724 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 2729
struct autogroup ;
#line 2730
struct tty_struct ;
#line 2731
struct taskstats ;
#line 2732
struct tty_audit_buf ;
#line 2733 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 2796 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 2813
struct reclaim_state ;
#line 2814 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 2820 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 2834
struct uts_namespace ;
#line 2835 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 2839 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sched_avg {
   u32 runnable_avg_sum ;
   u32 runnable_avg_period ;
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
};
#line 2846 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 2875 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 2891
struct rt_rq ;
#line 2892 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 2902 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   struct hrtimer dl_timer ;
};
#line 2916
struct mem_cgroup ;
#line 2917 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 2923 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int may_oom : 1 ;
};
#line 2929
struct sched_class ;
#line 2930
struct css_set ;
#line 2931
struct compat_robust_list_head ;
#line 2932
struct numa_group ;
#line 2933
struct ftrace_ret_stack ;
#line 2934 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned int brk_randomized : 1 ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int no_new_privs : 1 ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t___0 sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct task_struct *pi_top_task ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   int numa_migrate_deferred ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long *numa_faults_buffer ;
   unsigned long numa_faults_locality[2U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   unsigned int memcg_kmem_skip_account ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
};
#line 3132 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef s32 compat_long_t;
#line 3133 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef u32 compat_uptr_t;
#line 3134 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 3137 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 3142 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 3149 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 3152
struct memcg_cache_params ;
#line 3153
struct kmem_cache_node ;
#line 3154 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   struct memcg_cache_params *memcg_params ;
   int max_attr_size ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 3179 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_214 {
   struct callback_head callback_head ;
   struct kmem_cache *memcg_caches[0U] ;
};
#line 3183 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_215 {
   struct mem_cgroup *memcg ;
   struct list_head list ;
   struct kmem_cache *root_cache ;
   bool dead ;
   atomic_t nr_pages ;
   struct work_struct destroy ;
};
#line 3191 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_213 {
   struct __anonstruct____missing_field_name_214 __annonCompField63 ;
   struct __anonstruct____missing_field_name_215 __annonCompField64 ;
};
#line 3195 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct memcg_cache_params {
   bool is_root_cache ;
   union __anonunion____missing_field_name_213 __annonCompField65 ;
};
#line 3199 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 3203
struct sk_buff ;
#line 3204 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 3207
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 3213 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t___0  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t___0  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t___0  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t___0  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t___0  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t___0  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t___0  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t___0  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 3237 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef u64 netdev_features_t;
#line 3238 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nf_conntrack {
   atomic_t use ;
};
#line 3241 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nf_bridge_info {
   atomic_t use ;
   unsigned int mask ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned long data[4U] ;
};
#line 3248 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 3254 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned int sk_buff_data_t;
#line 3255
struct sec_path ;
#line 3256 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct____missing_field_name_219 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 3260 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_218 {
   __wsum csum ;
   struct __anonstruct____missing_field_name_219 __annonCompField67 ;
};
#line 3264 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_220 {
   unsigned int napi_id ;
   dma_cookie_t dma_cookie ;
};
#line 3268 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_221 {
   __u32 mark ;
   __u32 dropcount ;
   __u32 reserved_tailroom ;
};
#line 3273 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion____missing_field_name_218 __annonCompField68 ;
   __u32 priority ;
   __u8 local_df : 1 ;
   __u8 cloned : 1 ;
   __u8 ip_summed : 2 ;
   __u8 nohdr : 1 ;
   __u8 nfctinfo : 3 ;
   __u8 pkt_type : 3 ;
   __u8 fclone : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 peeked : 1 ;
   __u8 nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 rxhash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   __u8 ndisc_nodetype : 2 ;
   __u8 pfmemalloc : 1 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_rxhash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 head_frag : 1 ;
   __u8 encapsulation : 1 ;
   union __anonunion____missing_field_name_220 __annonCompField69 ;
   __u32 secmark ;
   union __anonunion____missing_field_name_221 __annonCompField70 ;
   __be16 inner_protocol ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 3335
struct dst_entry ;
#line 3336 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 3341 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 3360 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 3374 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 3380 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 3386 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 3393 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 3404 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 3410 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 3435 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 3446 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 3457 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 3463 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 3470 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 3475 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 3482 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 3488 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 3496 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 3506 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 3513 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 3522 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 3530 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 3535 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 3542 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 3551
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 3557 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_ts_info)(struct net_device * , struct ethtool_ts_info * ) ;
   int (*get_module_info)(struct net_device * , struct ethtool_modinfo * ) ;
   int (*get_module_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_eee)(struct net_device * , struct ethtool_eee * ) ;
   int (*set_eee)(struct net_device * , struct ethtool_eee * ) ;
};
#line 3605
struct prot_inuse ;
#line 3606 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 3611 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct u64_stats_sync {

};
#line 3613 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};
#line 3617 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 3620 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 3623 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 3626 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 3629 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 3632 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct udp_mib {
   unsigned long mibs[8U] ;
};
#line 3635 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct linux_mib {
   unsigned long mibs[97U] ;
};
#line 3638 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 3641
struct proc_dir_entry ;
#line 3642 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 3658 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 3662 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 3666 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_frags {
   int nqueues ;
   struct list_head lru_list ;
   spinlock_t lru_lock ;
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 3675
struct tcpm_hash_bucket ;
#line 3676
struct ipv4_devconf ;
#line 3677
struct fib_rules_ops ;
#line 3678
struct fib_table ;
#line 3679 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
};
#line 3683
struct inet_peer_base ;
#line 3684
struct xt_table ;
#line 3685 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct inet_peer_base *peers ;
   struct tcpm_hash_bucket *tcp_metrics_hash ;
   unsigned int tcp_metrics_hash_log ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports sysctl_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   kgid_t sysctl_ping_group_range[2U] ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};
#line 3728
struct neighbour ;
#line 3729 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , struct sock * , struct sk_buff * , u32  ) ;
   void (*redirect)(struct dst_entry * , struct sock * , struct sk_buff * ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , struct sk_buff * ,
                                     void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 3750 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
};
#line 3769
struct ipv6_devconf ;
#line 3770
struct rt6_info ;
#line 3771
struct rt6_statistics ;
#line 3772
struct fib6_table ;
#line 3773 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t rt_genid ;
};
#line 3805 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};
#line 3809
struct sctp_mib ;
#line 3810 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_sctp {
   struct sctp_mib *sctp_statistics[1U] ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 3847 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 3851
struct nlattr ;
#line 3852
struct nf_logger ;
#line 3853 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger  const  *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};
#line 3858
struct ebt_table ;
#line 3859 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
   bool ulog_warn_deprecated ;
   bool ebt_ulog_warn_deprecated ;
};
#line 3868
struct hlist_nulls_node ;
#line 3869 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 3872 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 3876 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};
#line 3883 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 3887 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};
#line 3894 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};
#line 3898 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 3902 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};
#line 3911
struct ip_conntrack_stat ;
#line 3912
struct nf_ct_event_notifier ;
#line 3913
struct nf_exp_event_notifier ;
#line 3914 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct hlist_nulls_head tmpl ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};
#line 3947
struct nft_af_info ;
#line 3948 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   u8 gencursor ;
   u8 genctr ;
};
#line 3959 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 3963 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_sk_bundle_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 3994
struct net_generic ;
#line 3995
struct netns_ipvs ;
#line 3996 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   unsigned int proc_inum ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};
#line 4040 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 4046 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 4051
struct dsa_switch ;
#line 4052 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 4063
struct dsa_switch_driver ;
#line 4064
struct mii_bus ;
#line 4065 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 4076 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 4090 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 4102 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 4105 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 4113 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 4121 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 4127 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 4132 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 4136 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_setmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 4182 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 4227 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct xattr_handler {
   char const   *prefix ;
   int flags ;
   size_t___0 (*list)(struct dentry * , char * , size_t___0  , char const   * , size_t___0  ,
                      int  ) ;
   int (*get)(struct dentry * , char const   * , void * , size_t___0  , int  ) ;
   int (*set)(struct dentry * , char const   * , void const   * , size_t___0  , int  ,
              int  ) ;
};
#line 4236 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct simple_xattrs {
   struct list_head head ;
   spinlock_t lock ;
};
#line 4240
struct percpu_ref ;
#line 4241 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef void percpu_ref_func_t(struct percpu_ref * );
#line 4242 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct percpu_ref {
   atomic_t count ;
   unsigned int *pcpu_count ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_kill ;
   struct callback_head rcu ;
};
#line 4249
struct cgroupfs_root ;
#line 4250
struct cgroup_subsys ;
#line 4251
struct cgroup ;
#line 4252 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   unsigned long flags ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};
#line 4261 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cgroup_name {
   struct callback_head callback_head ;
   char name[] ;
};
#line 4265 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cgroup {
   unsigned long flags ;
   int id ;
   int nr_css ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head files ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   u64 serial_nr ;
   struct cgroup_name *name ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroupfs_root *root ;
   struct list_head cset_links ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct cgroup_subsys_state dummy_css ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
   struct simple_xattrs xattrs ;
};
#line 4287 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cgroupfs_root {
   struct super_block *sb ;
   unsigned long subsys_mask ;
   int hierarchy_id ;
   struct cgroup top_cgroup ;
   int number_of_cgroups ;
   struct list_head root_list ;
   unsigned long flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 4299 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cgrp_links ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct callback_head callback_head ;
};
#line 4307 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t___0 max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   u64 (*read_u64)(struct cgroup_subsys_state * , struct cftype * ) ;
   s64 (*read_s64)(struct cgroup_subsys_state * , struct cftype * ) ;
   int (*seq_show)(struct seq_file * , void * ) ;
   void *(*seq_start)(struct seq_file * , loff_t * ) ;
   void *(*seq_next)(struct seq_file * , void * , loff_t * ) ;
   void (*seq_stop)(struct seq_file * , void * ) ;
   int (*write_u64)(struct cgroup_subsys_state * , struct cftype * , u64  ) ;
   int (*write_s64)(struct cgroup_subsys_state * , struct cftype * , s64  ) ;
   int (*write_string)(struct cgroup_subsys_state * , struct cftype * , char const   * ) ;
   int (*trigger)(struct cgroup_subsys_state * , unsigned int  ) ;
};
#line 4325 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cftype_set {
   struct list_head node ;
   struct cftype *cfts ;
};
#line 4329
struct cgroup_taskset ;
#line 4330 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state * ) ;
   int (*css_online)(struct cgroup_subsys_state * ) ;
   void (*css_offline)(struct cgroup_subsys_state * ) ;
   void (*css_free)(struct cgroup_subsys_state * ) ;
   int (*can_attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup_subsys_state * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup_subsys_state * , struct cgroup_subsys_state * , struct task_struct * ) ;
   void (*bind)(struct cgroup_subsys_state * ) ;
   int subsys_id ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   char const   *name ;
   struct cgroupfs_root *root ;
   struct list_head cftsets ;
   struct cftype *base_cftypes ;
   struct cftype_set base_cftset ;
   struct module *module ;
};
#line 4353
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 4358 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef enum irqreturn irqreturn_t;
#line 4359 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 4364
struct mnt_namespace ;
#line 4365
struct ipc_namespace ;
#line 4366 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};
#line 4374 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 4381 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 4385 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr  const  *nlh ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};
#line 4398 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 4407 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 4432 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
   __u32 linkstate ;
};
#line 4441
struct netpoll_info ;
#line 4442
struct phy_device ;
#line 4443
struct wireless_dev ;
#line 4444
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 4450 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef enum netdev_tx netdev_tx_t;
#line 4451 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 4476
struct neigh_parms ;
#line 4477 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 4481 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 4487 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 4495 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct * , int  ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 4510
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 4516 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef enum rx_handler_result rx_handler_result_t;
#line 4517 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 4518
struct Qdisc ;
#line 4519 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 4532 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 4537 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 4542 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 4547 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 4553 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 4559 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 4563 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 4567 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 4577 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct netdev_phys_port_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 4581 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * , void * , u16 (*)(struct net_device * ,
                                                                                     struct sk_buff * ) ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , __be16  , u16  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , __be16  , u16  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * , gfp_t  ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_busy_poll)(struct napi_struct * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_link_state)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
   int (*ndo_fdb_add)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ,
                      u16  ) ;
   int (*ndo_fdb_del)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ) ;
   int (*ndo_fdb_dump)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
                       int  ) ;
   int (*ndo_bridge_setlink)(struct net_device * , struct nlmsghdr * ) ;
   int (*ndo_bridge_getlink)(struct sk_buff * , u32  , u32  , struct net_device * ,
                             u32  ) ;
   int (*ndo_bridge_dellink)(struct net_device * , struct nlmsghdr * ) ;
   int (*ndo_change_carrier)(struct net_device * , bool  ) ;
   int (*ndo_get_phys_port_id)(struct net_device * , struct netdev_phys_port_id * ) ;
   void (*ndo_add_vxlan_port)(struct net_device * , sa_family_t  , __be16  ) ;
   void (*ndo_del_vxlan_port)(struct net_device * , sa_family_t  , __be16  ) ;
   void *(*ndo_dfwd_add_station)(struct net_device * , struct net_device * ) ;
   void (*ndo_dfwd_del_station)(struct net_device * , void * ) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff * , struct net_device * , void * ) ;
};
#line 4648
enum ldv_28333 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
} ;
#line 4656
enum ldv_28334 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
} ;
#line 4660 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_adj_list_235 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 4664 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_all_adj_list_236 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 4668
struct iw_handler_def ;
#line 4669
struct iw_public_data ;
#line 4670
struct forwarding_accel_ops ;
#line 4671
struct vlan_info ;
#line 4672
struct tipc_bearer ;
#line 4673
struct in_device ;
#line 4674
struct dn_dev ;
#line 4675
struct inet6_dev ;
#line 4676
struct cpu_rmap ;
#line 4677
struct pcpu_lstats ;
#line 4678
struct pcpu_sw_netstats ;
#line 4679
struct pcpu_dstats ;
#line 4680
struct pcpu_vstats ;
#line 4681 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_237 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};
#line 4688
struct garp_port ;
#line 4689
struct mrp_port ;
#line 4690
struct rtnl_link_ops ;
#line 4691 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct __anonstruct_adj_list_235 adj_list ;
   struct __anonstruct_all_adj_list_236 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct forwarding_accel_ops  const  *fwd_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   unsigned char broadcast[32U] ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   struct cpu_rmap *rx_cpu_rmap ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   enum ldv_28333 reg_state : 8 ;
   bool dismantle ;
   enum ldv_28334 rtnl_link_state : 16 ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion____missing_field_name_237 __annonCompField74 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct attribute_group  const  *sysfs_rx_queue_group ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
   int group ;
   struct pm_qos_request pm_qos_req ;
};
#line 4807 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};
#line 4814 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __u64 Elf64_Addr;
#line 4815 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __u16 Elf64_Half;
#line 4816 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __u32 Elf64_Word;
#line 4817 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __u64 Elf64_Xword;
#line 4818 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 4826 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct elf64_sym Elf64_Sym;
#line 4827
struct kernel_param ;
#line 4828 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 4834
struct kparam_string ;
#line 4835
struct kparam_array ;
#line 4836 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_242 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 4841 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion____missing_field_name_242 __annonCompField75 ;
};
#line 4848 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 4852 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 4859
struct tracepoint ;
#line 4860 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 4864 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 4871 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct mod_arch_specific {

};
#line 4873
struct module_param_attrs ;
#line 4874 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};
#line 4881 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t___0  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 4890
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
} ;
#line 4896 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 4900
struct module_sect_attrs ;
#line 4901
struct module_notes_attrs ;
#line 4902
struct ftrace_event_call ;
#line 4903 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   bool sig_ok ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint **tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 4974 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 4983 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct if_irda_qos {
   unsigned long baudrate ;
   unsigned short data_size ;
   unsigned short window_size ;
   unsigned short min_turn_time ;
   unsigned short max_turn_time ;
   unsigned char add_bofs ;
   unsigned char link_disc ;
};
#line 4992 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct if_irda_line {
   __u8 dtr ;
   __u8 rts ;
};
#line 4996 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_ifr_ifrn_249 {
   char ifrn_name[16U] ;
};
#line 4999 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion_ifr_ifru_250 {
   struct if_irda_line ifru_line ;
   struct if_irda_qos ifru_qos ;
   unsigned short ifru_flags ;
   unsigned int ifru_receiving ;
   unsigned int ifru_mode ;
   unsigned int ifru_dongle ;
};
#line 5007 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct if_irda_req {
   union __anonunion_ifr_ifrn_249 ifr_ifrn ;
   union __anonunion_ifr_ifru_250 ifr_ifru ;
};
#line 5011 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef __u32 magic_t;
#line 5012 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned char cc_t;
#line 5013 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned int speed_t;
#line 5014 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned int tcflag_t;
#line 5015 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 5025 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 5031 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5U] ;
   __u16 x_sflag ;
};
#line 5037 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 5045
struct tty_driver ;
#line 5046
struct serial_icounter_struct ;
#line 5047 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver * , struct inode * , int  ) ;
   int (*install)(struct tty_driver * , struct tty_struct * ) ;
   void (*remove)(struct tty_driver * , struct tty_struct * ) ;
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   void (*shutdown)(struct tty_struct * ) ;
   void (*cleanup)(struct tty_struct * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   int (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   int (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*tiocmget)(struct tty_struct * ) ;
   int (*tiocmset)(struct tty_struct * , unsigned int  , unsigned int  ) ;
   int (*resize)(struct tty_struct * , struct winsize * ) ;
   int (*set_termiox)(struct tty_struct * , struct termiox * ) ;
   int (*get_icount)(struct tty_struct * , struct serial_icounter_struct * ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
   struct file_operations  const  *proc_fops ;
};
#line 5083
struct tty_port ;
#line 5084 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev *cdevs ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   unsigned int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   unsigned long flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct tty_port **ports ;
   struct ktermios **termios ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 5108 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ld_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   unsigned int wait_readers ;
   struct list_head read_wait ;
   struct list_head write_wait ;
   struct lockdep_map dep_map ;
};
#line 5116 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t___0  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t___0  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   void (*dcd_change)(struct tty_struct * , unsigned int  ) ;
   void (*fasync)(struct tty_struct * , int  ) ;
   int (*receive_buf2)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   struct module *owner ;
   int refcount ;
};
#line 5141 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   struct tty_struct *tty ;
};
#line 5145
struct tty_buffer ;
#line 5145 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
union __anonunion____missing_field_name_251 {
   struct tty_buffer *next ;
   struct llist_node free ;
};
#line 5149 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tty_buffer {
   union __anonunion____missing_field_name_251 __annonCompField76 ;
   int used ;
   int size ;
   int commit ;
   int read ;
   int flags ;
   unsigned long data[0U] ;
};
#line 5158 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tty_bufhead {
   struct tty_buffer *head ;
   struct work_struct work ;
   struct mutex lock ;
   atomic_t priority ;
   struct tty_buffer sentinel ;
   struct llist_head free ;
   atomic_t mem_used ;
   int mem_limit ;
   struct tty_buffer *tail ;
};
#line 5169 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tty_port_operations {
   int (*carrier_raised)(struct tty_port * ) ;
   void (*dtr_rts)(struct tty_port * , int  ) ;
   void (*shutdown)(struct tty_port * ) ;
   int (*activate)(struct tty_port * , struct tty_struct * ) ;
   void (*destruct)(struct tty_port * ) ;
};
#line 5176 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tty_port {
   struct tty_bufhead buf ;
   struct tty_struct *tty ;
   struct tty_struct *itty ;
   struct tty_port_operations  const  *ops ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   wait_queue_head_t delta_msr_wait ;
   unsigned long flags ;
   unsigned char console : 1 ;
   unsigned char low_latency : 1 ;
   struct mutex mutex ;
   struct mutex buf_mutex ;
   unsigned char *xmit_buf ;
   unsigned int close_delay ;
   unsigned int closing_wait ;
   int drain_delay ;
   struct kref kref ;
};
#line 5198 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct device *dev ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct ld_semaphore ldisc_sem ;
   struct tty_ldisc *ldisc ;
   struct mutex atomic_write_lock ;
   struct mutex legacy_mutex ;
   struct mutex throttle_mutex ;
   struct rw_semaphore termios_rwsem ;
   struct mutex winsize_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios termios ;
   struct ktermios termios_locked ;
   struct termiox *termiox ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   int flow_change ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned char closing : 1 ;
   unsigned char *write_buf ;
   int write_cnt ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 5244 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 5254 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 5264 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u32 packets ;
};
#line 5268 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct gnet_stats_rate_est64 {
   __u64 bps ;
   __u64 pps ;
};
#line 5272 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 5279 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 5289 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 5293 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t___0 priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t___0 (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t___0 (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy  const  *slave_policy ;
   int (*slave_validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*slave_changelink)(struct net_device * , struct net_device * , struct nlattr ** ,
                           struct nlattr ** ) ;
   size_t___0 (*get_slave_size)(struct net_device  const  * , struct net_device  const  * ) ;
   int (*fill_slave_info)(struct sk_buff * , struct net_device  const  * , struct net_device  const  * ) ;
};
#line 5318
struct Qdisc_ops ;
#line 5319
struct qdisc_walker ;
#line 5320
struct tcf_walker ;
#line 5321 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 5328 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct Qdisc {
   int (*enqueue)(struct sk_buff * , struct Qdisc * ) ;
   struct sk_buff *(*dequeue)(struct Qdisc * ) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops  const  *ops ;
   struct qdisc_size_table *stab ;
   struct list_head list ;
   u32 handle ;
   u32 parent ;
   int (*reshape_fail)(struct sk_buff * , struct Qdisc * ) ;
   void *u32_node ;
   struct Qdisc *__parent ;
   struct netdev_queue *dev_queue ;
   struct gnet_stats_rate_est64 rate_est ;
   struct Qdisc *next_sched ;
   struct sk_buff *gso_skb ;
   unsigned long state ;
   struct sk_buff_head q ;
   struct gnet_stats_basic_packed bstats ;
   unsigned int __state ;
   struct gnet_stats_queue qstats ;
   struct callback_head callback_head ;
   int padded ;
   atomic_t refcnt ;
   spinlock_t busylock ;
};
#line 5355
struct tcf_proto ;
#line 5356 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct Qdisc_class_ops {
   struct netdev_queue *(*select_queue)(struct Qdisc * , struct tcmsg * ) ;
   int (*graft)(struct Qdisc * , unsigned long  , struct Qdisc * , struct Qdisc ** ) ;
   struct Qdisc *(*leaf)(struct Qdisc * , unsigned long  ) ;
   void (*qlen_notify)(struct Qdisc * , unsigned long  ) ;
   unsigned long (*get)(struct Qdisc * , u32  ) ;
   void (*put)(struct Qdisc * , unsigned long  ) ;
   int (*change)(struct Qdisc * , u32  , u32  , struct nlattr ** , unsigned long * ) ;
   int (*delete)(struct Qdisc * , unsigned long  ) ;
   void (*walk)(struct Qdisc * , struct qdisc_walker * ) ;
   struct tcf_proto **(*tcf_chain)(struct Qdisc * , unsigned long  ) ;
   unsigned long (*bind_tcf)(struct Qdisc * , unsigned long  , u32  ) ;
   void (*unbind_tcf)(struct Qdisc * , unsigned long  ) ;
   int (*dump)(struct Qdisc * , unsigned long  , struct sk_buff * , struct tcmsg * ) ;
   int (*dump_stats)(struct Qdisc * , unsigned long  , struct gnet_dump * ) ;
};
#line 5372 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops  const  *cl_ops ;
   char id[16U] ;
   int priv_size ;
   int (*enqueue)(struct sk_buff * , struct Qdisc * ) ;
   struct sk_buff *(*dequeue)(struct Qdisc * ) ;
   struct sk_buff *(*peek)(struct Qdisc * ) ;
   unsigned int (*drop)(struct Qdisc * ) ;
   int (*init)(struct Qdisc * , struct nlattr * ) ;
   void (*reset)(struct Qdisc * ) ;
   void (*destroy)(struct Qdisc * ) ;
   int (*change)(struct Qdisc * , struct nlattr * ) ;
   void (*attach)(struct Qdisc * ) ;
   int (*dump)(struct Qdisc * , struct sk_buff * ) ;
   int (*dump_stats)(struct Qdisc * , struct gnet_dump * ) ;
   struct module *owner ;
};
#line 5390 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tcf_result {
   unsigned long class ;
   u32 classid ;
};
#line 5394 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff * , struct tcf_proto  const  * , struct tcf_result * ) ;
   int (*init)(struct tcf_proto * ) ;
   void (*destroy)(struct tcf_proto * ) ;
   unsigned long (*get)(struct tcf_proto * , u32  ) ;
   void (*put)(struct tcf_proto * , unsigned long  ) ;
   int (*change)(struct net * , struct sk_buff * , struct tcf_proto * , unsigned long  ,
                 u32  , struct nlattr ** , unsigned long * ) ;
   int (*delete)(struct tcf_proto * , unsigned long  ) ;
   void (*walk)(struct tcf_proto * , struct tcf_walker * ) ;
   int (*dump)(struct net * , struct tcf_proto * , unsigned long  , struct sk_buff * ,
               struct tcmsg * ) ;
   struct module *owner ;
};
#line 5410 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff * , struct tcf_proto  const  * , struct tcf_result * ) ;
   __be16 protocol ;
   u32 prio ;
   u32 classid ;
   struct Qdisc *q ;
   void *data ;
   struct tcf_proto_ops  const  *ops ;
};
#line 5421 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct qdisc_walker {
   int stop ;
   int skip ;
   int count ;
   int (*fn)(struct Qdisc * , unsigned long  , struct qdisc_walker * ) ;
};
#line 5427 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_qos_value_t_258 {
   __u32 value ;
   __u16 bits ;
};
#line 5431 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_qos_value_t_258 qos_value_t;
#line 5432 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct qos_info {
   magic_t magic ;
   qos_value_t baud_rate ;
   qos_value_t max_turn_time ;
   qos_value_t data_size ;
   qos_value_t window_size ;
   qos_value_t additional_bofs ;
   qos_value_t min_turn_time ;
   qos_value_t link_disc_time ;
   qos_value_t power ;
};
#line 5443
struct irlap_cb ;
#line 5444 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct irda_skb_cb {
   unsigned int default_qdisc_pad ;
   magic_t magic ;
   __u32 next_speed ;
   __u16 mtt ;
   __u16 xbofs ;
   __u16 next_xbofs ;
   void *context ;
   void (*destructor)(struct sk_buff * ) ;
   __u16 xbofs_delay ;
   __u8 line ;
};
#line 5456 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_chipio_t_260 {
   int cfg_base ;
   int sir_base ;
   int fir_base ;
   int mem_base ;
   int sir_ext ;
   int fir_ext ;
   int irq ;
   int irq2 ;
   int dma ;
   int dma2 ;
   int fifo_size ;
   int irqflags ;
   int direction ;
   int enabled ;
   int suspended ;
   __u32 speed ;
   __u32 new_speed ;
   int dongle_id ;
};
#line 5476 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_chipio_t_260 chipio_t;
#line 5477 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct __anonstruct_iobuff_t_261 {
   int state ;
   int in_frame ;
   __u8 *head ;
   __u8 *data ;
   int len ;
   int truesize ;
   __u16 fcs ;
   struct sk_buff *skb ;
};
#line 5487 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef struct __anonstruct_iobuff_t_261 iobuff_t;
#line 5488 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct st_fifo_entry {
   int status ;
   int len ;
};
#line 5492 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct st_fifo {
   struct st_fifo_entry entries[10U] ;
   int head ;
   int tail ;
   int len ;
};
#line 5498 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct w83977af_ir {
   struct st_fifo st_fifo ;
   int tx_buff_offsets[10U] ;
   int tx_len ;
   struct net_device *netdev ;
   struct irlap_cb *irlap ;
   struct qos_info qos ;
   chipio_t io ;
   iobuff_t tx_buff ;
   iobuff_t rx_buff ;
   dma_addr_t tx_buff_dma ;
   dma_addr_t rx_buff_dma ;
   spinlock_t lock ;
   __u32 new_speed ;
};
#line 5513 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ldv_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 5517 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ldv_struct_interrupt_scenario_2 {
   int arg0 ;
   irqreturn_t (*arg1)(int  , void * ) ;
   irqreturn_t (*arg2)(int  , void * ) ;
   void *arg3 ;
   int signal_pending ;
};
#line 5524 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ldv_struct_main_10 {
   int signal_pending ;
};
#line 5527 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct ldv_struct_random_allocationless_scenario_3 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 5531 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct device_private {
   void *driver_data ;
};
#line 5535 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
typedef unsigned long kernel_ulong_t;
#line 5536 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
};
#line 5540 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
#line 5546
struct kthread_work ;
#line 5547 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 5553 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work * ) ;
   wait_queue_head_t done ;
   struct kthread_worker *worker ;
};
#line 5559
struct spi_master ;
#line 5560 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};
#line 5573
struct spi_message ;
#line 5574
struct spi_transfer ;
#line 5575 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device * ) ;
   int (*transfer)(struct spi_device * , struct spi_message * ) ;
   void (*cleanup)(struct spi_device * ) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   struct completion xfer_completion ;
   int (*prepare_transfer_hardware)(struct spi_master * ) ;
   int (*transfer_one_message)(struct spi_master * , struct spi_message * ) ;
   int (*unprepare_transfer_hardware)(struct spi_master * ) ;
   int (*prepare_message)(struct spi_master * , struct spi_message * ) ;
   int (*unprepare_message)(struct spi_master * , struct spi_message * ) ;
   void (*set_cs)(struct spi_device * , bool  ) ;
   int (*transfer_one)(struct spi_master * , struct spi_device * , struct spi_transfer * ) ;
   int *cs_gpios ;
};
#line 5614 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct spi_transfer {
   void const   *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};
#line 5628 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void * ) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};
/* compiler builtin: 
   void __builtin_va_copy(__builtin_va_list  , __builtin_va_list  ) ;  */
/* compiler builtin: 
   void *__builtin_frob_return_address(void * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_and_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_or(...) ;  */
/* compiler builtin: 
   int __builtin_popcountll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch(...) ;  */
/* compiler builtin: 
   float __builtin_atanf(float  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_addps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   unsigned long __builtin_strcspn(char const   * , char const   * ) ;  */
/* compiler builtin: 
   float __builtin_asinf(float  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_maxps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpckhps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   double __builtin_acos(double  ) ;  */
/* compiler builtin: 
   int __builtin___sprintf_chk(char * , int  , unsigned long  , char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_16(...) ;  */
/* compiler builtin: 
   double __builtin_cosh(double  ) ;  */
/* compiler builtin: 
   float __builtin_tanhf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_16(...) ;  */
/* compiler builtin: 
   void *__builtin_mempcpy(void * , void const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_1(...) ;  */
/* compiler builtin: 
   long double __builtin_sqrtl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_parity(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or(...) ;  */
/* compiler builtin: 
   long double __builtin_coshl(long double  ) ;  */
/* compiler builtin: 
   long double __builtin_cosl(long double  ) ;  */
/* compiler builtin: 
   float __builtin_cosf(float  ) ;  */
/* compiler builtin: 
   void __sync_synchronize(...) ;  */
/* compiler builtin: 
   long double __builtin_acosl(long double  ) ;  */
/* compiler builtin: 
   void *__builtin___mempcpy_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_or_and_fetch(...) ;  */
/* compiler builtin: 
   int __builtin_clz(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_4(...) ;  */
/* compiler builtin: 
   double __builtin_log10(double  ) ;  */
/* compiler builtin: 
   char *__builtin___strcat_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_modff(float  , float * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_4(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_n(...) ;  */
/* compiler builtin: 
   double __builtin_sin(double  ) ;  */
/* compiler builtin: 
   double __builtin_frexp(double  , int * ) ;  */
/* compiler builtin: 
   float __builtin_acosf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_add_and_fetch(...) ;  */
/* compiler builtin: 
   long double __builtin_sinhl(long double  ) ;  */
/* compiler builtin: 
   char *__builtin___stpcpy_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __atomic_signal_fence(int  ) ;  */
/* compiler builtin: 
   double __builtin_fabs(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_nand(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_2(...) ;  */
/* compiler builtin: 
   void __atomic_thread_fence(int  ) ;  */
/* compiler builtin: 
   void __atomic_store_16(...) ;  */
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_8(...) ;  */
/* compiler builtin: 
   short __builtin_bswap16(short  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_2(...) ;  */
/* compiler builtin: 
   _Bool __atomic_test_and_set(void * , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_8(...) ;  */
/* compiler builtin: 
   int __builtin_ctz(unsigned int  ) ;  */
/* compiler builtin: 
   char *__builtin_strpbrk(char const   * , char const   * ) ;  */
/* compiler builtin: 
   char *__builtin_strcpy(char * , char const   * ) ;  */
/* compiler builtin: 
   double __builtin_sqrt(double  ) ;  */
/* compiler builtin: 
   __builtin_va_list __builtin_next_arg(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_16(...) ;  */
/* compiler builtin: 
   void __atomic_clear(_Bool * , int  ) ;  */
/* compiler builtin: 
   void __atomic_store(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_2(...) ;  */
/* compiler builtin: 
   float __builtin_log10f(float  ) ;  */
/* compiler builtin: 
   long double __builtin_fabsl(long double  ) ;  */
/* compiler builtin: 
   long double __builtin_floorl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch(...) ;  */
/* compiler builtin: 
   float __builtin_floorf(float  ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_4(...) ;  */
/* compiler builtin: 
   void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_sub_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_nand_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_16(...) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_subps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   int __builtin_parityll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __builtin_va_end(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __builtin_bzero(void * , unsigned long  ) ;  */
/* compiler builtin: 
   _Bool __atomic_always_lock_free(unsigned long  , void * ) ;  */
/* compiler builtin: 
   int __builtin_strncmp(char const   * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_xor_and_fetch(...) ;  */
/* compiler builtin: 
   int __builtin___vsprintf_chk(char * , int  , unsigned long  , char const   * ,
                                __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __builtin_sqrtf(float  ) ;  */
/* compiler builtin: 
   double __builtin_nans(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_8(...) ;  */
/* compiler builtin: 
   double __builtin_exp(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_1(...) ;  */
/* compiler builtin: 
   int __builtin_strcmp(char const   * , char const   * ) ;  */
/* compiler builtin: 
   float __builtin_ldexpf(float  , int  ) ;  */
/* compiler builtin: 
   float __builtin_powif(float  , int  ) ;  */
/* compiler builtin: 
   long double __builtin_log10l(long double  ) ;  */
/* compiler builtin: 
   void *__builtin___memmove_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_and(...) ;  */
/* compiler builtin: 
   void *__builtin_return_address(unsigned int  ) ;  */
/* compiler builtin: 
   void __atomic_feraiseexcept(int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_4(...) ;  */
/* compiler builtin: 
   float __builtin_fabsf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_1(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_object_size(void * , int  ) ;  */
/* compiler builtin: 
   void *__builtin_alloca(unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin_va_arg_pack_len(void) ;  */
/* compiler builtin: 
   long double __builtin_tanl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_2(...) ;  */
/* compiler builtin: 
   void __sync_lock_release(...) ;  */
/* compiler builtin: 
   long double __builtin_modfl(long double  , long double * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_8(...) ;  */
/* compiler builtin: 
   char *__builtin_stpcpy(char * , char const   * ) ;  */
/* compiler builtin: 
   long double __builtin_sinl(long double  ) ;  */
/* compiler builtin: 
   double __builtin_asin(double  ) ;  */
/* compiler builtin: 
   float __builtin_sinhf(float  ) ;  */
/* compiler builtin: 
   int __builtin_ctzl(unsigned long  ) ;  */
/* compiler builtin: 
   long double __builtin_tanhl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add(...) ;  */
/* compiler builtin: 
   long __builtin_bswap64(long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_2(...) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_mulps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   double __builtin_tan(double  ) ;  */
/* compiler builtin: 
   char *__builtin_strncpy(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_inff(void) ;  */
/* compiler builtin: 
   void *__builtin___memset_chk(void * , int  , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_n(...) ;  */
/* compiler builtin: 
   double __builtin_huge_val(void) ;  */
/* compiler builtin: 
   int __builtin_clzl(unsigned long  ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_16(...) ;  */
/* compiler builtin: 
   float __builtin_frexpf(float  , int * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_n(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_1(...) ;  */
/* compiler builtin: 
   long double __builtin_fmodl(long double  ) ;  */
/* compiler builtin: 
   double __builtin_atan(double  ) ;  */
/* compiler builtin: 
   int __builtin___fprintf_chk(void * , int  , char const   *  , ...) ;  */
/* compiler builtin: 
   float __builtin_ceilf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_1(...) ;  */
/* compiler builtin: 
   void __builtin_return(void const   * ) ;  */
/* compiler builtin: 
   long double __builtin_asinl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_ffsll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_1(...) ;  */
/* compiler builtin: 
   int __builtin_va_arg_pack(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_4(...) ;  */
/* compiler builtin: 
   char *__builtin___strncpy_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   double __builtin_powi(double  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_2(...) ;  */
/* compiler builtin: 
   char *__builtin_strchr(char * , int  ) ;  */
/* compiler builtin: 
   char *__builtin___strncat_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __atomic_store_2(...) ;  */
/* compiler builtin: 
   long double __builtin_huge_vall(void) ;  */
/* compiler builtin: 
   int __builtin_ffsl(unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin___vprintf_chk(int  , char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpcklps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   char *__builtin_strncat(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin_ctzll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __builtin_stdarg_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_xor(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_4(...) ;  */
/* compiler builtin: 
   long double __builtin_frexpl(long double  , int * ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange(...) ;  */
/* compiler builtin: 
   float __builtin_tanf(float  ) ;  */
/* compiler builtin: 
   long double __builtin_logl(long double  ) ;  */
/* compiler builtin: 
   void __builtin_va_arg(__builtin_va_list  , unsigned long  , void * ) ;  */
/* compiler builtin: 
   long __builtin_expect(long  , long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_1(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_1(...) ;  */
/* compiler builtin: 
   int __builtin___printf_chk(int  , char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_2(...) ;  */
/* compiler builtin: 
   int __builtin___vfprintf_chk(void * , int  , char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   void __builtin_prefetch(void const   *  , ...) ;  */
/* compiler builtin: 
   long double __builtin_nansl(char const   * ) ;  */
/* compiler builtin: 
   double __builtin_fmod(double  ) ;  */
/* compiler builtin: 
   void __atomic_load(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_val_compare_and_swap(...) ;  */
/* compiler builtin: 
   void __atomic_store_4(...) ;  */
/* compiler builtin: 
   double __builtin_tanh(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_16(...) ;  */
/* compiler builtin: 
   void __builtin_unreachable(void) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_2(...) ;  */
/* compiler builtin: 
   long double __builtin_ldexpl(long double  , int  ) ;  */
/* compiler builtin: 
   void *__builtin_apply(void (*)() , void * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_sinf(float  ) ;  */
/* compiler builtin: 
   double __builtin_ceil(double  ) ;  */
/* compiler builtin: 
   void __atomic_exchange(...) ;  */
/* compiler builtin: 
   long double __builtin_powil(long double  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_8(...) ;  */
/* compiler builtin: 
   long double __builtin_expl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_constant_p(int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_16(...) ;  */
/* compiler builtin: 
   double __builtin_log(double  ) ;  */
/* compiler builtin: 
   float __builtin_expf(float  ) ;  */
/* compiler builtin: 
   int __builtin_types_compatible_p(unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   long double __builtin_atan2l(long double  , long double  ) ;  */
/* compiler builtin: 
   void *__builtin_apply_args(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_2(...) ;  */
/* compiler builtin: 
   float __builtin_logf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_2(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_strlen(char const   * ) ;  */
/* compiler builtin: 
   int __builtin_ffs(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_16(...) ;  */
/* compiler builtin: 
   double __builtin_inf(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_16(...) ;  */
/* compiler builtin: 
   void *__builtin___memcpy_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_4(...) ;  */
/* compiler builtin: 
   void __atomic_store_n(...) ;  */
/* compiler builtin: 
   void __builtin_trap(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_4(...) ;  */
/* compiler builtin: 
   int __builtin_parityl(unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_lock_test_and_set(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_strspn(char const   * , char const   * ) ;  */
/* compiler builtin: 
   void __builtin_varargs_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_16(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch(...) ;  */
/* compiler builtin: 
   double __builtin_nan(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_8(...) ;  */
/* compiler builtin: 
   int __builtin___snprintf_chk(char * , unsigned long  , int  , unsigned long  ,
                                char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch(...) ;  */
/* compiler builtin: 
   long double __builtin_atanl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_clzll(unsigned long long  ) ;  */
/* compiler builtin: 
   float __builtin_huge_valf(void) ;  */
/* compiler builtin: 
   float __builtin_coshf(float  ) ;  */
/* compiler builtin: 
   float __builtin_nansf(char const   * ) ;  */
/* compiler builtin: 
   void __atomic_store_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_add(...) ;  */
/* compiler builtin: 
   int __builtin___vsnprintf_chk(char * , unsigned long  , int  , unsigned long  ,
                                 char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __builtin_nanf(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_8(...) ;  */
/* compiler builtin: 
   _Bool __sync_bool_compare_and_swap(...) ;  */
/* compiler builtin: 
   double __builtin_atan2(double  , double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __builtin_tgmath(...) ;  */
/* compiler builtin: 
   int __builtin_popcountl(unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_1(...) ;  */
/* compiler builtin: 
   long double __builtin_ceill(long double  ) ;  */
/* compiler builtin: 
   void __atomic_store_1(...) ;  */
/* compiler builtin: 
   char *__builtin___strcpy_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_16(...) ;  */
/* compiler builtin: 
   double __builtin_floor(double  ) ;  */
/* compiler builtin: 
   double __builtin_cos(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_sub(...) ;  */
/* compiler builtin: 
   void *__builtin_memset(void * , int  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_2(...) ;  */
/* compiler builtin: 
   long double __builtin_nanl(char const   * ) ;  */
/* compiler builtin: 
   float __builtin_atan2f(float  , float  ) ;  */
/* compiler builtin: 
   _Bool __atomic_is_lock_free(unsigned long  , void * ) ;  */
/* compiler builtin: 
   int __builtin_popcount(unsigned int  ) ;  */
/* compiler builtin: 
   double __builtin_sinh(double  ) ;  */
/* compiler builtin: 
   void __builtin_bcopy(void const   * , void * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub(...) ;  */
/* compiler builtin: 
   void *__builtin_extract_return_addr(void * ) ;  */
/* compiler builtin: 
   int __builtin_bswap32(int  ) ;  */
/* compiler builtin: 
   double __builtin_ldexp(double  , int  ) ;  */
/* compiler builtin: 
   long double __builtin_infl(void) ;  */
/* compiler builtin: 
   float __builtin_fmodf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_4(...) ;  */
/* compiler builtin: 
   void *__builtin_frame_address(unsigned int  ) ;  */
#line 2 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
extern void abort(void) ;
#line 2 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
void __VERIFIER_error(void) 
{ 


  {
  {
#line 2
  abort();
  }
#line 2
  return;
}
}
#line 9 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
void __VERIFIER_assume(int expression ) 
{ 


  {
#line 9
  if (! expression) {
    LOOP: 
#line 9
    goto LOOP;
  }
#line 9
  return;
}
}
#line 15 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
_Bool __VERIFIER_nondet_bool(void) 
{ 
  _Bool val ;

  {
#line 15
  return (val);
}
}
#line 16 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
char __VERIFIER_nondet_char(void) 
{ 
  char val ;

  {
#line 16
  return (val);
}
}
#line 18 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
int __VERIFIER_nondet_int(void) 
{ 
  int val ;

  {
#line 18
  return (val);
}
}
#line 19 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
float __VERIFIER_nondet_float(void) 
{ 
  float val ;

  {
#line 19
  return (val);
}
}
#line 20 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
double __VERIFIER_nondet_double(void) 
{ 
  double val ;

  {
#line 20
  return (val);
}
}
#line 22 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
long __VERIFIER_nondet_long(void) 
{ 
  long val ;

  {
#line 22
  return (val);
}
}
#line 23 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
char *__VERIFIER_nondet_pchar(void) 
{ 
  char *val ;

  {
#line 23
  return (val);
}
}
#line 26 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
short __VERIFIER_nondet_short(void) 
{ 
  short val ;

  {
#line 26
  return (val);
}
}
#line 29 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned char __VERIFIER_nondet_uchar(void) 
{ 
  unsigned char val ;

  {
#line 29
  return (val);
}
}
#line 30 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned int __VERIFIER_nondet_uint(void) 
{ 
  unsigned int val ;

  {
#line 30
  return (val);
}
}
#line 31 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned long __VERIFIER_nondet_ulong(void) 
{ 
  unsigned long val ;

  {
#line 31
  return (val);
}
}
#line 32 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned int __VERIFIER_nondet_unsigned(void) 
{ 
  unsigned int val ;

  {
#line 32
  return (val);
}
}
#line 33 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned short __VERIFIER_nondet_ushort(void) 
{ 
  unsigned short val ;

  {
#line 33
  return (val);
}
}
#line 35 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
void *__VERIFIER_nondet_pointer(void) 
{ 
  void *val ;

  {
#line 35
  return (val);
}
}
#line 6 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 7
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 7 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) ) 
{ 
  size_t i ;
  size_t j ;
  size_t i___0 ;
  size_t j___0 ;
  int r ;
  size_t k ;
  char *a ;
  char *b ;
  char c ;

  {
  {
#line 9
  i = (size_t )0;
  }
  {
#line 9
  while (1) {
    while_continue: /* CIL Label */ ;
#line 9
    if (! (i < count)) {
#line 9
      goto while_break;
    }
    {
#line 10
    j = (size_t )0;
    }
    {
#line 10
    while (1) {
      while_continue___0: /* CIL Label */ ;
#line 10
      if (! (j < count)) {
#line 10
        goto while_break___0;
      }
      {
#line 11
      (*comp)((void const   *)(ptr + i * size), (void const   *)(ptr + j * size));
#line 10
      j ++;
      }
    }
    while_break___0: /* CIL Label */ ;
    }
    {
#line 9
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 16
  i___0 = (size_t )0;
  }
  {
#line 16
  while (1) {
    while_continue___1: /* CIL Label */ ;
#line 16
    if (! (i___0 < count)) {
#line 16
      goto while_break___1;
    }
    {
#line 17
    j___0 = (size_t )0;
    }
    {
#line 17
    while (1) {
      while_continue___2: /* CIL Label */ ;
#line 17
      if (! (j___0 < count)) {
#line 17
        goto while_break___2;
      }
#line 19
      if (r) {
        {
#line 21
        k = (size_t )0;
        }
        {
#line 21
        while (1) {
          while_continue___3: /* CIL Label */ ;
#line 21
          if (! (k < size)) {
#line 21
            goto while_break___3;
          }
          {
#line 22
          a = (char *)((ptr + i___0 * size) + k);
#line 23
          b = (char *)((ptr + j___0 * size) + k);
#line 24
          c = *a;
#line 25
          *a = *b;
#line 26
          *b = c;
#line 21
          k ++;
          }
        }
        while_break___3: /* CIL Label */ ;
        }
      }
      {
#line 17
      j___0 ++;
      }
    }
    while_break___2: /* CIL Label */ ;
    }
    {
#line 16
    i___0 ++;
    }
  }
  while_break___1: /* CIL Label */ ;
  }
#line 33
  return;
}
}
#line 37
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 38
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 38 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) ) 
{ 
  size_t i ;
  void const   *a ;
  int tmp ;

  {
  {
#line 40
  i = (size_t )0;
  }
  {
#line 40
  while (1) {
    while_continue: /* CIL Label */ ;
#line 40
    if (! (i < count)) {
#line 40
      goto while_break;
    }
    {
#line 41
    a = ptr + i * size;
#line 42
    tmp = (*comp)(key, a);
    }
#line 42
    if (tmp == 0) {
#line 43
      return ((void *)a);
    }
    {
#line 40
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 47
  return ((void *)0);
}
}
#line 117 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
extern int ( __attribute__((__leaf__)) __sched_cpucount)(size_t __setsize , cpu_set_t const   *__setp )  __attribute__((__nothrow__)) ;
#line 119
extern cpu_set_t *( __attribute__((__leaf__)) __sched_cpualloc)(size_t __count )  __attribute__((__nothrow__)) ;
#line 120
extern void ( __attribute__((__leaf__)) __sched_cpufree)(cpu_set_t *__set )  __attribute__((__nothrow__)) ;
#line 54 "/usr/include/sched.h"
extern int ( __attribute__((__leaf__)) sched_setparam)(__pid_t __pid , struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 58
extern int ( __attribute__((__leaf__)) sched_getparam)(__pid_t __pid , struct sched_param *__param )  __attribute__((__nothrow__)) ;
#line 61
extern int ( __attribute__((__leaf__)) sched_setscheduler)(__pid_t __pid , int __policy ,
                                                           struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 65
extern int ( __attribute__((__leaf__)) sched_getscheduler)(__pid_t __pid )  __attribute__((__nothrow__)) ;
#line 68
extern int ( __attribute__((__leaf__)) sched_yield)(void)  __attribute__((__nothrow__)) ;
#line 71
extern int ( __attribute__((__leaf__)) sched_get_priority_max)(int __algorithm )  __attribute__((__nothrow__)) ;
#line 74
extern int ( __attribute__((__leaf__)) sched_get_priority_min)(int __algorithm )  __attribute__((__nothrow__)) ;
#line 78
extern int ( __attribute__((__leaf__)) sched_rr_get_interval)(__pid_t __pid , struct timespec *__t )  __attribute__((__nothrow__)) ;
#line 72 "/usr/include/time.h"
extern clock_t ( __attribute__((__leaf__)) clock)(void)  __attribute__((__nothrow__)) ;
#line 76
extern time_t ( __attribute__((__leaf__)) time)(time_t *__timer )  __attribute__((__nothrow__)) ;
#line 79
extern double ( __attribute__((__leaf__)) difftime)(time_t __time1 , time_t __time0 )  __attribute__((__nothrow__,
__const__)) ;
#line 83
extern time_t ( __attribute__((__leaf__)) mktime)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 100
extern size_t ( __attribute__((__leaf__)) strftime)(char * __restrict  __s , size_t __maxsize ,
                                                    char const   * __restrict  __format ,
                                                    struct tm  const  * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 116
extern size_t ( __attribute__((__leaf__)) strftime_l)(char * __restrict  __s , size_t __maxsize ,
                                                      char const   * __restrict  __format ,
                                                      struct tm  const  * __restrict  __tp ,
                                                      locale_t __loc )  __attribute__((__nothrow__)) ;
#line 132
extern struct tm *( __attribute__((__leaf__)) gmtime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 136
extern struct tm *( __attribute__((__leaf__)) localtime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 154
extern struct tm *( __attribute__((__leaf__)) gmtime_r)(time_t const   * __restrict  __timer ,
                                                        struct tm * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 159
extern struct tm *( __attribute__((__leaf__)) localtime_r)(time_t const   * __restrict  __timer ,
                                                           struct tm * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 179
extern char *( __attribute__((__leaf__)) asctime)(struct tm  const  *__tp )  __attribute__((__nothrow__)) ;
#line 183
extern char *( __attribute__((__leaf__)) ctime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 197
extern char *( __attribute__((__leaf__)) asctime_r)(struct tm  const  * __restrict  __tp ,
                                                    char * __restrict  __buf )  __attribute__((__nothrow__)) ;
#line 202
extern char *( __attribute__((__leaf__)) ctime_r)(time_t const   * __restrict  __timer ,
                                                  char * __restrict  __buf )  __attribute__((__nothrow__)) ;
#line 217
extern char *__tzname[2] ;
#line 218
extern int __daylight ;
#line 219
extern long __timezone ;
#line 224
extern char *tzname[2] ;
#line 228
extern void ( __attribute__((__leaf__)) tzset)(void)  __attribute__((__nothrow__)) ;
#line 232
extern int daylight ;
#line 233
extern long timezone ;
#line 249
extern time_t ( __attribute__((__leaf__)) timegm)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 251
extern time_t ( __attribute__((__leaf__)) timelocal)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 262
extern int ( __attribute__((__leaf__)) dysize)(int __year )  __attribute__((__nothrow__,
__const__)) ;
#line 272
extern int nanosleep(struct timespec  const  *__requested_time , struct timespec *__remaining ) ;
#line 276
extern int ( __attribute__((__leaf__)) clock_getres)(clockid_t __clock_id , struct timespec *__res )  __attribute__((__nothrow__)) ;
#line 279
extern int ( __attribute__((__leaf__)) clock_gettime)(clockid_t __clock_id , struct timespec *__tp )  __attribute__((__nothrow__)) ;
#line 282
extern int ( __attribute__((__leaf__)) clock_settime)(clockid_t __clock_id , struct timespec  const  *__tp )  __attribute__((__nothrow__)) ;
#line 311
extern int clock_nanosleep(clockid_t __clock_id , int __flags , struct timespec  const  *__req ,
                           struct timespec *__rem ) ;
#line 326
extern int ( __attribute__((__leaf__)) clock_getcpuclockid)(pid_t __pid , clockid_t *__clock_id )  __attribute__((__nothrow__)) ;
#line 331
extern int ( __attribute__((__leaf__)) timer_create)(clockid_t __clock_id , struct sigevent * __restrict  __evp ,
                                                     timer_t * __restrict  __timerid )  __attribute__((__nothrow__)) ;
#line 336
extern int ( __attribute__((__leaf__)) timer_delete)(timer_t __timerid )  __attribute__((__nothrow__)) ;
#line 340
extern int ( __attribute__((__leaf__)) timer_settime)(timer_t __timerid , int __flags ,
                                                      struct itimerspec  const  * __restrict  __value ,
                                                      struct itimerspec * __restrict  __ovalue )  __attribute__((__nothrow__)) ;
#line 345
extern int ( __attribute__((__leaf__)) timer_gettime)(timer_t __timerid , struct itimerspec *__value )  __attribute__((__nothrow__)) ;
#line 364
extern int ( __attribute__((__leaf__)) timer_getoverrun)(timer_t __timerid )  __attribute__((__nothrow__)) ;
#line 371
extern int ( __attribute__((__nonnull__(1), __leaf__)) timespec_get)(struct timespec *__ts ,
                                                                     int __base )  __attribute__((__nothrow__)) ;
#line 202 "/usr/include/pthread.h"
extern int ( __attribute__((__nonnull__(1,3))) pthread_create)(pthread_t *__newthread ,
                                                               pthread_attr_t const   *__attr ,
                                                               void *(*__start_routine)(void * ) ,
                                                               void *__arg )  __attribute__((__nothrow__)) ;
#line 211
extern void pthread_exit(void *__retval )  __attribute__((__noreturn__)) ;
#line 219
extern int pthread_join(pthread_t __th , void **__thread_return ) ;
#line 269
extern int ( __attribute__((__leaf__)) pthread_detach)(pthread_t __th )  __attribute__((__nothrow__)) ;
#line 273
extern pthread_t ( __attribute__((__leaf__)) pthread_self)(void)  __attribute__((__nothrow__,
__const__)) ;
#line 276
extern int ( __attribute__((__leaf__)) pthread_equal)(pthread_t __thread1 , pthread_t __thread2 )  __attribute__((__nothrow__,
__const__)) ;
#line 285
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_init)(pthread_attr_t *__attr )  __attribute__((__nothrow__)) ;
#line 288
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_destroy)(pthread_attr_t *__attr )  __attribute__((__nothrow__)) ;
#line 292
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getdetachstate)(pthread_attr_t const   *__attr ,
                                                                                      int *__detachstate )  __attribute__((__nothrow__)) ;
#line 297
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setdetachstate)(pthread_attr_t *__attr ,
                                                                                    int __detachstate )  __attribute__((__nothrow__)) ;
#line 303
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getguardsize)(pthread_attr_t const   *__attr ,
                                                                                    size_t *__guardsize )  __attribute__((__nothrow__)) ;
#line 308
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setguardsize)(pthread_attr_t *__attr ,
                                                                                  size_t __guardsize )  __attribute__((__nothrow__)) ;
#line 314
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getschedparam)(pthread_attr_t const   * __restrict  __attr ,
                                                                                     struct sched_param * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 319
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_setschedparam)(pthread_attr_t * __restrict  __attr ,
                                                                                     struct sched_param  const  * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 324
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getschedpolicy)(pthread_attr_t const   * __restrict  __attr ,
                                                                                      int * __restrict  __policy )  __attribute__((__nothrow__)) ;
#line 329
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setschedpolicy)(pthread_attr_t *__attr ,
                                                                                    int __policy )  __attribute__((__nothrow__)) ;
#line 333
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getinheritsched)(pthread_attr_t const   * __restrict  __attr ,
                                                                                       int * __restrict  __inherit )  __attribute__((__nothrow__)) ;
#line 338
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setinheritsched)(pthread_attr_t *__attr ,
                                                                                     int __inherit )  __attribute__((__nothrow__)) ;
#line 344
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getscope)(pthread_attr_t const   * __restrict  __attr ,
                                                                                int * __restrict  __scope )  __attribute__((__nothrow__)) ;
#line 349
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setscope)(pthread_attr_t *__attr ,
                                                                              int __scope )  __attribute__((__nothrow__)) ;
#line 353
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getstackaddr)(pthread_attr_t const   * __restrict  __attr ,
                                                                                    void ** __restrict  __stackaddr )  __attribute__((__nothrow__,
__deprecated__)) ;
#line 361
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstackaddr)(pthread_attr_t *__attr ,
                                                                                  void *__stackaddr )  __attribute__((__nothrow__,
__deprecated__)) ;
#line 366
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getstacksize)(pthread_attr_t const   * __restrict  __attr ,
                                                                                    size_t * __restrict  __stacksize )  __attribute__((__nothrow__)) ;
#line 373
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstacksize)(pthread_attr_t *__attr ,
                                                                                  size_t __stacksize )  __attribute__((__nothrow__)) ;
#line 379
extern int ( __attribute__((__nonnull__(1,2,3), __leaf__)) pthread_attr_getstack)(pthread_attr_t const   * __restrict  __attr ,
                                                                                  void ** __restrict  __stackaddr ,
                                                                                  size_t * __restrict  __stacksize )  __attribute__((__nothrow__)) ;
#line 387
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstack)(pthread_attr_t *__attr ,
                                                                              void *__stackaddr ,
                                                                              size_t __stacksize )  __attribute__((__nothrow__)) ;
#line 441
extern int ( __attribute__((__nonnull__(3), __leaf__)) pthread_setschedparam)(pthread_t __target_thread ,
                                                                              int __policy ,
                                                                              struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 446
extern int ( __attribute__((__nonnull__(2,3), __leaf__)) pthread_getschedparam)(pthread_t __target_thread ,
                                                                                int * __restrict  __policy ,
                                                                                struct sched_param * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 452
extern int ( __attribute__((__leaf__)) pthread_setschedprio)(pthread_t __target_thread ,
                                                             int __prio )  __attribute__((__nothrow__)) ;
#line 509
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) )  __attribute__((__goblint_stub__)) ;
#line 521
extern int pthread_setcancelstate(int __state , int *__oldstate ) ;
#line 525
extern int pthread_setcanceltype(int __type , int *__oldtype ) ;
#line 528
extern int pthread_cancel(pthread_t __th ) ;
#line 533
extern void pthread_testcancel(void) ;
#line 697
extern void __pthread_register_cancel(__pthread_unwind_buf_t *__buf ) ;
#line 709
extern void __pthread_unregister_cancel(__pthread_unwind_buf_t *__buf ) ;
#line 750
extern void __pthread_unwind_next(__pthread_unwind_buf_t *__buf )  __attribute__((__weak__,
__noreturn__)) ;
#line 766
extern int __sigsetjmp_cancel(struct __cancel_jmp_buf_tag *__env , int __savemask )  __asm__("__sigsetjmp") __attribute__((__returns_twice__,
__nothrow__)) ;
#line 781
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_init)(pthread_mutex_t *__mutex ,
                                                                           pthread_mutexattr_t const   *__mutexattr )  __attribute__((__nothrow__)) ;
#line 786
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_destroy)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 790
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_trylock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 794
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_lock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 800
extern int ( __attribute__((__nonnull__(1,2))) pthread_mutex_timedlock)(pthread_mutex_t * __restrict  __mutex ,
                                                                        struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 835
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_unlock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 840
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutex_getprioceiling)(pthread_mutex_t const   * __restrict  __mutex ,
                                                                                       int * __restrict  __prioceiling )  __attribute__((__nothrow__)) ;
#line 847
extern int ( __attribute__((__nonnull__(1,3), __leaf__)) pthread_mutex_setprioceiling)(pthread_mutex_t * __restrict  __mutex ,
                                                                                       int __prioceiling ,
                                                                                       int * __restrict  __old_ceiling )  __attribute__((__nothrow__)) ;
#line 855
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_consistent)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 874
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_init)(pthread_mutexattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 878
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_destroy)(pthread_mutexattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 882
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getpshared)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                       int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 888
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setpshared)(pthread_mutexattr_t *__attr ,
                                                                                     int __pshared )  __attribute__((__nothrow__)) ;
#line 894
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_gettype)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                    int * __restrict  __kind )  __attribute__((__nothrow__)) ;
#line 901
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_settype)(pthread_mutexattr_t *__attr ,
                                                                                  int __kind )  __attribute__((__nothrow__)) ;
#line 906
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getprotocol)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __protocol )  __attribute__((__nothrow__)) ;
#line 913
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setprotocol)(pthread_mutexattr_t *__attr ,
                                                                                      int __protocol )  __attribute__((__nothrow__)) ;
#line 918
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getprioceiling)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                           int * __restrict  __prioceiling )  __attribute__((__nothrow__)) ;
#line 924
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setprioceiling)(pthread_mutexattr_t *__attr ,
                                                                                         int __prioceiling )  __attribute__((__nothrow__)) ;
#line 930
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getrobust)(pthread_mutexattr_t const   *__attr ,
                                                                                      int *__robustness )  __attribute__((__nothrow__)) ;
#line 946
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setrobust)(pthread_mutexattr_t *__attr ,
                                                                                    int __robustness )  __attribute__((__nothrow__)) ;
#line 967
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlock_init)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                            pthread_rwlockattr_t const   * __restrict  __attr )  __attribute__((__nothrow__)) ;
#line 972
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlock_destroy)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 976
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_rdlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 980
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_tryrdlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 986
extern int ( __attribute__((__nonnull__(1,2))) pthread_rwlock_timedrdlock)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                           struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 1023
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_wrlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1027
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_trywrlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1033
extern int ( __attribute__((__nonnull__(1,2))) pthread_rwlock_timedwrlock)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                           struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 1071
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_unlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1078
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_init)(pthread_rwlockattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1082
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_destroy)(pthread_rwlockattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1086
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_rwlockattr_getpshared)(pthread_rwlockattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1092
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_setpshared)(pthread_rwlockattr_t *__attr ,
                                                                                      int __pshared )  __attribute__((__nothrow__)) ;
#line 1097
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_rwlockattr_getkind_np)(pthread_rwlockattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __pref )  __attribute__((__nothrow__)) ;
#line 1103
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_setkind_np)(pthread_rwlockattr_t *__attr ,
                                                                                      int __pref )  __attribute__((__nothrow__)) ;
#line 1112
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_cond_init)(pthread_cond_t * __restrict  __cond ,
                                                                          pthread_condattr_t const   * __restrict  __cond_attr )  __attribute__((__nothrow__)) ;
#line 1117
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_cond_destroy)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1121
extern int ( __attribute__((__nonnull__(1))) pthread_cond_signal)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1125
extern int ( __attribute__((__nonnull__(1))) pthread_cond_broadcast)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1133
extern int ( __attribute__((__nonnull__(1,2))) pthread_cond_wait)(pthread_cond_t * __restrict  __cond ,
                                                                  pthread_mutex_t * __restrict  __mutex ) ;
#line 1145
extern int ( __attribute__((__nonnull__(1,2,3))) pthread_cond_timedwait)(pthread_cond_t * __restrict  __cond ,
                                                                         pthread_mutex_t * __restrict  __mutex ,
                                                                         struct timespec  const  * __restrict  __abstime ) ;
#line 1194
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_init)(pthread_condattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1198
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_destroy)(pthread_condattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1202
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_condattr_getpshared)(pthread_condattr_t const   * __restrict  __attr ,
                                                                                      int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1208
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_setpshared)(pthread_condattr_t *__attr ,
                                                                                    int __pshared )  __attribute__((__nothrow__)) ;
#line 1213
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_condattr_getclock)(pthread_condattr_t const   * __restrict  __attr ,
                                                                                    __clockid_t * __restrict  __clock_id )  __attribute__((__nothrow__)) ;
#line 1219
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_setclock)(pthread_condattr_t *__attr ,
                                                                                  __clockid_t __clock_id )  __attribute__((__nothrow__)) ;
#line 1230
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_spin_init)(pthread_spinlock_t *__lock ,
                                                                          int __pshared )  __attribute__((__nothrow__)) ;
#line 1234
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_spin_destroy)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1238
extern int ( __attribute__((__nonnull__(1))) pthread_spin_lock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1242
extern int ( __attribute__((__nonnull__(1))) pthread_spin_trylock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1246
extern int ( __attribute__((__nonnull__(1))) pthread_spin_unlock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1254
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrier_init)(pthread_barrier_t * __restrict  __barrier ,
                                                                             pthread_barrierattr_t const   * __restrict  __attr ,
                                                                             unsigned int __count )  __attribute__((__nothrow__)) ;
#line 1260
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrier_destroy)(pthread_barrier_t *__barrier )  __attribute__((__nothrow__)) ;
#line 1264
extern int ( __attribute__((__nonnull__(1))) pthread_barrier_wait)(pthread_barrier_t *__barrier )  __attribute__((__nothrow__)) ;
#line 1269
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_init)(pthread_barrierattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1273
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_destroy)(pthread_barrierattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1277
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_barrierattr_getpshared)(pthread_barrierattr_t const   * __restrict  __attr ,
                                                                                         int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1283
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_setpshared)(pthread_barrierattr_t *__attr ,
                                                                                       int __pshared )  __attribute__((__nothrow__)) ;
#line 1297
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_key_create)(pthread_key_t *__key ,
                                                                           void (*__destr_function)(void * ) )  __attribute__((__nothrow__)) ;
#line 1302
extern int ( __attribute__((__leaf__)) pthread_key_delete)(pthread_key_t __key )  __attribute__((__nothrow__)) ;
#line 1305
extern void *( __attribute__((__leaf__)) pthread_getspecific)(pthread_key_t __key )  __attribute__((__nothrow__)) ;
#line 1308
extern int ( __attribute__((__leaf__)) pthread_setspecific)(pthread_key_t __key ,
                                                            void const   *__pointer )  __attribute__((__nothrow__,
__access__(__none__,2))) ;
#line 1315
extern int ( __attribute__((__nonnull__(2), __leaf__)) pthread_getcpuclockid)(pthread_t __thread_id ,
                                                                              __clockid_t *__clock_id )  __attribute__((__nothrow__)) ;
#line 1332
extern int ( __attribute__((__leaf__)) pthread_atfork)(void (*__prepare)(void) , void (*__parent)(void) ,
                                                       void (*__child)(void) )  __attribute__((__nothrow__)) ;
#line 5 "/home/simmo/dev/goblint/sv-comp/goblint/includes/pthread.c"
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) )  __attribute__((__goblint_stub__)) ;
#line 5 "/home/simmo/dev/goblint/sv-comp/goblint/includes/pthread.c"
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) ) 
{ 
  int top ;

  {
  {
#line 8
  (*init_routine)();
  }
#line 9
  return (top);
}
}
#line 5640 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
long ldv__builtin_expect(long exp , long c ) ;
#line 5641
extern struct pv_cpu_ops pv_cpu_ops ;
#line 5642
extern struct pv_irq_ops pv_irq_ops ;
#line 5643 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void set_bit(long nr , unsigned long volatile   *addr ) 
{ 


  {
  {
#line 5646
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
  }
#line 5647
  return;
}
}
#line 5650 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void clear_bit(long nr , unsigned long volatile   *addr ) 
{ 


  {
  {
#line 5653
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
  }
#line 5654
  return;
}
}
#line 5657 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static int test_and_clear_bit(long nr , unsigned long volatile   *addr ) 
{ 


  {
  {
#line 5660
  __asm__  volatile   ("":);
  }
#line 5661
  return (0);
#line 5662
  return (1);
}
}
#line 5665
int printk(char const   *arg0  , ...) ;
#line 5666
int sprintf(char *arg0 , char const   *arg1  , ...) ;
#line 5667
void *memcpy(void *arg0 , void const   *arg1 , size_t___0 arg2 ) ;
#line 5668
void warn_slowpath_null(char const   *arg0 , int const   arg1 ) ;
#line 5669 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void slow_down_io(void) 
{ 


  {
  {
#line 5673
  (*(pv_cpu_ops.io_delay))();
  }
#line 5675
  return;
}
}
#line 5678 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static unsigned long arch_local_save_flags(void) 
{ 
  unsigned long __ret ;
  unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
  {
#line 5680
  __ret = 0UL;
#line 5681
  __edi = 0UL;
#line 5682
  __esi = 0UL;
#line 5683
  __edx = 0UL;
#line 5684
  __ecx = 0UL;
#line 5685
  __eax = 0UL;
#line 5689
  tmp = ldv__builtin_expect((long )((unsigned long )pv_irq_ops.save_fl.func == (unsigned long )((void *)0)),
                            0L);
  }
#line 5692
  if (tmp != 0L) {
    {
#line 5694
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ("/home/alpha/git/klever2/klever/native-scheduler-work-dir/scheduler/jobs/d5cd53f56669d61faa91054857893dbd/klever-core-work-dir/lkbce/arch/x86/include/asm/paravirt.h"),
                         "i" (804), "i" (12UL));
#line 5696
    __builtin_unreachable();
    }
  }
  {
#line 5700
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (44UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.save_fl.func), [paravirt_clobber] "i" (1): "memory",
                       "cc");
#line 5703
  __ret = __eax;
  }
#line 5704
  return (__ret);
}
}
#line 5707 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static int arch_irqs_disabled_flags(unsigned long flags ) 
{ 


  {
#line 5710
  return ((flags & 512UL) == 0UL);
}
}
#line 5713
void __ldv_spin_lock(spinlock_t *arg0 ) ;
#line 5714
static void ldv___ldv_spin_lock_78(spinlock_t *ldv_func_arg1 ) ;
#line 5715
void ldv_spin_lock_lock_of_w83977af_ir(void) ;
#line 5716
void ldv_spin_unlock_lock_of_w83977af_ir(void) ;
#line 5717
void ldv_initialize(void) ;
#line 5718
int ldv_post_init(int init_ret_val ) ;
#line 5719
int ldv_failed_register_netdev(void) ;
#line 5720
void ldv_check_final_state(void) ;
#line 5721
void ldv_switch_to_interrupt_context(void) ;
#line 5722
void ldv_switch_to_process_context(void) ;
#line 5724 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void assume_abort_if_not(int cond ) 
{ 


  {
#line 5725
  if (! cond) {
    {
#line 5725
    abort();
    }
  }
#line 5726
  return;
}
}
#line 5727
int ldv_undef_int(void) ;
#line 5728
int ldv_undef_int_negative(void) ;
#line 5729
void ldv_free(void *s ) ;
#line 5730
void *ldv_xmalloc(size_t___0 size ) ;
#line 5731
void __raw_spin_lock_init(raw_spinlock_t *arg0 , char const   *arg1 , struct lock_class_key *arg2 ) ;
#line 5732
void _raw_spin_unlock_irqrestore(raw_spinlock_t *arg0 , unsigned long arg1 ) ;
#line 5733
void ldv_assert(int expr ) ;
#line 5734 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__u32 io_speed  ;
#line 5735 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 5738
  return (& lock->__annonCompField19.rlock);
}
}
#line 5741 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
  {
#line 5745
  _raw_spin_unlock_irqrestore(& lock->__annonCompField19.rlock, flags);
  }
#line 5747
  return;
}
}
#line 5750
__inline static void ldv_spin_unlock_irqrestore_79(spinlock_t *lock , unsigned long flags ) ;
#line 5751
extern unsigned long volatile   jiffies ;
#line 5752
extern struct resource ioport_resource ;
#line 5753
struct resource *__request_region(struct resource *arg0 , resource_size_t arg1 , resource_size_t arg2 ,
                                  char const   *arg3 , int arg4 ) ;
#line 5755
void __release_region(struct resource *arg0 , resource_size_t arg1 , resource_size_t arg2 ) ;
#line 5756 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void outb(unsigned char value , int port ) 
{ 


  {
  {
#line 5759
  __asm__  volatile   ("outb %b0, %w1": : "a" (value), "Nd" (port));
  }
#line 5760
  return;
}
}
#line 5763 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static unsigned char inb(int port ) 
{ 
  unsigned char value ;

  {
  {
#line 5767
  __asm__  volatile   ("inb %w1, %b0": "=a" (value): "Nd" (port));
  }
#line 5768
  return (value);
}
}
#line 5771 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static unsigned char inb_p(int port ) 
{ 
  unsigned char value ;
  unsigned char tmp ;

  {
  {
#line 5777
  tmp = inb(port);
#line 5778
  value = tmp;
#line 5779
  slow_down_io();
  }
#line 5781
  return (value);
}
}
#line 5784
void __udelay(unsigned long arg0 ) ;
#line 5785
void __const_udelay(unsigned long arg0 ) ;
#line 5786
bool capable(int arg0 ) ;
#line 5787
int net_ratelimit(void) ;
#line 5788 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static int is_device_dma_capable(struct device *dev ) 
{ 
  int tmp ;

  {
#line 5791
  if ((unsigned long )dev->dma_mask != (unsigned long )((u64 *)0ULL)) {
#line 5791
    if (*(dev->dma_mask) != 0ULL) {
      {
#line 5791
      tmp = 1;
      }
    } else {
      {
#line 5791
      tmp = 0;
      }
    }
  } else {
    {
#line 5791
    tmp = 0;
    }
  }
#line 5791
  return (tmp);
}
}
#line 5794
void debug_dma_alloc_coherent(struct device *arg0 , size_t___0 arg1 , dma_addr_t arg2 ,
                              void *arg3 ) ;
#line 5795
void debug_dma_free_coherent(struct device *arg0 , size_t___0 arg1 , void *arg2 ,
                             dma_addr_t arg3 ) ;
#line 5796
extern struct device x86_dma_fallback_dev ;
#line 5797
extern struct dma_map_ops *dma_ops ;
#line 5798 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev ) 
{ 
  long tmp ;

  {
  {
#line 5803
  tmp = ldv__builtin_expect((long )((unsigned long )dev == (unsigned long )((struct device *)0)),
                            0L);
  }
#line 5806
  if (tmp != 0L) {
#line 5807
    return (dma_ops);
  } else
#line 5806
  if ((unsigned long )dev->archdata.dma_ops == (unsigned long )((struct dma_map_ops *)0)) {
#line 5807
    return (dma_ops);
  } else {
#line 5809
    return (dev->archdata.dma_ops);
  }
}
}
#line 5813 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static unsigned long dma_alloc_coherent_mask(struct device *dev , gfp_t gfp ) 
{ 
  unsigned long dma_mask ;

  {
  {
#line 5817
  dma_mask = 0UL;
#line 5818
  dma_mask = (unsigned long )dev->coherent_dma_mask;
  }
#line 5819
  if (dma_mask == 0UL) {
#line 5820
    if ((int )gfp & 1) {
      {
#line 5820
      dma_mask = 16777215UL;
      }
    } else {
      {
#line 5820
      dma_mask = 4294967295UL;
      }
    }
  }
#line 5823
  return (dma_mask);
}
}
#line 5826 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static gfp_t dma_alloc_coherent_gfp_flags(struct device *dev , gfp_t gfp ) 
{ 
  unsigned long dma_mask ;
  unsigned long tmp ;

  {
  {
#line 5832
  tmp = dma_alloc_coherent_mask(dev, gfp);
#line 5833
  dma_mask = tmp;
  }
#line 5835
  if ((unsigned long long )dma_mask <= 16777215ULL) {
    {
#line 5836
    gfp |= 1U;
    }
  }
#line 5839
  if ((unsigned long long )dma_mask <= 4294967295ULL) {
#line 5839
    if ((gfp & 1U) == 0U) {
      {
#line 5840
      gfp |= 4U;
      }
    }
  }
#line 5843
  return (gfp);
}
}
#line 5846 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void *dma_alloc_attrs(struct device *dev , size_t___0 size , dma_addr_t *dma_handle ,
                                      gfp_t gfp , struct dma_attrs *attrs ) 
{ 
  struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  void *memory ;
  int tmp___0 ;
  gfp_t tmp___1 ;

  {
  {
#line 5856
  tmp = get_dma_ops(dev);
#line 5857
  ops = tmp;
#line 5858
  gfp &= 4294967288U;
  }
#line 5860
  if ((unsigned long )dev == (unsigned long )((struct device *)0)) {
    {
#line 5861
    dev = & x86_dma_fallback_dev;
    }
  }
  {
#line 5865
  tmp___0 = is_device_dma_capable(dev);
  }
#line 5867
  if (tmp___0 == 0) {
#line 5868
    return ((void *)0);
  }
#line 5871
  if ((unsigned long )ops->alloc == (unsigned long )((void *(*)(struct device * ,
                                                                size_t___0  , dma_addr_t * ,
                                                                gfp_t  , struct dma_attrs * ))0)) {
#line 5874
    return ((void *)0);
  }
  {
#line 5878
  tmp___1 = dma_alloc_coherent_gfp_flags(dev, gfp);
#line 5879
  memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs);
#line 5880
  debug_dma_alloc_coherent(dev, size, *dma_handle, memory);
  }
#line 5882
  return (memory);
}
}
#line 5885 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void dma_free_attrs(struct device *dev , size_t___0 size , void *vaddr ,
                                    dma_addr_t bus , struct dma_attrs *attrs ) 
{ 
  struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  int __ret_warn_on ;
  unsigned long _flags ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 5896
  tmp = get_dma_ops(dev);
#line 5897
  ops = tmp;
#line 5898
  _flags = arch_local_save_flags();
#line 5899
  tmp___0 = arch_irqs_disabled_flags(_flags);
#line 5900
  __ret_warn_on = tmp___0 != 0;
#line 5901
  tmp___1 = ldv__builtin_expect((long )(__ret_warn_on != 0), 0L);
  }
#line 5903
  if (tmp___1 != 0L) {
    {
#line 5905
    warn_slowpath_null((char const   *)"/home/alpha/git/klever2/klever/native-scheduler-work-dir/scheduler/jobs/d5cd53f56669d61faa91054857893dbd/klever-core-work-dir/lkbce/arch/x86/include/asm/dma-mapping.h",
                       (int const   )166);
    }
  }
  {
#line 5911
  ldv__builtin_expect((long )(__ret_warn_on != 0), 0L);
#line 5912
  debug_dma_free_coherent(dev, size, vaddr, bus);
  }
#line 5914
  if ((unsigned long )ops->free != (unsigned long )((void (*)(struct device * , size_t___0  ,
                                                              void * , dma_addr_t  ,
                                                              struct dma_attrs * ))0)) {
    {
#line 5918
    (*(ops->free))(dev, size, vaddr, bus, attrs);
    }
  }
#line 5922
  return;
}
}
#line 5925
void *ldv_zalloc(size_t___0 size ) ;
#line 5926 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void *dma_zalloc_coherent(struct device *dev , size_t___0 size , dma_addr_t *dma_handle ,
                                          gfp_t flag ) 
{ 
  void *ret ;
  void *tmp ;

  {
  {
#line 5933
  tmp = dma_alloc_attrs(dev, size, dma_handle, flag | 32768U, (struct dma_attrs *)0);
#line 5934
  ret = tmp;
  }
#line 5936
  return (ret);
}
}
#line 5939
void consume_skb(struct sk_buff *arg0 ) ;
#line 5940
unsigned char *skb_put(struct sk_buff *arg0 , unsigned int arg1 ) ;
#line 5941 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void skb_reserve(struct sk_buff *skb , int len ) 
{ 


  {
  {
#line 5944
  skb->data += (unsigned long )len;
#line 5945
  skb->tail += (sk_buff_data_t )len;
  }
#line 5946
  return;
}
}
#line 5949 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void skb_reset_mac_header(struct sk_buff *skb ) 
{ 


  {
  {
#line 5952
  skb->mac_header = (__u16 )((int )((__u16 )((long )skb->data)) - (int )((__u16 )((long )skb->head)));
  }
#line 5953
  return;
}
}
#line 5956
struct sk_buff *__netdev_alloc_skb(struct net_device *arg0 , unsigned int arg1 , gfp_t arg2 ) ;
#line 5957 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev , unsigned int length ) 
{ 
  struct sk_buff *tmp ;

  {
  {
#line 5962
  tmp = __netdev_alloc_skb(dev, length, 32U);
  }
#line 5964
  return (tmp);
}
}
#line 5967 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static struct sk_buff *dev_alloc_skb(unsigned int length ) 
{ 
  struct sk_buff *tmp ;

  {
  {
#line 5972
  tmp = netdev_alloc_skb((struct net_device *)0, length);
  }
#line 5974
  return (tmp);
}
}
#line 5977 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void skb_copy_from_linear_data(struct sk_buff  const  *skb , void *to ,
                                               unsigned int const   len ) 
{ 


  {
  {
#line 5982
  memcpy(to, (void const   *)skb->data, (size_t___0 )len);
  }
#line 5984
  return;
}
}
#line 5987 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb , void const   *from ,
                                             unsigned int const   len ) 
{ 


  {
  {
#line 5992
  memcpy((void *)skb->data, from, (size_t___0 )len);
  }
#line 5994
  return;
}
}
#line 5997 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device  const  *dev ,
                                                         unsigned int index ) 
{ 


  {
#line 6001
  return ((struct netdev_queue *)(dev->_tx + (unsigned long )index));
}
}
#line 6004 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void *netdev_priv(struct net_device  const  *dev ) 
{ 


  {
#line 6007
  return ((void *)(dev + 3200U));
}
}
#line 6010
static void ldv_free_netdev_72(struct net_device *ldv_func_arg1 ) ;
#line 6011
static void ldv_free_netdev_74(struct net_device *ldv_func_arg1 ) ;
#line 6012
int netpoll_trap(void) ;
#line 6013
void __netif_schedule(struct Qdisc *arg0 ) ;
#line 6014 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue ) 
{ 


  {
  {
#line 6018
  clear_bit(0L, (unsigned long volatile   *)(& dev_queue->state));
  }
#line 6020
  return;
}
}
#line 6023 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void netif_start_queue(struct net_device *dev ) 
{ 
  struct netdev_queue *tmp ;

  {
  {
#line 6028
  tmp = netdev_get_tx_queue((struct net_device  const  *)dev, 0U);
#line 6029
  netif_tx_start_queue(tmp);
  }
#line 6031
  return;
}
}
#line 6034 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void netif_tx_wake_queue(struct netdev_queue *dev_queue ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  {
#line 6040
  tmp = netpoll_trap();
  }
#line 6042
  if (tmp != 0) {
    {
#line 6044
    netif_tx_start_queue(dev_queue);
    }
#line 6046
    return;
  }
  {
#line 6050
  tmp___0 = test_and_clear_bit(0L, (unsigned long volatile   *)(& dev_queue->state));
  }
#line 6052
  if (tmp___0 != 0) {
    {
#line 6054
    __netif_schedule(dev_queue->qdisc);
    }
  }
#line 6058
  return;
}
}
#line 6061 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void netif_wake_queue(struct net_device *dev ) 
{ 
  struct netdev_queue *tmp ;

  {
  {
#line 6066
  tmp = netdev_get_tx_queue((struct net_device  const  *)dev, 0U);
#line 6067
  netif_tx_wake_queue(tmp);
  }
#line 6069
  return;
}
}
#line 6072 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue ) 
{ 
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;

  {
  {
#line 6079
  __ret_warn_on = (unsigned long )dev_queue == (unsigned long )((struct netdev_queue *)0);
#line 6080
  tmp = ldv__builtin_expect((long )(__ret_warn_on != 0), 0L);
  }
#line 6082
  if (tmp != 0L) {
    {
#line 6084
    warn_slowpath_null((char const   *)"include/linux/netdevice.h", (int const   )2128);
    }
  }
  {
#line 6089
  tmp___0 = ldv__builtin_expect((long )(__ret_warn_on != 0), 0L);
  }
#line 6091
  if (tmp___0 != 0L) {
    {
#line 6093
    printk((char const   *)"\016netif_stop_queue() cannot be called before register_netdev()\n");
    }
#line 6095
    return;
  }
  {
#line 6099
  set_bit(0L, (unsigned long volatile   *)(& dev_queue->state));
  }
#line 6101
  return;
}
}
#line 6104 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void netif_stop_queue(struct net_device *dev ) 
{ 
  struct netdev_queue *tmp ;

  {
  {
#line 6109
  tmp = netdev_get_tx_queue((struct net_device  const  *)dev, 0U);
#line 6110
  netif_tx_stop_queue(tmp);
  }
#line 6112
  return;
}
}
#line 6115
int netif_rx(struct sk_buff *arg0 ) ;
#line 6116
static int ldv_register_netdev_71(struct net_device *ldv_func_arg1 ) ;
#line 6117
static void ldv_unregister_netdev_73(struct net_device *ldv_func_arg1 ) ;
#line 6118
__inline static int ldv_request_irq_75(unsigned int irq___0 , irqreturn_t (*handler)(int  ,
                                                                                     void * ) ,
                                       unsigned long flags , char const   *name ,
                                       void *dev ) ;
#line 6122
static void ldv_free_irq_76(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) ;
#line 6123
static void ldv_free_irq_77(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) ;
#line 6124 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void disable_dma(unsigned int dmanr ) 
{ 


  {
#line 6127
  if (dmanr <= 3U) {
    {
#line 6129
    outb((unsigned char )((int )((unsigned int )((unsigned char )dmanr) | 4U)), 10);
    }
  } else {
    {
#line 6133
    outb((unsigned char )((int )(((unsigned int )((unsigned char )dmanr) & 3U) | 4U)),
         212);
    }
  }
#line 6136
  return;
}
}
#line 6139
int request_dma(unsigned int arg0 , char const   *arg1 ) ;
#line 6140
void free_dma(unsigned int arg0 ) ;
#line 6141
extern unsigned int irda_debug ;
#line 6142
void irda_init_max_qos_capabilies(struct qos_info *arg0 ) ;
#line 6143
void irda_qos_bits_to_value(struct qos_info *arg0 ) ;
#line 6144
struct irlap_cb *irlap_open(struct net_device *arg0 , struct qos_info *arg1 , char const   *arg2 ) ;
#line 6145
void irlap_close(struct irlap_cb *arg0 ) ;
#line 6146
void irda_device_set_media_busy(struct net_device *arg0 , int arg1 ) ;
#line 6147
struct net_device *alloc_irdadev(int arg0 ) ;
#line 6148
void irda_setup_dma(int arg0 , dma_addr_t arg1 , int arg2 , int arg3 ) ;
#line 6149 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static __u16 irda_get_mtt(struct sk_buff  const  *skb ) 
{ 
  struct irda_skb_cb  const  *cb ;
  unsigned int tmp ;

  {
  {
#line 6153
  cb = (struct irda_skb_cb  const  *)(& skb->cb);
  }
#line 6154
  if ((unsigned int )cb->magic == 4951U) {
    {
#line 6154
    tmp = (unsigned int )((__u16 )cb->mtt);
    }
  } else {
    {
#line 6154
    tmp = 10000U;
    }
  }
#line 6154
  return ((__u16 )tmp);
}
}
#line 6157 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static __u32 irda_get_next_speed(struct sk_buff  const  *skb ) 
{ 
  struct irda_skb_cb  const  *cb ;
  __u32 tmp ;

  {
  {
#line 6161
  cb = (struct irda_skb_cb  const  *)(& skb->cb);
  }
#line 6162
  if ((unsigned int )cb->magic == 4951U) {
    {
#line 6162
    tmp = (__u32 )cb->next_speed;
    }
  } else {
    {
#line 6162
    tmp = 4294967295U;
    }
  }
#line 6162
  return (tmp);
}
}
#line 6165
int async_wrap_skb(struct sk_buff *arg0 , __u8 *arg1 , int arg2 ) ;
#line 6166
void async_unwrap_char(struct net_device *arg0 , struct net_device_stats *arg1 , iobuff_t *arg2 ,
                       __u8 arg3 ) ;
#line 6168 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void w977_efm_enter(unsigned int efio___0 ) 
{ 


  {
  {
#line 6172
  outb((unsigned char)135, (int )efio___0);
#line 6173
  outb((unsigned char)135, (int )efio___0);
  }
#line 6175
  return;
}
}
#line 6178 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void w977_select_device(__u8 devnum , unsigned int efio___0 ) 
{ 


  {
  {
#line 6182
  outb((unsigned char)7, (int )efio___0);
#line 6183
  outb((unsigned char )((int )devnum), (int )(efio___0 + 1U));
  }
#line 6185
  return;
}
}
#line 6188 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void w977_write_reg(__u8 reg , __u8 value , unsigned int efio___0 ) 
{ 


  {
  {
#line 6192
  outb((unsigned char )((int )reg), (int )efio___0);
#line 6193
  outb((unsigned char )((int )value), (int )(efio___0 + 1U));
  }
#line 6195
  return;
}
}
#line 6198 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void w977_efm_exit(unsigned int efio___0 ) 
{ 


  {
  {
#line 6202
  outb((unsigned char)170, (int )efio___0);
  }
#line 6204
  return;
}
}
#line 6207 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void switch_bank(int iobase , int set ) 
{ 


  {
  {
#line 6211
  outb((unsigned char )((int )((unsigned char )set)), iobase + 3);
  }
#line 6213
  return;
}
}
#line 6216 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static char *driver_name  =    "w83977af_ir";
#line 6217 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int qos_mtt_bits  =    7;
#line 6218 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static unsigned int io[4U]  = {      384U,      4294967295U,      4294967295U,      4294967295U};
#line 6219 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static unsigned int irq[4U]  = {      11U,      0U,      0U,      0U};
#line 6220 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static unsigned int dma[4U]  = {      1U,      0U,      0U,      0U};
#line 6221 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static unsigned int efbase[2U]  = {      880U,      1008U};
#line 6222 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static unsigned int efio  =    880U;
#line 6223 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static struct w83977af_ir *dev_self[4U]  = {      (struct w83977af_ir *)0,      (struct w83977af_ir *)0,      (struct w83977af_ir *)0,      (struct w83977af_ir *)0};
#line 6224
static int w83977af_open(int i , unsigned int iobase , unsigned int irq___0 , unsigned int dma___0 ) ;
#line 6225
static int w83977af_close(struct w83977af_ir *self ) ;
#line 6226
static int w83977af_probe(int iobase , int irq___0 , int dma___0 ) ;
#line 6227
static int w83977af_dma_receive(struct w83977af_ir *self ) ;
#line 6228
static int w83977af_dma_receive_complete(struct w83977af_ir *self ) ;
#line 6229
static netdev_tx_t w83977af_hard_xmit(struct sk_buff *skb , struct net_device *dev ) ;
#line 6230
static int w83977af_pio_write(int iobase , __u8 *buf , int len , int fifo_size ) ;
#line 6231
static void w83977af_dma_write(struct w83977af_ir *self , int iobase ) ;
#line 6232
static void w83977af_change_speed(struct w83977af_ir *self , __u32 speed ) ;
#line 6233
static int w83977af_is_receiving(struct w83977af_ir *self ) ;
#line 6234
static int w83977af_net_open(struct net_device *dev ) ;
#line 6235
static int w83977af_net_close(struct net_device *dev ) ;
#line 6236
static int w83977af_net_ioctl(struct net_device *dev , struct ifreq *rq , int cmd ) ;
#line 6237 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int w83977af_init(void) 
{ 
  int i ;
  int tmp ;

  {
  {
#line 6243
  printk((char const   *)"\017%s()\n", "w83977af_init");
#line 6244
  i = 0;
  }
#line 6246
  goto ldv_44920;
  ldv_44919: 
  {
#line 6249
  tmp = w83977af_open(i, io[i], irq[i], dma[i]);
  }
#line 6251
  if (tmp == 0) {
#line 6252
    return (0);
  }
  {
#line 6255
  i ++;
  }
  ldv_44920: 
  {

  }
#line 6257
  if ((unsigned int )i <= 3U) {
#line 6257
    if (io[i] <= 1999U) {
#line 6258
      goto ldv_44919;
    }
  }
#line 6261
  return (-19);
}
}
#line 6264 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static void w83977af_cleanup(void) 
{ 
  int i ;

  {
#line 6268
  if (irda_debug > 3U) {
    {
#line 6270
    printk((char const   *)"\017%s()\n", "w83977af_cleanup");
    }
  }
  {
#line 6274
  i = 0;
  }
#line 6275
  goto ldv_44930;
  ldv_44929: 
  {

  }
#line 6277
  if ((unsigned long )dev_self[i] != (unsigned long )((struct w83977af_ir *)0)) {
    {
#line 6279
    w83977af_close(dev_self[i]);
    }
  }
  {
#line 6283
  i ++;
  }
  ldv_44930: 
  {

  }
#line 6285
  if ((unsigned int )i <= 3U) {
#line 6286
    goto ldv_44929;
  }
#line 6289
  return;
}
}
#line 6292 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static struct net_device_ops  const  w83977_netdev_ops  = 
#line 6292
     {(int (*)(struct net_device * ))0, (void (*)(struct net_device * ))0, & w83977af_net_open,
    & w83977af_net_close, & w83977af_hard_xmit, (u16 (*)(struct net_device * , struct sk_buff * ,
                                                         void * , u16 (*)(struct net_device * ,
                                                                          struct sk_buff * ) ))0,
    (void (*)(struct net_device * , int  ))0, (void (*)(struct net_device * ))0, (int (*)(struct net_device * ,
                                                                                          void * ))0,
    (int (*)(struct net_device * ))0, & w83977af_net_ioctl, (int (*)(struct net_device * ,
                                                                     struct ifmap * ))0,
    (int (*)(struct net_device * , int  ))0, (int (*)(struct net_device * , struct neigh_parms * ))0,
    (void (*)(struct net_device * ))0, (struct rtnl_link_stats64 *(*)(struct net_device * ,
                                                                      struct rtnl_link_stats64 * ))0,
    (struct net_device_stats *(*)(struct net_device * ))0, (int (*)(struct net_device * ,
                                                                    __be16  , u16  ))0,
    (int (*)(struct net_device * , __be16  , u16  ))0, (void (*)(struct net_device * ))0,
    (int (*)(struct net_device * , struct netpoll_info * , gfp_t  ))0, (void (*)(struct net_device * ))0,
    (int (*)(struct napi_struct * ))0, (int (*)(struct net_device * , int  , u8 * ))0,
    (int (*)(struct net_device * , int  , u16  , u8  ))0, (int (*)(struct net_device * ,
                                                                   int  , int  ))0,
    (int (*)(struct net_device * , int  , bool  ))0, (int (*)(struct net_device * ,
                                                              int  , struct ifla_vf_info * ))0,
    (int (*)(struct net_device * , int  , int  ))0, (int (*)(struct net_device * ,
                                                             int  , struct nlattr ** ))0,
    (int (*)(struct net_device * , int  , struct sk_buff * ))0, (int (*)(struct net_device * ,
                                                                         u8  ))0,
    (int (*)(struct net_device * ))0, (int (*)(struct net_device * ))0, (int (*)(struct net_device * ,
                                                                                 u16  ,
                                                                                 struct scatterlist * ,
                                                                                 unsigned int  ))0,
    (int (*)(struct net_device * , u16  ))0, (int (*)(struct net_device * , u16  ,
                                                      struct scatterlist * , unsigned int  ))0,
    (int (*)(struct net_device * , struct netdev_fcoe_hbainfo * ))0, (int (*)(struct net_device * ,
                                                                              u64 * ,
                                                                              int  ))0,
    (int (*)(struct net_device * , struct sk_buff  const  * , u16  , u32  ))0, (int (*)(struct net_device * ,
                                                                                        struct net_device * ))0,
    (int (*)(struct net_device * , struct net_device * ))0, (netdev_features_t (*)(struct net_device * ,
                                                                                   netdev_features_t  ))0,
    (int (*)(struct net_device * , netdev_features_t  ))0, (int (*)(struct neighbour * ))0,
    (void (*)(struct neighbour * ))0, (int (*)(struct ndmsg * , struct nlattr ** ,
                                               struct net_device * , unsigned char const   * ,
                                               u16  ))0, (int (*)(struct ndmsg * ,
                                                                  struct nlattr ** ,
                                                                  struct net_device * ,
                                                                  unsigned char const   * ))0,
    (int (*)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
             int  ))0, (int (*)(struct net_device * , struct nlmsghdr * ))0, (int (*)(struct sk_buff * ,
                                                                                      u32  ,
                                                                                      u32  ,
                                                                                      struct net_device * ,
                                                                                      u32  ))0,
    (int (*)(struct net_device * , struct nlmsghdr * ))0, (int (*)(struct net_device * ,
                                                                   bool  ))0, (int (*)(struct net_device * ,
                                                                                       struct netdev_phys_port_id * ))0,
    (void (*)(struct net_device * , sa_family_t  , __be16  ))0, (void (*)(struct net_device * ,
                                                                          sa_family_t  ,
                                                                          __be16  ))0,
    (void *(*)(struct net_device * , struct net_device * ))0, (void (*)(struct net_device * ,
                                                                        void * ))0,
    (netdev_tx_t (*)(struct sk_buff * , struct net_device * , void * ))0};
#line 6297 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int w83977af_open(int i , unsigned int iobase , unsigned int irq___0 , unsigned int dma___0 ) 
{ 
  struct net_device *dev ;
  struct w83977af_ir *self ;
  int err ;
  struct resource *tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  struct lock_class_key __key ;
  void *tmp___2 ;
  void *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  {
#line 6312
  printk((char const   *)"\017%s()\n", "w83977af_open");
#line 6313
  tmp = __request_region(& ioport_resource, (resource_size_t )iobase, 8ULL, (char const   *)driver_name,
                         0);
  }
#line 6316
  if ((unsigned long )tmp == (unsigned long )((struct resource *)0)) {
    {
#line 6318
    printk((char const   *)"\017%s(), can\'t get iobase of 0x%03x\n", "w83977af_open",
           iobase);
    }
#line 6320
    return (-19);
  }
  {
#line 6324
  tmp___0 = w83977af_probe((int )iobase, (int )irq___0, (int )dma___0);
  }
#line 6326
  if (tmp___0 == -1) {
    {
#line 6327
    err = -1;
    }
#line 6328
    goto err_out;
  }
  {
#line 6332
  dev = alloc_irdadev(488);
  }
#line 6334
  if ((unsigned long )dev == (unsigned long )((struct net_device *)0)) {
    {
#line 6336
    printk((char const   *)"\vIrDA: Can\'t allocate memory for IrDA control block!\n");
#line 6337
    err = -12;
    }
#line 6339
    goto err_out;
  }
  {
#line 6343
  tmp___1 = netdev_priv((struct net_device  const  *)dev);
#line 6344
  self = (struct w83977af_ir *)tmp___1;
#line 6345
  spinlock_check(& self->lock);
#line 6346
  __raw_spin_lock_init(& self->lock.__annonCompField19.rlock, (char const   *)"&(&self->lock)->rlock",
                       & __key);
#line 6348
  self->io.fir_base = (int )iobase;
#line 6349
  self->io.irq = (int )irq___0;
#line 6350
  self->io.fir_ext = 8;
#line 6351
  self->io.dma = (int )dma___0;
#line 6352
  self->io.fifo_size = 32;
#line 6353
  irda_init_max_qos_capabilies(& self->qos);
#line 6354
  self->qos.baud_rate.bits = (__u16 )510U;
#line 6355
  self->qos.min_turn_time.bits = (__u16 )qos_mtt_bits;
#line 6356
  irda_qos_bits_to_value(& self->qos);
#line 6357
  self->rx_buff.truesize = 14384;
#line 6358
  self->tx_buff.truesize = 4000;
#line 6359
  tmp___2 = dma_zalloc_coherent((struct device *)0, (size_t___0 )self->rx_buff.truesize,
                                & self->rx_buff_dma, 208U);
#line 6361
  self->rx_buff.head = (__u8 *)tmp___2;
  }
#line 6363
  if ((unsigned long )self->rx_buff.head == (unsigned long )((__u8 *)0U)) {
    {
#line 6364
    err = -12;
    }
#line 6365
    goto err_out1;
  }
  {
#line 6369
  tmp___3 = dma_zalloc_coherent((struct device *)0, (size_t___0 )self->tx_buff.truesize,
                                & self->tx_buff_dma, 208U);
#line 6371
  self->tx_buff.head = (__u8 *)tmp___3;
  }
#line 6373
  if ((unsigned long )self->tx_buff.head == (unsigned long )((__u8 *)0U)) {
    {
#line 6374
    err = -12;
    }
#line 6375
    goto err_out2;
  }
  {
#line 6379
  self->rx_buff.in_frame = 0;
#line 6380
  self->rx_buff.state = 0;
#line 6381
  self->tx_buff.data = self->tx_buff.head;
#line 6382
  self->rx_buff.data = self->rx_buff.head;
#line 6383
  self->netdev = dev;
#line 6384
  dev->netdev_ops = & w83977_netdev_ops;
#line 6385
  err = ldv_register_netdev_71(dev);
  }
#line 6387
  if (err != 0) {
    {
#line 6389
    tmp___4 = net_ratelimit();
    }
#line 6391
    if (tmp___4 != 0) {
      {
#line 6393
      printk((char const   *)"\v%s(), register_netdevice() failed!\n", "w83977af_open");
      }
    }
#line 6397
    goto err_out3;
  }
  {
#line 6401
  tmp___5 = net_ratelimit();
  }
#line 6403
  if (tmp___5 != 0) {
    {
#line 6405
    printk((char const   *)"\016IrDA: Registered device %s\n", (char *)(& dev->name));
    }
  }
  {
#line 6409
  dev_self[i] = self;
  }
#line 6410
  return (0);
  err_out3: 
  {
#line 6413
  dma_free_attrs((struct device *)0, (size_t___0 )self->tx_buff.truesize, (void *)self->tx_buff.head,
                 self->tx_buff_dma, (struct dma_attrs *)0);
  }
  err_out2: 
  {
#line 6418
  dma_free_attrs((struct device *)0, (size_t___0 )self->rx_buff.truesize, (void *)self->rx_buff.head,
                 self->rx_buff_dma, (struct dma_attrs *)0);
  }
  err_out1: 
  {
#line 6423
  ldv_free_netdev_72(dev);
  }
  err_out: 
  {
#line 6427
  __release_region(& ioport_resource, (resource_size_t )iobase, 8ULL);
  }
#line 6429
  return (err);
}
}
#line 6432 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int w83977af_close(struct w83977af_ir *self ) 
{ 
  int iobase ;

  {
  {
#line 6437
  printk((char const   *)"\017%s()\n", "w83977af_close");
#line 6438
  iobase = self->io.fir_base;
#line 6439
  w977_efm_enter(efio);
#line 6440
  w977_select_device((__u8 )6, efio);
#line 6441
  w977_write_reg((__u8 )48, (__u8 )0, efio);
#line 6442
  w977_efm_exit(efio);
#line 6443
  ldv_unregister_netdev_73(self->netdev);
#line 6444
  printk((char const   *)"\017%s(), Releasing Region %03x\n", "w83977af_close", self->io.fir_base);
#line 6445
  __release_region(& ioport_resource, (resource_size_t )self->io.fir_base, (resource_size_t )self->io.fir_ext);
  }
#line 6447
  if ((unsigned long )self->tx_buff.head != (unsigned long )((__u8 *)0U)) {
    {
#line 6449
    dma_free_attrs((struct device *)0, (size_t___0 )self->tx_buff.truesize, (void *)self->tx_buff.head,
                   self->tx_buff_dma, (struct dma_attrs *)0);
    }
  }
#line 6454
  if ((unsigned long )self->rx_buff.head != (unsigned long )((__u8 *)0U)) {
    {
#line 6456
    dma_free_attrs((struct device *)0, (size_t___0 )self->rx_buff.truesize, (void *)self->rx_buff.head,
                   self->rx_buff_dma, (struct dma_attrs *)0);
    }
  }
  {
#line 6462
  ldv_free_netdev_74(self->netdev);
  }
#line 6464
  return (0);
}
}
#line 6467 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int w83977af_probe(int iobase , int irq___0 , int dma___0 ) 
{ 
  int version ;
  int i ;
  unsigned char tmp ;
  unsigned char tmp___0 ;
  int tmp___1 ;

  {
  {
#line 6475
  i = 0;
  }
#line 6476
  goto ldv_44962;
  ldv_44961: 
  {
#line 6479
  printk((char const   *)"\017%s()\n", "w83977af_probe");
#line 6480
  w977_efm_enter(efbase[i]);
#line 6481
  w977_select_device((__u8 )6, efbase[i]);
#line 6482
  w977_write_reg((__u8 )96, (__u8 )((int )((__u8 )(iobase >> 8))), efbase[i]);
#line 6483
  w977_write_reg((__u8 )97, (__u8 )((int )((__u8 )iobase)), efbase[i]);
#line 6484
  w977_write_reg((__u8 )112, (__u8 )((int )((__u8 )irq___0)), efbase[i]);
#line 6485
  w977_write_reg((__u8 )116, (__u8 )((int )((__u8 )dma___0)), efbase[i]);
#line 6486
  w977_write_reg((__u8 )117, (__u8 )4, efbase[i]);
#line 6487
  w977_write_reg((__u8 )240, (__u8 )3, efbase[i]);
#line 6488
  w977_write_reg((__u8 )48, (__u8 )1, efbase[i]);
#line 6489
  w977_efm_exit(efbase[i]);
#line 6490
  switch_bank(iobase, 224);
#line 6491
  outb((unsigned char )((int )((unsigned int )((unsigned char )iobase) + 2U)), 0);
#line 6492
  switch_bank(iobase, 3);
#line 6493
  outb((unsigned char)8, iobase + 4);
#line 6494
  switch_bank(iobase, 224);
#line 6495
  tmp = inb(iobase + 2);
#line 6496
  outb((unsigned char )((int )((unsigned int )tmp | 1U)), iobase + 2);
#line 6497
  switch_bank(iobase, 3);
#line 6498
  outb((unsigned char)96, iobase + 4);
#line 6499
  switch_bank(iobase, 228);
#line 6500
  tmp___0 = inb(iobase);
#line 6501
  version = (int )tmp___0;
  }
#line 6503
  if ((version & 240) == 16) {
    {
#line 6505
    efio = efbase[i];
#line 6506
    switch_bank(iobase, 224);
#line 6507
    outb((unsigned char)5, iobase + 4);
#line 6508
    switch_bank(iobase, 3);
#line 6509
    outb((unsigned char)167, iobase + 2);
#line 6510
    switch_bank(iobase, 232);
#line 6511
    outb((unsigned char)0, iobase + 6);
#line 6512
    outb((unsigned char)8, iobase + 7);
#line 6513
    switch_bank(iobase, 244);
#line 6514
    outb((unsigned char)64, iobase + 7);
#line 6515
    tmp___1 = net_ratelimit();
    }
#line 6517
    if (tmp___1 != 0) {
      {
#line 6519
      printk((char const   *)"\016W83977AF (IR) driver loaded. Version: 0x%02x\n",
             version);
      }
    }
#line 6523
    return (0);
  } else {
    {
#line 6526
    printk((char const   *)"\017%s(), Wrong chip version", "w83977af_probe");
    }
  }
  {
#line 6529
  i ++;
  }
  ldv_44962: 
  {

  }
#line 6531
  if (i <= 1) {
#line 6532
    goto ldv_44961;
  }
#line 6535
  return (-1);
}
}
#line 6538 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static void w83977af_change_speed(struct w83977af_ir *self , __u32 speed ) 
{ 
  int ir_mode ;
  int iobase ;
  __u8 set ;

  {
  {
#line 6545
  ir_mode = 96;
#line 6546
  iobase = self->io.fir_base;
#line 6547
  self->io.speed = speed;
#line 6548
  set = inb(iobase + 3);
#line 6549
  switch_bank(iobase, 3);
#line 6550
  outb((unsigned char)0, iobase + 1);
#line 6551
  switch_bank(iobase, 224);
#line 6552
  outb((unsigned char)0, iobase + 1);
  }
#line 6555
  if (speed == 9600U) {
#line 6556
    goto case_9600;
  }
#line 6559
  if (speed == 19200U) {
#line 6560
    goto case_19200;
  }
#line 6563
  if (speed == 38400U) {
#line 6564
    goto case_38400;
  }
#line 6567
  if (speed == 57600U) {
#line 6568
    goto case_57600;
  }
#line 6571
  if (speed == 115200U) {
#line 6572
    goto case_115200;
  }
#line 6575
  if (speed == 576000U) {
#line 6576
    goto case_576000;
  }
#line 6579
  if (speed == 1152000U) {
#line 6580
    goto case_1152000;
  }
#line 6583
  if (speed == 4000000U) {
#line 6584
    goto case_4000000;
  }
#line 6587
  goto switch_default;
  case_9600: 
  {
#line 6590
  outb((unsigned char)12, iobase);
  }
#line 6592
  goto ldv_44972;
  case_19200: 
  {
#line 6595
  outb((unsigned char)6, iobase);
  }
#line 6597
  goto ldv_44972;
  case_38400: 
  {
#line 6600
  outb((unsigned char)3, iobase);
  }
#line 6602
  goto ldv_44972;
  case_57600: 
  {
#line 6605
  outb((unsigned char)2, iobase);
  }
#line 6607
  goto ldv_44972;
  case_115200: 
  {
#line 6610
  outb((unsigned char)1, iobase);
  }
#line 6612
  goto ldv_44972;
  case_576000: 
  {
#line 6615
  ir_mode = 32;
#line 6616
  printk((char const   *)"\017%s(), handling baud of 576000\n", "w83977af_change_speed");
  }
#line 6618
  goto ldv_44972;
  case_1152000: 
  {
#line 6621
  ir_mode = 128;
#line 6622
  printk((char const   *)"\017%s(), handling baud of 1152000\n", "w83977af_change_speed");
  }
#line 6624
  goto ldv_44972;
  case_4000000: 
  {
#line 6627
  ir_mode = 160;
#line 6628
  printk((char const   *)"\017%s(), handling baud of 4000000\n", "w83977af_change_speed");
  }
#line 6630
  goto ldv_44972;
  switch_default: 
  {
#line 6633
  ir_mode = 160;
#line 6634
  printk((char const   *)"\017%s(), unknown baud rate of %d\n", "w83977af_change_speed",
         speed);
  }
#line 6636
  goto ldv_44972;
  switch_break: 
  {

  }
  ldv_44972: 
  {
#line 6641
  switch_bank(iobase, 3);
#line 6642
  outb((unsigned char )((int )((unsigned char )ir_mode)), iobase + 4);
#line 6643
  switch_bank(iobase, 224);
#line 6644
  outb((unsigned char)5, iobase + 4);
#line 6645
  switch_bank(iobase, 3);
#line 6646
  outb((unsigned char)0, iobase + 2);
#line 6647
  outb((unsigned char)1, iobase + 2);
#line 6648
  outb((unsigned char)167, iobase + 2);
#line 6649
  netif_wake_queue(self->netdev);
#line 6650
  switch_bank(iobase, 3);
  }
#line 6652
  if (speed > 115200U) {
    {
#line 6654
    outb((unsigned char)64, iobase + 1);
#line 6655
    w83977af_dma_receive(self);
    }
  } else {
    {
#line 6659
    outb((unsigned char)1, iobase + 1);
    }
  }
  {
#line 6663
  outb((unsigned char )((int )set), iobase + 3);
  }
#line 6665
  return;
}
}
#line 6668 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static netdev_tx_t w83977af_hard_xmit(struct sk_buff *skb , struct net_device *dev ) 
{ 
  struct w83977af_ir *self ;
  __s32 speed ;
  int iobase ;
  __u8 set ;
  int mtt ;
  void *tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;

  {
  {
#line 6680
  tmp = netdev_priv((struct net_device  const  *)dev);
#line 6681
  self = (struct w83977af_ir *)tmp;
#line 6682
  iobase = self->io.fir_base;
  }
#line 6684
  if (irda_debug > 3U) {
    {
#line 6686
    printk((char const   *)"\017%s(%ld), skb->len=%d\n", "w83977af_hard_xmit", jiffies,
           (int )skb->len);
    }
  }
  {
#line 6691
  netif_stop_queue(dev);
#line 6692
  tmp___0 = irda_get_next_speed((struct sk_buff  const  *)skb);
#line 6693
  speed = (__s32 )tmp___0;
#line 6695
  io_speed = self->io.speed;
#line 6696
  ldv_assert(io_speed == self->io.speed);
  }
#line 6697
  if ((__u32 )speed != self->io.speed) {
#line 6697
    if (speed != -1) {
#line 6698
      if (skb->len == 0U) {
        {
#line 6700
        w83977af_change_speed(self, (__u32 )speed);
#line 6701
        consume_skb(skb);
        }
#line 6703
        return ((netdev_tx_t )0);
      } else {
        {
#line 6705
        self->new_speed = (__u32 )speed;
        }
      }
    }
  }
  {
#line 6710
  set = inb(iobase + 3);
  }
#line 6712
  if (self->io.speed > 115200U) {
    {
#line 6714
    self->tx_buff.data = self->tx_buff.head;
#line 6715
    skb_copy_from_linear_data((struct sk_buff  const  *)skb, (void *)self->tx_buff.data,
                              (unsigned int const   )skb->len);
#line 6717
    self->tx_buff.len = (int )skb->len;
#line 6718
    tmp___1 = irda_get_mtt((struct sk_buff  const  *)skb);
#line 6719
    mtt = (int )tmp___1;
    }
#line 6721
    if (irda_debug > 3U) {
      {
#line 6723
      printk((char const   *)"\017%s(%ld), mtt=%d\n", "w83977af_hard_xmit", jiffies,
             mtt);
      }
    }
#line 6727
    if (mtt != 0) {
      {
#line 6729
      __udelay((unsigned long )mtt);
      }
    }
    {
#line 6734
    switch_bank(iobase, 3);
#line 6735
    outb((unsigned char)16, iobase + 1);
#line 6736
    w83977af_dma_write(self, iobase);
    }
  } else {
    {
#line 6740
    self->tx_buff.data = self->tx_buff.head;
#line 6741
    self->tx_buff.len = async_wrap_skb(skb, self->tx_buff.data, self->tx_buff.truesize);
#line 6742
    switch_bank(iobase, 3);
#line 6743
    outb((unsigned char)32, iobase + 1);
    }
  }
  {
#line 6747
  consume_skb(skb);
#line 6748
  outb((unsigned char )((int )set), iobase + 3);
  }
#line 6750
  return ((netdev_tx_t )0);
}
}
#line 6753 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static void w83977af_dma_write(struct w83977af_ir *self , int iobase ) 
{ 
  __u8 set ;
  unsigned char tmp ;
  unsigned char tmp___0 ;

  {
#line 6759
  if (irda_debug > 3U) {
    {
#line 6761
    printk((char const   *)"\017%s(), len=%d\n", "w83977af_dma_write", self->tx_buff.len);
    }
  }
  {
#line 6766
  set = inb(iobase + 3);
#line 6767
  switch_bank(iobase, 3);
#line 6768
  tmp = inb(iobase + 4);
#line 6769
  outb((unsigned char )((int )tmp & 251), iobase + 4);
#line 6770
  switch_bank(iobase, 224);
#line 6771
  outb((unsigned char)9, iobase + 2);
#line 6772
  irda_setup_dma(self->io.dma, self->tx_buff_dma, self->tx_buff.len, 72);
#line 6773
  self->io.direction = 1;
#line 6774
  switch_bank(iobase, 3);
#line 6775
  tmp___0 = inb(iobase + 4);
#line 6776
  outb((unsigned char )((int )((unsigned int )tmp___0 | 12U)), iobase + 4);
#line 6777
  outb((unsigned char )((int )set), iobase + 3);
  }
#line 6779
  return;
}
}
#line 6782 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int w83977af_pio_write(int iobase , __u8 *buf , int len , int fifo_size ) 
{ 
  int actual ;
  __u8 set ;
  unsigned char tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 6790
  actual = 0;
  }
#line 6791
  if (irda_debug > 3U) {
    {
#line 6793
    printk((char const   *)"\017%s()\n", "w83977af_pio_write");
    }
  }
  {
#line 6798
  set = inb(iobase + 3);
#line 6799
  switch_bank(iobase, 3);
#line 6800
  tmp = inb_p(iobase + 5);
  }
#line 6802
  if (((int )tmp & 64) == 0) {
#line 6803
    if (irda_debug > 3U) {
      {
#line 6805
      printk((char const   *)"\017%s(), warning, FIFO not empty yet!\n", "w83977af_pio_write");
      }
    }
    {
#line 6809
    fifo_size += -17;
    }
#line 6810
    if (irda_debug > 3U) {
      {
#line 6812
      printk((char const   *)"\017%s(), %d bytes left in tx fifo\n", "w83977af_pio_write",
             fifo_size);
      }
    }
  }
#line 6818
  goto ldv_45008;
  ldv_45007: 
  {
#line 6821
  tmp___0 = actual;
#line 6822
  actual ++;
#line 6823
  outb((unsigned char )((int )*(buf + (unsigned long )tmp___0)), iobase);
  }
  ldv_45008: 
  {
#line 6826
  tmp___1 = fifo_size;
#line 6827
  fifo_size --;
  }
#line 6828
  if (tmp___1 > 0) {
#line 6828
    if (actual < len) {
#line 6829
      goto ldv_45007;
    }
  }
#line 6832
  if (irda_debug > 3U) {
    {
#line 6834
    printk((char const   *)"\017%s(), fifo_size %d ; %d sent of %d\n", "w83977af_pio_write",
           fifo_size, actual, len);
    }
  }
  {
#line 6840
  outb((unsigned char )((int )set), iobase + 3);
  }
#line 6842
  return (actual);
}
}
#line 6845 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static void w83977af_dma_xmit_complete(struct w83977af_ir *self ) 
{ 
  int iobase ;
  __u8 set ;
  unsigned char tmp ;
  unsigned char tmp___0 ;

  {
#line 6852
  if (irda_debug > 3U) {
    {
#line 6854
    printk((char const   *)"\017%s(%ld)\n", "w83977af_dma_xmit_complete", jiffies);
    }
  }
#line 6858
  if ((unsigned long )self == (unsigned long )((struct w83977af_ir *)0)) {
    {
#line 6860
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/w83977af_ir.c",
           "w83977af_dma_xmit_complete", 666, "self != NULL");
    }
#line 6863
    return;
  }
  {
#line 6867
  iobase = self->io.fir_base;
#line 6868
  set = inb(iobase + 3);
#line 6869
  switch_bank(iobase, 3);
#line 6870
  tmp = inb(iobase + 4);
#line 6871
  outb((unsigned char )((int )tmp & 251), iobase + 4);
#line 6872
  tmp___0 = inb(iobase + 7);
  }
#line 6874
  if (((int )tmp___0 & 64) != 0) {
    {
#line 6876
    printk((char const   *)"\017%s(), Transmit underrun!\n", "w83977af_dma_xmit_complete");
#line 6877
    ((self->netdev)->stats.tx_errors) ++;
#line 6878
    ((self->netdev)->stats.tx_fifo_errors) ++;
#line 6879
    outb((unsigned char)64, iobase + 7);
    }
  } else {
    {
#line 6882
    ((self->netdev)->stats.tx_packets) ++;
    }
  }
#line 6884
  if (self->new_speed != 0U) {
    {
#line 6886
    w83977af_change_speed(self, self->new_speed);
#line 6887
    self->new_speed = 0U;
    }
  }
  {
#line 6892
  netif_wake_queue(self->netdev);
#line 6893
  outb((unsigned char )((int )set), iobase + 3);
  }
#line 6895
  return;
}
}
#line 6898 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int w83977af_dma_receive(struct w83977af_ir *self ) 
{ 
  int iobase ;
  __u8 set ;
  unsigned char tmp ;
  unsigned char tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char tmp___3 ;

  {
#line 6908
  if ((unsigned long )self == (unsigned long )((struct w83977af_ir *)0)) {
    {
#line 6910
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/w83977af_ir.c",
           "w83977af_dma_receive", 718, "self != NULL");
    }
#line 6913
    return (-1);
  }
#line 6916
  if (irda_debug > 3U) {
    {
#line 6918
    printk((char const   *)"\017%s\n", "w83977af_dma_receive");
    }
  }
  {
#line 6923
  iobase = self->io.fir_base;
#line 6924
  set = inb(iobase + 3);
#line 6925
  switch_bank(iobase, 3);
#line 6926
  tmp = inb(iobase + 4);
#line 6927
  outb((unsigned char )((int )tmp & 251), iobase + 4);
#line 6928
  switch_bank(iobase, 224);
#line 6929
  tmp___0 = inb(iobase + 2);
#line 6930
  outb((unsigned char )((int )((unsigned char )(((int )((signed char )tmp___0) & -10) | 1))),
       iobase + 2);
#line 6931
  self->io.direction = 2;
#line 6932
  self->rx_buff.data = self->rx_buff.head;
#line 6933
  irda_setup_dma(self->io.dma, self->rx_buff_dma, self->rx_buff.truesize, 68);
#line 6934
  switch_bank(iobase, 3);
#line 6935
  outb((unsigned char)163, iobase + 2);
#line 6936
  tmp___2 = 0;
#line 6937
  self->st_fifo.head = tmp___2;
#line 6938
  tmp___1 = tmp___2;
#line 6939
  self->st_fifo.tail = tmp___1;
#line 6940
  self->st_fifo.len = tmp___1;
#line 6941
  switch_bank(iobase, 3);
#line 6942
  tmp___3 = inb(iobase + 4);
#line 6943
  outb((unsigned char )((int )((unsigned int )tmp___3 | 4U)), iobase + 4);
#line 6944
  outb((unsigned char )((int )set), iobase + 3);
  }
#line 6946
  return (0);
}
}
#line 6949 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int w83977af_dma_receive_complete(struct w83977af_ir *self ) 
{ 
  struct sk_buff *skb ;
  struct st_fifo *st_fifo ;
  int len ;
  int iobase ;
  __u8 set ;
  __u8 status ;
  unsigned char tmp ;
  unsigned char tmp___0 ;
  unsigned char tmp___1 ;

  {
#line 6961
  if (irda_debug > 3U) {
    {
#line 6963
    printk((char const   *)"\017%s\n", "w83977af_dma_receive_complete");
    }
  }
  {
#line 6968
  st_fifo = & self->st_fifo;
#line 6969
  iobase = self->io.fir_base;
#line 6970
  set = inb(iobase + 3);
#line 6971
  iobase = self->io.fir_base;
#line 6972
  switch_bank(iobase, 236);
  }
#line 6974
  goto ldv_45033;
  ldv_45032: 
  {
#line 6977
  st_fifo->entries[st_fifo->tail].status = (int )status;
#line 6978
  tmp = inb(iobase + 6);
#line 6979
  st_fifo->entries[st_fifo->tail].len = (int )tmp;
#line 6980
  tmp___0 = inb(iobase + 7);
#line 6981
  st_fifo->entries[st_fifo->tail].len |= (int )tmp___0 << 8;
#line 6982
  (st_fifo->tail) ++;
#line 6983
  (st_fifo->len) ++;
  }
  ldv_45033: 
  {
#line 6987
  status = inb(iobase + 5);
  }
#line 6989
  if ((int )((signed char )status) < 0) {
#line 6990
    goto ldv_45032;
  }
#line 6993
  goto ldv_45036;
  ldv_45035: 
  {
#line 6995
  status = (__u8 )st_fifo->entries[st_fifo->head].status;
#line 6996
  len = st_fifo->entries[st_fifo->head].len;
#line 6997
  (st_fifo->head) ++;
#line 6998
  (st_fifo->len) --;
  }
#line 6999
  if (((int )status & 95) != 0) {
#line 7000
    if (((int )status & 64) != 0) {
      {
#line 7001
      (self->netdev)->stats.rx_errors += (unsigned long )len;
      }
    } else {
      {
#line 7003
      ((self->netdev)->stats.rx_errors) ++;
#line 7004
      self->rx_buff.data += (unsigned long )len;
      }
#line 7005
      if (((int )status & 16) != 0) {
        {
#line 7006
        ((self->netdev)->stats.rx_length_errors) ++;
        }
      }
#line 7009
      if (((int )status & 8) != 0) {
        {
#line 7010
        ((self->netdev)->stats.rx_frame_errors) ++;
        }
      }
#line 7013
      if (((int )status & 4) != 0) {
        {
#line 7014
        ((self->netdev)->stats.rx_crc_errors) ++;
        }
      }
    }
#line 7018
    if (((int )status & 2) != 0) {
      {
#line 7019
      ((self->netdev)->stats.rx_fifo_errors) ++;
      }
    }
#line 7022
    if ((int )status & 1) {
      {
#line 7023
      ((self->netdev)->stats.rx_fifo_errors) ++;
      }
    }
  } else {
    {
#line 7028
    switch_bank(iobase, 3);
#line 7029
    tmp___1 = inb(iobase + 5);
    }
#line 7031
    if ((int )tmp___1 & 1) {
      {
#line 7033
      __const_udelay(343600UL);
      }
    }
    {
#line 7038
    skb = dev_alloc_skb((unsigned int )(len + 1));
    }
#line 7040
    if ((unsigned long )skb == (unsigned long )((struct sk_buff *)0)) {
      {
#line 7042
      printk((char const   *)"\016%s(), memory squeeze, dropping frame.\n", "w83977af_dma_receive_complete");
#line 7043
      outb((unsigned char )((int )set), iobase + 3);
      }
#line 7045
      return (0);
    }
    {
#line 7049
    skb_reserve(skb, 1);
    }
#line 7051
    if (self->io.speed <= 3999999U) {
      {
#line 7053
      skb_put(skb, (unsigned int )(len + -2));
#line 7054
      skb_copy_to_linear_data(skb, (void const   *)self->rx_buff.data, (unsigned int const   )(len + -2));
      }
    } else {
      {
#line 7058
      skb_put(skb, (unsigned int )(len + -4));
#line 7059
      skb_copy_to_linear_data(skb, (void const   *)self->rx_buff.data, (unsigned int const   )(len + -4));
      }
    }
    {
#line 7063
    self->rx_buff.data += (unsigned long )len;
#line 7064
    ((self->netdev)->stats.rx_packets) ++;
#line 7065
    skb->dev = self->netdev;
#line 7066
    skb_reset_mac_header(skb);
#line 7067
    skb->protocol = (__be16 )5888U;
#line 7068
    netif_rx(skb);
    }
  }
  ldv_45036: 
  {

  }
#line 7072
  if (st_fifo->len != 0) {
#line 7073
    goto ldv_45035;
  }
  {
#line 7077
  outb((unsigned char )((int )set), iobase + 3);
  }
#line 7079
  return (1);
}
}
#line 7082 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static void w83977af_pio_receive(struct w83977af_ir *self ) 
{ 
  __u8 byte ;
  int iobase ;
  unsigned char tmp ;

  {
  {
#line 7088
  byte = (__u8 )0U;
  }
#line 7089
  if (irda_debug > 3U) {
    {
#line 7091
    printk((char const   *)"\017%s()\n", "w83977af_pio_receive");
    }
  }
#line 7095
  if ((unsigned long )self == (unsigned long )((struct w83977af_ir *)0)) {
    {
#line 7097
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/w83977af_ir.c",
           "w83977af_pio_receive", 910, "self != NULL");
    }
#line 7100
    return;
  }
  {
#line 7103
  iobase = self->io.fir_base;
  }
  ldv_45044: 
  {
#line 7106
  byte = inb(iobase);
#line 7107
  async_unwrap_char(self->netdev, & (self->netdev)->stats, & self->rx_buff, (__u8 )((int )byte));
#line 7108
  tmp = inb(iobase + 5);
  }
#line 7110
  if ((int )tmp & 1) {
#line 7111
    goto ldv_45044;
  }
#line 7114
  return;
}
}
#line 7117 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static __u8 w83977af_sir_interrupt(struct w83977af_ir *self , int isr ) 
{ 
  int actual ;
  __u8 new_icr ;
  __u8 set ;
  int iobase ;

  {
  {
#line 7124
  new_icr = (__u8 )0U;
  }
#line 7125
  if (irda_debug > 3U) {
    {
#line 7127
    printk((char const   *)"\017%s(), isr=%#x\n", "w83977af_sir_interrupt", isr);
    }
  }
  {
#line 7131
  iobase = self->io.fir_base;
  }
#line 7132
  if ((isr & 32) != 0) {
    {
#line 7134
    actual = w83977af_pio_write(self->io.fir_base, self->tx_buff.data, self->tx_buff.len,
                                self->io.fifo_size);
#line 7136
    self->tx_buff.data += (unsigned long )actual;
#line 7137
    self->tx_buff.len -= actual;
#line 7138
    self->io.direction = 1;
    }
#line 7140
    if (self->tx_buff.len > 0) {
      {
#line 7141
      new_icr = (__u8 )((unsigned int )new_icr | 32U);
      }
    } else {
      {
#line 7144
      set = inb(iobase + 3);
#line 7145
      switch_bank(iobase, 3);
#line 7146
      outb((unsigned char)8, iobase + 7);
#line 7147
      outb((unsigned char )((int )set), iobase + 3);
#line 7148
      ((self->netdev)->stats.tx_packets) ++;
#line 7149
      netif_wake_queue(self->netdev);
#line 7150
      new_icr = (__u8 )((unsigned int )new_icr | 2U);
      }
    }
  }
#line 7155
  if ((isr & 2) != 0) {
#line 7156
    if (self->new_speed != 0U) {
#line 7157
      if (irda_debug > 1U) {
        {
#line 7159
        printk((char const   *)"\017%s(), Changing speed!\n", "w83977af_sir_interrupt");
        }
      }
      {
#line 7164
      w83977af_change_speed(self, self->new_speed);
#line 7165
      self->new_speed = 0U;
      }
    }
    {
#line 7169
    self->io.direction = 2;
#line 7170
    new_icr = (__u8 )((unsigned int )new_icr | 1U);
    }
  }
#line 7173
  if (isr & 1) {
    {
#line 7175
    w83977af_pio_receive(self);
#line 7176
    new_icr = (__u8 )((unsigned int )new_icr | 1U);
    }
  }
#line 7180
  return (new_icr);
}
}
#line 7183 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static __u8 w83977af_fir_interrupt(struct w83977af_ir *self , int isr ) 
{ 
  __u8 new_icr ;
  __u8 set ;
  int iobase ;
  int tmp ;

  {
  {
#line 7191
  new_icr = (__u8 )0U;
#line 7192
  iobase = self->io.fir_base;
#line 7193
  set = inb(iobase + 3);
  }
#line 7195
  if ((isr & 68) != 0) {
    {
#line 7197
    tmp = w83977af_dma_receive_complete(self);
    }
#line 7199
    if (tmp != 0) {
      {
#line 7200
      new_icr = (__u8 )((unsigned int )new_icr | 64U);
      }
    } else {
      {
#line 7203
      switch_bank(iobase, 232);
#line 7204
      outb((unsigned char)1, iobase);
#line 7205
      outb((unsigned char)0, iobase + 1);
#line 7206
      outb((unsigned char)1, iobase + 2);
#line 7207
      new_icr = (__u8 )((unsigned int )new_icr | 128U);
      }
    }
  }
#line 7212
  if ((isr & 128) != 0) {
    {
#line 7214
    switch_bank(iobase, 232);
#line 7215
    outb((unsigned char)0, iobase + 2);
    }
#line 7217
    if (self->io.direction == 1) {
      {
#line 7219
      w83977af_dma_write(self, iobase);
#line 7220
      new_icr = (__u8 )((unsigned int )new_icr | 16U);
      }
    } else {
      {
#line 7224
      w83977af_dma_receive_complete(self);
#line 7225
      new_icr = (__u8 )((unsigned int )new_icr | 64U);
      }
    }
  }
#line 7230
  if ((isr & 16) != 0) {
    {
#line 7232
    w83977af_dma_xmit_complete(self);
#line 7233
    w83977af_dma_receive(self);
#line 7234
    new_icr = (__u8 )64U;
    }
  }
  {
#line 7239
  outb((unsigned char )((int )set), iobase + 3);
  }
#line 7241
  return (new_icr);
}
}
#line 7244 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static irqreturn_t w83977af_interrupt(int irq___0 , void *dev_id ) 
{ 
  struct net_device *dev ;
  struct w83977af_ir *self ;
  __u8 set ;
  __u8 icr ;
  __u8 isr ;
  int iobase ;
  void *tmp ;
  unsigned char tmp___0 ;

  {
  {
#line 7256
  dev = (struct net_device *)dev_id;
#line 7257
  tmp = netdev_priv((struct net_device  const  *)dev);
#line 7258
  self = (struct w83977af_ir *)tmp;
#line 7259
  iobase = self->io.fir_base;
#line 7260
  set = inb(iobase + 3);
#line 7261
  switch_bank(iobase, 3);
#line 7262
  icr = inb(iobase + 1);
#line 7263
  tmp___0 = inb(iobase + 2);
#line 7264
  isr = (__u8 )((int )tmp___0 & (int )icr);
#line 7265
  outb((unsigned char)0, iobase + 1);
  }
#line 7267
  if ((unsigned int )isr != 0U) {
#line 7268
    if (self->io.speed > 115200U) {
      {
#line 7270
      icr = w83977af_fir_interrupt(self, (int )isr);
      }
    } else {
      {
#line 7274
      icr = w83977af_sir_interrupt(self, (int )isr);
      }
    }
  }
  {
#line 7280
  outb((unsigned char )((int )icr), iobase + 1);
#line 7281
  outb((unsigned char )((int )set), iobase + 3);
  }
#line 7283
  return ((irqreturn_t )((unsigned int )isr != 0U));
}
}
#line 7286 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int w83977af_is_receiving(struct w83977af_ir *self ) 
{ 
  int status ;
  int iobase ;
  __u8 set ;
  unsigned char tmp ;

  {
  {
#line 7293
  status = 0;
  }
#line 7294
  if ((unsigned long )self == (unsigned long )((struct w83977af_ir *)0)) {
    {
#line 7296
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/w83977af_ir.c",
           "w83977af_is_receiving", 1122, "self != NULL");
    }
#line 7299
    return (0);
  }
#line 7302
  if (self->io.speed > 115200U) {
    {
#line 7304
    iobase = self->io.fir_base;
#line 7305
    set = inb(iobase + 3);
#line 7306
    switch_bank(iobase, 224);
#line 7307
    tmp = inb(iobase + 7);
    }
#line 7309
    if (((int )tmp & 63) != 0) {
      {
#line 7310
      status = 1;
      }
    }
    {
#line 7314
    outb((unsigned char )((int )set), iobase + 3);
    }
  } else {
    {
#line 7317
    status = self->rx_buff.state != 0;
    }
  }
#line 7319
  return (status);
}
}
#line 7322 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int w83977af_net_open(struct net_device *dev ) 
{ 
  struct w83977af_ir *self ;
  int iobase ;
  char hwname[32U] ;
  __u8 set ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 7333
  printk((char const   *)"\017%s()\n", "w83977af_net_open");
  }
#line 7335
  if ((unsigned long )dev == (unsigned long )((struct net_device *)0)) {
    {
#line 7337
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/w83977af_ir.c",
           "w83977af_net_open", 1156, "dev != NULL");
    }
#line 7340
    return (-1);
  }
  {
#line 7344
  tmp = netdev_priv((struct net_device  const  *)dev);
#line 7345
  self = (struct w83977af_ir *)tmp;
  }
#line 7347
  if ((unsigned long )self == (unsigned long )((struct w83977af_ir *)0)) {
    {
#line 7349
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/w83977af_ir.c",
           "w83977af_net_open", 1159, "self != NULL");
    }
#line 7352
    return (0);
  }
  {
#line 7356
  iobase = self->io.fir_base;
#line 7357
  tmp___0 = ldv_request_irq_75((unsigned int )self->io.irq, & w83977af_interrupt,
                               0UL, (char const   *)(& dev->name), (void *)dev);
  }
#line 7360
  if (tmp___0 != 0) {
#line 7361
    return (-11);
  }
  {
#line 7365
  tmp___1 = request_dma((unsigned int )self->io.dma, (char const   *)(& dev->name));
  }
#line 7367
  if (tmp___1 != 0) {
    {
#line 7369
    ldv_free_irq_76((unsigned int )self->io.irq, (void *)dev);
    }
#line 7371
    return (-11);
  }
  {
#line 7375
  set = inb(iobase + 3);
#line 7376
  switch_bank(iobase, 3);
  }
#line 7378
  if (self->io.speed > 115200U) {
    {
#line 7380
    outb((unsigned char)64, iobase + 1);
#line 7381
    w83977af_dma_receive(self);
    }
  } else {
    {
#line 7385
    outb((unsigned char)1, iobase + 1);
    }
  }
  {
#line 7389
  outb((unsigned char )((int )set), iobase + 3);
#line 7390
  netif_start_queue(dev);
#line 7391
  sprintf((char *)(& hwname), (char const   *)"w83977af @ 0x%03x", self->io.fir_base);
#line 7392
  self->irlap = irlap_open(dev, & self->qos, (char const   *)(& hwname));
  }
#line 7394
  return (0);
}
}
#line 7397 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int w83977af_net_close(struct net_device *dev ) 
{ 
  struct w83977af_ir *self ;
  int iobase ;
  __u8 set ;
  void *tmp ;

  {
  {
#line 7405
  printk((char const   *)"\017%s()\n", "w83977af_net_close");
  }
#line 7407
  if ((unsigned long )dev == (unsigned long )((struct net_device *)0)) {
    {
#line 7409
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/w83977af_ir.c",
           "w83977af_net_close", 1219, "dev != NULL");
    }
#line 7412
    return (-1);
  }
  {
#line 7416
  tmp = netdev_priv((struct net_device  const  *)dev);
#line 7417
  self = (struct w83977af_ir *)tmp;
  }
#line 7419
  if ((unsigned long )self == (unsigned long )((struct w83977af_ir *)0)) {
    {
#line 7421
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/w83977af_ir.c",
           "w83977af_net_close", 1223, "self != NULL");
    }
#line 7424
    return (0);
  }
  {
#line 7428
  iobase = self->io.fir_base;
#line 7429
  netif_stop_queue(dev);
  }
#line 7431
  if ((unsigned long )self->irlap != (unsigned long )((struct irlap_cb *)0)) {
    {
#line 7433
    irlap_close(self->irlap);
    }
  }
  {
#line 7438
  self->irlap = (struct irlap_cb *)0;
#line 7439
  disable_dma((unsigned int )self->io.dma);
#line 7440
  set = inb(iobase + 3);
#line 7441
  switch_bank(iobase, 3);
#line 7442
  outb((unsigned char)0, iobase + 1);
#line 7443
  ldv_free_irq_77((unsigned int )self->io.irq, (void *)dev);
#line 7444
  free_dma((unsigned int )self->io.dma);
#line 7445
  outb((unsigned char )((int )set), iobase + 3);
  }
#line 7447
  return (0);
}
}
#line 7450 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int w83977af_net_ioctl(struct net_device *dev , struct ifreq *rq , int cmd ) 
{ 
  struct if_irda_req *irq___0 ;
  struct w83977af_ir *self ;
  unsigned long flags ;
  int ret ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 7454
  flags = 0UL;
#line 7463
  irq___0 = (struct if_irda_req *)rq;
#line 7464
  ret = 0;
  }
#line 7465
  if ((unsigned long )dev == (unsigned long )((struct net_device *)0)) {
    {
#line 7467
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/w83977af_ir.c",
           "w83977af_net_ioctl", 1266, "dev != NULL");
    }
#line 7470
    return (-1);
  }
  {
#line 7474
  tmp = netdev_priv((struct net_device  const  *)dev);
#line 7475
  self = (struct w83977af_ir *)tmp;
  }
#line 7477
  if ((unsigned long )self == (unsigned long )((struct w83977af_ir *)0)) {
    {
#line 7479
    printk((char const   *)"Assertion failed! %s:%s:%d %s\n", "drivers/net/irda/w83977af_ir.c",
           "w83977af_net_ioctl", 1270, "self != NULL");
    }
#line 7482
    return (-1);
  }
#line 7485
  if (irda_debug > 1U) {
    {
#line 7487
    printk((char const   *)"\017%s(), %s, (cmd=0x%X)\n", "w83977af_net_ioctl", (char *)(& dev->name),
           cmd);
    }
  }
  {
#line 7493
  ldv___ldv_spin_lock_78(& self->lock);
  }
#line 7496
  if (cmd == 35314) {
#line 7497
    goto case_35314;
  }
#line 7500
  if (cmd == 35315) {
#line 7501
    goto case_35315;
  }
#line 7504
  if (cmd == 35317) {
#line 7505
    goto case_35317;
  }
#line 7508
  goto switch_default;
  case_35314: 
  {
#line 7511
  tmp___0 = capable(12);
  }
#line 7513
  if (tmp___0) {
    {
#line 7514
    tmp___1 = 0;
    }
  } else {
    {
#line 7516
    tmp___1 = 1;
    }
  }
#line 7518
  if (tmp___1) {
    {
#line 7519
    ret = -1;
    }
#line 7520
    goto out;
  }
  {
#line 7524
  w83977af_change_speed(self, (__u32 )irq___0->ifr_ifru.ifru_qos.baudrate);
  }
#line 7526
  goto ldv_45106;
  case_35315: 
  {
#line 7529
  tmp___2 = capable(12);
  }
#line 7531
  if (tmp___2) {
    {
#line 7532
    tmp___3 = 0;
    }
  } else {
    {
#line 7534
    tmp___3 = 1;
    }
  }
#line 7536
  if (tmp___3) {
    {
#line 7537
    ret = -1;
    }
#line 7538
    goto out;
  }
  {
#line 7542
  irda_device_set_media_busy(self->netdev, 1);
  }
#line 7544
  goto ldv_45106;
  case_35317: 
  {
#line 7547
  tmp___4 = w83977af_is_receiving(self);
#line 7548
  irq___0->ifr_ifru.ifru_receiving = (unsigned int )tmp___4;
  }
#line 7550
  goto ldv_45106;
  switch_default: 
  {
#line 7552
  ret = -95;
  }
  switch_break: 
  {

  }
  ldv_45106: 
  {

  }
  out: 
  {
#line 7558
  ldv_spin_unlock_irqrestore_79(& self->lock, flags);
  }
#line 7560
  return (ret);
}
}
#line 7563
void ldv_dispatch_deregister_9_1(struct net_device *arg0 ) ;
#line 7564
void ldv_dispatch_insmod_deregister_10_2(void) ;
#line 7565
void ldv_dispatch_insmod_register_10_3(void) ;
#line 7566
void ldv_dispatch_irq_deregister_5_1(int arg0 ) ;
#line 7567
void ldv_dispatch_irq_register_8_3(int arg0 , irqreturn_t (*arg1)(int  , void * ) ,
                                   irqreturn_t (*arg2)(int  , void * ) , void *arg3 ) ;
#line 7569
void ldv_dispatch_register_7_4(struct net_device *arg0 ) ;
#line 7570
void ldv_emg_free_irq(int arg0 , void *arg1 ) ;
#line 7571
void ldv_emg_free_netdev(struct net_device *arg0 ) ;
#line 7572
int ldv_emg_register_netdev(struct net_device *arg0 ) ;
#line 7573
int ldv_emg_request_irq(unsigned int arg0 , irqreturn_t (*arg1)(int  , void * ) ,
                        unsigned long arg2 , char *arg3 , void *arg4 ) ;
#line 7575
void ldv_emg_unregister_netdev(struct net_device *arg0 ) ;
#line 7576
void *ldv_insmod_4(void *arg0 ) ;
#line 7577
void ldv_insmod_w83977af_cleanup_4_2(void (*arg0)(void) ) ;
#line 7578
int ldv_insmod_w83977af_init_4_6(int (*arg0)(void) ) ;
#line 7579
void *ldv_interrupt_scenario_2(void *arg0 ) ;
#line 7580
enum irqreturn ldv_interrupt_scenario_handler_2_5(irqreturn_t (*arg0)(int  , void * ) ,
                                                  int arg1 , void *arg2 ) ;
#line 7582
void *ldv_main_10(void *arg0 ) ;
#line 7583
void *ldv_random_allocationless_scenario_3(void *arg0 ) ;
#line 7584
void ldv_random_allocationless_scenario_callback_3_3(int (*arg0)(struct net_device * ,
                                                                 struct ifreq * ,
                                                                 int  ) , struct net_device *arg1 ,
                                                     struct ifreq *arg2 , int arg3 ) ;
#line 7588
void ldv_random_allocationless_scenario_callback_3_8(netdev_tx_t (*arg0)(struct sk_buff * ,
                                                                         struct net_device * ) ,
                                                     struct sk_buff *arg1 , struct net_device *arg2 ) ;
#line 7591
int ldv_register_netdev_open_7_6(int (*arg0)(struct net_device * ) , struct net_device *arg1 ) ;
#line 7592
void ldv_unregister_netdev_stop_9_2(int (*arg0)(struct net_device * ) , struct net_device *arg1 ) ;
#line 7593
int main(void) ;
#line 7594 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_t ldv_thread_2  ;
#line 7595 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_t ldv_thread_3  ;
#line 7596 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_t ldv_thread_4  ;
#line 7597 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_dispatch_deregister_9_1(struct net_device *arg0 ) 
{ 
  int ret ;

  {
  {
#line 7602
  ret = pthread_join(ldv_thread_3, (void **)0);
#line 7603
  assume_abort_if_not(ret == 0);
  }
#line 7605
  return;
}
}
#line 7608 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_dispatch_insmod_deregister_10_2(void) 
{ 
  int ret ;

  {
  {
#line 7613
  ret = pthread_join(ldv_thread_4, (void **)0);
#line 7614
  assume_abort_if_not(ret == 0);
  }
#line 7616
  return;
}
}
#line 7619 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_dispatch_insmod_register_10_3(void) 
{ 
  int ret ;
  struct ldv_struct_main_10 *cf_arg_4 ;
  void *tmp ;

  {
  {
#line 7626
  tmp = ldv_xmalloc((size_t___0 )4UL);
#line 7627
  cf_arg_4 = (struct ldv_struct_main_10 *)tmp;
#line 7628
  ret = pthread_create((pthread_t * __restrict  )(& ldv_thread_4), (pthread_attr_t const   * __restrict  )((pthread_attr_t const   *)0),
                       & ldv_insmod_4, (void * __restrict  )((void *)cf_arg_4));
#line 7630
  assume_abort_if_not(ret == 0);
  }
#line 7632
  return;
}
}
#line 7635 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_dispatch_irq_deregister_5_1(int arg0 ) 
{ 
  int ret ;

  {
  {
#line 7640
  ret = pthread_join(ldv_thread_2, (void **)0);
#line 7641
  assume_abort_if_not(ret == 0);
  }
#line 7643
  return;
}
}
#line 7646 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_dispatch_irq_register_8_3(int arg0 , irqreturn_t (*arg1)(int  , void * ) ,
                                   irqreturn_t (*arg2)(int  , void * ) , void *arg3 ) 
{ 
  int ret ;
  struct ldv_struct_interrupt_scenario_2 *cf_arg_2 ;
  void *tmp ;

  {
  {
#line 7654
  tmp = ldv_xmalloc((size_t___0 )40UL);
#line 7655
  cf_arg_2 = (struct ldv_struct_interrupt_scenario_2 *)tmp;
#line 7656
  cf_arg_2->arg0 = arg0;
#line 7657
  cf_arg_2->arg1 = arg1;
#line 7658
  cf_arg_2->arg2 = arg2;
#line 7659
  cf_arg_2->arg3 = arg3;
#line 7660
  ret = pthread_create((pthread_t * __restrict  )(& ldv_thread_2), (pthread_attr_t const   * __restrict  )((pthread_attr_t const   *)0),
                       & ldv_interrupt_scenario_2, (void * __restrict  )((void *)cf_arg_2));
#line 7662
  assume_abort_if_not(ret == 0);
  }
#line 7664
  return;
}
}
#line 7667 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_dispatch_register_7_4(struct net_device *arg0 ) 
{ 
  int ret ;
  struct ldv_struct_random_allocationless_scenario_3 *cf_arg_3 ;
  void *tmp ;

  {
  {
#line 7674
  tmp = ldv_xmalloc((size_t___0 )16UL);
#line 7675
  cf_arg_3 = (struct ldv_struct_random_allocationless_scenario_3 *)tmp;
#line 7676
  cf_arg_3->arg0 = arg0;
#line 7677
  ret = pthread_create((pthread_t * __restrict  )(& ldv_thread_3), (pthread_attr_t const   * __restrict  )((pthread_attr_t const   *)0),
                       & ldv_random_allocationless_scenario_3, (void * __restrict  )((void *)cf_arg_3));
#line 7679
  assume_abort_if_not(ret == 0);
  }
#line 7681
  return;
}
}
#line 7684 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_emg_free_irq(int arg0 , void *arg1 ) 
{ 
  int ldv_5_line_line ;

  {
  {
#line 7689
  ldv_5_line_line = arg0;
#line 7690
  ldv_dispatch_irq_deregister_5_1(ldv_5_line_line);
  }
#line 7692
  return;
#line 7693
  return;
}
}
#line 7696 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_emg_free_netdev(struct net_device *arg0 ) 
{ 
  struct net_device *ldv_6_netdev_net_device ;

  {
  {
#line 7701
  ldv_6_netdev_net_device = arg0;
#line 7702
  ldv_free((void *)ldv_6_netdev_net_device);
  }
#line 7704
  return;
#line 7705
  return;
}
}
#line 7708 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_emg_register_netdev(struct net_device *arg0 ) 
{ 
  struct net_device *ldv_7_netdev_net_device ;
  int ldv_7_ret_default ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  {
#line 7718
  ldv_7_ret_default = ldv_undef_int();
#line 7719
  tmp___3 = ldv_undef_int();
  }
#line 7721
  if (tmp___3 != 0) {
    {
#line 7723
    ldv_7_netdev_net_device = arg0;
#line 7724
    ldv_7_ret_default = ldv_register_netdev_open_7_6((int (*)(struct net_device * ))(ldv_7_netdev_net_device->netdev_ops)->ndo_open,
                                                     ldv_7_netdev_net_device);
#line 7726
    tmp___1 = ldv_undef_int();
    }
#line 7728
    if (tmp___1 != 0) {
      {
#line 7730
      assume_abort_if_not(ldv_7_ret_default == 0);
#line 7731
      ldv_dispatch_register_7_4(ldv_7_netdev_net_device);
      }
#line 7733
      return (0);
    } else {
      {
#line 7736
      assume_abort_if_not(ldv_7_ret_default == 0);
#line 7737
      ldv_failed_register_netdev();
#line 7738
      tmp___0 = ldv_undef_int_negative();
      }
#line 7740
      return (tmp___0);
    }
  } else {
    {
#line 7744
    ldv_failed_register_netdev();
#line 7745
    tmp___2 = ldv_undef_int_negative();
    }
#line 7747
    return (tmp___2);
  }
}
}
#line 7751 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_emg_request_irq(unsigned int arg0 , irqreturn_t (*arg1)(int  , void * ) ,
                        unsigned long arg2 , char *arg3 , void *arg4 ) 
{ 
  irqreturn_t (*ldv_8_callback_handler)(int  , void * ) ;
  void *ldv_8_data_data ;
  int ldv_8_line_line ;
  irqreturn_t (*ldv_8_thread_thread)(int  , void * ) ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 7762
  tmp___2 = ldv_undef_int();
  }
#line 7764
  if (tmp___2 != 0) {
    {
#line 7766
    ldv_8_line_line = (int )arg0;
#line 7767
    ldv_8_callback_handler = arg1;
#line 7768
    ldv_8_thread_thread = (irqreturn_t (*)(int  , void * ))0;
#line 7769
    ldv_8_data_data = arg4;
#line 7770
    ldv_dispatch_irq_register_8_3(ldv_8_line_line, ldv_8_callback_handler, ldv_8_thread_thread,
                                  ldv_8_data_data);
    }
#line 7773
    return (0);
  } else {
    {
#line 7776
    tmp___1 = ldv_undef_int_negative();
    }
#line 7778
    return (tmp___1);
  }
}
}
#line 7782 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_emg_unregister_netdev(struct net_device *arg0 ) 
{ 
  struct net_device *ldv_9_netdev_net_device ;

  {
  {
#line 7787
  ldv_9_netdev_net_device = arg0;
#line 7788
  ldv_unregister_netdev_stop_9_2((int (*)(struct net_device * ))(ldv_9_netdev_net_device->netdev_ops)->ndo_stop,
                                 ldv_9_netdev_net_device);
#line 7790
  ldv_dispatch_deregister_9_1(ldv_9_netdev_net_device);
  }
#line 7792
  return;
#line 7793
  return;
}
}
#line 7796 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *ldv_insmod_4(void *arg0 ) 
{ 
  int ldv_4_ret_default ;
  void (*ldv_4_w83977af_cleanup_default)(void) ;
  int (*ldv_4_w83977af_init_default)(void) ;
  int tmp___1 ;

  {
  {
#line 7804
  ldv_4_w83977af_cleanup_default = (void (*)(void))0;
#line 7805
  ldv_4_w83977af_init_default = (int (*)(void))0;
#line 7806
  ldv_free(arg0);
#line 7807
  ldv_4_ret_default = ldv_insmod_w83977af_init_4_6(ldv_4_w83977af_init_default);
#line 7808
  ldv_4_ret_default = ldv_post_init(ldv_4_ret_default);
#line 7809
  tmp___1 = ldv_undef_int();
  }
#line 7811
  if (tmp___1 != 0) {
    {
#line 7813
    assume_abort_if_not(ldv_4_ret_default != 0);
    }
#line 7815
    return ((void *)0);
  } else {
    {
#line 7818
    assume_abort_if_not(ldv_4_ret_default == 0);
#line 7819
    ldv_insmod_w83977af_cleanup_4_2(ldv_4_w83977af_cleanup_default);
    }
#line 7821
    return ((void *)0);
  }
#line 7823
  return ((void *)0);
}
}
#line 7826 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_insmod_w83977af_cleanup_4_2(void (*arg0)(void) ) 
{ 


  {
  {
#line 7830
  w83977af_cleanup();
  }
#line 7832
  return;
}
}
#line 7835 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_insmod_w83977af_init_4_6(int (*arg0)(void) ) 
{ 
  int tmp ;

  {
  {
#line 7840
  tmp = w83977af_init();
  }
#line 7842
  return (tmp);
}
}
#line 7845 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *ldv_interrupt_scenario_2(void *arg0 ) 
{ 
  irqreturn_t (*ldv_2_callback_handler)(int  , void * ) ;
  void *ldv_2_data_data ;
  int ldv_2_line_line ;
  int tmp ;
  enum irqreturn ldv_2_ret_val_default ;
  irqreturn_t (*ldv_2_thread_thread)(int  , void * ) ;
  struct ldv_struct_interrupt_scenario_2 *data ;
  int tmp___1 ;

  {
  {
#line 7849
  tmp = ldv_undef_int();
#line 7849
  ldv_2_line_line = tmp;
#line 7856
  data = (struct ldv_struct_interrupt_scenario_2 *)arg0;
#line 7857
  ldv_2_callback_handler = (irqreturn_t (*)(int  , void * ))0;
#line 7858
  ldv_2_data_data = (void *)0;
  }
#line 7860
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_interrupt_scenario_2 *)0)) {
    {
#line 7862
    ldv_2_line_line = data->arg0;
#line 7863
    ldv_2_callback_handler = data->arg1;
#line 7864
    ldv_2_thread_thread = data->arg2;
#line 7865
    ldv_2_data_data = data->arg3;
#line 7866
    ldv_free((void *)data);
    }
  }
  {
#line 7871
  ldv_switch_to_interrupt_context();
#line 7872
  ldv_2_ret_val_default = ldv_interrupt_scenario_handler_2_5(ldv_2_callback_handler,
                                                             ldv_2_line_line, ldv_2_data_data);
#line 7874
  ldv_switch_to_process_context();
#line 7875
  tmp___1 = ldv_undef_int();
  }
#line 7877
  if (tmp___1 != 0) {
    {
#line 7879
    assume_abort_if_not((unsigned int )ldv_2_ret_val_default == 2U);
    }
  } else {
    {
#line 7883
    assume_abort_if_not((unsigned int )ldv_2_ret_val_default != 2U);
    }
  }
#line 7886
  return ((void *)0);
#line 7887
  return ((void *)0);
}
}
#line 7890 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
enum irqreturn ldv_interrupt_scenario_handler_2_5(irqreturn_t (*arg0)(int  , void * ) ,
                                                  int arg1 , void *arg2 ) 
{ 
  irqreturn_t tmp ;

  {
  {
#line 7896
  tmp = w83977af_interrupt(arg1, arg2);
  }
#line 7898
  return (tmp);
}
}
#line 7901 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *ldv_main_10(void *arg0 ) 
{ 


  {
  {
#line 7905
  ldv_initialize();
#line 7906
  ldv_dispatch_insmod_register_10_3();
#line 7907
  ldv_dispatch_insmod_deregister_10_2();
#line 7908
  ldv_check_final_state();
#line 7909
  assume_abort_if_not(0);
  }
#line 7911
  return ((void *)0);
#line 7912
  return ((void *)0);
}
}
#line 7915 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *ldv_random_allocationless_scenario_3(void *arg0 ) 
{ 
  int (*ldv_3_callback_ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
  netdev_tx_t (*ldv_3_callback_ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
  struct net_device *ldv_3_container_net_device ;
  struct ifreq *ldv_3_ldv_param_3_1_default ;
  int ldv_3_ldv_param_3_2_default ;
  int tmp ;
  struct sk_buff *ldv_3_ldv_param_8_0_default ;
  struct ldv_struct_random_allocationless_scenario_3 *data ;
  void *tmp___4 ;
  void *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
  {
#line 7921
  tmp = ldv_undef_int();
#line 7921
  ldv_3_ldv_param_3_2_default = tmp;
#line 7930
  data = (struct ldv_struct_random_allocationless_scenario_3 *)arg0;
#line 7931
  ldv_3_callback_ndo_do_ioctl = (int (*)(struct net_device * , struct ifreq * , int  ))0;
#line 7932
  ldv_3_callback_ndo_start_xmit = (netdev_tx_t (*)(struct sk_buff * , struct net_device * ))0;
#line 7933
  ldv_3_container_net_device = (struct net_device *)0;
  }
#line 7935
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_random_allocationless_scenario_3 *)0)) {
    {
#line 7937
    ldv_3_container_net_device = data->arg0;
#line 7938
    ldv_free((void *)data);
    }
  }
#line 7942
  goto ldv_call_3;
#line 7943
  return ((void *)0);
  ldv_call_3: 
  {
#line 7946
  tmp___7 = ldv_undef_int();
  }
#line 7948
  if (tmp___7 != 0) {
    {
#line 7950
    tmp___4 = ldv_xmalloc((size_t___0 )0UL);
#line 7951
    ldv_3_ldv_param_3_1_default = (struct ifreq *)tmp___4;
#line 7952
    tmp___6 = ldv_undef_int();
    }
#line 7954
    if (tmp___6 != 0) {
      {
#line 7956
      tmp___5 = ldv_xmalloc((size_t___0 )0UL);
#line 7957
      ldv_3_ldv_param_8_0_default = (struct sk_buff *)tmp___5;
#line 7958
      ldv_random_allocationless_scenario_callback_3_8(ldv_3_callback_ndo_start_xmit,
                                                      ldv_3_ldv_param_8_0_default,
                                                      ldv_3_container_net_device);
#line 7961
      ldv_free((void *)ldv_3_ldv_param_8_0_default);
      }
    } else {
      {
#line 7965
      ldv_random_allocationless_scenario_callback_3_3(ldv_3_callback_ndo_do_ioctl,
                                                      ldv_3_container_net_device,
                                                      ldv_3_ldv_param_3_1_default,
                                                      ldv_3_ldv_param_3_2_default);
      }
    }
    {
#line 7972
    ldv_free((void *)ldv_3_ldv_param_3_1_default);
    }
#line 7974
    goto ldv_call_3;
  } else {
#line 7976
    return ((void *)0);
  }
#line 7978
  return ((void *)0);
}
}
#line 7981 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_random_allocationless_scenario_callback_3_3(int (*arg0)(struct net_device * ,
                                                                 struct ifreq * ,
                                                                 int  ) , struct net_device *arg1 ,
                                                     struct ifreq *arg2 , int arg3 ) 
{ 


  {
  {
#line 7988
  w83977af_net_ioctl(arg1, arg2, arg3);
  }
#line 7990
  return;
}
}
#line 7993 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_random_allocationless_scenario_callback_3_8(netdev_tx_t (*arg0)(struct sk_buff * ,
                                                                         struct net_device * ) ,
                                                     struct sk_buff *arg1 , struct net_device *arg2 ) 
{ 


  {
  {
#line 7999
  w83977af_hard_xmit(arg1, arg2);
  }
#line 8001
  return;
}
}
#line 8004 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_register_netdev_open_7_6(int (*arg0)(struct net_device * ) , struct net_device *arg1 ) 
{ 
  int tmp ;

  {
  {
#line 8009
  tmp = w83977af_net_open(arg1);
  }
#line 8011
  return (tmp);
}
}
#line 8014 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_unregister_netdev_stop_9_2(int (*arg0)(struct net_device * ) , struct net_device *arg1 ) 
{ 


  {
  {
#line 8018
  w83977af_net_close(arg1);
  }
#line 8020
  return;
}
}
#line 8023 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int main(void) 
{ 


  {
  {
#line 8027
  ldv_main_10((void *)0);
  }
#line 8029
  return (0);
}
}
#line 8032 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int ldv_register_netdev_71(struct net_device *ldv_func_arg1 ) 
{ 
  int tmp ;

  {
  {
#line 8037
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  }
#line 8039
  return (tmp);
}
}
#line 8042 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static void ldv_free_netdev_72(struct net_device *ldv_func_arg1 ) 
{ 


  {
  {
#line 8046
  ldv_emg_free_netdev(ldv_func_arg1);
  }
#line 8048
  return;
}
}
#line 8051 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static void ldv_unregister_netdev_73(struct net_device *ldv_func_arg1 ) 
{ 


  {
  {
#line 8055
  ldv_emg_unregister_netdev(ldv_func_arg1);
  }
#line 8057
  return;
}
}
#line 8060 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static void ldv_free_netdev_74(struct net_device *ldv_func_arg1 ) 
{ 


  {
  {
#line 8064
  ldv_emg_free_netdev(ldv_func_arg1);
  }
#line 8066
  return;
}
}
#line 8069 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static int ldv_request_irq_75(unsigned int irq___0 , irqreturn_t (*handler)(int  ,
                                                                                     void * ) ,
                                       unsigned long flags , char const   *name ,
                                       void *dev ) 
{ 
  int tmp ;

  {
  {
#line 8077
  tmp = ldv_emg_request_irq(irq___0, handler, flags, (char *)name, dev);
  }
#line 8079
  return (tmp);
}
}
#line 8082 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static void ldv_free_irq_76(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) 
{ 


  {
  {
#line 8086
  ldv_emg_free_irq((int )ldv_func_arg1, ldv_func_arg2);
  }
#line 8088
  return;
}
}
#line 8091 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static void ldv_free_irq_77(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) 
{ 


  {
  {
#line 8095
  ldv_emg_free_irq((int )ldv_func_arg1, ldv_func_arg2);
  }
#line 8097
  return;
}
}
#line 8100 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static void ldv___ldv_spin_lock_78(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  {
#line 8104
  ldv_spin_lock_lock_of_w83977af_ir();
#line 8105
  __ldv_spin_lock(ldv_func_arg1);
  }
#line 8107
  return;
}
}
#line 8110 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
__inline static void ldv_spin_unlock_irqrestore_79(spinlock_t *lock , unsigned long flags ) 
{ 


  {
  {
#line 8114
  ldv_spin_unlock_lock_of_w83977af_ir();
#line 8115
  spin_unlock_irqrestore(lock, flags);
  }
#line 8117
  return;
}
}
#line 8120
void *ldv_xzalloc(size_t___0 size ) ;
#line 8121 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *ldv_dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 8124
  if ((unsigned long )dev != (unsigned long )((struct device  const  *)0)) {
#line 8124
    if ((unsigned long )dev->p != (unsigned long )((struct device_private *)0)) {
#line 8125
      return ((dev->p)->driver_data);
    }
  }
#line 8128
  return ((void *)0);
}
}
#line 8131 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_dev_set_drvdata(struct device *dev , void *data ) 
{ 
  void *tmp ;

  {
  {
#line 8136
  tmp = ldv_xzalloc((size_t___0 )8UL);
#line 8137
  dev->p = (struct device_private *)tmp;
#line 8138
  (dev->p)->driver_data = data;
  }
#line 8140
  return (0);
}
}
#line 8143 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct spi_master *ldv_spi_alloc_master(struct device *host , unsigned int size ) 
{ 
  struct spi_master *master ;
  void *tmp ;

  {
  {
#line 8149
  tmp = ldv_zalloc((size_t___0 )((unsigned long )size + 2200UL));
#line 8150
  master = (struct spi_master *)tmp;
  }
#line 8152
  if ((unsigned long )master == (unsigned long )((struct spi_master *)0)) {
#line 8153
    return ((struct spi_master *)0);
  }
  {
#line 8157
  ldv_dev_set_drvdata(& master->dev, (void *)(master + 1U));
  }
#line 8159
  return (master);
}
}
#line 8162 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
long ldv_is_err(void const   *ptr ) 
{ 


  {
#line 8165
  return ((long )((unsigned long )ptr > 4294967295UL));
}
}
#line 8168 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *ldv_err_ptr(long error ) 
{ 


  {
#line 8171
  return ((void *)(4294967295L - error));
}
}
#line 8174 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
long ldv_ptr_err(void const   *ptr ) 
{ 


  {
#line 8177
  return ((long )(4294967295UL - (unsigned long )ptr));
}
}
#line 8180 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
long ldv_is_err_or_null(void const   *ptr ) 
{ 
  long tmp ;
  int tmp___0 ;

  {
#line 8185
  if ((unsigned long )ptr == (unsigned long )((void const   *)0)) {
    {
#line 8186
    tmp___0 = 1;
    }
  } else {
    {
#line 8189
    tmp = ldv_is_err(ptr);
    }
#line 8191
    if (tmp != 0L) {
      {
#line 8192
      tmp___0 = 1;
      }
    } else {
      {
#line 8194
      tmp___0 = 0;
      }
    }
  }
#line 8197
  return ((long )tmp___0);
}
}
#line 8200
int ldv_post_probe(int probe_ret_val ) ;
#line 8201
int ldv_filter_err_code(int ret_val ) ;
#line 8202 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
static int ldv_filter_positive_int(int val ) 
{ 


  {
  {
#line 8206
  assume_abort_if_not(val <= 0);
  }
#line 8208
  return (val);
}
}
#line 8211 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_post_init(int init_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 8216
  tmp = ldv_filter_positive_int(init_ret_val);
  }
#line 8218
  return (tmp);
}
}
#line 8221 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_post_probe(int probe_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 8226
  tmp = ldv_filter_positive_int(probe_ret_val);
  }
#line 8228
  return (tmp);
}
}
#line 8231 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_filter_err_code(int ret_val ) 
{ 
  int tmp ;

  {
  {
#line 8236
  tmp = ldv_filter_positive_int(ret_val);
  }
#line 8238
  return (tmp);
}
}
#line 8241
void ldv_check_alloc_flags(gfp_t arg0 ) ;
#line 8242
void ldv_after_alloc(void *arg0 ) ;
#line 8243 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *ldv_kzalloc(size_t___0 size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 8248
  ldv_check_alloc_flags(flags);
#line 8249
  res = ldv_zalloc(size);
#line 8250
  ldv_after_alloc(res);
  }
#line 8252
  return (res);
}
}
#line 8255 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
long ldv__builtin_expect(long exp , long c ) 
{ 


  {
#line 8258
  return (exp);
}
}
#line 8261 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv__builtin_trap(void) 
{ 


  {
  {
#line 8265
  ldv_assert(0);
  }
#line 8267
  return;
}
}
#line 8270
void *ldv_malloc(size_t___0 size ) ;
#line 8271
void *ldv_calloc(size_t___0 nmemb , size_t___0 size ) ;
#line 8272
extern void *malloc(size_t___0  ) ;
#line 8273
extern void *calloc(size_t___0  , size_t___0  ) ;
#line 8274
extern void free(void * ) ;
#line 8275
extern void *memset(void * , int  , size_t___0  ) ;
#line 8276 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *ldv_malloc(size_t___0 size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 8284
  tmp___1 = ldv_undef_int();
  }
#line 8286
  if (tmp___1 != 0) {
    {
#line 8288
    tmp = malloc(size);
#line 8289
    res = tmp;
#line 8290
    assume_abort_if_not((unsigned long )res != (unsigned long )((void *)0));
#line 8291
    tmp___0 = ldv_is_err((void const   *)res);
#line 8292
    assume_abort_if_not(tmp___0 == 0L);
    }
#line 8294
    return (res);
  } else {
#line 8296
    return ((void *)0);
  }
}
}
#line 8300 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *ldv_calloc(size_t___0 nmemb , size_t___0 size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 8308
  tmp___1 = ldv_undef_int();
  }
#line 8310
  if (tmp___1 != 0) {
    {
#line 8312
    tmp = calloc(nmemb, size);
#line 8313
    res = tmp;
#line 8314
    assume_abort_if_not((unsigned long )res != (unsigned long )((void *)0));
#line 8315
    tmp___0 = ldv_is_err((void const   *)res);
#line 8316
    assume_abort_if_not(tmp___0 == 0L);
    }
#line 8318
    return (res);
  } else {
#line 8320
    return ((void *)0);
  }
}
}
#line 8324 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *ldv_zalloc(size_t___0 size ) 
{ 
  void *tmp ;

  {
  {
#line 8329
  tmp = ldv_calloc((size_t___0 )1UL, size);
  }
#line 8331
  return (tmp);
}
}
#line 8334 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_free(void *s ) 
{ 


  {
  {
#line 8338
  free(s);
  }
#line 8340
  return;
}
}
#line 8343 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *ldv_xmalloc(size_t___0 size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 8350
  tmp = malloc(size);
#line 8351
  res = tmp;
#line 8352
  assume_abort_if_not((unsigned long )res != (unsigned long )((void *)0));
#line 8353
  tmp___0 = ldv_is_err((void const   *)res);
#line 8354
  assume_abort_if_not(tmp___0 == 0L);
  }
#line 8356
  return (res);
}
}
#line 8359 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *ldv_xzalloc(size_t___0 size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 8366
  tmp = calloc((size_t___0 )1UL, size);
#line 8367
  res = tmp;
#line 8368
  assume_abort_if_not((unsigned long )res != (unsigned long )((void *)0));
#line 8369
  tmp___0 = ldv_is_err((void const   *)res);
#line 8370
  assume_abort_if_not(tmp___0 == 0L);
  }
#line 8372
  return (res);
}
}
#line 8375
unsigned long ldv_undef_ulong(void) ;
#line 8376
int ldv_undef_int_nonpositive(void) ;
#line 8379 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_undef_int(void) 
{ 
  int tmp ;

  {
  {
#line 8384
  tmp = __VERIFIER_nondet_int();
  }
#line 8386
  return (tmp);
}
}
#line 8389 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
unsigned long ldv_undef_ulong(void) 
{ 
  unsigned long tmp ;

  {
  {
#line 8394
  tmp = __VERIFIER_nondet_ulong();
  }
#line 8396
  return (tmp);
}
}
#line 8399 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_undef_int_negative(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 8405
  tmp = ldv_undef_int();
#line 8406
  ret = tmp;
#line 8407
  assume_abort_if_not(ret < 0);
  }
#line 8409
  return (ret);
}
}
#line 8412 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_undef_int_nonpositive(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 8418
  tmp = ldv_undef_int();
#line 8419
  ret = tmp;
#line 8420
  assume_abort_if_not(ret <= 0);
  }
#line 8422
  return (ret);
}
}
#line 8427
extern void ( __attribute__((__leaf__)) __assert_fail)(char const   *__assertion ,
                                                       char const   *__file , unsigned int __line ,
                                                       char const   *__function )  __attribute__((__nothrow__,
__noreturn__)) ;
#line 8430
extern void ( __attribute__((__leaf__)) __assert_perror_fail)(int __errnum , char const   *__file ,
                                                              unsigned int __line ,
                                                              char const   *__function )  __attribute__((__nothrow__,
__noreturn__)) ;
#line 8433
extern void ( __attribute__((__leaf__)) __assert)(char const   *__assertion , char const   *__file ,
                                                  int __line )  __attribute__((__nothrow__,
__noreturn__)) ;
#line 8436 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void reach_error(void) 
{ 


  {
  {
#line 8436
  __assert_fail((char const   *)"0", (char const   *)"linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.c",
                8648U, (char const   *)"reach_error");
  }
}
}
#line 8439 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 pmutex_i_mutex_of_inode  ;
#line 8440 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_mutex_lock_i_mutex_of_inode(struct mutex *lock ) 
{ 


  {
  {
#line 8444
  pthread_mutex_lock(& pmutex_i_mutex_of_inode);
  }
#line 8446
  return;
}
}
#line 8449 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_mutex_lock_interruptible_or_killable_i_mutex_of_inode(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 8454
  tmp = ldv_undef_int();
  }
#line 8456
  if (tmp != 0) {
    {
#line 8458
    pthread_mutex_lock(& pmutex_i_mutex_of_inode);
    }
#line 8460
    return (0);
  } else {
#line 8462
    return (-4);
  }
}
}
#line 8466 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_mutex_is_locked_i_mutex_of_inode(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 8471
  tmp = ldv_undef_int();
  }
#line 8473
  if (tmp != 0) {
#line 8474
    return (1);
  } else {
#line 8476
    return (0);
  }
}
}
#line 8480 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_mutex_trylock_i_mutex_of_inode(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 8485
  tmp = pthread_mutex_trylock(& pmutex_i_mutex_of_inode);
  }
#line 8487
  return (tmp);
}
}
#line 8490 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_mutex_lock_i_mutex_of_inode(atomic_t *cnt , struct mutex *lock ) 
{ 


  {
  {
#line 8493
  (cnt->counter) --;
  }
#line 8494
  if (cnt->counter != 0) {
#line 8495
    return (0);
  } else {
    {
#line 8498
    pthread_mutex_lock(& pmutex_i_mutex_of_inode);
    }
#line 8500
    return (1);
  }
}
}
#line 8504 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_mutex_unlock_i_mutex_of_inode(struct mutex *lock ) 
{ 


  {
  {
#line 8508
  pthread_mutex_lock(& pmutex_i_mutex_of_inode);
  }
#line 8510
  return;
}
}
#line 8513 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 pmutex_lock  ;
#line 8514 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_mutex_lock_lock(struct mutex *lock ) 
{ 


  {
  {
#line 8518
  pthread_mutex_lock(& pmutex_lock);
  }
#line 8520
  return;
}
}
#line 8523 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_mutex_lock_interruptible_or_killable_lock(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 8528
  tmp = ldv_undef_int();
  }
#line 8530
  if (tmp != 0) {
    {
#line 8532
    pthread_mutex_lock(& pmutex_lock);
    }
#line 8534
    return (0);
  } else {
#line 8536
    return (-4);
  }
}
}
#line 8540 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_mutex_is_locked_lock(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 8545
  tmp = ldv_undef_int();
  }
#line 8547
  if (tmp != 0) {
#line 8548
    return (1);
  } else {
#line 8550
    return (0);
  }
}
}
#line 8554 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_mutex_trylock_lock(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 8559
  tmp = pthread_mutex_trylock(& pmutex_lock);
  }
#line 8561
  return (tmp);
}
}
#line 8564 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_mutex_lock_lock(atomic_t *cnt , struct mutex *lock ) 
{ 


  {
  {
#line 8567
  (cnt->counter) --;
  }
#line 8568
  if (cnt->counter != 0) {
#line 8569
    return (0);
  } else {
    {
#line 8572
    pthread_mutex_lock(& pmutex_lock);
    }
#line 8574
    return (1);
  }
}
}
#line 8578 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_mutex_unlock_lock(struct mutex *lock ) 
{ 


  {
  {
#line 8582
  pthread_mutex_lock(& pmutex_lock);
  }
#line 8584
  return;
}
}
#line 8587 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 pmutex_mutex_of_device  ;
#line 8588 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
  {
#line 8592
  pthread_mutex_lock(& pmutex_mutex_of_device);
  }
#line 8594
  return;
}
}
#line 8597 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_mutex_lock_interruptible_or_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 8602
  tmp = ldv_undef_int();
  }
#line 8604
  if (tmp != 0) {
    {
#line 8606
    pthread_mutex_lock(& pmutex_mutex_of_device);
    }
#line 8608
    return (0);
  } else {
#line 8610
    return (-4);
  }
}
}
#line 8614 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 8619
  tmp = ldv_undef_int();
  }
#line 8621
  if (tmp != 0) {
#line 8622
    return (1);
  } else {
#line 8624
    return (0);
  }
}
}
#line 8628 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 8633
  tmp = pthread_mutex_trylock(& pmutex_mutex_of_device);
  }
#line 8635
  return (tmp);
}
}
#line 8638 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 


  {
  {
#line 8641
  (cnt->counter) --;
  }
#line 8642
  if (cnt->counter != 0) {
#line 8643
    return (0);
  } else {
    {
#line 8646
    pthread_mutex_lock(& pmutex_mutex_of_device);
    }
#line 8648
    return (1);
  }
}
}
#line 8652 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
  {
#line 8656
  pthread_mutex_lock(& pmutex_mutex_of_device);
  }
#line 8658
  return;
}
}
#line 8661 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_initialize(void) 
{ 


  {
#line 8664
  return;
}
}
#line 8667 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_check_final_state(void) 
{ 


  {
#line 8670
  return;
}
}
#line 8673 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_assert(int expr ) 
{ 


  {
#line 8676
  if (expr == 0) {
    {
#line 8678
    reach_error();
    }
  }
#line 8682
  return;
}
}
#line 8686 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_NOT_ARG_SIGN  ;
#line 8687 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 8691
  pthread_mutex_lock(& smutex_NOT_ARG_SIGN);
  }
#line 8693
  return;
}
}
#line 8696 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 8700
  pthread_mutex_unlock(& smutex_NOT_ARG_SIGN);
  }
#line 8702
  return;
}
}
#line 8705 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 8710
  tmp = pthread_mutex_trylock(& smutex_NOT_ARG_SIGN);
  }
#line 8712
  return (tmp);
}
}
#line 8715 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_NOT_ARG_SIGN(void) 
{ 


  {
#line 8718
  return;
}
}
#line 8721 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 8726
  tmp = ldv_undef_int();
  }
#line 8728
  if (tmp != 0) {
#line 8729
    return (1);
  } else {
#line 8731
    return (0);
  }
}
}
#line 8735 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 8740
  tmp = ldv_spin_is_locked_NOT_ARG_SIGN();
  }
#line 8742
  return (tmp == 0);
}
}
#line 8745 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 8750
  is_spin_contended = ldv_undef_int();
  }
#line 8752
  if (is_spin_contended != 0) {
#line 8753
    return (0);
  } else {
#line 8755
    return (1);
  }
}
}
#line 8759 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 8764
  atomic_value_after_dec = ldv_undef_int();
  }
#line 8766
  if (atomic_value_after_dec == 0) {
    {
#line 8768
    ldv_spin_lock_NOT_ARG_SIGN();
    }
#line 8770
    return (1);
  }
#line 8773
  return (0);
}
}
#line 8776 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex__xmit_lock_of_netdev_queue  ;
#line 8777 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock__xmit_lock_of_netdev_queue(void) 
{ 


  {
  {
#line 8781
  pthread_mutex_lock(& smutex__xmit_lock_of_netdev_queue);
  }
#line 8783
  return;
}
}
#line 8786 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock__xmit_lock_of_netdev_queue(void) 
{ 


  {
  {
#line 8790
  pthread_mutex_unlock(& smutex__xmit_lock_of_netdev_queue);
  }
#line 8792
  return;
}
}
#line 8795 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock__xmit_lock_of_netdev_queue(void) 
{ 
  int tmp ;

  {
  {
#line 8800
  tmp = pthread_mutex_trylock(& smutex__xmit_lock_of_netdev_queue);
  }
#line 8802
  return (tmp);
}
}
#line 8805 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait__xmit_lock_of_netdev_queue(void) 
{ 


  {
#line 8808
  return;
}
}
#line 8811 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked__xmit_lock_of_netdev_queue(void) 
{ 
  int tmp ;

  {
  {
#line 8816
  tmp = ldv_undef_int();
  }
#line 8818
  if (tmp != 0) {
#line 8819
    return (1);
  } else {
#line 8821
    return (0);
  }
}
}
#line 8825 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock__xmit_lock_of_netdev_queue(void) 
{ 
  int tmp ;

  {
  {
#line 8830
  tmp = ldv_spin_is_locked__xmit_lock_of_netdev_queue();
  }
#line 8832
  return (tmp == 0);
}
}
#line 8835 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended__xmit_lock_of_netdev_queue(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 8840
  is_spin_contended = ldv_undef_int();
  }
#line 8842
  if (is_spin_contended != 0) {
#line 8843
    return (0);
  } else {
#line 8845
    return (1);
  }
}
}
#line 8849 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock__xmit_lock_of_netdev_queue(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 8854
  atomic_value_after_dec = ldv_undef_int();
  }
#line 8856
  if (atomic_value_after_dec == 0) {
    {
#line 8858
    ldv_spin_lock__xmit_lock_of_netdev_queue();
    }
#line 8860
    return (1);
  }
#line 8863
  return (0);
}
}
#line 8866 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_addr_list_lock_of_net_device  ;
#line 8867 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_addr_list_lock_of_net_device(void) 
{ 


  {
  {
#line 8871
  pthread_mutex_lock(& smutex_addr_list_lock_of_net_device);
  }
#line 8873
  return;
}
}
#line 8876 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_addr_list_lock_of_net_device(void) 
{ 


  {
  {
#line 8880
  pthread_mutex_unlock(& smutex_addr_list_lock_of_net_device);
  }
#line 8882
  return;
}
}
#line 8885 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_addr_list_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 8890
  tmp = pthread_mutex_trylock(& smutex_addr_list_lock_of_net_device);
  }
#line 8892
  return (tmp);
}
}
#line 8895 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_addr_list_lock_of_net_device(void) 
{ 


  {
#line 8898
  return;
}
}
#line 8901 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_addr_list_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 8906
  tmp = ldv_undef_int();
  }
#line 8908
  if (tmp != 0) {
#line 8909
    return (1);
  } else {
#line 8911
    return (0);
  }
}
}
#line 8915 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_addr_list_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 8920
  tmp = ldv_spin_is_locked_addr_list_lock_of_net_device();
  }
#line 8922
  return (tmp == 0);
}
}
#line 8925 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_addr_list_lock_of_net_device(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 8930
  is_spin_contended = ldv_undef_int();
  }
#line 8932
  if (is_spin_contended != 0) {
#line 8933
    return (0);
  } else {
#line 8935
    return (1);
  }
}
}
#line 8939 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_addr_list_lock_of_net_device(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 8944
  atomic_value_after_dec = ldv_undef_int();
  }
#line 8946
  if (atomic_value_after_dec == 0) {
    {
#line 8948
    ldv_spin_lock_addr_list_lock_of_net_device();
    }
#line 8950
    return (1);
  }
#line 8953
  return (0);
}
}
#line 8956 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_alloc_lock_of_task_struct  ;
#line 8957 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
  {
#line 8961
  pthread_mutex_lock(& smutex_alloc_lock_of_task_struct);
  }
#line 8963
  return;
}
}
#line 8966 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
  {
#line 8970
  pthread_mutex_unlock(& smutex_alloc_lock_of_task_struct);
  }
#line 8972
  return;
}
}
#line 8975 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;

  {
  {
#line 8980
  tmp = pthread_mutex_trylock(& smutex_alloc_lock_of_task_struct);
  }
#line 8982
  return (tmp);
}
}
#line 8985 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
#line 8988
  return;
}
}
#line 8991 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;

  {
  {
#line 8996
  tmp = ldv_undef_int();
  }
#line 8998
  if (tmp != 0) {
#line 8999
    return (1);
  } else {
#line 9001
    return (0);
  }
}
}
#line 9005 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;

  {
  {
#line 9010
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
  }
#line 9012
  return (tmp == 0);
}
}
#line 9015 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 9020
  is_spin_contended = ldv_undef_int();
  }
#line 9022
  if (is_spin_contended != 0) {
#line 9023
    return (0);
  } else {
#line 9025
    return (1);
  }
}
}
#line 9029 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 9034
  atomic_value_after_dec = ldv_undef_int();
  }
#line 9036
  if (atomic_value_after_dec == 0) {
    {
#line 9038
    ldv_spin_lock_alloc_lock_of_task_struct();
    }
#line 9040
    return (1);
  }
#line 9043
  return (0);
}
}
#line 9046 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_dma_spin_lock  ;
#line 9047 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_dma_spin_lock(void) 
{ 


  {
  {
#line 9051
  pthread_mutex_lock(& smutex_dma_spin_lock);
  }
#line 9053
  return;
}
}
#line 9056 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_dma_spin_lock(void) 
{ 


  {
  {
#line 9060
  pthread_mutex_unlock(& smutex_dma_spin_lock);
  }
#line 9062
  return;
}
}
#line 9065 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_dma_spin_lock(void) 
{ 
  int tmp ;

  {
  {
#line 9070
  tmp = pthread_mutex_trylock(& smutex_dma_spin_lock);
  }
#line 9072
  return (tmp);
}
}
#line 9075 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_dma_spin_lock(void) 
{ 


  {
#line 9078
  return;
}
}
#line 9081 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_dma_spin_lock(void) 
{ 
  int tmp ;

  {
  {
#line 9086
  tmp = ldv_undef_int();
  }
#line 9088
  if (tmp != 0) {
#line 9089
    return (1);
  } else {
#line 9091
    return (0);
  }
}
}
#line 9095 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_dma_spin_lock(void) 
{ 
  int tmp ;

  {
  {
#line 9100
  tmp = ldv_spin_is_locked_dma_spin_lock();
  }
#line 9102
  return (tmp == 0);
}
}
#line 9105 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_dma_spin_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 9110
  is_spin_contended = ldv_undef_int();
  }
#line 9112
  if (is_spin_contended != 0) {
#line 9113
    return (0);
  } else {
#line 9115
    return (1);
  }
}
}
#line 9119 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_dma_spin_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 9124
  atomic_value_after_dec = ldv_undef_int();
  }
#line 9126
  if (atomic_value_after_dec == 0) {
    {
#line 9128
    ldv_spin_lock_dma_spin_lock();
    }
#line 9130
    return (1);
  }
#line 9133
  return (0);
}
}
#line 9136 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_i_lock_of_inode  ;
#line 9137 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_i_lock_of_inode(void) 
{ 


  {
  {
#line 9141
  pthread_mutex_lock(& smutex_i_lock_of_inode);
  }
#line 9143
  return;
}
}
#line 9146 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_i_lock_of_inode(void) 
{ 


  {
  {
#line 9150
  pthread_mutex_unlock(& smutex_i_lock_of_inode);
  }
#line 9152
  return;
}
}
#line 9155 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_i_lock_of_inode(void) 
{ 
  int tmp ;

  {
  {
#line 9160
  tmp = pthread_mutex_trylock(& smutex_i_lock_of_inode);
  }
#line 9162
  return (tmp);
}
}
#line 9165 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_i_lock_of_inode(void) 
{ 


  {
#line 9168
  return;
}
}
#line 9171 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_i_lock_of_inode(void) 
{ 
  int tmp ;

  {
  {
#line 9176
  tmp = ldv_undef_int();
  }
#line 9178
  if (tmp != 0) {
#line 9179
    return (1);
  } else {
#line 9181
    return (0);
  }
}
}
#line 9185 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_i_lock_of_inode(void) 
{ 
  int tmp ;

  {
  {
#line 9190
  tmp = ldv_spin_is_locked_i_lock_of_inode();
  }
#line 9192
  return (tmp == 0);
}
}
#line 9195 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_i_lock_of_inode(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 9200
  is_spin_contended = ldv_undef_int();
  }
#line 9202
  if (is_spin_contended != 0) {
#line 9203
    return (0);
  } else {
#line 9205
    return (1);
  }
}
}
#line 9209 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_i_lock_of_inode(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 9214
  atomic_value_after_dec = ldv_undef_int();
  }
#line 9216
  if (atomic_value_after_dec == 0) {
    {
#line 9218
    ldv_spin_lock_i_lock_of_inode();
    }
#line 9220
    return (1);
  }
#line 9223
  return (0);
}
}
#line 9226 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_lock  ;
#line 9227 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_lock(void) 
{ 


  {
  {
#line 9231
  pthread_mutex_lock(& smutex_lock);
  }
#line 9233
  return;
}
}
#line 9236 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_lock(void) 
{ 


  {
  {
#line 9240
  pthread_mutex_unlock(& smutex_lock);
  }
#line 9242
  return;
}
}
#line 9245 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_lock(void) 
{ 
  int tmp ;

  {
  {
#line 9250
  tmp = pthread_mutex_trylock(& smutex_lock);
  }
#line 9252
  return (tmp);
}
}
#line 9255 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_lock(void) 
{ 


  {
#line 9258
  return;
}
}
#line 9261 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_lock(void) 
{ 
  int tmp ;

  {
  {
#line 9266
  tmp = ldv_undef_int();
  }
#line 9268
  if (tmp != 0) {
#line 9269
    return (1);
  } else {
#line 9271
    return (0);
  }
}
}
#line 9275 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_lock(void) 
{ 
  int tmp ;

  {
  {
#line 9280
  tmp = ldv_spin_is_locked_lock();
  }
#line 9282
  return (tmp == 0);
}
}
#line 9285 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 9290
  is_spin_contended = ldv_undef_int();
  }
#line 9292
  if (is_spin_contended != 0) {
#line 9293
    return (0);
  } else {
#line 9295
    return (1);
  }
}
}
#line 9299 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 9304
  atomic_value_after_dec = ldv_undef_int();
  }
#line 9306
  if (atomic_value_after_dec == 0) {
    {
#line 9308
    ldv_spin_lock_lock();
    }
#line 9310
    return (1);
  }
#line 9313
  return (0);
}
}
#line 9316 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_lock_of_NOT_ARG_SIGN  ;
#line 9317 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 9321
  pthread_mutex_lock(& smutex_lock_of_NOT_ARG_SIGN);
  }
#line 9323
  return;
}
}
#line 9326 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 9330
  pthread_mutex_unlock(& smutex_lock_of_NOT_ARG_SIGN);
  }
#line 9332
  return;
}
}
#line 9335 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 9340
  tmp = pthread_mutex_trylock(& smutex_lock_of_NOT_ARG_SIGN);
  }
#line 9342
  return (tmp);
}
}
#line 9345 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 9348
  return;
}
}
#line 9351 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 9356
  tmp = ldv_undef_int();
  }
#line 9358
  if (tmp != 0) {
#line 9359
    return (1);
  } else {
#line 9361
    return (0);
  }
}
}
#line 9365 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 9370
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
  }
#line 9372
  return (tmp == 0);
}
}
#line 9375 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 9380
  is_spin_contended = ldv_undef_int();
  }
#line 9382
  if (is_spin_contended != 0) {
#line 9383
    return (0);
  } else {
#line 9385
    return (1);
  }
}
}
#line 9389 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 9394
  atomic_value_after_dec = ldv_undef_int();
  }
#line 9396
  if (atomic_value_after_dec == 0) {
    {
#line 9398
    ldv_spin_lock_lock_of_NOT_ARG_SIGN();
    }
#line 9400
    return (1);
  }
#line 9403
  return (0);
}
}
#line 9406 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_lock_of_w83977af_ir  ;
#line 9407 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_lock_of_w83977af_ir(void) 
{ 


  {
  {
#line 9411
  pthread_mutex_lock(& smutex_lock_of_w83977af_ir);
#line 9413
  __VERIFIER_atomic_begin();
#line 9413
  assert(-7LL + (long long )qos_mtt_bits >= 0LL);
#line 9413
  assert(7LL - (long long )qos_mtt_bits >= 0LL);
#line 9413
  __VERIFIER_atomic_end();
  }
#line 9413
  return;
}
}
#line 9416 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_lock_of_w83977af_ir(void) 
{ 


  {
  {
#line 9420
  pthread_mutex_unlock(& smutex_lock_of_w83977af_ir);
  }
#line 9422
  return;
}
}
#line 9425 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_lock_of_w83977af_ir(void) 
{ 
  int tmp ;

  {
  {
#line 9430
  tmp = pthread_mutex_trylock(& smutex_lock_of_w83977af_ir);
  }
#line 9432
  return (tmp);
}
}
#line 9435 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_lock_of_w83977af_ir(void) 
{ 


  {
#line 9438
  return;
}
}
#line 9441 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_lock_of_w83977af_ir(void) 
{ 
  int tmp ;

  {
  {
#line 9446
  tmp = ldv_undef_int();
  }
#line 9448
  if (tmp != 0) {
#line 9449
    return (1);
  } else {
#line 9451
    return (0);
  }
}
}
#line 9455 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_lock_of_w83977af_ir(void) 
{ 
  int tmp ;

  {
  {
#line 9460
  tmp = ldv_spin_is_locked_lock_of_w83977af_ir();
  }
#line 9462
  return (tmp == 0);
}
}
#line 9465 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_lock_of_w83977af_ir(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 9470
  is_spin_contended = ldv_undef_int();
  }
#line 9472
  if (is_spin_contended != 0) {
#line 9473
    return (0);
  } else {
#line 9475
    return (1);
  }
}
}
#line 9479 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_lock_of_w83977af_ir(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 9484
  atomic_value_after_dec = ldv_undef_int();
  }
#line 9486
  if (atomic_value_after_dec == 0) {
    {
#line 9488
    ldv_spin_lock_lock_of_w83977af_ir();
    }
#line 9490
    return (1);
  }
#line 9493
  return (0);
}
}
#line 9496 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_lru_lock_of_netns_frags  ;
#line 9497 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_lru_lock_of_netns_frags(void) 
{ 


  {
  {
#line 9501
  pthread_mutex_lock(& smutex_lru_lock_of_netns_frags);
  }
#line 9503
  return;
}
}
#line 9506 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_lru_lock_of_netns_frags(void) 
{ 


  {
  {
#line 9510
  pthread_mutex_unlock(& smutex_lru_lock_of_netns_frags);
  }
#line 9512
  return;
}
}
#line 9515 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_lru_lock_of_netns_frags(void) 
{ 
  int tmp ;

  {
  {
#line 9520
  tmp = pthread_mutex_trylock(& smutex_lru_lock_of_netns_frags);
  }
#line 9522
  return (tmp);
}
}
#line 9525 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_lru_lock_of_netns_frags(void) 
{ 


  {
#line 9528
  return;
}
}
#line 9531 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_lru_lock_of_netns_frags(void) 
{ 
  int tmp ;

  {
  {
#line 9536
  tmp = ldv_undef_int();
  }
#line 9538
  if (tmp != 0) {
#line 9539
    return (1);
  } else {
#line 9541
    return (0);
  }
}
}
#line 9545 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_lru_lock_of_netns_frags(void) 
{ 
  int tmp ;

  {
  {
#line 9550
  tmp = ldv_spin_is_locked_lru_lock_of_netns_frags();
  }
#line 9552
  return (tmp == 0);
}
}
#line 9555 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_lru_lock_of_netns_frags(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 9560
  is_spin_contended = ldv_undef_int();
  }
#line 9562
  if (is_spin_contended != 0) {
#line 9563
    return (0);
  } else {
#line 9565
    return (1);
  }
}
}
#line 9569 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_lru_lock_of_netns_frags(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 9574
  atomic_value_after_dec = ldv_undef_int();
  }
#line 9576
  if (atomic_value_after_dec == 0) {
    {
#line 9578
    ldv_spin_lock_lru_lock_of_netns_frags();
    }
#line 9580
    return (1);
  }
#line 9583
  return (0);
}
}
#line 9586 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_node_size_lock_of_pglist_data  ;
#line 9587 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_node_size_lock_of_pglist_data(void) 
{ 


  {
  {
#line 9591
  pthread_mutex_lock(& smutex_node_size_lock_of_pglist_data);
  }
#line 9593
  return;
}
}
#line 9596 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_node_size_lock_of_pglist_data(void) 
{ 


  {
  {
#line 9600
  pthread_mutex_unlock(& smutex_node_size_lock_of_pglist_data);
  }
#line 9602
  return;
}
}
#line 9605 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;

  {
  {
#line 9610
  tmp = pthread_mutex_trylock(& smutex_node_size_lock_of_pglist_data);
  }
#line 9612
  return (tmp);
}
}
#line 9615 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 9618
  return;
}
}
#line 9621 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;

  {
  {
#line 9626
  tmp = ldv_undef_int();
  }
#line 9628
  if (tmp != 0) {
#line 9629
    return (1);
  } else {
#line 9631
    return (0);
  }
}
}
#line 9635 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;

  {
  {
#line 9640
  tmp = ldv_spin_is_locked_node_size_lock_of_pglist_data();
  }
#line 9642
  return (tmp == 0);
}
}
#line 9645 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 9650
  is_spin_contended = ldv_undef_int();
  }
#line 9652
  if (is_spin_contended != 0) {
#line 9653
    return (0);
  } else {
#line 9655
    return (1);
  }
}
}
#line 9659 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_node_size_lock_of_pglist_data(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 9664
  atomic_value_after_dec = ldv_undef_int();
  }
#line 9666
  if (atomic_value_after_dec == 0) {
    {
#line 9668
    ldv_spin_lock_node_size_lock_of_pglist_data();
    }
#line 9670
    return (1);
  }
#line 9673
  return (0);
}
}
#line 9676 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_ptl  ;
#line 9677 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_ptl(void) 
{ 


  {
  {
#line 9681
  pthread_mutex_lock(& smutex_ptl);
  }
#line 9683
  return;
}
}
#line 9686 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_ptl(void) 
{ 


  {
  {
#line 9690
  pthread_mutex_unlock(& smutex_ptl);
  }
#line 9692
  return;
}
}
#line 9695 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_ptl(void) 
{ 
  int tmp ;

  {
  {
#line 9700
  tmp = pthread_mutex_trylock(& smutex_ptl);
  }
#line 9702
  return (tmp);
}
}
#line 9705 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_ptl(void) 
{ 


  {
#line 9708
  return;
}
}
#line 9711 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_ptl(void) 
{ 
  int tmp ;

  {
  {
#line 9716
  tmp = ldv_undef_int();
  }
#line 9718
  if (tmp != 0) {
#line 9719
    return (1);
  } else {
#line 9721
    return (0);
  }
}
}
#line 9725 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_ptl(void) 
{ 
  int tmp ;

  {
  {
#line 9730
  tmp = ldv_spin_is_locked_ptl();
  }
#line 9732
  return (tmp == 0);
}
}
#line 9735 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_ptl(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 9740
  is_spin_contended = ldv_undef_int();
  }
#line 9742
  if (is_spin_contended != 0) {
#line 9743
    return (0);
  } else {
#line 9745
    return (1);
  }
}
}
#line 9749 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_ptl(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 9754
  atomic_value_after_dec = ldv_undef_int();
  }
#line 9756
  if (atomic_value_after_dec == 0) {
    {
#line 9758
    ldv_spin_lock_ptl();
    }
#line 9760
    return (1);
  }
#line 9763
  return (0);
}
}
#line 9766 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_siglock_of_sighand_struct  ;
#line 9767 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
  {
#line 9771
  pthread_mutex_lock(& smutex_siglock_of_sighand_struct);
  }
#line 9773
  return;
}
}
#line 9776 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
  {
#line 9780
  pthread_mutex_unlock(& smutex_siglock_of_sighand_struct);
  }
#line 9782
  return;
}
}
#line 9785 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;

  {
  {
#line 9790
  tmp = pthread_mutex_trylock(& smutex_siglock_of_sighand_struct);
  }
#line 9792
  return (tmp);
}
}
#line 9795 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
#line 9798
  return;
}
}
#line 9801 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int tmp ;

  {
  {
#line 9806
  tmp = ldv_undef_int();
  }
#line 9808
  if (tmp != 0) {
#line 9809
    return (1);
  } else {
#line 9811
    return (0);
  }
}
}
#line 9815 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;

  {
  {
#line 9820
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
  }
#line 9822
  return (tmp == 0);
}
}
#line 9825 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 9830
  is_spin_contended = ldv_undef_int();
  }
#line 9832
  if (is_spin_contended != 0) {
#line 9833
    return (0);
  } else {
#line 9835
    return (1);
  }
}
}
#line 9839 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 9844
  atomic_value_after_dec = ldv_undef_int();
  }
#line 9846
  if (atomic_value_after_dec == 0) {
    {
#line 9848
    ldv_spin_lock_siglock_of_sighand_struct();
    }
#line 9850
    return (1);
  }
#line 9853
  return (0);
}
}
#line 9856 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
pthread_mutex_t___0 smutex_tx_global_lock_of_net_device  ;
#line 9857 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_lock_tx_global_lock_of_net_device(void) 
{ 


  {
  {
#line 9861
  pthread_mutex_lock(& smutex_tx_global_lock_of_net_device);
  }
#line 9863
  return;
}
}
#line 9866 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_tx_global_lock_of_net_device(void) 
{ 


  {
  {
#line 9870
  pthread_mutex_unlock(& smutex_tx_global_lock_of_net_device);
  }
#line 9872
  return;
}
}
#line 9875 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_trylock_tx_global_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 9880
  tmp = pthread_mutex_trylock(& smutex_tx_global_lock_of_net_device);
  }
#line 9882
  return (tmp);
}
}
#line 9885 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_spin_unlock_wait_tx_global_lock_of_net_device(void) 
{ 


  {
#line 9888
  return;
}
}
#line 9891 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_locked_tx_global_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 9896
  tmp = ldv_undef_int();
  }
#line 9898
  if (tmp != 0) {
#line 9899
    return (1);
  } else {
#line 9901
    return (0);
  }
}
}
#line 9905 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_can_lock_tx_global_lock_of_net_device(void) 
{ 
  int tmp ;

  {
  {
#line 9910
  tmp = ldv_spin_is_locked_tx_global_lock_of_net_device();
  }
#line 9912
  return (tmp == 0);
}
}
#line 9915 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_spin_is_contended_tx_global_lock_of_net_device(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 9920
  is_spin_contended = ldv_undef_int();
  }
#line 9922
  if (is_spin_contended != 0) {
#line 9923
    return (0);
  } else {
#line 9925
    return (1);
  }
}
}
#line 9929 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_atomic_dec_and_lock_tx_global_lock_of_net_device(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 9934
  atomic_value_after_dec = ldv_undef_int();
  }
#line 9936
  if (atomic_value_after_dec == 0) {
    {
#line 9938
    ldv_spin_lock_tx_global_lock_of_net_device();
    }
#line 9940
    return (1);
  }
#line 9943
  return (0);
}
}
#line 9947 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void kfree(void const   *p ) 
{ 


  {
  {
#line 9948
  free((void *)p);
  }
#line 9949
  return;
}
}
#line 9950 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void debug_dma_alloc_coherent(struct device *arg0 , size_t___0 arg1 , dma_addr_t arg2 ,
                              void *arg3 ) 
{ 


  {
#line 9951
  return;
}
}
#line 9954 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int async_wrap_skb(struct sk_buff *arg0 , __u8 *arg1 , int arg2 ) 
{ 
  int tmp ;

  {
  {
#line 9955
  tmp = __VERIFIER_nondet_int();
  }
#line 9955
  return (tmp);
}
}
#line 9957 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void async_unwrap_char(struct net_device *arg0 , struct net_device_stats *arg1 , iobuff_t *arg2 ,
                       __u8 arg3 ) 
{ 


  {
#line 9958
  return;
}
}
#line 9960 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void __raw_spin_lock_init(raw_spinlock_t *arg0 , char const   *arg1 , struct lock_class_key *arg2 ) 
{ 


  {
#line 9961
  return;
}
}
#line 9963 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void consume_skb(struct sk_buff *arg0 ) 
{ 


  {
#line 9964
  return;
}
}
#line 9966 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void __const_udelay(unsigned long arg0 ) 
{ 


  {
#line 9967
  return;
}
}
#line 9970 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int sprintf(char *arg0 , char const   *arg1  , ...) 
{ 
  int tmp ;

  {
  {
#line 9971
  tmp = __VERIFIER_nondet_int();
  }
#line 9971
  return (tmp);
}
}
#line 9973 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void _raw_spin_unlock_irqrestore(raw_spinlock_t *arg0 , unsigned long arg1 ) 
{ 


  {
#line 9974
  return;
}
}
#line 9976 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void irda_setup_dma(int arg0 , dma_addr_t arg1 , int arg2 , int arg3 ) 
{ 


  {
#line 9977
  return;
}
}
#line 9979 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_after_alloc(void *arg0 ) 
{ 


  {
#line 9980
  return;
}
}
#line 9982 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void irda_qos_bits_to_value(struct qos_info *arg0 ) 
{ 


  {
#line 9983
  return;
}
}
#line 9986 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int netif_rx(struct sk_buff *arg0 ) 
{ 
  int tmp ;

  {
  {
#line 9987
  tmp = __VERIFIER_nondet_int();
  }
#line 9987
  return (tmp);
}
}
#line 9989 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_switch_to_interrupt_context(void) 
{ 


  {
#line 9990
  return;
}
}
#line 9992 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_check_alloc_flags(gfp_t arg0 ) 
{ 


  {
#line 9993
  return;
}
}
#line 9995 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void irda_init_max_qos_capabilies(struct qos_info *arg0 ) 
{ 


  {
#line 9996
  return;
}
}
#line 9998 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void __release_region(struct resource *arg0 , resource_size_t arg1 , resource_size_t arg2 ) 
{ 


  {
#line 9999
  return;
}
}
#line 10001 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void __ldv_spin_lock(spinlock_t *arg0 ) 
{ 


  {
#line 10002
  return;
}
}
#line 10004 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void ldv_switch_to_process_context(void) 
{ 


  {
#line 10005
  return;
}
}
#line 10007 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct sk_buff *__netdev_alloc_skb(struct net_device *arg0 , unsigned int arg1 , gfp_t arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 10008
  tmp = ldv_malloc((size_t___0 )sizeof(struct sk_buff ));
  }
#line 10008
  return ((struct sk_buff *)tmp);
}
}
#line 10011 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int printk(char const   *arg0  , ...) 
{ 
  int tmp ;

  {
  {
#line 10012
  tmp = __VERIFIER_nondet_int();
  }
#line 10012
  return (tmp);
}
}
#line 10014 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void warn_slowpath_null(char const   *arg0 , int const   arg1 ) 
{ 


  {
#line 10015
  return;
}
}
#line 10018 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
bool capable(int arg0 ) 
{ 
  bool tmp ;

  {
  {
#line 10019
  tmp = __VERIFIER_nondet_bool();
  }
#line 10019
  return (tmp);
}
}
#line 10021 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
unsigned char *skb_put(struct sk_buff *arg0 , unsigned int arg1 ) 
{ 
  unsigned char *ret_val ;

  {
  {
#line 10022
  ret_val = arg0->data + arg0->tail;
#line 10023
  arg0->tail += arg1;
  }
#line 10024
  return (ret_val);
}
}
#line 10026 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void __udelay(unsigned long arg0 ) 
{ 


  {
#line 10027
  return;
}
}
#line 10030 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int request_dma(unsigned int arg0 , char const   *arg1 ) 
{ 
  int tmp ;

  {
  {
#line 10031
  tmp = __VERIFIER_nondet_int();
  }
#line 10031
  return (tmp);
}
}
#line 10034 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int net_ratelimit(void) 
{ 
  int tmp ;

  {
  {
#line 10035
  tmp = __VERIFIER_nondet_int();
  }
#line 10035
  return (tmp);
}
}
#line 10037 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void irlap_close(struct irlap_cb *arg0 ) 
{ 


  {
#line 10038
  return;
}
}
#line 10041 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int ldv_failed_register_netdev(void) 
{ 
  int tmp ;

  {
  {
#line 10042
  tmp = __VERIFIER_nondet_int();
  }
#line 10042
  return (tmp);
}
}
#line 10044 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct resource *__request_region(struct resource *arg0 , resource_size_t arg1 , resource_size_t arg2 ,
                                  char const   *arg3 , int arg4 ) 
{ 
  void *tmp ;

  {
  {
#line 10045
  tmp = ldv_malloc((size_t___0 )sizeof(struct resource ));
  }
#line 10045
  return ((struct resource *)tmp);
}
}
#line 10047 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void debug_dma_free_coherent(struct device *arg0 , size_t___0 arg1 , void *arg2 ,
                             dma_addr_t arg3 ) 
{ 


  {
#line 10048
  return;
}
}
#line 10050 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct net_device *alloc_irdadev(int arg0 ) 
{ 
  void *tmp ;

  {
  {
#line 10051
  tmp = ldv_malloc((size_t___0 )sizeof(struct net_device ));
  }
#line 10051
  return ((struct net_device *)tmp);
}
}
#line 10053 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void *memcpy(void *arg0 , void const   *arg1 , size_t___0 arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 10054
  tmp = ldv_malloc((size_t___0 )0UL);
  }
#line 10054
  return (tmp);
}
}
#line 10056 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void free_dma(unsigned int arg0 ) 
{ 


  {
#line 10057
  return;
}
}
#line 10059 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
struct irlap_cb *irlap_open(struct net_device *arg0 , struct qos_info *arg1 , char const   *arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 10060
  tmp = ldv_malloc((size_t___0 )0UL);
  }
#line 10060
  return ((struct irlap_cb *)tmp);
}
}
#line 10063 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
int netpoll_trap(void) 
{ 
  int tmp ;

  {
  {
#line 10064
  tmp = __VERIFIER_nondet_int();
  }
#line 10064
  return (tmp);
}
}
#line 10066 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void irda_device_set_media_busy(struct net_device *arg0 , int arg1 ) 
{ 


  {
#line 10067
  return;
}
}
#line 10069 "linux-3.14--drivers--net--irda--w83977af_ir.ko.cil.i"
void __netif_schedule(struct Qdisc *arg0 ) 
{ 


  {
#line 10070
  return;
}
}
