/* Generated by CIL v. 1.8.2 */
/* print_CIL_Input is true */

#line 143 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef long ptrdiff_t;
#line 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef unsigned long size_t;
#line 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef int wchar_t;
#line 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
struct __anonstruct_max_align_t_896270833 {
   long long __max_align_ll  __attribute__((__aligned__(__alignof__(long long )))) ;
   long double __max_align_ld  __attribute__((__aligned__(__alignof__(long double )))) ;
};
#line 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef struct __anonstruct_max_align_t_896270833 max_align_t;
#line 31 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned char __u_char;
#line 32 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned short __u_short;
#line 33 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __u_int;
#line 34 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __u_long;
#line 37 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef signed char __int8_t;
#line 38 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned char __uint8_t;
#line 39 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef short __int16_t;
#line 40 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned short __uint16_t;
#line 41 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __int32_t;
#line 42 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __uint32_t;
#line 44 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __int64_t;
#line 45 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __uint64_t;
#line 52 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int8_t __int_least8_t;
#line 53 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint8_t __uint_least8_t;
#line 54 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int16_t __int_least16_t;
#line 55 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint16_t __uint_least16_t;
#line 56 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int32_t __int_least32_t;
#line 57 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint32_t __uint_least32_t;
#line 58 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int64_t __int_least64_t;
#line 59 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint64_t __uint_least64_t;
#line 63 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __quad_t;
#line 64 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __u_quad_t;
#line 72 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __intmax_t;
#line 73 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __uintmax_t;
#line 145 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __dev_t;
#line 146 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __uid_t;
#line 147 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __gid_t;
#line 148 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __ino_t;
#line 149 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __ino64_t;
#line 150 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __mode_t;
#line 151 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __nlink_t;
#line 152 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off_t;
#line 153 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off64_t;
#line 154 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __pid_t;
#line 155 "/usr/include/x86_64-linux-gnu/bits/types.h"
struct __anonstruct___fsid_t_109580352 {
   int __val[2] ;
};
#line 155 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef struct __anonstruct___fsid_t_109580352 __fsid_t;
#line 156 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __clock_t;
#line 157 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __rlim_t;
#line 158 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __rlim64_t;
#line 159 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __id_t;
#line 160 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __time_t;
#line 161 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __useconds_t;
#line 162 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __suseconds_t;
#line 163 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __suseconds64_t;
#line 165 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __daddr_t;
#line 166 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __key_t;
#line 169 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __clockid_t;
#line 172 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef void *__timer_t;
#line 175 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blksize_t;
#line 180 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blkcnt_t;
#line 181 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blkcnt64_t;
#line 184 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsblkcnt_t;
#line 185 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsblkcnt64_t;
#line 188 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsfilcnt_t;
#line 189 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsfilcnt64_t;
#line 192 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __fsword_t;
#line 194 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __ssize_t;
#line 197 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __syscall_slong_t;
#line 199 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __syscall_ulong_t;
#line 203 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __off64_t __loff_t;
#line 204 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef char *__caddr_t;
#line 207 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __intptr_t;
#line 210 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __socklen_t;
#line 215 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __sig_atomic_t;
#line 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h"
typedef __time_t time_t;
#line 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h"
struct timespec {
   __time_t tv_sec ;
   __syscall_slong_t tv_nsec ;
};
#line 38 "/usr/include/sched.h"
typedef __pid_t pid_t;
#line 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h"
struct sched_param {
   int sched_priority ;
};
#line 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
typedef unsigned long __cpu_mask;
#line 39 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
struct __anonstruct_cpu_set_t_826868708 {
   __cpu_mask __bits[1024UL / (8UL * sizeof(__cpu_mask ))] ;
};
#line 39 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
typedef struct __anonstruct_cpu_set_t_826868708 cpu_set_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h"
typedef __clock_t clock_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
struct tm {
   int tm_sec ;
   int tm_min ;
   int tm_hour ;
   int tm_mday ;
   int tm_mon ;
   int tm_year ;
   int tm_wday ;
   int tm_yday ;
   int tm_isdst ;
   long tm_gmtoff ;
   char const   *tm_zone ;
};
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h"
typedef __clockid_t clockid_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h"
typedef __timer_t timer_t;
#line 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h"
struct itimerspec {
   struct timespec it_interval ;
   struct timespec it_value ;
};
#line 49 "/usr/include/time.h"
struct sigevent ;
#line 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
struct __locale_data ;
#line 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
struct __locale_struct {
   struct __locale_data *__locales[13] ;
   unsigned short const   *__ctype_b ;
   int const   *__ctype_tolower ;
   int const   *__ctype_toupper ;
   char const   *__names[13] ;
};
#line 42 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
typedef struct __locale_struct *__locale_t;
#line 24 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h"
typedef __locale_t locale_t;
#line 49 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_internal_list {
   struct __pthread_internal_list *__prev ;
   struct __pthread_internal_list *__next ;
};
#line 49 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __pthread_internal_list __pthread_list_t;
#line 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_internal_slist {
   struct __pthread_internal_slist *__next ;
};
#line 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __pthread_internal_slist __pthread_slist_t;
#line 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h"
struct __pthread_mutex_s {
   int __lock ;
   unsigned int __count ;
   int __owner ;
   unsigned int __nusers ;
   int __kind ;
   short __spins ;
   short __elision ;
   __pthread_list_t __list ;
};
#line 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h"
struct __pthread_rwlock_arch_t {
   unsigned int __readers ;
   unsigned int __writers ;
   unsigned int __wrphase_futex ;
   unsigned int __writers_futex ;
   unsigned int __pad3 ;
   unsigned int __pad4 ;
   int __cur_writer ;
   int __shared ;
   signed char __rwelision ;
   unsigned char __pad1[7] ;
   unsigned long __pad2 ;
   unsigned int __flags ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___wseq32_817613185 {
   unsigned int __low ;
   unsigned int __high ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
union __anonunion____missing_field_name_207979571 {
   unsigned long long __wseq ;
   struct __anonstruct___wseq32_817613185 __wseq32 ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___g1_start32_817613186 {
   unsigned int __low ;
   unsigned int __high ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
union __anonunion____missing_field_name_459614979 {
   unsigned long long __g1_start ;
   struct __anonstruct___g1_start32_817613186 __g1_start32 ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_cond_s {
   union __anonunion____missing_field_name_207979571 __annonCompField1 ;
   union __anonunion____missing_field_name_459614979 __annonCompField2 ;
   unsigned int __g_refs[2] ;
   unsigned int __g_size[2] ;
   unsigned int __g1_orig_size ;
   unsigned int __wrefs ;
   unsigned int __g_signals[2] ;
};
#line 119 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef unsigned int __tss_t;
#line 120 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef unsigned long __thrd_t;
#line 122 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___once_flag_826868709 {
   int __data ;
};
#line 122 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __anonstruct___once_flag_826868709 __once_flag;
#line 27 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 32 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_mutexattr_t_488594144 {
   char __size[4] ;
   int __align ;
};
#line 32 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_mutexattr_t_488594144 pthread_mutexattr_t;
#line 41 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_condattr_t_488594145 {
   char __size[4] ;
   int __align ;
};
#line 41 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_condattr_t_488594145 pthread_condattr_t;
#line 49 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef unsigned int pthread_key_t;
#line 53 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef int pthread_once_t;
#line 56 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union pthread_attr_t {
   char __size[56] ;
   long __align ;
};
#line 62 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union pthread_attr_t pthread_attr_t;
#line 67 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_mutex_t_335460617 {
   struct __pthread_mutex_s __data ;
   char __size[40] ;
   long __align ;
};
#line 67 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_mutex_t_335460617 pthread_mutex_t;
#line 75 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_cond_t_951761805 {
   struct __pthread_cond_s __data ;
   char __size[48] ;
   long long __align ;
};
#line 75 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_cond_t_951761805 pthread_cond_t;
#line 86 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_rwlock_t_656928968 {
   struct __pthread_rwlock_arch_t __data ;
   char __size[56] ;
   long __align ;
};
#line 86 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_rwlock_t_656928968 pthread_rwlock_t;
#line 93 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_rwlockattr_t_145707745 {
   char __size[8] ;
   long __align ;
};
#line 93 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_rwlockattr_t_145707745 pthread_rwlockattr_t;
#line 103 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef int volatile   pthread_spinlock_t;
#line 108 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_barrier_t_145707746 {
   char __size[32] ;
   long __align ;
};
#line 108 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_barrier_t_145707746 pthread_barrier_t;
#line 114 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_barrierattr_t_951761806 {
   char __size[4] ;
   int __align ;
};
#line 114 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_barrierattr_t_951761806 pthread_barrierattr_t;
#line 31 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
typedef long __jmp_buf[8];
#line 5 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h"
struct __anonstruct___sigset_t_764561023 {
   unsigned long __val[1024UL / (8UL * sizeof(unsigned long ))] ;
};
#line 5 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h"
typedef struct __anonstruct___sigset_t_764561023 __sigset_t;
#line 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h"
struct __jmp_buf_tag {
   __jmp_buf __jmpbuf ;
   int __mask_was_saved ;
   __sigset_t __saved_mask ;
};
#line 37 "/usr/include/pthread.h"
enum __anonenum_34415463 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1
} ;
#line 47
enum __anonenum_508643754 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
    PTHREAD_MUTEX_NORMAL = 0,
    PTHREAD_MUTEX_RECURSIVE = 1,
    PTHREAD_MUTEX_ERRORCHECK = 2,
    PTHREAD_MUTEX_DEFAULT = 0
} ;
#line 69
enum __anonenum_931900394 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_STALLED_NP = 0,
    PTHREAD_MUTEX_ROBUST = 1,
    PTHREAD_MUTEX_ROBUST_NP = 1
} ;
#line 81
enum __anonenum_205214487 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2
} ;
#line 104
enum __anonenum_25043950 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
    PTHREAD_RWLOCK_DEFAULT_NP = 0
} ;
#line 124
enum __anonenum_436439511 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1
} ;
#line 134
enum __anonenum_998661166 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1
} ;
#line 144
enum __anonenum_146137331 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1
} ;
#line 159 "/usr/include/pthread.h"
struct _pthread_cleanup_buffer {
   void (*__routine)(void * ) ;
   void *__arg ;
   int __canceltype ;
   struct _pthread_cleanup_buffer *__prev ;
};
#line 168
enum __anonenum_53396917 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1
} ;
#line 175
enum __anonenum_904563783 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1
} ;
#line 538 "/usr/include/pthread.h"
struct __cancel_jmp_buf_tag {
   __jmp_buf __cancel_jmp_buf ;
   int __mask_was_saved ;
};
#line 544 "/usr/include/pthread.h"
struct __anonstruct___pthread_unwind_buf_t_530692248 {
   struct __cancel_jmp_buf_tag __cancel_jmp_buf[1] ;
   void *__pad[4] ;
};
#line 544 "/usr/include/pthread.h"
typedef struct __anonstruct___pthread_unwind_buf_t_530692248  __attribute__((__aligned__)) __pthread_unwind_buf_t;
#line 557 "/usr/include/pthread.h"
struct __pthread_cleanup_frame {
   void (*__cancel_routine)(void * ) ;
   void *__cancel_arg ;
   int __do_it ;
   int __cancel_type ;
};
#line 12 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __pthread_mutex_s___0 {
   int __lock ;
   unsigned int __count ;
   int __owner ;
   unsigned int __nusers ;
   int __kind ;
   int __spins ;
   __pthread_list_t __list ;
};
#line 12 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion_pthread_mutex_t_731577101 {
   struct __pthread_mutex_s___0 __data ;
   char __size[40] ;
   long __align ;
};
#line 12 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef union __anonunion_pthread_mutex_t_731577101 pthread_mutex_t___0;
#line 49
struct device ;
#line 50
struct spi_master ;
#line 51 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned char __u8;
#line 52 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned short __u16;
#line 53 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef int __s32;
#line 54 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned int __u32;
#line 55 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned long long __u64;
#line 56 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned char u8;
#line 57 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef short s16;
#line 58 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned short u16;
#line 59 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef int s32;
#line 60 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned int u32;
#line 61 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef long long s64;
#line 62 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned long long u64;
#line 63 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef long __kernel_long_t;
#line 64 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned long __kernel_ulong_t;
#line 66 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned int __kernel_uid32_t;
#line 67 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned int __kernel_gid32_t;
#line 68 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __kernel_ulong_t __kernel_size_t;
#line 69 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __kernel_long_t __kernel_ssize_t;
#line 70 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef long long __kernel_loff_t;
#line 72 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __kernel_long_t __kernel_clock_t;
#line 73 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef int __kernel_timer_t;
#line 75 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __u32 __kernel_dev_t;
#line 76 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __kernel_dev_t dev_t;
#line 77 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned short umode_t;
#line 80 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef _Bool bool;
#line 81 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __kernel_uid32_t uid_t;
#line 82 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __kernel_gid32_t gid_t;
#line 83 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __kernel_loff_t loff_t;
#line 84 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned int size_t___0;
#line 85 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __kernel_ssize_t ssize_t;
#line 87 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __s32 int32_t;
#line 88 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __u32 uint32_t;
#line 89 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef u64 dma_addr_t;
#line 90 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned int gfp_t;
#line 91 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned int oom_flags_t;
#line 92 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef u64 phys_addr_t;
#line 93 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef phys_addr_t resource_size_t;
#line 94 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 97 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 98 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 101 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 102 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 106
struct hlist_node ;
#line 107 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct hlist_head {
   struct hlist_node *first ;
};
#line 110 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 114 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 118
struct mutex ;
#line 119 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef u16 __ticket_t;
#line 120 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef u32 __ticketpair_t;
#line 121 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 125 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 129 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct arch_spinlock {
   union __anonunion____missing_field_name_8 __annonCompField4 ;
};
#line 132 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct arch_spinlock arch_spinlock_t;
#line 133
struct task_struct ;
#line 134
struct lockdep_map ;
#line 135 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 139
struct module ;
#line 140 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 163 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 167 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 182 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_11 {
   struct __anonstruct____missing_field_name_12 __annonCompField6 ;
   struct __anonstruct____missing_field_name_13 __annonCompField7 ;
};
#line 186 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct desc_struct {
   union __anonunion____missing_field_name_11 __annonCompField8 ;
};
#line 189 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned long pgdval_t;
#line 190 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned long pgprotval_t;
#line 191 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 194 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct pgprot pgprot_t;
#line 195 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 198 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 199
struct page ;
#line 200 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct page *pgtable_t;
#line 201
struct file ;
#line 202
struct seq_file ;
#line 203
struct thread_struct ;
#line 204
struct mm_struct ;
#line 205
struct cpumask ;
#line 206 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct paravirt_callee_save {
   void *func ;
};
#line 209 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
   void (*adjust_exception_frame)(void) ;
};
#line 218 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef void (*ctor_fn_t)(void);
#line 219 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
};
#line 227
struct completion ;
#line 228
struct pid ;
#line 229 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 240 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 244 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_18 __annonCompField9 ;
};
#line 248 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 254 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 257 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct cpumask cpumask_t;
#line 258 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct cpumask *cpumask_var_t;
#line 259
struct static_key ;
#line 260
struct seq_operations ;
#line 261 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 272 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_23 {
   u64 rip ;
   u64 rdp ;
};
#line 276 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 282 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_22 {
   struct __anonstruct____missing_field_name_23 __annonCompField13 ;
   struct __anonstruct____missing_field_name_24 __annonCompField14 ;
};
#line 286 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 290 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_22 __annonCompField15 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion____missing_field_name_25 __annonCompField16 ;
};
#line 303 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 321 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 324 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct lwp_struct {
   u8 reserved[128U] ;
};
#line 327 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct bndregs_struct {
   u64 bndregs[8U] ;
};
#line 330 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct bndcsr_struct {
   u64 cfg_reg_u ;
   u64 status_reg ;
};
#line 334 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 339 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
   struct lwp_struct lwp ;
   struct bndregs_struct bndregs ;
   struct bndcsr_struct bndcsr ;
};
#line 347 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 353 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 358
struct kmem_cache ;
#line 359
struct perf_event ;
#line 360 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned char fpu_counter ;
};
#line 383 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef atomic64_t atomic_long_t;
#line 384 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 390 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 393 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 396 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 413 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 420 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 2 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 11 ;
};
#line 435 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 442 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct raw_spinlock raw_spinlock_t;
#line 443 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 447 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct____missing_field_name_29 __annonCompField18 ;
};
#line 451 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct spinlock {
   union __anonunion____missing_field_name_28 __annonCompField19 ;
};
#line 454 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct spinlock spinlock_t;
#line 455 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 464 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 473 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 479
struct jump_entry ;
#line 480
struct static_key_mod ;
#line 481 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct static_key {
   atomic_t enabled ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 486 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef u64 jump_label_t;
#line 487 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};
#line 492 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 496 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct seqcount seqcount_t;
#line 497 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 501 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct __wait_queue_head wait_queue_head_t;
#line 502 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 506 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct idr_layer {
   int prefix ;
   unsigned long bitmap[4U] ;
   struct idr_layer *ary[256U] ;
   int count ;
   int layer ;
   struct callback_head callback_head ;
};
#line 514 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   int cur ;
   spinlock_t lock ;
};
#line 523 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};
#line 527 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};
#line 531 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 536 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 539
struct vm_area_struct ;
#line 540
struct kernfs_open_node ;
#line 541
struct kernfs_iattrs ;
#line 542
struct kernfs_root ;
#line 543 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 548
struct kernfs_node ;
#line 549 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 552
struct kernfs_ops ;
#line 553 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernfs_elem_attr {
   struct kernfs_ops  const  *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
};
#line 558 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion_u_36 {
   struct completion *completion ;
   struct kernfs_node *removed_list ;
};
#line 562 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_37 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 567 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const   *name ;
   struct rb_node rb ;
   union __anonunion_u_36 u ;
   void const   *ns ;
   unsigned int hash ;
   union __anonunion____missing_field_name_37 __annonCompField21 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};
#line 584 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernfs_dir_ops {
   int (*mkdir)(struct kernfs_node * , char const   * , umode_t  ) ;
   int (*rmdir)(struct kernfs_node * ) ;
   int (*rename)(struct kernfs_node * , struct kernfs_node * , char const   * ) ;
};
#line 589 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernfs_root {
   struct kernfs_node *kn ;
   struct ida ino_ida ;
   struct kernfs_dir_ops *dir_ops ;
};
#line 594
struct vm_operations_struct ;
#line 595 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   bool mmapped ;
   struct vm_operations_struct  const  *vm_ops ;
};
#line 604 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernfs_ops {
   int (*seq_show)(struct seq_file * , void * ) ;
   void *(*seq_start)(struct seq_file * , loff_t * ) ;
   void *(*seq_next)(struct seq_file * , void * , loff_t * ) ;
   void (*seq_stop)(struct seq_file * , void * ) ;
   ssize_t (*read)(struct kernfs_open_file * , char * , size_t___0  , loff_t  ) ;
   ssize_t (*write)(struct kernfs_open_file * , char * , size_t___0  , loff_t  ) ;
   int (*mmap)(struct kernfs_open_file * , struct vm_area_struct * ) ;
   struct lock_class_key lockdep_key ;
};
#line 614
struct sock ;
#line 615
struct kobject ;
#line 616
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 621 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 633
struct user_namespace ;
#line 634 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct_kuid_t_38 {
   uid_t val ;
};
#line 637 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct __anonstruct_kuid_t_38 kuid_t;
#line 638 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct_kgid_t_39 {
   gid_t val ;
};
#line 641 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct __anonstruct_kgid_t_39 kgid_t;
#line 642
struct bin_attribute ;
#line 643 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 650 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 656 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct bin_attribute {
   struct attribute attr ;
   size_t___0 size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t___0  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t___0  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 666 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t___0  ) ;
};
#line 670 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kref {
   atomic_t refcount ;
};
#line 673 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union ktime {
   s64 tv64 ;
};
#line 676 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef union ktime ktime_t;
#line 677
struct tvec_base ;
#line 678 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 690
struct hrtimer ;
#line 691
enum hrtimer_restart ;
#line 692
struct workqueue_struct ;
#line 693
struct work_struct ;
#line 694 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 700 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 706
struct kset ;
#line 707
struct kobj_type ;
#line 708 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 723 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 730 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 736 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 741 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 747
struct klist_node ;
#line 748 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 753 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct_nodemask_t_40 {
   unsigned long bits[16U] ;
};
#line 756 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct __anonstruct_nodemask_t_40 nodemask_t;
#line 757 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct seq_file {
   char *buf ;
   size_t___0 size ;
   size_t___0 from ;
   size_t___0 count ;
   size_t___0 pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};
#line 772 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 778
struct pinctrl ;
#line 779
struct pinctrl_state ;
#line 780 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};
#line 786 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct pm_message {
   int event ;
};
#line 789 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct pm_message pm_message_t;
#line 790 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 815
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 821
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 828
struct wakeup_source ;
#line 829 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};
#line 834
struct dev_pm_qos ;
#line 835 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool ignore_children : 1 ;
   bool early_init : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int run_wake : 1 ;
   unsigned int runtime_auto : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   struct dev_pm_qos *qos ;
};
#line 877 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 880
struct rw_semaphore ;
#line 881 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 887 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct_mm_context_t_105 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 894 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct __anonstruct_mm_context_t_105 mm_context_t;
#line 895
struct device_node ;
#line 896
struct llist_node ;
#line 897 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct llist_node {
   struct llist_node *next ;
};
#line 900
struct dma_map_ops ;
#line 901 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 905 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct pdev_archdata {

};
#line 907
struct device_private ;
#line 908
struct device_driver ;
#line 909
struct driver_private ;
#line 910
struct class ;
#line 911
struct subsys_private ;
#line 912
struct bus_type ;
#line 913
struct iommu_ops ;
#line 914
struct iommu_group ;
#line 915
struct device_attribute ;
#line 916 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group  const  **bus_groups ;
   struct attribute_group  const  **dev_groups ;
   struct attribute_group  const  **drv_groups ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*online)(struct device * ) ;
   int (*offline)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};
#line 938
struct device_type ;
#line 939
struct of_device_id ;
#line 940
struct acpi_device_id ;
#line 941 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   struct acpi_device_id  const  *acpi_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 958
struct class_attribute ;
#line 959 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group  const  **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 976 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t___0  ) ;
};
#line 981 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * , kuid_t * , kgid_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 989 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t___0  ) ;
};
#line 995 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 999
struct acpi_device ;
#line 1000 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct acpi_dev_node {
   struct acpi_device *companion ;
};
#line 1003
struct dma_coherent_mem ;
#line 1004 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct acpi_dev_node acpi_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
};
#line 1038 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1057 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned long kernel_ulong_t;
#line 1058 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
};
#line 1062 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
#line 1068 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 1072
struct mfd_cell ;
#line 1073 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct platform_device {
   char const   *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id  const  *id_entry ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 1084 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct platform_driver {
   int (*probe)(struct platform_device * ) ;
   int (*remove)(struct platform_device * ) ;
   void (*shutdown)(struct platform_device * ) ;
   int (*suspend)(struct platform_device * , pm_message_t  ) ;
   int (*resume)(struct platform_device * ) ;
   struct device_driver driver ;
   struct platform_device_id  const  *id_table ;
   bool prevent_deferred_probe ;
};
#line 1094
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 1099 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef enum irqreturn irqreturn_t;
#line 1100
struct proc_dir_entry ;
#line 1101 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 1105 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 1109 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 1113
struct hrtimer_clock_base ;
#line 1114
struct hrtimer_cpu_base ;
#line 1115
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 1119 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 1129 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 1139 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};
#line 1152
struct clk ;
#line 1153 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 1158
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 1164 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_140 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 1168 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_141 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 1172 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_139 {
   struct __anonstruct____missing_field_name_140 __annonCompField35 ;
   struct __anonstruct____missing_field_name_141 __annonCompField36 ;
};
#line 1176
struct uprobe ;
#line 1177
struct return_instance ;
#line 1178 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion____missing_field_name_139 __annonCompField37 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 1186
struct xol_area ;
#line 1187 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 1190
struct address_space ;
#line 1191 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_142 {
   struct address_space *mapping ;
   void *s_mem ;
};
#line 1195 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_144 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 1200 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_148 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 1205 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_147 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_148 __annonCompField40 ;
   int units ;
};
#line 1210 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_146 {
   union __anonunion____missing_field_name_147 __annonCompField41 ;
   atomic_t _count ;
};
#line 1214 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_145 {
   unsigned long counters ;
   struct __anonstruct____missing_field_name_146 __annonCompField42 ;
   unsigned int active ;
};
#line 1219 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_143 {
   union __anonunion____missing_field_name_144 __annonCompField39 ;
   union __anonunion____missing_field_name_145 __annonCompField43 ;
};
#line 1223 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_150 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 1228
struct slab ;
#line 1229 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_149 {
   struct list_head lru ;
   struct __anonstruct____missing_field_name_150 __annonCompField45 ;
   struct list_head list ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   pgtable_t pmd_huge_pte ;
};
#line 1237 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_151 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};
#line 1243 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct page {
   unsigned long flags ;
   union __anonunion____missing_field_name_142 __annonCompField38 ;
   struct __anonstruct____missing_field_name_143 __annonCompField44 ;
   union __anonunion____missing_field_name_149 __annonCompField46 ;
   union __anonunion____missing_field_name_151 __annonCompField47 ;
   unsigned long debug_flags ;
};
#line 1251 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 1256 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct_linear_153 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 1260 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion_shared_152 {
   struct __anonstruct_linear_153 linear ;
   struct list_head nonlinear ;
};
#line 1264
struct anon_vma ;
#line 1265
struct mempolicy ;
#line 1266 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   union __anonunion_shared_152 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 1285 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 1289 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 1294 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};
#line 1298 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 1301
struct kioctx_table ;
#line 1302
struct linux_binfmt ;
#line 1303
struct mmu_notifier_mm ;
#line 1304 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
};
#line 1361
struct user_struct ;
#line 1362 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 1368 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 1381 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 1389 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1394 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef s32 dma_cookie_t;
#line 1395
enum dma_status {
    DMA_COMPLETE = 0,
    DMA_IN_PROGRESS = 1,
    DMA_PAUSED = 2,
    DMA_ERROR = 3
} ;
#line 1401
enum dma_transfer_direction {
    DMA_MEM_TO_MEM = 0,
    DMA_MEM_TO_DEV = 1,
    DMA_DEV_TO_MEM = 2,
    DMA_DEV_TO_DEV = 3,
    DMA_TRANS_NONE = 4
} ;
#line 1408 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct data_chunk {
   size_t___0 size ;
   size_t___0 icg ;
};
#line 1412 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dma_interleaved_template {
   dma_addr_t src_start ;
   dma_addr_t dst_start ;
   enum dma_transfer_direction dir ;
   bool src_inc ;
   bool dst_inc ;
   bool src_sgl ;
   bool dst_sgl ;
   size_t___0 numf ;
   size_t___0 frame_size ;
   struct data_chunk sgl[0U] ;
};
#line 1424
enum dma_ctrl_flags {
    DMA_PREP_INTERRUPT = 1,
    DMA_CTRL_ACK = 2,
    DMA_PREP_PQ_DISABLE_P = 4,
    DMA_PREP_PQ_DISABLE_Q = 8,
    DMA_PREP_CONTINUE = 16,
    DMA_PREP_FENCE = 32
} ;
#line 1432
enum dma_ctrl_cmd {
    DMA_TERMINATE_ALL = 0,
    DMA_PAUSE = 1,
    DMA_RESUME = 2,
    DMA_SLAVE_CONFIG = 3,
    FSLDMA_EXTERNAL_START = 4
} ;
#line 1439
enum sum_check_flags {
    SUM_CHECK_P_RESULT = 1,
    SUM_CHECK_Q_RESULT = 2
} ;
#line 1443 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct_dma_cap_mask_t_154 {
   unsigned long bits[1U] ;
};
#line 1446 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct __anonstruct_dma_cap_mask_t_154 dma_cap_mask_t;
#line 1447 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dma_chan_percpu {
   unsigned long memcpy_count ;
   unsigned long bytes_transferred ;
};
#line 1451
struct dma_device ;
#line 1452
struct dma_chan_dev ;
#line 1453 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dma_chan {
   struct dma_device *device ;
   dma_cookie_t cookie ;
   dma_cookie_t completed_cookie ;
   int chan_id ;
   struct dma_chan_dev *dev ;
   struct list_head device_node ;
   struct dma_chan_percpu *local ;
   int client_count ;
   int table_count ;
   void *private ;
};
#line 1465 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dma_chan_dev {
   struct dma_chan *chan ;
   struct device device ;
   int dev_id ;
   atomic_t *idr_ref ;
};
#line 1471
enum dma_slave_buswidth {
    DMA_SLAVE_BUSWIDTH_UNDEFINED = 0,
    DMA_SLAVE_BUSWIDTH_1_BYTE = 1,
    DMA_SLAVE_BUSWIDTH_2_BYTES = 2,
    DMA_SLAVE_BUSWIDTH_4_BYTES = 4,
    DMA_SLAVE_BUSWIDTH_8_BYTES = 8
} ;
#line 1478 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dma_slave_config {
   enum dma_transfer_direction direction ;
   dma_addr_t src_addr ;
   dma_addr_t dst_addr ;
   enum dma_slave_buswidth src_addr_width ;
   enum dma_slave_buswidth dst_addr_width ;
   u32 src_maxburst ;
   u32 dst_maxburst ;
   bool device_fc ;
   unsigned int slave_id ;
};
#line 1489
enum dma_residue_granularity {
    DMA_RESIDUE_GRANULARITY_DESCRIPTOR = 0,
    DMA_RESIDUE_GRANULARITY_SEGMENT = 1,
    DMA_RESIDUE_GRANULARITY_BURST = 2
} ;
#line 1494 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dma_slave_caps {
   u32 src_addr_widths ;
   u32 dstn_addr_widths ;
   u32 directions ;
   bool cmd_pause ;
   bool cmd_terminate ;
   enum dma_residue_granularity residue_granularity ;
};
#line 1502 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dmaengine_unmap_data {
   u8 to_cnt ;
   u8 from_cnt ;
   u8 bidi_cnt ;
   struct device *dev ;
   struct kref kref ;
   size_t___0 len ;
   dma_addr_t addr[0U] ;
};
#line 1511 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dma_async_tx_descriptor {
   dma_cookie_t cookie ;
   enum dma_ctrl_flags flags ;
   dma_addr_t phys ;
   struct dma_chan *chan ;
   dma_cookie_t (*tx_submit)(struct dma_async_tx_descriptor * ) ;
   void (*callback)(void * ) ;
   void *callback_param ;
   struct dmaengine_unmap_data *unmap ;
};
#line 1521 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dma_tx_state {
   dma_cookie_t last ;
   dma_cookie_t used ;
   u32 residue ;
};
#line 1526 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dma_device {
   unsigned int chancnt ;
   unsigned int privatecnt ;
   struct list_head channels ;
   struct list_head global_node ;
   dma_cap_mask_t cap_mask ;
   unsigned short max_xor ;
   unsigned short max_pq ;
   u8 copy_align ;
   u8 xor_align ;
   u8 pq_align ;
   u8 fill_align ;
   int dev_id ;
   struct device *dev ;
   int (*device_alloc_chan_resources)(struct dma_chan * ) ;
   void (*device_free_chan_resources)(struct dma_chan * ) ;
   struct dma_async_tx_descriptor *(*device_prep_dma_memcpy)(struct dma_chan * , dma_addr_t  ,
                                                             dma_addr_t  , size_t___0  ,
                                                             unsigned long  ) ;
   struct dma_async_tx_descriptor *(*device_prep_dma_xor)(struct dma_chan * , dma_addr_t  ,
                                                          dma_addr_t * , unsigned int  ,
                                                          size_t___0  , unsigned long  ) ;
   struct dma_async_tx_descriptor *(*device_prep_dma_xor_val)(struct dma_chan * ,
                                                              dma_addr_t * , unsigned int  ,
                                                              size_t___0  , enum sum_check_flags * ,
                                                              unsigned long  ) ;
   struct dma_async_tx_descriptor *(*device_prep_dma_pq)(struct dma_chan * , dma_addr_t * ,
                                                         dma_addr_t * , unsigned int  ,
                                                         unsigned char const   * ,
                                                         size_t___0  , unsigned long  ) ;
   struct dma_async_tx_descriptor *(*device_prep_dma_pq_val)(struct dma_chan * , dma_addr_t * ,
                                                             dma_addr_t * , unsigned int  ,
                                                             unsigned char const   * ,
                                                             size_t___0  , enum sum_check_flags * ,
                                                             unsigned long  ) ;
   struct dma_async_tx_descriptor *(*device_prep_dma_interrupt)(struct dma_chan * ,
                                                                unsigned long  ) ;
   struct dma_async_tx_descriptor *(*device_prep_dma_sg)(struct dma_chan * , struct scatterlist * ,
                                                         unsigned int  , struct scatterlist * ,
                                                         unsigned int  , unsigned long  ) ;
   struct dma_async_tx_descriptor *(*device_prep_slave_sg)(struct dma_chan * , struct scatterlist * ,
                                                           unsigned int  , enum dma_transfer_direction  ,
                                                           unsigned long  , void * ) ;
   struct dma_async_tx_descriptor *(*device_prep_dma_cyclic)(struct dma_chan * , dma_addr_t  ,
                                                             size_t___0  , size_t___0  ,
                                                             enum dma_transfer_direction  ,
                                                             unsigned long  , void * ) ;
   struct dma_async_tx_descriptor *(*device_prep_interleaved_dma)(struct dma_chan * ,
                                                                  struct dma_interleaved_template * ,
                                                                  unsigned long  ) ;
   int (*device_control)(struct dma_chan * , enum dma_ctrl_cmd  , unsigned long  ) ;
   enum dma_status (*device_tx_status)(struct dma_chan * , dma_cookie_t  , struct dma_tx_state * ) ;
   void (*device_issue_pending)(struct dma_chan * ) ;
   int (*device_slave_caps)(struct dma_chan * , struct dma_slave_caps * ) ;
};
#line 1580 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 1583
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 1589 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t___0  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t___0  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t___0  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t___0  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t___0  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t___0  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t___0  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t___0  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 1613 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 1616 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct kernel_cap_struct kernel_cap_t;
#line 1617 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 1622 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef unsigned long cputime_t;
#line 1623
struct sem_undo_list ;
#line 1624 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 1627 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct_sigset_t_156 {
   unsigned long sig[1U] ;
};
#line 1630 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct __anonstruct_sigset_t_156 sigset_t;
#line 1631
struct siginfo ;
#line 1632 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef void __signalfn_t(int  );
#line 1633 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __signalfn_t *__sighandler_t;
#line 1634 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef void __restorefn_t(void);
#line 1635 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __restorefn_t *__sigrestore_t;
#line 1636 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 1640 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef union sigval sigval_t;
#line 1641 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct__kill_158 {
   __pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 1645 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct__timer_159 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 1652 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct__rt_160 {
   __pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 1657 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct__sigchld_161 {
   __pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 1664 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct__sigfault_162 {
   void *_addr ;
   short _addr_lsb ;
};
#line 1668 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct__sigpoll_163 {
   long _band ;
   int _fd ;
};
#line 1672 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct__sigsys_164 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 1677 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion__sifields_157 {
   int _pad[28U] ;
   struct __anonstruct__kill_158 _kill ;
   struct __anonstruct__timer_159 _timer ;
   struct __anonstruct__rt_160 _rt ;
   struct __anonstruct__sigchld_161 _sigchld ;
   struct __anonstruct__sigfault_162 _sigfault ;
   struct __anonstruct__sigpoll_163 _sigpoll ;
   struct __anonstruct__sigsys_164 _sigsys ;
};
#line 1687 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_157 _sifields ;
};
#line 1693 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct siginfo siginfo_t;
#line 1694 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 1698 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 1704 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct k_sigaction {
   struct sigaction sa ;
};
#line 1707
struct pid_namespace ;
#line 1708 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 1713 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 1720 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 1724
struct seccomp_filter ;
#line 1725 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 1729
struct rt_mutex_waiter ;
#line 1730 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 1734 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 1743 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 1749
struct nsproxy ;
#line 1750
struct assoc_array_ptr ;
#line 1751 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 1755 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef int32_t key_serial_t;
#line 1756 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef uint32_t key_perm_t;
#line 1757
struct key ;
#line 1758
struct signal_struct ;
#line 1759
struct cred ;
#line 1760
struct key_type ;
#line 1761 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct keyring_index_key {
   struct key_type *type ;
   char const   *description ;
   size_t___0 desc_len ;
};
#line 1766 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_169 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 1770
struct key_user ;
#line 1771 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_170 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 1775 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_172 {
   struct key_type *type ;
   char *description ;
};
#line 1779 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_171 {
   struct keyring_index_key index_key ;
   struct __anonstruct____missing_field_name_172 __annonCompField52 ;
};
#line 1783 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion_type_data_173 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 1789 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion_payload_175 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};
#line 1795 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_174 {
   union __anonunion_payload_175 payload ;
   struct assoc_array keys ;
};
#line 1799 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion____missing_field_name_169 __annonCompField50 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion____missing_field_name_170 __annonCompField51 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion____missing_field_name_171 __annonCompField53 ;
   union __anonunion_type_data_173 type_data ;
   union __anonunion____missing_field_name_174 __annonCompField54 ;
};
#line 1818
struct audit_context ;
#line 1819 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 1826 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 1855
struct futex_pi_state ;
#line 1856
struct robust_list_head ;
#line 1857
struct bio_list ;
#line 1858
struct fs_struct ;
#line 1859
struct perf_event_context ;
#line 1860
struct blk_plug ;
#line 1861
struct cfs_rq ;
#line 1862
struct task_group ;
#line 1863 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 1869 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 1878 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 1884 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};
#line 1888 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 1893 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 1898
struct autogroup ;
#line 1899
struct tty_struct ;
#line 1900
struct taskstats ;
#line 1901
struct tty_audit_buf ;
#line 1902 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 1965 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 1982
struct backing_dev_info ;
#line 1983
struct reclaim_state ;
#line 1984 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 1990 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 2004
struct io_context ;
#line 2005
struct pipe_inode_info ;
#line 2006 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 2010 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct sched_avg {
   u32 runnable_avg_sum ;
   u32 runnable_avg_period ;
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
};
#line 2017 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 2046 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 2062
struct rt_rq ;
#line 2063 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 2073 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   struct hrtimer dl_timer ;
};
#line 2087
struct mem_cgroup ;
#line 2088 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 2094 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int may_oom : 1 ;
};
#line 2100
struct sched_class ;
#line 2101
struct files_struct ;
#line 2102
struct css_set ;
#line 2103
struct compat_robust_list_head ;
#line 2104
struct numa_group ;
#line 2105
struct ftrace_ret_stack ;
#line 2106 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned int brk_randomized : 1 ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int no_new_privs : 1 ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t___0 sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct task_struct *pi_top_task ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   int numa_migrate_deferred ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long *numa_faults_buffer ;
   unsigned long numa_faults_locality[2U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   unsigned int memcg_kmem_skip_account ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
};
#line 2304
struct kthread_work ;
#line 2305 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 2311 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work * ) ;
   wait_queue_head_t done ;
   struct kthread_worker *worker ;
};
#line 2317 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __u64 Elf64_Addr;
#line 2318 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __u16 Elf64_Half;
#line 2319 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __u32 Elf64_Word;
#line 2320 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef __u64 Elf64_Xword;
#line 2321 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 2329 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef struct elf64_sym Elf64_Sym;
#line 2330
struct kernel_param ;
#line 2331 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 2337
struct kparam_string ;
#line 2338
struct kparam_array ;
#line 2339 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_181 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 2344 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion____missing_field_name_181 __annonCompField56 ;
};
#line 2351 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 2355 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 2362
struct tracepoint ;
#line 2363 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 2367 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 2374 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct mod_arch_specific {

};
#line 2376
struct module_param_attrs ;
#line 2377 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};
#line 2384 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t___0  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 2393
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
} ;
#line 2399 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 2403
struct module_sect_attrs ;
#line 2404
struct module_notes_attrs ;
#line 2405
struct ftrace_event_call ;
#line 2406 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   bool sig_ok ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint **tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 2477 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
typedef u32 phandle;
#line 2478 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
};
#line 2486 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct device_node {
   char const   *name ;
   char const   *type ;
   phandle phandle ;
   char const   *full_name ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct device_node *next ;
   struct device_node *allnext ;
   struct proc_dir_entry *pde ;
   struct kref kref ;
   unsigned long _flags ;
   void *data ;
};
#line 2503
struct reset_control ;
#line 2504 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 2511 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 2514
struct memcg_cache_params ;
#line 2515
struct kmem_cache_node ;
#line 2516 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   struct memcg_cache_params *memcg_params ;
   int max_attr_size ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 2541 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_183 {
   struct callback_head callback_head ;
   struct kmem_cache *memcg_caches[0U] ;
};
#line 2545 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct __anonstruct____missing_field_name_184 {
   struct mem_cgroup *memcg ;
   struct list_head list ;
   struct kmem_cache *root_cache ;
   bool dead ;
   atomic_t nr_pages ;
   struct work_struct destroy ;
};
#line 2553 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
union __anonunion____missing_field_name_182 {
   struct __anonstruct____missing_field_name_183 __annonCompField57 ;
   struct __anonstruct____missing_field_name_184 __annonCompField58 ;
};
#line 2557 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct memcg_cache_params {
   bool is_root_cache ;
   union __anonunion____missing_field_name_182 __annonCompField59 ;
};
#line 2561 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};
#line 2574
struct spi_message ;
#line 2575
struct spi_transfer ;
#line 2576 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device * ) ;
   int (*transfer)(struct spi_device * , struct spi_message * ) ;
   void (*cleanup)(struct spi_device * ) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   struct completion xfer_completion ;
   int (*prepare_transfer_hardware)(struct spi_master * ) ;
   int (*transfer_one_message)(struct spi_master * , struct spi_message * ) ;
   int (*unprepare_transfer_hardware)(struct spi_master * ) ;
   int (*prepare_message)(struct spi_master * , struct spi_message * ) ;
   int (*unprepare_message)(struct spi_master * , struct spi_message * ) ;
   void (*set_cs)(struct spi_device * , bool  ) ;
   int (*transfer_one)(struct spi_master * , struct spi_device * , struct spi_transfer * ) ;
   int *cs_gpios ;
};
#line 2615 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct spi_transfer {
   void const   *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};
#line 2629 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void * ) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};
#line 2641 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct tegra_slink_chip_data {
   bool cs_hold_time ;
};
#line 2644 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct tegra_slink_data {
   struct device *dev ;
   struct spi_master *master ;
   struct tegra_slink_chip_data  const  *chip_data ;
   spinlock_t lock ;
   struct clk *clk ;
   struct reset_control *rst ;
   void *base ;
   phys_addr_t phys ;
   unsigned int irq ;
   u32 spi_max_frequency ;
   u32 cur_speed ;
   struct spi_device *cur_spi ;
   unsigned int cur_pos ;
   unsigned int cur_len ;
   unsigned int words_per_32bit ;
   unsigned int bytes_per_word ;
   unsigned int curr_dma_words ;
   unsigned int cur_direction ;
   unsigned int cur_rx_pos ;
   unsigned int cur_tx_pos ;
   unsigned int dma_buf_size ;
   unsigned int max_buf_size ;
   bool is_curr_dma_xfer ;
   struct completion rx_dma_complete ;
   struct completion tx_dma_complete ;
   u32 tx_status ;
   u32 rx_status ;
   u32 status_reg ;
   bool is_packed ;
   u32 packed_size ;
   u32 command_reg ;
   u32 command2_reg ;
   u32 dma_control_reg ;
   u32 def_command_reg ;
   u32 def_command2_reg ;
   struct completion xfer_completion ;
   struct spi_transfer *curr_xfer ;
   struct dma_chan *rx_dma_chan ;
   u32 *rx_dma_buf ;
   dma_addr_t rx_dma_phys ;
   struct dma_async_tx_descriptor *rx_dma_desc ;
   struct dma_chan *tx_dma_chan ;
   u32 *tx_dma_buf ;
   dma_addr_t tx_dma_phys ;
   struct dma_async_tx_descriptor *tx_dma_desc ;
};
#line 2691 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct ldv_struct_free_irq_7 {
   int arg0 ;
   int signal_pending ;
};
#line 2695 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct ldv_struct_interrupt_scenario_2 {
   int arg0 ;
   irqreturn_t (*arg1)(int  , void * ) ;
   irqreturn_t (*arg2)(int  , void * ) ;
   void *arg3 ;
   int signal_pending ;
};
#line 2702 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct ldv_struct_platform_instance_3 {
   struct platform_driver *arg0 ;
   int signal_pending ;
};
#line 2706 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct device_private {
   void *driver_data ;
};
/* compiler builtin: 
   void __builtin_va_copy(__builtin_va_list  , __builtin_va_list  ) ;  */
/* compiler builtin: 
   void *__builtin_frob_return_address(void * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_and_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_or(...) ;  */
/* compiler builtin: 
   int __builtin_popcountll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch(...) ;  */
/* compiler builtin: 
   float __builtin_atanf(float  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_addps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   unsigned long __builtin_strcspn(char const   * , char const   * ) ;  */
/* compiler builtin: 
   float __builtin_asinf(float  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_maxps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpckhps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   double __builtin_acos(double  ) ;  */
/* compiler builtin: 
   int __builtin___sprintf_chk(char * , int  , unsigned long  , char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_16(...) ;  */
/* compiler builtin: 
   double __builtin_cosh(double  ) ;  */
/* compiler builtin: 
   float __builtin_tanhf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_16(...) ;  */
/* compiler builtin: 
   void *__builtin_mempcpy(void * , void const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_1(...) ;  */
/* compiler builtin: 
   long double __builtin_sqrtl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_parity(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or(...) ;  */
/* compiler builtin: 
   long double __builtin_coshl(long double  ) ;  */
/* compiler builtin: 
   long double __builtin_cosl(long double  ) ;  */
/* compiler builtin: 
   float __builtin_cosf(float  ) ;  */
/* compiler builtin: 
   void __sync_synchronize(...) ;  */
/* compiler builtin: 
   long double __builtin_acosl(long double  ) ;  */
/* compiler builtin: 
   void *__builtin___mempcpy_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_or_and_fetch(...) ;  */
/* compiler builtin: 
   int __builtin_clz(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_4(...) ;  */
/* compiler builtin: 
   double __builtin_log10(double  ) ;  */
/* compiler builtin: 
   char *__builtin___strcat_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_modff(float  , float * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_4(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_n(...) ;  */
/* compiler builtin: 
   double __builtin_sin(double  ) ;  */
/* compiler builtin: 
   double __builtin_frexp(double  , int * ) ;  */
/* compiler builtin: 
   float __builtin_acosf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_add_and_fetch(...) ;  */
/* compiler builtin: 
   long double __builtin_sinhl(long double  ) ;  */
/* compiler builtin: 
   char *__builtin___stpcpy_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __atomic_signal_fence(int  ) ;  */
/* compiler builtin: 
   double __builtin_fabs(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_nand(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_2(...) ;  */
/* compiler builtin: 
   void __atomic_thread_fence(int  ) ;  */
/* compiler builtin: 
   void __atomic_store_16(...) ;  */
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_8(...) ;  */
/* compiler builtin: 
   short __builtin_bswap16(short  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_2(...) ;  */
/* compiler builtin: 
   _Bool __atomic_test_and_set(void * , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_8(...) ;  */
/* compiler builtin: 
   int __builtin_ctz(unsigned int  ) ;  */
/* compiler builtin: 
   char *__builtin_strpbrk(char const   * , char const   * ) ;  */
/* compiler builtin: 
   char *__builtin_strcpy(char * , char const   * ) ;  */
/* compiler builtin: 
   double __builtin_sqrt(double  ) ;  */
/* compiler builtin: 
   __builtin_va_list __builtin_next_arg(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_16(...) ;  */
/* compiler builtin: 
   void __atomic_clear(_Bool * , int  ) ;  */
/* compiler builtin: 
   void __atomic_store(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_2(...) ;  */
/* compiler builtin: 
   float __builtin_log10f(float  ) ;  */
/* compiler builtin: 
   long double __builtin_fabsl(long double  ) ;  */
/* compiler builtin: 
   long double __builtin_floorl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch(...) ;  */
/* compiler builtin: 
   float __builtin_floorf(float  ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_4(...) ;  */
/* compiler builtin: 
   void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_sub_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_nand_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_16(...) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_subps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   int __builtin_parityll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __builtin_va_end(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __builtin_bzero(void * , unsigned long  ) ;  */
/* compiler builtin: 
   _Bool __atomic_always_lock_free(unsigned long  , void * ) ;  */
/* compiler builtin: 
   int __builtin_strncmp(char const   * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_xor_and_fetch(...) ;  */
/* compiler builtin: 
   int __builtin___vsprintf_chk(char * , int  , unsigned long  , char const   * ,
                                __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __builtin_sqrtf(float  ) ;  */
/* compiler builtin: 
   double __builtin_nans(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_8(...) ;  */
/* compiler builtin: 
   double __builtin_exp(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_1(...) ;  */
/* compiler builtin: 
   int __builtin_strcmp(char const   * , char const   * ) ;  */
/* compiler builtin: 
   float __builtin_ldexpf(float  , int  ) ;  */
/* compiler builtin: 
   float __builtin_powif(float  , int  ) ;  */
/* compiler builtin: 
   long double __builtin_log10l(long double  ) ;  */
/* compiler builtin: 
   void *__builtin___memmove_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_and(...) ;  */
/* compiler builtin: 
   void *__builtin_return_address(unsigned int  ) ;  */
/* compiler builtin: 
   void __atomic_feraiseexcept(int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_4(...) ;  */
/* compiler builtin: 
   float __builtin_fabsf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_1(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_object_size(void * , int  ) ;  */
/* compiler builtin: 
   void *__builtin_alloca(unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin_va_arg_pack_len(void) ;  */
/* compiler builtin: 
   long double __builtin_tanl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_2(...) ;  */
/* compiler builtin: 
   void __sync_lock_release(...) ;  */
/* compiler builtin: 
   long double __builtin_modfl(long double  , long double * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_8(...) ;  */
/* compiler builtin: 
   char *__builtin_stpcpy(char * , char const   * ) ;  */
/* compiler builtin: 
   long double __builtin_sinl(long double  ) ;  */
/* compiler builtin: 
   double __builtin_asin(double  ) ;  */
/* compiler builtin: 
   float __builtin_sinhf(float  ) ;  */
/* compiler builtin: 
   int __builtin_ctzl(unsigned long  ) ;  */
/* compiler builtin: 
   long double __builtin_tanhl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add(...) ;  */
/* compiler builtin: 
   long __builtin_bswap64(long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_2(...) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_mulps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   double __builtin_tan(double  ) ;  */
/* compiler builtin: 
   char *__builtin_strncpy(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_inff(void) ;  */
/* compiler builtin: 
   void *__builtin___memset_chk(void * , int  , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_n(...) ;  */
/* compiler builtin: 
   double __builtin_huge_val(void) ;  */
/* compiler builtin: 
   int __builtin_clzl(unsigned long  ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_16(...) ;  */
/* compiler builtin: 
   float __builtin_frexpf(float  , int * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_n(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_1(...) ;  */
/* compiler builtin: 
   long double __builtin_fmodl(long double  ) ;  */
/* compiler builtin: 
   double __builtin_atan(double  ) ;  */
/* compiler builtin: 
   int __builtin___fprintf_chk(void * , int  , char const   *  , ...) ;  */
/* compiler builtin: 
   float __builtin_ceilf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_1(...) ;  */
/* compiler builtin: 
   void __builtin_return(void const   * ) ;  */
/* compiler builtin: 
   long double __builtin_asinl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_ffsll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_1(...) ;  */
/* compiler builtin: 
   int __builtin_va_arg_pack(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_4(...) ;  */
/* compiler builtin: 
   char *__builtin___strncpy_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   double __builtin_powi(double  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_2(...) ;  */
/* compiler builtin: 
   char *__builtin_strchr(char * , int  ) ;  */
/* compiler builtin: 
   char *__builtin___strncat_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __atomic_store_2(...) ;  */
/* compiler builtin: 
   long double __builtin_huge_vall(void) ;  */
/* compiler builtin: 
   int __builtin_ffsl(unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin___vprintf_chk(int  , char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpcklps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   char *__builtin_strncat(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin_ctzll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __builtin_stdarg_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_xor(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_4(...) ;  */
/* compiler builtin: 
   long double __builtin_frexpl(long double  , int * ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange(...) ;  */
/* compiler builtin: 
   float __builtin_tanf(float  ) ;  */
/* compiler builtin: 
   long double __builtin_logl(long double  ) ;  */
/* compiler builtin: 
   void __builtin_va_arg(__builtin_va_list  , unsigned long  , void * ) ;  */
/* compiler builtin: 
   long __builtin_expect(long  , long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_1(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_1(...) ;  */
/* compiler builtin: 
   int __builtin___printf_chk(int  , char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_2(...) ;  */
/* compiler builtin: 
   int __builtin___vfprintf_chk(void * , int  , char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   void __builtin_prefetch(void const   *  , ...) ;  */
/* compiler builtin: 
   long double __builtin_nansl(char const   * ) ;  */
/* compiler builtin: 
   double __builtin_fmod(double  ) ;  */
/* compiler builtin: 
   void __atomic_load(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_val_compare_and_swap(...) ;  */
/* compiler builtin: 
   void __atomic_store_4(...) ;  */
/* compiler builtin: 
   double __builtin_tanh(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_16(...) ;  */
/* compiler builtin: 
   void __builtin_unreachable(void) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_2(...) ;  */
/* compiler builtin: 
   long double __builtin_ldexpl(long double  , int  ) ;  */
/* compiler builtin: 
   void *__builtin_apply(void (*)() , void * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_sinf(float  ) ;  */
/* compiler builtin: 
   double __builtin_ceil(double  ) ;  */
/* compiler builtin: 
   void __atomic_exchange(...) ;  */
/* compiler builtin: 
   long double __builtin_powil(long double  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_8(...) ;  */
/* compiler builtin: 
   long double __builtin_expl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_constant_p(int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_16(...) ;  */
/* compiler builtin: 
   double __builtin_log(double  ) ;  */
/* compiler builtin: 
   float __builtin_expf(float  ) ;  */
/* compiler builtin: 
   int __builtin_types_compatible_p(unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   long double __builtin_atan2l(long double  , long double  ) ;  */
/* compiler builtin: 
   void *__builtin_apply_args(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_2(...) ;  */
/* compiler builtin: 
   float __builtin_logf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_2(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_strlen(char const   * ) ;  */
/* compiler builtin: 
   int __builtin_ffs(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_16(...) ;  */
/* compiler builtin: 
   double __builtin_inf(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_16(...) ;  */
/* compiler builtin: 
   void *__builtin___memcpy_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_4(...) ;  */
/* compiler builtin: 
   void __atomic_store_n(...) ;  */
/* compiler builtin: 
   void __builtin_trap(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_4(...) ;  */
/* compiler builtin: 
   int __builtin_parityl(unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_lock_test_and_set(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_strspn(char const   * , char const   * ) ;  */
/* compiler builtin: 
   void __builtin_varargs_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_16(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch(...) ;  */
/* compiler builtin: 
   double __builtin_nan(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_8(...) ;  */
/* compiler builtin: 
   int __builtin___snprintf_chk(char * , unsigned long  , int  , unsigned long  ,
                                char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch(...) ;  */
/* compiler builtin: 
   long double __builtin_atanl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_clzll(unsigned long long  ) ;  */
/* compiler builtin: 
   float __builtin_huge_valf(void) ;  */
/* compiler builtin: 
   float __builtin_coshf(float  ) ;  */
/* compiler builtin: 
   float __builtin_nansf(char const   * ) ;  */
/* compiler builtin: 
   void __atomic_store_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_add(...) ;  */
/* compiler builtin: 
   int __builtin___vsnprintf_chk(char * , unsigned long  , int  , unsigned long  ,
                                 char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __builtin_nanf(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_8(...) ;  */
/* compiler builtin: 
   _Bool __sync_bool_compare_and_swap(...) ;  */
/* compiler builtin: 
   double __builtin_atan2(double  , double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __builtin_tgmath(...) ;  */
/* compiler builtin: 
   int __builtin_popcountl(unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_1(...) ;  */
/* compiler builtin: 
   long double __builtin_ceill(long double  ) ;  */
/* compiler builtin: 
   void __atomic_store_1(...) ;  */
/* compiler builtin: 
   char *__builtin___strcpy_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_16(...) ;  */
/* compiler builtin: 
   double __builtin_floor(double  ) ;  */
/* compiler builtin: 
   double __builtin_cos(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_sub(...) ;  */
/* compiler builtin: 
   void *__builtin_memset(void * , int  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_2(...) ;  */
/* compiler builtin: 
   long double __builtin_nanl(char const   * ) ;  */
/* compiler builtin: 
   float __builtin_atan2f(float  , float  ) ;  */
/* compiler builtin: 
   _Bool __atomic_is_lock_free(unsigned long  , void * ) ;  */
/* compiler builtin: 
   int __builtin_popcount(unsigned int  ) ;  */
/* compiler builtin: 
   double __builtin_sinh(double  ) ;  */
/* compiler builtin: 
   void __builtin_bcopy(void const   * , void * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub(...) ;  */
/* compiler builtin: 
   void *__builtin_extract_return_addr(void * ) ;  */
/* compiler builtin: 
   int __builtin_bswap32(int  ) ;  */
/* compiler builtin: 
   double __builtin_ldexp(double  , int  ) ;  */
/* compiler builtin: 
   long double __builtin_infl(void) ;  */
/* compiler builtin: 
   float __builtin_fmodf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_4(...) ;  */
/* compiler builtin: 
   void *__builtin_frame_address(unsigned int  ) ;  */
#line 2 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
extern void abort(void) ;
#line 2 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
void __VERIFIER_error(void) 
{ 


  {
  {
#line 2
  abort();
  }
#line 2
  return;
}
}
#line 9 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
void __VERIFIER_assume(int expression ) 
{ 


  {
#line 9
  if (! expression) {
    LOOP: 
#line 9
    goto LOOP;
  }
#line 9
  return;
}
}
#line 15 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
_Bool __VERIFIER_nondet_bool(void) 
{ 
  _Bool val ;

  {
#line 15
  return (val);
}
}
#line 16 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
char __VERIFIER_nondet_char(void) 
{ 
  char val ;

  {
#line 16
  return (val);
}
}
#line 18 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
int __VERIFIER_nondet_int(void) 
{ 
  int val ;

  {
#line 18
  return (val);
}
}
#line 19 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
float __VERIFIER_nondet_float(void) 
{ 
  float val ;

  {
#line 19
  return (val);
}
}
#line 20 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
double __VERIFIER_nondet_double(void) 
{ 
  double val ;

  {
#line 20
  return (val);
}
}
#line 22 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
long __VERIFIER_nondet_long(void) 
{ 
  long val ;

  {
#line 22
  return (val);
}
}
#line 23 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
char *__VERIFIER_nondet_pchar(void) 
{ 
  char *val ;

  {
#line 23
  return (val);
}
}
#line 26 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
short __VERIFIER_nondet_short(void) 
{ 
  short val ;

  {
#line 26
  return (val);
}
}
#line 29 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned char __VERIFIER_nondet_uchar(void) 
{ 
  unsigned char val ;

  {
#line 29
  return (val);
}
}
#line 30 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned int __VERIFIER_nondet_uint(void) 
{ 
  unsigned int val ;

  {
#line 30
  return (val);
}
}
#line 31 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned long __VERIFIER_nondet_ulong(void) 
{ 
  unsigned long val ;

  {
#line 31
  return (val);
}
}
#line 32 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned int __VERIFIER_nondet_unsigned(void) 
{ 
  unsigned int val ;

  {
#line 32
  return (val);
}
}
#line 33 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
unsigned short __VERIFIER_nondet_ushort(void) 
{ 
  unsigned short val ;

  {
#line 33
  return (val);
}
}
#line 35 "/home/simmo/dev/goblint/sv-comp/goblint/includes/sv-comp.c"
void *__VERIFIER_nondet_pointer(void) 
{ 
  void *val ;

  {
#line 35
  return (val);
}
}
#line 6 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 7
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 7 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) ) 
{ 
  size_t i ;
  size_t j ;
  size_t i___0 ;
  size_t j___0 ;
  int r ;
  size_t k ;
  char *a ;
  char *b ;
  char c ;

  {
  {
#line 9
  i = (size_t )0;
  }
  {
#line 9
  while (1) {
    while_continue: /* CIL Label */ ;
#line 9
    if (! (i < count)) {
#line 9
      goto while_break;
    }
    {
#line 10
    j = (size_t )0;
    }
    {
#line 10
    while (1) {
      while_continue___0: /* CIL Label */ ;
#line 10
      if (! (j < count)) {
#line 10
        goto while_break___0;
      }
      {
#line 11
      (*comp)((void const   *)(ptr + i * size), (void const   *)(ptr + j * size));
#line 10
      j ++;
      }
    }
    while_break___0: /* CIL Label */ ;
    }
    {
#line 9
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 16
  i___0 = (size_t )0;
  }
  {
#line 16
  while (1) {
    while_continue___1: /* CIL Label */ ;
#line 16
    if (! (i___0 < count)) {
#line 16
      goto while_break___1;
    }
    {
#line 17
    j___0 = (size_t )0;
    }
    {
#line 17
    while (1) {
      while_continue___2: /* CIL Label */ ;
#line 17
      if (! (j___0 < count)) {
#line 17
        goto while_break___2;
      }
#line 19
      if (r) {
        {
#line 21
        k = (size_t )0;
        }
        {
#line 21
        while (1) {
          while_continue___3: /* CIL Label */ ;
#line 21
          if (! (k < size)) {
#line 21
            goto while_break___3;
          }
          {
#line 22
          a = (char *)((ptr + i___0 * size) + k);
#line 23
          b = (char *)((ptr + j___0 * size) + k);
#line 24
          c = *a;
#line 25
          *a = *b;
#line 26
          *b = c;
#line 21
          k ++;
          }
        }
        while_break___3: /* CIL Label */ ;
        }
      }
      {
#line 17
      j___0 ++;
      }
    }
    while_break___2: /* CIL Label */ ;
    }
    {
#line 16
    i___0 ++;
    }
  }
  while_break___1: /* CIL Label */ ;
  }
#line 33
  return;
}
}
#line 37
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 38
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 38 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) ) 
{ 
  size_t i ;
  void const   *a ;
  int tmp ;

  {
  {
#line 40
  i = (size_t )0;
  }
  {
#line 40
  while (1) {
    while_continue: /* CIL Label */ ;
#line 40
    if (! (i < count)) {
#line 40
      goto while_break;
    }
    {
#line 41
    a = ptr + i * size;
#line 42
    tmp = (*comp)(key, a);
    }
#line 42
    if (tmp == 0) {
#line 43
      return ((void *)a);
    }
    {
#line 40
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 47
  return ((void *)0);
}
}
#line 117 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
extern int ( __attribute__((__leaf__)) __sched_cpucount)(size_t __setsize , cpu_set_t const   *__setp )  __attribute__((__nothrow__)) ;
#line 119
extern cpu_set_t *( __attribute__((__leaf__)) __sched_cpualloc)(size_t __count )  __attribute__((__nothrow__)) ;
#line 120
extern void ( __attribute__((__leaf__)) __sched_cpufree)(cpu_set_t *__set )  __attribute__((__nothrow__)) ;
#line 54 "/usr/include/sched.h"
extern int ( __attribute__((__leaf__)) sched_setparam)(__pid_t __pid , struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 58
extern int ( __attribute__((__leaf__)) sched_getparam)(__pid_t __pid , struct sched_param *__param )  __attribute__((__nothrow__)) ;
#line 61
extern int ( __attribute__((__leaf__)) sched_setscheduler)(__pid_t __pid , int __policy ,
                                                           struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 65
extern int ( __attribute__((__leaf__)) sched_getscheduler)(__pid_t __pid )  __attribute__((__nothrow__)) ;
#line 68
extern int ( __attribute__((__leaf__)) sched_yield)(void)  __attribute__((__nothrow__)) ;
#line 71
extern int ( __attribute__((__leaf__)) sched_get_priority_max)(int __algorithm )  __attribute__((__nothrow__)) ;
#line 74
extern int ( __attribute__((__leaf__)) sched_get_priority_min)(int __algorithm )  __attribute__((__nothrow__)) ;
#line 78
extern int ( __attribute__((__leaf__)) sched_rr_get_interval)(__pid_t __pid , struct timespec *__t )  __attribute__((__nothrow__)) ;
#line 72 "/usr/include/time.h"
extern clock_t ( __attribute__((__leaf__)) clock)(void)  __attribute__((__nothrow__)) ;
#line 76
extern time_t ( __attribute__((__leaf__)) time)(time_t *__timer )  __attribute__((__nothrow__)) ;
#line 79
extern double ( __attribute__((__leaf__)) difftime)(time_t __time1 , time_t __time0 )  __attribute__((__nothrow__,
__const__)) ;
#line 83
extern time_t ( __attribute__((__leaf__)) mktime)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 100
extern size_t ( __attribute__((__leaf__)) strftime)(char * __restrict  __s , size_t __maxsize ,
                                                    char const   * __restrict  __format ,
                                                    struct tm  const  * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 116
extern size_t ( __attribute__((__leaf__)) strftime_l)(char * __restrict  __s , size_t __maxsize ,
                                                      char const   * __restrict  __format ,
                                                      struct tm  const  * __restrict  __tp ,
                                                      locale_t __loc )  __attribute__((__nothrow__)) ;
#line 132
extern struct tm *( __attribute__((__leaf__)) gmtime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 136
extern struct tm *( __attribute__((__leaf__)) localtime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 154
extern struct tm *( __attribute__((__leaf__)) gmtime_r)(time_t const   * __restrict  __timer ,
                                                        struct tm * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 159
extern struct tm *( __attribute__((__leaf__)) localtime_r)(time_t const   * __restrict  __timer ,
                                                           struct tm * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 179
extern char *( __attribute__((__leaf__)) asctime)(struct tm  const  *__tp )  __attribute__((__nothrow__)) ;
#line 183
extern char *( __attribute__((__leaf__)) ctime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 197
extern char *( __attribute__((__leaf__)) asctime_r)(struct tm  const  * __restrict  __tp ,
                                                    char * __restrict  __buf )  __attribute__((__nothrow__)) ;
#line 202
extern char *( __attribute__((__leaf__)) ctime_r)(time_t const   * __restrict  __timer ,
                                                  char * __restrict  __buf )  __attribute__((__nothrow__)) ;
#line 217
extern char *__tzname[2] ;
#line 218
extern int __daylight ;
#line 219
extern long __timezone ;
#line 224
extern char *tzname[2] ;
#line 228
extern void ( __attribute__((__leaf__)) tzset)(void)  __attribute__((__nothrow__)) ;
#line 232
extern int daylight ;
#line 233
extern long timezone ;
#line 249
extern time_t ( __attribute__((__leaf__)) timegm)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 251
extern time_t ( __attribute__((__leaf__)) timelocal)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 262
extern int ( __attribute__((__leaf__)) dysize)(int __year )  __attribute__((__nothrow__,
__const__)) ;
#line 272
extern int nanosleep(struct timespec  const  *__requested_time , struct timespec *__remaining ) ;
#line 276
extern int ( __attribute__((__leaf__)) clock_getres)(clockid_t __clock_id , struct timespec *__res )  __attribute__((__nothrow__)) ;
#line 279
extern int ( __attribute__((__leaf__)) clock_gettime)(clockid_t __clock_id , struct timespec *__tp )  __attribute__((__nothrow__)) ;
#line 282
extern int ( __attribute__((__leaf__)) clock_settime)(clockid_t __clock_id , struct timespec  const  *__tp )  __attribute__((__nothrow__)) ;
#line 311
extern int clock_nanosleep(clockid_t __clock_id , int __flags , struct timespec  const  *__req ,
                           struct timespec *__rem ) ;
#line 326
extern int ( __attribute__((__leaf__)) clock_getcpuclockid)(pid_t __pid , clockid_t *__clock_id )  __attribute__((__nothrow__)) ;
#line 331
extern int ( __attribute__((__leaf__)) timer_create)(clockid_t __clock_id , struct sigevent * __restrict  __evp ,
                                                     timer_t * __restrict  __timerid )  __attribute__((__nothrow__)) ;
#line 336
extern int ( __attribute__((__leaf__)) timer_delete)(timer_t __timerid )  __attribute__((__nothrow__)) ;
#line 340
extern int ( __attribute__((__leaf__)) timer_settime)(timer_t __timerid , int __flags ,
                                                      struct itimerspec  const  * __restrict  __value ,
                                                      struct itimerspec * __restrict  __ovalue )  __attribute__((__nothrow__)) ;
#line 345
extern int ( __attribute__((__leaf__)) timer_gettime)(timer_t __timerid , struct itimerspec *__value )  __attribute__((__nothrow__)) ;
#line 364
extern int ( __attribute__((__leaf__)) timer_getoverrun)(timer_t __timerid )  __attribute__((__nothrow__)) ;
#line 371
extern int ( __attribute__((__nonnull__(1), __leaf__)) timespec_get)(struct timespec *__ts ,
                                                                     int __base )  __attribute__((__nothrow__)) ;
#line 202 "/usr/include/pthread.h"
extern int ( __attribute__((__nonnull__(1,3))) pthread_create)(pthread_t *__newthread ,
                                                               pthread_attr_t const   *__attr ,
                                                               void *(*__start_routine)(void * ) ,
                                                               void *__arg )  __attribute__((__nothrow__)) ;
#line 211
extern void pthread_exit(void *__retval )  __attribute__((__noreturn__)) ;
#line 219
extern int pthread_join(pthread_t __th , void **__thread_return ) ;
#line 269
extern int ( __attribute__((__leaf__)) pthread_detach)(pthread_t __th )  __attribute__((__nothrow__)) ;
#line 273
extern pthread_t ( __attribute__((__leaf__)) pthread_self)(void)  __attribute__((__nothrow__,
__const__)) ;
#line 276
extern int ( __attribute__((__leaf__)) pthread_equal)(pthread_t __thread1 , pthread_t __thread2 )  __attribute__((__nothrow__,
__const__)) ;
#line 285
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_init)(pthread_attr_t *__attr )  __attribute__((__nothrow__)) ;
#line 288
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_destroy)(pthread_attr_t *__attr )  __attribute__((__nothrow__)) ;
#line 292
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getdetachstate)(pthread_attr_t const   *__attr ,
                                                                                      int *__detachstate )  __attribute__((__nothrow__)) ;
#line 297
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setdetachstate)(pthread_attr_t *__attr ,
                                                                                    int __detachstate )  __attribute__((__nothrow__)) ;
#line 303
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getguardsize)(pthread_attr_t const   *__attr ,
                                                                                    size_t *__guardsize )  __attribute__((__nothrow__)) ;
#line 308
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setguardsize)(pthread_attr_t *__attr ,
                                                                                  size_t __guardsize )  __attribute__((__nothrow__)) ;
#line 314
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getschedparam)(pthread_attr_t const   * __restrict  __attr ,
                                                                                     struct sched_param * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 319
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_setschedparam)(pthread_attr_t * __restrict  __attr ,
                                                                                     struct sched_param  const  * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 324
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getschedpolicy)(pthread_attr_t const   * __restrict  __attr ,
                                                                                      int * __restrict  __policy )  __attribute__((__nothrow__)) ;
#line 329
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setschedpolicy)(pthread_attr_t *__attr ,
                                                                                    int __policy )  __attribute__((__nothrow__)) ;
#line 333
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getinheritsched)(pthread_attr_t const   * __restrict  __attr ,
                                                                                       int * __restrict  __inherit )  __attribute__((__nothrow__)) ;
#line 338
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setinheritsched)(pthread_attr_t *__attr ,
                                                                                     int __inherit )  __attribute__((__nothrow__)) ;
#line 344
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getscope)(pthread_attr_t const   * __restrict  __attr ,
                                                                                int * __restrict  __scope )  __attribute__((__nothrow__)) ;
#line 349
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setscope)(pthread_attr_t *__attr ,
                                                                              int __scope )  __attribute__((__nothrow__)) ;
#line 353
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getstackaddr)(pthread_attr_t const   * __restrict  __attr ,
                                                                                    void ** __restrict  __stackaddr )  __attribute__((__nothrow__,
__deprecated__)) ;
#line 361
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstackaddr)(pthread_attr_t *__attr ,
                                                                                  void *__stackaddr )  __attribute__((__nothrow__,
__deprecated__)) ;
#line 366
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getstacksize)(pthread_attr_t const   * __restrict  __attr ,
                                                                                    size_t * __restrict  __stacksize )  __attribute__((__nothrow__)) ;
#line 373
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstacksize)(pthread_attr_t *__attr ,
                                                                                  size_t __stacksize )  __attribute__((__nothrow__)) ;
#line 379
extern int ( __attribute__((__nonnull__(1,2,3), __leaf__)) pthread_attr_getstack)(pthread_attr_t const   * __restrict  __attr ,
                                                                                  void ** __restrict  __stackaddr ,
                                                                                  size_t * __restrict  __stacksize )  __attribute__((__nothrow__)) ;
#line 387
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstack)(pthread_attr_t *__attr ,
                                                                              void *__stackaddr ,
                                                                              size_t __stacksize )  __attribute__((__nothrow__)) ;
#line 441
extern int ( __attribute__((__nonnull__(3), __leaf__)) pthread_setschedparam)(pthread_t __target_thread ,
                                                                              int __policy ,
                                                                              struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 446
extern int ( __attribute__((__nonnull__(2,3), __leaf__)) pthread_getschedparam)(pthread_t __target_thread ,
                                                                                int * __restrict  __policy ,
                                                                                struct sched_param * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 452
extern int ( __attribute__((__leaf__)) pthread_setschedprio)(pthread_t __target_thread ,
                                                             int __prio )  __attribute__((__nothrow__)) ;
#line 509
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) )  __attribute__((__goblint_stub__)) ;
#line 521
extern int pthread_setcancelstate(int __state , int *__oldstate ) ;
#line 525
extern int pthread_setcanceltype(int __type , int *__oldtype ) ;
#line 528
extern int pthread_cancel(pthread_t __th ) ;
#line 533
extern void pthread_testcancel(void) ;
#line 697
extern void __pthread_register_cancel(__pthread_unwind_buf_t *__buf ) ;
#line 709
extern void __pthread_unregister_cancel(__pthread_unwind_buf_t *__buf ) ;
#line 750
extern void __pthread_unwind_next(__pthread_unwind_buf_t *__buf )  __attribute__((__weak__,
__noreturn__)) ;
#line 766
extern int __sigsetjmp_cancel(struct __cancel_jmp_buf_tag *__env , int __savemask )  __asm__("__sigsetjmp") __attribute__((__returns_twice__,
__nothrow__)) ;
#line 781
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_init)(pthread_mutex_t *__mutex ,
                                                                           pthread_mutexattr_t const   *__mutexattr )  __attribute__((__nothrow__)) ;
#line 786
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_destroy)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 790
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_trylock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 794
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_lock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 800
extern int ( __attribute__((__nonnull__(1,2))) pthread_mutex_timedlock)(pthread_mutex_t * __restrict  __mutex ,
                                                                        struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 835
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_unlock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 840
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutex_getprioceiling)(pthread_mutex_t const   * __restrict  __mutex ,
                                                                                       int * __restrict  __prioceiling )  __attribute__((__nothrow__)) ;
#line 847
extern int ( __attribute__((__nonnull__(1,3), __leaf__)) pthread_mutex_setprioceiling)(pthread_mutex_t * __restrict  __mutex ,
                                                                                       int __prioceiling ,
                                                                                       int * __restrict  __old_ceiling )  __attribute__((__nothrow__)) ;
#line 855
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_consistent)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 874
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_init)(pthread_mutexattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 878
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_destroy)(pthread_mutexattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 882
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getpshared)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                       int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 888
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setpshared)(pthread_mutexattr_t *__attr ,
                                                                                     int __pshared )  __attribute__((__nothrow__)) ;
#line 894
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_gettype)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                    int * __restrict  __kind )  __attribute__((__nothrow__)) ;
#line 901
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_settype)(pthread_mutexattr_t *__attr ,
                                                                                  int __kind )  __attribute__((__nothrow__)) ;
#line 906
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getprotocol)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __protocol )  __attribute__((__nothrow__)) ;
#line 913
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setprotocol)(pthread_mutexattr_t *__attr ,
                                                                                      int __protocol )  __attribute__((__nothrow__)) ;
#line 918
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getprioceiling)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                           int * __restrict  __prioceiling )  __attribute__((__nothrow__)) ;
#line 924
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setprioceiling)(pthread_mutexattr_t *__attr ,
                                                                                         int __prioceiling )  __attribute__((__nothrow__)) ;
#line 930
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getrobust)(pthread_mutexattr_t const   *__attr ,
                                                                                      int *__robustness )  __attribute__((__nothrow__)) ;
#line 946
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setrobust)(pthread_mutexattr_t *__attr ,
                                                                                    int __robustness )  __attribute__((__nothrow__)) ;
#line 967
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlock_init)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                            pthread_rwlockattr_t const   * __restrict  __attr )  __attribute__((__nothrow__)) ;
#line 972
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlock_destroy)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 976
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_rdlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 980
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_tryrdlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 986
extern int ( __attribute__((__nonnull__(1,2))) pthread_rwlock_timedrdlock)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                           struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 1023
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_wrlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1027
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_trywrlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1033
extern int ( __attribute__((__nonnull__(1,2))) pthread_rwlock_timedwrlock)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                           struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 1071
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_unlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1078
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_init)(pthread_rwlockattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1082
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_destroy)(pthread_rwlockattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1086
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_rwlockattr_getpshared)(pthread_rwlockattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1092
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_setpshared)(pthread_rwlockattr_t *__attr ,
                                                                                      int __pshared )  __attribute__((__nothrow__)) ;
#line 1097
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_rwlockattr_getkind_np)(pthread_rwlockattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __pref )  __attribute__((__nothrow__)) ;
#line 1103
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_setkind_np)(pthread_rwlockattr_t *__attr ,
                                                                                      int __pref )  __attribute__((__nothrow__)) ;
#line 1112
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_cond_init)(pthread_cond_t * __restrict  __cond ,
                                                                          pthread_condattr_t const   * __restrict  __cond_attr )  __attribute__((__nothrow__)) ;
#line 1117
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_cond_destroy)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1121
extern int ( __attribute__((__nonnull__(1))) pthread_cond_signal)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1125
extern int ( __attribute__((__nonnull__(1))) pthread_cond_broadcast)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1133
extern int ( __attribute__((__nonnull__(1,2))) pthread_cond_wait)(pthread_cond_t * __restrict  __cond ,
                                                                  pthread_mutex_t * __restrict  __mutex ) ;
#line 1145
extern int ( __attribute__((__nonnull__(1,2,3))) pthread_cond_timedwait)(pthread_cond_t * __restrict  __cond ,
                                                                         pthread_mutex_t * __restrict  __mutex ,
                                                                         struct timespec  const  * __restrict  __abstime ) ;
#line 1194
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_init)(pthread_condattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1198
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_destroy)(pthread_condattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1202
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_condattr_getpshared)(pthread_condattr_t const   * __restrict  __attr ,
                                                                                      int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1208
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_setpshared)(pthread_condattr_t *__attr ,
                                                                                    int __pshared )  __attribute__((__nothrow__)) ;
#line 1213
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_condattr_getclock)(pthread_condattr_t const   * __restrict  __attr ,
                                                                                    __clockid_t * __restrict  __clock_id )  __attribute__((__nothrow__)) ;
#line 1219
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_setclock)(pthread_condattr_t *__attr ,
                                                                                  __clockid_t __clock_id )  __attribute__((__nothrow__)) ;
#line 1230
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_spin_init)(pthread_spinlock_t *__lock ,
                                                                          int __pshared )  __attribute__((__nothrow__)) ;
#line 1234
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_spin_destroy)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1238
extern int ( __attribute__((__nonnull__(1))) pthread_spin_lock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1242
extern int ( __attribute__((__nonnull__(1))) pthread_spin_trylock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1246
extern int ( __attribute__((__nonnull__(1))) pthread_spin_unlock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1254
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrier_init)(pthread_barrier_t * __restrict  __barrier ,
                                                                             pthread_barrierattr_t const   * __restrict  __attr ,
                                                                             unsigned int __count )  __attribute__((__nothrow__)) ;
#line 1260
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrier_destroy)(pthread_barrier_t *__barrier )  __attribute__((__nothrow__)) ;
#line 1264
extern int ( __attribute__((__nonnull__(1))) pthread_barrier_wait)(pthread_barrier_t *__barrier )  __attribute__((__nothrow__)) ;
#line 1269
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_init)(pthread_barrierattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1273
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_destroy)(pthread_barrierattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1277
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_barrierattr_getpshared)(pthread_barrierattr_t const   * __restrict  __attr ,
                                                                                         int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1283
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_setpshared)(pthread_barrierattr_t *__attr ,
                                                                                       int __pshared )  __attribute__((__nothrow__)) ;
#line 1297
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_key_create)(pthread_key_t *__key ,
                                                                           void (*__destr_function)(void * ) )  __attribute__((__nothrow__)) ;
#line 1302
extern int ( __attribute__((__leaf__)) pthread_key_delete)(pthread_key_t __key )  __attribute__((__nothrow__)) ;
#line 1305
extern void *( __attribute__((__leaf__)) pthread_getspecific)(pthread_key_t __key )  __attribute__((__nothrow__)) ;
#line 1308
extern int ( __attribute__((__leaf__)) pthread_setspecific)(pthread_key_t __key ,
                                                            void const   *__pointer )  __attribute__((__nothrow__,
__access__(__none__,2))) ;
#line 1315
extern int ( __attribute__((__nonnull__(2), __leaf__)) pthread_getcpuclockid)(pthread_t __thread_id ,
                                                                              __clockid_t *__clock_id )  __attribute__((__nothrow__)) ;
#line 1332
extern int ( __attribute__((__leaf__)) pthread_atfork)(void (*__prepare)(void) , void (*__parent)(void) ,
                                                       void (*__child)(void) )  __attribute__((__nothrow__)) ;
#line 5 "/home/simmo/dev/goblint/sv-comp/goblint/includes/pthread.c"
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) )  __attribute__((__goblint_stub__)) ;
#line 5 "/home/simmo/dev/goblint/sv-comp/goblint/includes/pthread.c"
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) ) 
{ 
  int top ;

  {
  {
#line 8
  (*init_routine)();
  }
#line 9
  return (top);
}
}
#line 2710 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
long ldv__builtin_expect(long exp , long c ) ;
#line 2711
void *ldv_dev_get_drvdata(struct device  const  *dev ) ;
#line 2712
int ldv_dev_set_drvdata(struct device *dev , void *data ) ;
#line 2713
struct spi_master *ldv_spi_alloc_master(struct device *host , unsigned int size ) ;
#line 2714
long ldv_is_err(void const   *ptr ) ;
#line 2715
long ldv_ptr_err(void const   *ptr ) ;
#line 2716
extern struct module __this_module ;
#line 2717
extern struct pv_irq_ops pv_irq_ops ;
#line 2718
int __dynamic_dev_dbg(struct _ddebug *arg0 , struct device  const  *arg1 , char const   *arg2 
                      , ...) ;
#line 2720
void *memcpy(void *arg0 , void const   *arg1 , size_t___0 arg2 ) ;
#line 2721
void warn_slowpath_null(char const   *arg0 , int const   arg1 ) ;
#line 2722 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static unsigned long arch_local_save_flags(void) 
{ 
  unsigned long __ret ;
  unsigned long __edi ;
  unsigned long __esi ;
  unsigned long __edx ;
  unsigned long __ecx ;
  unsigned long __eax ;
  long tmp ;

  {
  {
#line 2724
  __ret = 0UL;
#line 2725
  __edi = 0UL;
#line 2726
  __esi = 0UL;
#line 2727
  __edx = 0UL;
#line 2728
  __ecx = 0UL;
#line 2729
  __eax = 0UL;
#line 2733
  tmp = ldv__builtin_expect((long )((unsigned long )pv_irq_ops.save_fl.func == (unsigned long )((void *)0)),
                            0L);
  }
#line 2736
  if (tmp != 0L) {
    {
#line 2738
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ("/home/alpha/git/klever2/klever/native-scheduler-work-dir/scheduler/jobs/d5cd53f56669d61faa91054857893dbd/klever-core-work-dir/lkbce/arch/x86/include/asm/paravirt.h"),
                         "i" (804), "i" (12UL));
#line 2740
    __builtin_unreachable();
    }
  }
  {
#line 2744
  __asm__  volatile   ("771:\n\tcall *%c2;\n772:\n.pushsection .parainstructions,\"a\"\n .balign 8 \n .quad  771b\n  .byte %c1\n  .byte 772b-771b\n  .short %c3\n.popsection\n": "=a" (__eax): [paravirt_typenum] "i" (44UL),
                       [paravirt_opptr] "i" (& pv_irq_ops.save_fl.func), [paravirt_clobber] "i" (1): "memory",
                       "cc");
#line 2747
  __ret = __eax;
  }
#line 2748
  return (__ret);
}
}
#line 2751
__inline static long PTR_ERR(void const   *ptr ) ;
#line 2752
__inline static long IS_ERR(void const   *ptr ) ;
#line 2753 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static int arch_irqs_disabled_flags(unsigned long flags ) 
{ 


  {
#line 2756
  return ((flags & 512UL) == 0UL);
}
}
#line 2759
void __ldv_spin_lock(spinlock_t *arg0 ) ;
#line 2760
static void ldv___ldv_spin_lock_44(spinlock_t *ldv_func_arg1 ) ;
#line 2761
static void ldv___ldv_spin_lock_46(spinlock_t *ldv_func_arg1 ) ;
#line 2762
static void ldv___ldv_spin_lock_48(spinlock_t *ldv_func_arg1 ) ;
#line 2763
void ldv_spin_lock_lock_of_tegra_slink_data(void) ;
#line 2764
void ldv_spin_unlock_lock_of_tegra_slink_data(void) ;
#line 2765
void ldv_initialize(void) ;
#line 2766
int ldv_post_init(int init_ret_val ) ;
#line 2767
void ldv_pre_probe(void) ;
#line 2768
int ldv_post_probe(int probe_ret_val ) ;
#line 2769
void ldv_check_final_state(void) ;
#line 2770
void ldv_switch_to_interrupt_context(void) ;
#line 2771
void ldv_switch_to_process_context(void) ;
#line 2773 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void assume_abort_if_not(int cond ) 
{ 


  {
#line 2774
  if (! cond) {
    {
#line 2774
    abort();
    }
  }
#line 2775
  return;
}
}
#line 2776
int ldv_undef_int(void) ;
#line 2777
int ldv_undef_int_negative(void) ;
#line 2778
void ldv_free(void *s ) ;
#line 2779
void *ldv_xmalloc(size_t___0 size ) ;
#line 2780
void __raw_spin_lock_init(raw_spinlock_t *arg0 , char const   *arg1 , struct lock_class_key *arg2 ) ;
#line 2781
void _raw_spin_unlock_irqrestore(raw_spinlock_t *arg0 , unsigned long arg1 ) ;
#line 2782 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 2785
  return (& lock->__annonCompField19.rlock);
}
}
#line 2788 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
  {
#line 2792
  _raw_spin_unlock_irqrestore(& lock->__annonCompField19.rlock, flags);
  }
#line 2794
  return;
}
}
#line 2797
__inline static void ldv_spin_unlock_irqrestore_45(spinlock_t *lock , unsigned long flags ) ;
#line 2801
void __init_waitqueue_head(wait_queue_head_t *arg0 , char const   *arg1 , struct lock_class_key *arg2 ) ;
#line 2802 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
  {
#line 2807
  x->done = 0U;
#line 2808
  __init_waitqueue_head(& x->wait, (char const   *)"&x->wait", & __key);
  }
#line 2810
  return;
}
}
#line 2813 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void reinit_completion(struct completion *x ) 
{ 


  {
  {
#line 2816
  x->done = 0U;
  }
#line 2817
  return;
}
}
#line 2820
unsigned long wait_for_completion_timeout(struct completion *arg0 , unsigned long arg1 ) ;
#line 2821
long wait_for_completion_interruptible_timeout(struct completion *arg0 , unsigned long arg1 ) ;
#line 2822
void complete(struct completion *arg0 ) ;
#line 2823
unsigned long msecs_to_jiffies(unsigned int const   arg0 ) ;
#line 2824 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 2827
  return ((char const   *)kobj->name);
}
}
#line 2830 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static unsigned int readl(void const volatile   *addr ) 
{ 
  unsigned int ret ;

  {
  {
#line 2834
  __asm__  volatile   ("movl %1,%0": "=r" (ret): "m" (*((unsigned int volatile   *)addr)): "memory");
  }
#line 2835
  return (ret);
}
}
#line 2838 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void writel(unsigned int val , void volatile   *addr ) 
{ 


  {
  {
#line 2841
  __asm__  volatile   ("movl %0,%1": : "r" (val), "m" (*((unsigned int volatile   *)addr)): "memory");
  }
#line 2842
  return;
}
}
#line 2845
void *devm_ioremap_resource(struct device *arg0 , struct resource *arg1 ) ;
#line 2846 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 2850
  if ((unsigned long )dev->init_name != (unsigned long )((char const   *)0)) {
#line 2851
    return ((char const   *)dev->init_name);
  }
  {
#line 2855
  tmp = kobject_name((struct kobject  const  *)(& dev->kobj));
  }
#line 2857
  return (tmp);
}
}
#line 2860
static void *ldv_dev_get_drvdata_30(struct device  const  *dev ) ;
#line 2861
static void *ldv_dev_get_drvdata_42(struct device  const  *dev ) ;
#line 2862
static void *ldv_dev_get_drvdata_55(struct device  const  *dev ) ;
#line 2863
static void *ldv_dev_get_drvdata_56(struct device  const  *dev ) ;
#line 2864
static void *ldv_dev_get_drvdata_57(struct device  const  *dev ) ;
#line 2865
static void *ldv_dev_get_drvdata_58(struct device  const  *dev ) ;
#line 2866
static int ldv_dev_set_drvdata_31(struct device *dev , void *data ) ;
#line 2867
void put_device(struct device *arg0 ) ;
#line 2868
int dev_err(struct device  const  *arg0 , char const   *arg1  , ...) ;
#line 2869
struct resource *platform_get_resource(struct platform_device *arg0 , unsigned int arg1 ,
                                       unsigned int arg2 ) ;
#line 2871
int platform_get_irq(struct platform_device *arg0 , unsigned int arg1 ) ;
#line 2872
static int ldv___platform_driver_register_59(struct platform_driver *ldv_func_arg1 ,
                                             struct module *ldv_func_arg2 ) ;
#line 2874
static void ldv_platform_driver_unregister_60(struct platform_driver *ldv_func_arg1 ) ;
#line 2875 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void *platform_get_drvdata(struct platform_device  const  *pdev ) 
{ 
  void *tmp ;

  {
  {
#line 2880
  tmp = ldv_dev_get_drvdata_30((struct device  const  *)(& pdev->dev));
  }
#line 2882
  return (tmp);
}
}
#line 2885 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void platform_set_drvdata(struct platform_device *pdev , void *data ) 
{ 


  {
  {
#line 2889
  ldv_dev_set_drvdata_31(& pdev->dev, data);
  }
#line 2891
  return;
}
}
#line 2894
static int ldv_request_threaded_irq_52(unsigned int ldv_func_arg1 , irqreturn_t (*ldv_func_arg2)(int  ,
                                                                                                 void * ) ,
                                       irqreturn_t (*ldv_func_arg3)(int  , void * ) ,
                                       unsigned long ldv_func_arg4 , char const   *ldv_func_arg5 ,
                                       void *ldv_func_arg6 ) ;
#line 2899
static void ldv_free_irq_53(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) ;
#line 2900
static void ldv_free_irq_54(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) ;
#line 2901
void ldv_assert(char const   *desc , int expr ) ;
#line 2902
int clk_prepare(struct clk *arg0 ) ;
#line 2903
void clk_unprepare(struct clk *arg0 ) ;
#line 2904
struct clk *devm_clk_get(struct device *arg0 , char const   *arg1 ) ;
#line 2905
int clk_enable(struct clk *arg0 ) ;
#line 2906
void clk_disable(struct clk *arg0 ) ;
#line 2907
int clk_set_rate(struct clk *arg0 , unsigned long arg1 ) ;
#line 2908 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static int clk_prepare_enable(struct clk *clk ) 
{ 
  int ret ;

  {
  {
#line 2913
  ret = clk_prepare(clk);
  }
#line 2915
  if (ret != 0) {
#line 2916
    return (ret);
  }
  {
#line 2920
  ret = clk_enable(clk);
  }
#line 2922
  if (ret != 0) {
    {
#line 2924
    clk_unprepare(clk);
    }
  }
#line 2928
  return (ret);
}
}
#line 2931 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void clk_disable_unprepare(struct clk *clk ) 
{ 


  {
  {
#line 2935
  clk_disable(clk);
#line 2936
  clk_unprepare(clk);
  }
#line 2938
  return;
}
}
#line 2941
void __const_udelay(unsigned long arg0 ) ;
#line 2942
void sg_init_table(struct scatterlist *arg0 , unsigned int arg1 ) ;
#line 2943 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static int dmaengine_device_control(struct dma_chan *chan , enum dma_ctrl_cmd cmd ,
                                             unsigned long arg ) 
{ 
  int tmp ;

  {
#line 2948
  if ((unsigned long )(chan->device)->device_control != (unsigned long )((int (*)(struct dma_chan * ,
                                                                                  enum dma_ctrl_cmd  ,
                                                                                  unsigned long  ))0)) {
    {
#line 2952
    tmp = (*((chan->device)->device_control))(chan, cmd, arg);
    }
#line 2954
    return (tmp);
  }
#line 2957
  return (-38);
}
}
#line 2960 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static int dmaengine_slave_config(struct dma_chan *chan , struct dma_slave_config *config ) 
{ 
  int tmp ;

  {
  {
#line 2965
  tmp = dmaengine_device_control(chan, (enum dma_ctrl_cmd )3, (unsigned long )config);
  }
#line 2967
  return (tmp);
}
}
#line 2970 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static struct dma_async_tx_descriptor *dmaengine_prep_slave_single(struct dma_chan *chan ,
                                                                            dma_addr_t buf ,
                                                                            size_t___0 len ,
                                                                            enum dma_transfer_direction dir ,
                                                                            unsigned long flags ) 
{ 
  struct scatterlist sg ;
  struct dma_async_tx_descriptor *tmp ;

  {
  {
#line 2980
  sg_init_table(& sg, 1U);
#line 2981
  sg.dma_address = buf;
#line 2982
  sg.dma_length = len;
#line 2983
  tmp = (*((chan->device)->device_prep_slave_sg))(chan, & sg, 1U, dir, flags, (void *)0);
  }
#line 2985
  return (tmp);
}
}
#line 2988 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static int dmaengine_terminate_all(struct dma_chan *chan ) 
{ 
  int tmp ;

  {
  {
#line 2993
  tmp = dmaengine_device_control(chan, (enum dma_ctrl_cmd )0, 0UL);
  }
#line 2995
  return (tmp);
}
}
#line 2998 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static dma_cookie_t dmaengine_submit(struct dma_async_tx_descriptor *desc ) 
{ 
  dma_cookie_t tmp ;

  {
  {
#line 3003
  tmp = (*(desc->tx_submit))(desc);
  }
#line 3005
  return (tmp);
}
}
#line 3008 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void dma_async_issue_pending(struct dma_chan *chan ) 
{ 


  {
  {
#line 3012
  (*((chan->device)->device_issue_pending))(chan);
  }
#line 3014
  return;
}
}
#line 3017
struct dma_chan *dma_request_slave_channel_reason(struct device *arg0 , char const   *arg1 ) ;
#line 3018
void dma_release_channel(struct dma_chan *arg0 ) ;
#line 3019 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static int valid_dma_direction(int dma_direction ) 
{ 


  {
#line 3022
  return ((unsigned int )dma_direction <= 2U);
}
}
#line 3025 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static int is_device_dma_capable(struct device *dev ) 
{ 
  int tmp ;

  {
#line 3028
  if ((unsigned long )dev->dma_mask != (unsigned long )((u64 *)0ULL)) {
#line 3028
    if (*(dev->dma_mask) != 0ULL) {
      {
#line 3028
      tmp = 1;
      }
    } else {
      {
#line 3028
      tmp = 0;
      }
    }
  } else {
    {
#line 3028
    tmp = 0;
    }
  }
#line 3028
  return (tmp);
}
}
#line 3031
void debug_dma_alloc_coherent(struct device *arg0 , size_t___0 arg1 , dma_addr_t arg2 ,
                              void *arg3 ) ;
#line 3032
void debug_dma_free_coherent(struct device *arg0 , size_t___0 arg1 , void *arg2 ,
                             dma_addr_t arg3 ) ;
#line 3033
void debug_dma_sync_single_for_cpu(struct device *arg0 , dma_addr_t arg1 , size_t___0 arg2 ,
                                   int arg3 ) ;
#line 3035
void debug_dma_sync_single_for_device(struct device *arg0 , dma_addr_t arg1 , size_t___0 arg2 ,
                                      int arg3 ) ;
#line 3037
extern struct device x86_dma_fallback_dev ;
#line 3038
extern struct dma_map_ops *dma_ops ;
#line 3039 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev ) 
{ 
  long tmp ;

  {
  {
#line 3044
  tmp = ldv__builtin_expect((long )((unsigned long )dev == (unsigned long )((struct device *)0)),
                            0L);
  }
#line 3047
  if (tmp != 0L) {
#line 3048
    return (dma_ops);
  } else
#line 3047
  if ((unsigned long )dev->archdata.dma_ops == (unsigned long )((struct dma_map_ops *)0)) {
#line 3048
    return (dma_ops);
  } else {
#line 3050
    return (dev->archdata.dma_ops);
  }
}
}
#line 3054 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void dma_sync_single_for_cpu(struct device *dev , dma_addr_t addr ,
                                             size_t___0 size , enum dma_data_direction dir ) 
{ 
  struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 3063
  tmp = get_dma_ops(dev);
#line 3064
  ops = tmp;
#line 3065
  tmp___0 = valid_dma_direction((int )dir);
#line 3066
  tmp___1 = ldv__builtin_expect((long )(tmp___0 == 0), 0L);
  }
#line 3068
  if (tmp___1 != 0L) {
    {
#line 3070
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ("include/asm-generic/dma-mapping-common.h"),
                         "i" (103), "i" (12UL));
#line 3072
    __builtin_unreachable();
    }
  }
#line 3076
  if ((unsigned long )ops->sync_single_for_cpu != (unsigned long )((void (*)(struct device * ,
                                                                             dma_addr_t  ,
                                                                             size_t___0  ,
                                                                             enum dma_data_direction  ))0)) {
    {
#line 3081
    (*(ops->sync_single_for_cpu))(dev, addr, size, dir);
    }
  }
  {
#line 3086
  debug_dma_sync_single_for_cpu(dev, addr, size, (int )dir);
  }
#line 3088
  return;
}
}
#line 3091 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void dma_sync_single_for_device(struct device *dev , dma_addr_t addr ,
                                                size_t___0 size , enum dma_data_direction dir ) 
{ 
  struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 3100
  tmp = get_dma_ops(dev);
#line 3101
  ops = tmp;
#line 3102
  tmp___0 = valid_dma_direction((int )dir);
#line 3103
  tmp___1 = ldv__builtin_expect((long )(tmp___0 == 0), 0L);
  }
#line 3105
  if (tmp___1 != 0L) {
    {
#line 3107
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ("include/asm-generic/dma-mapping-common.h"),
                         "i" (115), "i" (12UL));
#line 3109
    __builtin_unreachable();
    }
  }
#line 3113
  if ((unsigned long )ops->sync_single_for_device != (unsigned long )((void (*)(struct device * ,
                                                                                dma_addr_t  ,
                                                                                size_t___0  ,
                                                                                enum dma_data_direction  ))0)) {
    {
#line 3118
    (*(ops->sync_single_for_device))(dev, addr, size, dir);
    }
  }
  {
#line 3123
  debug_dma_sync_single_for_device(dev, addr, size, (int )dir);
  }
#line 3125
  return;
}
}
#line 3128 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static unsigned long dma_alloc_coherent_mask(struct device *dev , gfp_t gfp ) 
{ 
  unsigned long dma_mask ;

  {
  {
#line 3132
  dma_mask = 0UL;
#line 3133
  dma_mask = (unsigned long )dev->coherent_dma_mask;
  }
#line 3134
  if (dma_mask == 0UL) {
#line 3135
    if ((int )gfp & 1) {
      {
#line 3135
      dma_mask = 16777215UL;
      }
    } else {
      {
#line 3135
      dma_mask = 4294967295UL;
      }
    }
  }
#line 3138
  return (dma_mask);
}
}
#line 3141 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static gfp_t dma_alloc_coherent_gfp_flags(struct device *dev , gfp_t gfp ) 
{ 
  unsigned long dma_mask ;
  unsigned long tmp ;

  {
  {
#line 3147
  tmp = dma_alloc_coherent_mask(dev, gfp);
#line 3148
  dma_mask = tmp;
  }
#line 3150
  if ((unsigned long long )dma_mask <= 16777215ULL) {
    {
#line 3151
    gfp |= 1U;
    }
  }
#line 3154
  if ((unsigned long long )dma_mask <= 4294967295ULL) {
#line 3154
    if ((gfp & 1U) == 0U) {
      {
#line 3155
      gfp |= 4U;
      }
    }
  }
#line 3158
  return (gfp);
}
}
#line 3161 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void *dma_alloc_attrs(struct device *dev , size_t___0 size , dma_addr_t *dma_handle ,
                                      gfp_t gfp , struct dma_attrs *attrs ) 
{ 
  struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  void *memory ;
  int tmp___0 ;
  gfp_t tmp___1 ;

  {
  {
#line 3171
  tmp = get_dma_ops(dev);
#line 3172
  ops = tmp;
#line 3173
  gfp &= 4294967288U;
  }
#line 3175
  if ((unsigned long )dev == (unsigned long )((struct device *)0)) {
    {
#line 3176
    dev = & x86_dma_fallback_dev;
    }
  }
  {
#line 3180
  tmp___0 = is_device_dma_capable(dev);
  }
#line 3182
  if (tmp___0 == 0) {
#line 3183
    return ((void *)0);
  }
#line 3186
  if ((unsigned long )ops->alloc == (unsigned long )((void *(*)(struct device * ,
                                                                size_t___0  , dma_addr_t * ,
                                                                gfp_t  , struct dma_attrs * ))0)) {
#line 3189
    return ((void *)0);
  }
  {
#line 3193
  tmp___1 = dma_alloc_coherent_gfp_flags(dev, gfp);
#line 3194
  memory = (*(ops->alloc))(dev, size, dma_handle, tmp___1, attrs);
#line 3195
  debug_dma_alloc_coherent(dev, size, *dma_handle, memory);
  }
#line 3197
  return (memory);
}
}
#line 3200 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void dma_free_attrs(struct device *dev , size_t___0 size , void *vaddr ,
                                    dma_addr_t bus , struct dma_attrs *attrs ) 
{ 
  struct dma_map_ops *ops ;
  struct dma_map_ops *tmp ;
  int __ret_warn_on ;
  unsigned long _flags ;
  int tmp___0 ;
  long tmp___1 ;

  {
  {
#line 3211
  tmp = get_dma_ops(dev);
#line 3212
  ops = tmp;
#line 3213
  _flags = arch_local_save_flags();
#line 3214
  tmp___0 = arch_irqs_disabled_flags(_flags);
#line 3215
  __ret_warn_on = tmp___0 != 0;
#line 3216
  tmp___1 = ldv__builtin_expect((long )(__ret_warn_on != 0), 0L);
  }
#line 3218
  if (tmp___1 != 0L) {
    {
#line 3220
    warn_slowpath_null((char const   *)"/home/alpha/git/klever2/klever/native-scheduler-work-dir/scheduler/jobs/d5cd53f56669d61faa91054857893dbd/klever-core-work-dir/lkbce/arch/x86/include/asm/dma-mapping.h",
                       (int const   )166);
    }
  }
  {
#line 3226
  ldv__builtin_expect((long )(__ret_warn_on != 0), 0L);
#line 3227
  debug_dma_free_coherent(dev, size, vaddr, bus);
  }
#line 3229
  if ((unsigned long )ops->free != (unsigned long )((void (*)(struct device * , size_t___0  ,
                                                              void * , dma_addr_t  ,
                                                              struct dma_attrs * ))0)) {
    {
#line 3233
    (*(ops->free))(dev, size, vaddr, bus, attrs);
    }
  }
#line 3237
  return;
}
}
#line 3240
int __pm_runtime_idle(struct device *arg0 , int arg1 ) ;
#line 3241
int __pm_runtime_resume(struct device *arg0 , int arg1 ) ;
#line 3242
void pm_runtime_enable(struct device *arg0 ) ;
#line 3243
void __pm_runtime_disable(struct device *arg0 , bool arg1 ) ;
#line 3244 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static bool pm_runtime_status_suspended(struct device *dev ) 
{ 


  {
#line 3247
  return ((bool )((unsigned int )dev->power.runtime_status == 2U));
}
}
#line 3250 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static bool pm_runtime_enabled(struct device *dev ) 
{ 


  {
#line 3253
  return ((bool )((unsigned int )*((unsigned char *)dev + 1040UL) == 0U));
}
}
#line 3256 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static int pm_runtime_get_sync(struct device *dev ) 
{ 
  int tmp ;

  {
  {
#line 3261
  tmp = __pm_runtime_resume(dev, 4);
  }
#line 3263
  return (tmp);
}
}
#line 3266 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static int pm_runtime_put(struct device *dev ) 
{ 
  int tmp ;

  {
  {
#line 3271
  tmp = __pm_runtime_idle(dev, 5);
  }
#line 3273
  return (tmp);
}
}
#line 3276 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void pm_runtime_disable(struct device *dev ) 
{ 


  {
  {
#line 3280
  __pm_runtime_disable(dev, (bool )1);
  }
#line 3282
  return;
}
}
#line 3285 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static int of_property_read_u32_array(struct device_node  const  *np , char const   *propname ,
                                               u32 *out_values , size_t___0 sz ) 
{ 


  {
#line 3289
  return (-38);
}
}
#line 3292 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static int of_property_read_u32(struct device_node  const  *np , char const   *propname ,
                                         u32 *out_value ) 
{ 
  int tmp ;

  {
  {
#line 3298
  tmp = of_property_read_u32_array(np, propname, out_value, (size_t___0 )1UL);
  }
#line 3300
  return (tmp);
}
}
#line 3303
void *ldv_malloc(size_t___0 size ) ;
#line 3304 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static struct of_device_id  const  *__of_match_device(struct of_device_id  const  *matches ,
                                                               struct device  const  *dev ) 
{ 
  void *tmp ;

  {
  {
#line 3308
  tmp = ldv_malloc((size_t___0 )sizeof(struct of_device_id ));
  }
#line 3308
  return ((struct of_device_id  const  *)tmp);
}
}
#line 3311
int reset_control_assert(struct reset_control *arg0 ) ;
#line 3312
int reset_control_deassert(struct reset_control *arg0 ) ;
#line 3313
struct reset_control *devm_reset_control_get(struct device *arg0 , char const   *arg1 ) ;
#line 3314 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void *spi_master_get_devdata(struct spi_master *master ) 
{ 
  void *tmp ;

  {
  {
#line 3319
  tmp = ldv_dev_get_drvdata_42((struct device  const  *)(& master->dev));
  }
#line 3321
  return (tmp);
}
}
#line 3324 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void spi_master_put(struct spi_master *master ) 
{ 


  {
#line 3327
  if ((unsigned long )master != (unsigned long )((struct spi_master *)0)) {
    {
#line 3329
    put_device(& master->dev);
    }
  }
#line 3333
  return;
}
}
#line 3336
int spi_master_suspend(struct spi_master *arg0 ) ;
#line 3337
int spi_master_resume(struct spi_master *arg0 ) ;
#line 3338
static struct spi_master *ldv_spi_alloc_master_51(struct device *host , unsigned int size ) ;
#line 3339
int devm_spi_register_master(struct device *arg0 , struct spi_master *arg1 ) ;
#line 3340
static int tegra_slink_runtime_suspend(struct device *dev ) ;
#line 3341
static int tegra_slink_runtime_resume(struct device *dev ) ;
#line 3342 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static u32 tegra_slink_readl(struct tegra_slink_data *tspi , unsigned long reg ) 
{ 
  unsigned int tmp ;

  {
  {
#line 3347
  tmp = readl((void const volatile   *)(tspi->base + reg));
  }
#line 3349
  return (tmp);
}
}
#line 3352 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void tegra_slink_writel(struct tegra_slink_data *tspi , u32 val ,
                                        unsigned long reg ) 
{ 


  {
  {
#line 3357
  writel(val, (void volatile   *)(tspi->base + reg));
  }
#line 3359
  if (reg != 256UL) {
    {
#line 3361
    readl((void const volatile   *)(tspi->base + 16U));
    }
  }
#line 3365
  return;
}
}
#line 3368 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void tegra_slink_clear_status(struct tegra_slink_data *tspi ) 
{ 
  u32 val_write ;

  {
  {
#line 3373
  tegra_slink_readl(tspi, 8UL);
#line 3374
  val_write = 1124859904U;
#line 3375
  tegra_slink_writel(tspi, val_write, 8UL);
  }
#line 3377
  return;
}
}
#line 3380 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static u32 tegra_slink_get_packed_size(struct tegra_slink_data *tspi , struct spi_transfer *t ) 
{ 


  {
#line 3384
  if (tspi->bytes_per_word == 0U) {
#line 3385
    goto case_0;
  }
#line 3388
  if (tspi->bytes_per_word == 1U) {
#line 3389
    goto case_1;
  }
#line 3392
  if (tspi->bytes_per_word == 2U) {
#line 3393
    goto case_2;
  }
#line 3396
  if (tspi->bytes_per_word == 4U) {
#line 3397
    goto case_4;
  }
#line 3400
  goto switch_default;
  case_0: 
  {

  }
#line 3402
  return (0U);
  case_1: 
  {

  }
#line 3404
  return (2097152U);
  case_2: 
  {

  }
#line 3406
  return (4194304U);
  case_4: 
  {

  }
#line 3408
  return (6291456U);
  switch_default: 
  {

  }
#line 3410
  return (0U);
  switch_break: 
  {

  }
#line 3414
  return (0U);
}
}
#line 3415 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static unsigned int tegra_slink_calculate_curr_xfer_param(struct spi_device *spi ,
                                                          struct tegra_slink_data *tspi ,
                                                          struct spi_transfer *t ) 
{ 
  unsigned int remain_len ;
  unsigned int max_word ;
  unsigned int bits_per_word ;
  unsigned int max_len ;
  unsigned int total_fifo_words ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;

  {
  {
#line 3429
  remain_len = t->len - tspi->cur_pos;
#line 3430
  bits_per_word = (unsigned int )t->bits_per_word;
#line 3431
  tspi->bytes_per_word = (bits_per_word + 7U) / 8U;
  }
#line 3432
  if (bits_per_word == 8U) {
    {
#line 3433
    tspi->is_packed = (bool )1;
#line 3434
    tspi->words_per_32bit = 32U / bits_per_word;
    }
  } else
#line 3432
  if (bits_per_word == 16U) {
    {
#line 3433
    tspi->is_packed = (bool )1;
#line 3434
    tspi->words_per_32bit = 32U / bits_per_word;
    }
  } else {
    {
#line 3436
    tspi->is_packed = (bool )0;
#line 3437
    tspi->words_per_32bit = 1U;
    }
  }
  {
#line 3440
  tspi->packed_size = tegra_slink_get_packed_size(tspi, t);
  }
#line 3442
  if ((int )tspi->is_packed) {
    {
#line 3443
    _min1 = remain_len;
#line 3444
    _min2 = tspi->max_buf_size;
    }
#line 3445
    if (_min1 < _min2) {
      {
#line 3445
      max_len = _min1;
      }
    } else {
      {
#line 3445
      max_len = _min2;
      }
    }
    {
#line 3446
    tspi->curr_dma_words = max_len / tspi->bytes_per_word;
#line 3447
    total_fifo_words = max_len / 4U;
    }
  } else {
    {
#line 3449
    max_word = (remain_len - 1U) / tspi->bytes_per_word + 1U;
#line 3450
    _min1___0 = max_word;
#line 3451
    _min2___0 = tspi->max_buf_size / 4U;
    }
#line 3452
    if (_min1___0 < _min2___0) {
      {
#line 3452
      max_word = _min1___0;
      }
    } else {
      {
#line 3452
      max_word = _min2___0;
      }
    }
    {
#line 3453
    tspi->curr_dma_words = max_word;
#line 3454
    total_fifo_words = max_word;
    }
  }
#line 3456
  return (total_fifo_words);
}
}
#line 3459 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static unsigned int tegra_slink_fill_tx_fifo_from_client_txbuf(struct tegra_slink_data *tspi ,
                                                               struct spi_transfer *t ) 
{ 
  unsigned int nbytes ;
  unsigned int tx_empty_count ;
  u32 fifo_status ;
  unsigned int max_n_32bit ;
  unsigned int i ;
  unsigned int count ;
  unsigned int written_words ;
  unsigned int fifo_words_left ;
  u8 *tx_buf ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  u32 x ;
  u8 *tmp ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;
  u32 x___0 ;
  u8 *tmp___0 ;

  {
  {
#line 3481
  tx_buf = (u8 *)(t->tx_buf + (unsigned long )tspi->cur_tx_pos);
#line 3482
  fifo_status = tegra_slink_readl(tspi, 28UL);
#line 3483
  tx_empty_count = fifo_status & 63U;
  }
#line 3485
  if ((int )tspi->is_packed) {
    {
#line 3486
    fifo_words_left = tx_empty_count * tspi->words_per_32bit;
#line 3487
    _min1 = fifo_words_left;
#line 3488
    _min2 = tspi->curr_dma_words;
    }
#line 3489
    if (_min1 < _min2) {
      {
#line 3489
      written_words = _min1;
      }
    } else {
      {
#line 3489
      written_words = _min2;
      }
    }
    {
#line 3490
    nbytes = written_words * tspi->bytes_per_word;
#line 3491
    max_n_32bit = (nbytes + 3U) / 4U;
#line 3492
    count = 0U;
    }
#line 3493
    goto ldv_27919;
    ldv_27918: 
    {
#line 3495
    x = 0U;
#line 3496
    i = 0U;
    }
#line 3497
    goto ldv_27916;
    ldv_27915: 
    {
#line 3499
    tmp = tx_buf;
#line 3500
    tx_buf ++;
#line 3501
    x |= (unsigned int )*tmp << (int )(i * 8U);
#line 3502
    i ++;
#line 3503
    nbytes --;
    }
    ldv_27916: 
    {

    }
#line 3505
    if (i <= 3U) {
#line 3505
      if (nbytes != 0U) {
#line 3506
        goto ldv_27915;
      }
    }
    {
#line 3510
    tegra_slink_writel(tspi, x, 256UL);
#line 3511
    count ++;
    }
    ldv_27919: 
    {

    }
#line 3514
    if (count < max_n_32bit) {
#line 3515
      goto ldv_27918;
    }
  } else {
    {
#line 3519
    _min1___0 = tspi->curr_dma_words;
#line 3520
    _min2___0 = tx_empty_count;
    }
#line 3521
    if (_min1___0 < _min2___0) {
      {
#line 3521
      max_n_32bit = _min1___0;
      }
    } else {
      {
#line 3521
      max_n_32bit = _min2___0;
      }
    }
    {
#line 3522
    written_words = max_n_32bit;
#line 3523
    nbytes = written_words * tspi->bytes_per_word;
#line 3524
    count = 0U;
    }
#line 3525
    goto ldv_27929;
    ldv_27928: 
    {
#line 3527
    x___0 = 0U;
#line 3528
    i = 0U;
    }
#line 3529
    goto ldv_27926;
    ldv_27925: 
    {
#line 3531
    tmp___0 = tx_buf;
#line 3532
    tx_buf ++;
#line 3533
    x___0 |= (unsigned int )*tmp___0 << (int )(i * 8U);
#line 3534
    i ++;
#line 3535
    nbytes --;
    }
    ldv_27926: 
    {

    }
#line 3537
    if (nbytes != 0U) {
#line 3537
      if (i < tspi->bytes_per_word) {
#line 3538
        goto ldv_27925;
      }
    }
    {
#line 3542
    tegra_slink_writel(tspi, x___0, 256UL);
#line 3543
    count ++;
    }
    ldv_27929: 
    {

    }
#line 3546
    if (count < max_n_32bit) {
#line 3547
      goto ldv_27928;
    }
  }
  {
#line 3551
  tspi->cur_tx_pos += written_words * tspi->bytes_per_word;
  }
#line 3552
  return (written_words);
}
}
#line 3555 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static unsigned int tegra_slink_read_rx_fifo_to_client_rxbuf(struct tegra_slink_data *tspi ,
                                                             struct spi_transfer *t ) 
{ 
  unsigned int rx_full_count ;
  u32 fifo_status ;
  unsigned int i ;
  unsigned int count ;
  unsigned int read_words ;
  unsigned int len ;
  u8 *rx_buf ;
  u32 x ;
  u32 tmp ;
  u8 *tmp___0 ;
  u32 x___0 ;
  u32 tmp___1 ;
  u8 *tmp___2 ;

  {
  {
#line 3573
  read_words = 0U;
#line 3574
  rx_buf = (u8 *)(t->rx_buf + (unsigned long )tspi->cur_rx_pos);
#line 3575
  fifo_status = tegra_slink_readl(tspi, 28UL);
#line 3576
  rx_full_count = (fifo_status & 4128768U) >> 16;
  }
#line 3578
  if ((int )tspi->is_packed) {
    {
#line 3579
    len = tspi->curr_dma_words * tspi->bytes_per_word;
#line 3580
    count = 0U;
    }
#line 3581
    goto ldv_27947;
    ldv_27946: 
    {
#line 3584
    tmp = tegra_slink_readl(tspi, 384UL);
#line 3585
    x = tmp;
#line 3586
    i = 0U;
    }
#line 3588
    goto ldv_27944;
    ldv_27943: 
    {
#line 3590
    tmp___0 = rx_buf;
#line 3591
    rx_buf ++;
#line 3592
    *tmp___0 = (u8 )(x >> (int )(i * 8U));
#line 3593
    i ++;
#line 3594
    len --;
    }
    ldv_27944: 
    {

    }
#line 3596
    if (len != 0U) {
#line 3596
      if (i <= 3U) {
#line 3597
        goto ldv_27943;
      }
    }
    {
#line 3600
    count ++;
    }
    ldv_27947: 
    {

    }
#line 3602
    if (count < rx_full_count) {
#line 3603
      goto ldv_27946;
    }
    {
#line 3606
    tspi->cur_rx_pos += tspi->curr_dma_words * tspi->bytes_per_word;
#line 3607
    read_words += tspi->curr_dma_words;
    }
  } else {
    {
#line 3609
    count = 0U;
    }
#line 3610
    goto ldv_27954;
    ldv_27953: 
    {
#line 3613
    tmp___1 = tegra_slink_readl(tspi, 384UL);
#line 3614
    x___0 = tmp___1;
#line 3615
    i = 0U;
    }
#line 3617
    goto ldv_27951;
    ldv_27950: 
    {
#line 3619
    tmp___2 = rx_buf;
#line 3620
    rx_buf ++;
#line 3621
    *tmp___2 = (u8 )(x___0 >> (int )(i * 8U));
#line 3622
    i ++;
    }
    ldv_27951: 
    {

    }
#line 3624
    if (i < tspi->bytes_per_word) {
#line 3625
      goto ldv_27950;
    }
    {
#line 3628
    count ++;
    }
    ldv_27954: 
    {

    }
#line 3630
    if (count < rx_full_count) {
#line 3631
      goto ldv_27953;
    }
    {
#line 3634
    tspi->cur_rx_pos += rx_full_count * tspi->bytes_per_word;
#line 3635
    read_words += rx_full_count;
    }
  }
#line 3637
  return (read_words);
}
}
#line 3640 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void tegra_slink_copy_client_txbuf_to_spi_txbuf(struct tegra_slink_data *tspi ,
                                                       struct spi_transfer *t ) 
{ 
  unsigned int len ;
  unsigned int i ;
  unsigned int count ;
  u8 *tx_buf ;
  unsigned int consume ;
  u32 x ;
  u8 *tmp ;

  {
  {
#line 3652
  dma_sync_single_for_cpu(tspi->dev, tspi->tx_dma_phys, tspi->dma_buf_size, (enum dma_data_direction )1);
  }
#line 3655
  if ((int )tspi->is_packed) {
    {
#line 3657
    len = tspi->curr_dma_words * tspi->bytes_per_word;
#line 3658
    memcpy((void *)tspi->tx_dma_buf, t->tx_buf + (unsigned long )tspi->cur_pos, len);
    }
  } else {
    {
#line 3661
    tx_buf = (u8 *)(t->tx_buf + (unsigned long )tspi->cur_tx_pos);
#line 3662
    consume = tspi->curr_dma_words * tspi->bytes_per_word;
#line 3663
    count = 0U;
    }
#line 3664
    goto ldv_27970;
    ldv_27969: 
    {
#line 3666
    x = 0U;
#line 3667
    i = 0U;
    }
#line 3668
    goto ldv_27967;
    ldv_27966: 
    {
#line 3670
    tmp = tx_buf;
#line 3671
    tx_buf ++;
#line 3672
    x |= (unsigned int )*tmp << (int )(i * 8U);
#line 3673
    i ++;
#line 3674
    consume --;
    }
    ldv_27967: 
    {

    }
#line 3676
    if (consume != 0U) {
#line 3676
      if (i < tspi->bytes_per_word) {
#line 3677
        goto ldv_27966;
      }
    }
    {
#line 3680
    *(tspi->tx_dma_buf + (unsigned long )count) = x;
#line 3681
    count ++;
    }
    ldv_27970: 
    {

    }
#line 3683
    if (count < tspi->curr_dma_words) {
#line 3684
      goto ldv_27969;
    }
  }
  {
#line 3689
  tspi->cur_tx_pos += tspi->curr_dma_words * tspi->bytes_per_word;
#line 3690
  dma_sync_single_for_device(tspi->dev, tspi->tx_dma_phys, tspi->dma_buf_size, (enum dma_data_direction )1);
  }
#line 3693
  return;
}
}
#line 3696 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void tegra_slink_copy_spi_rxbuf_to_client_rxbuf(struct tegra_slink_data *tspi ,
                                                       struct spi_transfer *t ) 
{ 
  unsigned int len ;
  unsigned int i ;
  unsigned int count ;
  unsigned char *rx_buf ;
  u32 rx_mask ;
  u32 x ;
  unsigned char *tmp ;

  {
  {
#line 3708
  dma_sync_single_for_cpu(tspi->dev, tspi->rx_dma_phys, tspi->dma_buf_size, (enum dma_data_direction )2);
  }
#line 3711
  if ((int )tspi->is_packed) {
    {
#line 3713
    len = tspi->curr_dma_words * tspi->bytes_per_word;
#line 3714
    memcpy(t->rx_buf + (unsigned long )tspi->cur_rx_pos, (void const   *)tspi->rx_dma_buf,
           len);
    }
  } else {
    {
#line 3718
    rx_buf = (unsigned char *)(t->rx_buf + (unsigned long )tspi->cur_rx_pos);
#line 3719
    rx_mask = (1U << (int )t->bits_per_word) - 1U;
#line 3720
    count = 0U;
    }
#line 3721
    goto ldv_27986;
    ldv_27985: 
    {
#line 3723
    x = *(tspi->rx_dma_buf + (unsigned long )count) & rx_mask;
#line 3724
    i = 0U;
    }
#line 3725
    goto ldv_27983;
    ldv_27982: 
    {
#line 3727
    tmp = rx_buf;
#line 3728
    rx_buf ++;
#line 3729
    *tmp = (unsigned char )(x >> (int )(i * 8U));
#line 3730
    i ++;
    }
    ldv_27983: 
    {

    }
#line 3732
    if (i < tspi->bytes_per_word) {
#line 3733
      goto ldv_27982;
    }
    {
#line 3736
    count ++;
    }
    ldv_27986: 
    {

    }
#line 3738
    if (count < tspi->curr_dma_words) {
#line 3739
      goto ldv_27985;
    }
  }
  {
#line 3744
  tspi->cur_rx_pos += tspi->curr_dma_words * tspi->bytes_per_word;
#line 3745
  dma_sync_single_for_device(tspi->dev, tspi->rx_dma_phys, tspi->dma_buf_size, (enum dma_data_direction )2);
  }
#line 3748
  return;
}
}
#line 3751 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void tegra_slink_dma_complete(void *args ) 
{ 
  struct completion *dma_complete ;

  {
  {
#line 3756
  dma_complete = (struct completion *)args;
#line 3757
  complete(dma_complete);
  }
#line 3759
  return;
}
}
#line 3762 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_start_tx_dma(struct tegra_slink_data *tspi , int len ) 
{ 


  {
  {
#line 3766
  reinit_completion(& tspi->tx_dma_complete);
#line 3767
  tspi->tx_dma_desc = dmaengine_prep_slave_single(tspi->tx_dma_chan, tspi->tx_dma_phys,
                                                  (size_t___0 )len, (enum dma_transfer_direction )1,
                                                  3UL);
  }
#line 3770
  if ((unsigned long )tspi->tx_dma_desc == (unsigned long )((struct dma_async_tx_descriptor *)0)) {
    {
#line 3772
    dev_err((struct device  const  *)tspi->dev, (char const   *)"Not able to get desc for Tx\n");
    }
#line 3774
    return (-5);
  }
  {
#line 3778
  (tspi->tx_dma_desc)->callback = & tegra_slink_dma_complete;
#line 3779
  (tspi->tx_dma_desc)->callback_param = (void *)(& tspi->tx_dma_complete);
#line 3780
  dmaengine_submit(tspi->tx_dma_desc);
#line 3781
  dma_async_issue_pending(tspi->tx_dma_chan);
  }
#line 3783
  return (0);
}
}
#line 3786 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_start_rx_dma(struct tegra_slink_data *tspi , int len ) 
{ 


  {
  {
#line 3790
  reinit_completion(& tspi->rx_dma_complete);
#line 3791
  tspi->rx_dma_desc = dmaengine_prep_slave_single(tspi->rx_dma_chan, tspi->rx_dma_phys,
                                                  (size_t___0 )len, (enum dma_transfer_direction )2,
                                                  3UL);
  }
#line 3794
  if ((unsigned long )tspi->rx_dma_desc == (unsigned long )((struct dma_async_tx_descriptor *)0)) {
    {
#line 3796
    dev_err((struct device  const  *)tspi->dev, (char const   *)"Not able to get desc for Rx\n");
    }
#line 3798
    return (-5);
  }
  {
#line 3802
  (tspi->rx_dma_desc)->callback = & tegra_slink_dma_complete;
#line 3803
  (tspi->rx_dma_desc)->callback_param = (void *)(& tspi->rx_dma_complete);
#line 3804
  dmaengine_submit(tspi->rx_dma_desc);
#line 3805
  dma_async_issue_pending(tspi->rx_dma_chan);
  }
#line 3807
  return (0);
}
}
#line 3810 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_start_dma_based_transfer(struct tegra_slink_data *tspi , struct spi_transfer *t ) 
{ 
  u32 val ;
  unsigned int len ;
  int ret ;
  u32 status ;

  {
  {
#line 3818
  ret = 0;
#line 3819
  status = tegra_slink_readl(tspi, 8UL);
  }
#line 3821
  if ((status & 10485760U) != 10485760U) {
    {
#line 3823
    dev_err((struct device  const  *)tspi->dev, (char const   *)"Rx/Tx fifo are not empty status 0x%08x\n",
            status);
    }
#line 3826
    return (-5);
  }
  {
#line 3829
  val = (tspi->curr_dma_words - 1U) & 65535U;
#line 3830
  val |= tspi->packed_size;
  }
#line 3831
  if ((int )tspi->is_packed) {
    {
#line 3832
    len = ((tspi->curr_dma_words * tspi->bytes_per_word + 3U) / 4U) * 4U;
    }
  } else {
    {
#line 3834
    len = tspi->curr_dma_words * 4U;
    }
  }
#line 3836
  if (! ((len & 15U) != 0U)) {
#line 3838
    if ((len & 16U) != 0U) {
      {
#line 3839
      val |= 327680U;
      }
    } else {
      {
#line 3841
      val |= 655360U;
      }
    }
  }
#line 3843
  if ((int )tspi->cur_direction & 1) {
    {
#line 3844
    val |= 67108864U;
    }
  }
#line 3847
  if ((tspi->cur_direction & 2U) != 0U) {
    {
#line 3848
    val |= 134217728U;
    }
  }
  {
#line 3852
  tegra_slink_writel(tspi, val, 24UL);
#line 3853
  tspi->dma_control_reg = val;
  }
#line 3855
  if ((int )tspi->cur_direction & 1) {
    {
#line 3857
    tegra_slink_copy_client_txbuf_to_spi_txbuf(tspi, t);
#line 3858
    __asm__  volatile   ("sfence": : : "memory");
#line 3859
    ret = tegra_slink_start_tx_dma(tspi, (int )len);
    }
#line 3861
    if (ret < 0) {
      {
#line 3863
      dev_err((struct device  const  *)tspi->dev, (char const   *)"Starting tx dma failed, err %d\n",
              ret);
      }
#line 3866
      return (ret);
    }
    {
#line 3870
    status = tegra_slink_readl(tspi, 8UL);
    }
#line 3872
    goto ldv_28009;
    ldv_28008: 
    {
#line 3875
    status = tegra_slink_readl(tspi, 8UL);
    }
    ldv_28009: 
    {

    }
#line 3878
    if ((status & 1048576U) == 0U) {
#line 3879
      goto ldv_28008;
    }
  }
#line 3884
  if ((tspi->cur_direction & 2U) != 0U) {
    {
#line 3886
    dma_sync_single_for_device(tspi->dev, tspi->rx_dma_phys, tspi->dma_buf_size, (enum dma_data_direction )2);
#line 3888
    ret = tegra_slink_start_rx_dma(tspi, (int )len);
    }
#line 3890
    if (ret < 0) {
      {
#line 3892
      dev_err((struct device  const  *)tspi->dev, (char const   *)"Starting rx dma failed, err %d\n",
              ret);
      }
#line 3895
      if ((int )tspi->cur_direction & 1) {
        {
#line 3897
        dmaengine_terminate_all(tspi->tx_dma_chan);
        }
      }
#line 3901
      return (ret);
    }
  }
  {
#line 3906
  tspi->is_curr_dma_xfer = (bool )1;
  }
#line 3907
  if ((int )tspi->is_packed) {
    {
#line 3909
    val |= 1048576U;
#line 3910
    tegra_slink_writel(tspi, val, 24UL);
#line 3911
    __const_udelay(4295UL);
    }
  }
  {
#line 3916
  tspi->dma_control_reg = val;
#line 3917
  val |= 2147483648U;
#line 3918
  tegra_slink_writel(tspi, val, 24UL);
  }
#line 3920
  return (ret);
}
}
#line 3923 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_start_cpu_based_transfer(struct tegra_slink_data *tspi , struct spi_transfer *t ) 
{ 
  u32 val ;
  unsigned int cur_words ;

  {
  {
#line 3928
  val = tspi->packed_size;
  }
#line 3929
  if ((int )tspi->cur_direction & 1) {
    {
#line 3930
    val |= 67108864U;
    }
  }
#line 3933
  if ((tspi->cur_direction & 2U) != 0U) {
    {
#line 3934
    val |= 134217728U;
    }
  }
  {
#line 3938
  tegra_slink_writel(tspi, val, 24UL);
#line 3939
  tspi->dma_control_reg = val;
  }
#line 3941
  if ((int )tspi->cur_direction & 1) {
    {
#line 3943
    cur_words = tegra_slink_fill_tx_fifo_from_client_txbuf(tspi, t);
    }
  } else {
    {
#line 3946
    cur_words = tspi->curr_dma_words;
    }
  }
  {
#line 3949
  val |= (cur_words - 1U) & 65535U;
#line 3950
  tegra_slink_writel(tspi, val, 24UL);
#line 3951
  tspi->dma_control_reg = val;
#line 3952
  tspi->is_curr_dma_xfer = (bool )0;
  }
#line 3954
  if ((int )tspi->is_packed) {
    {
#line 3956
    val |= 1048576U;
#line 3957
    tegra_slink_writel(tspi, val, 24UL);
#line 3958
    __const_udelay(4295UL);
#line 3959
    __asm__  volatile   ("sfence": : : "memory");
    }
  }
  {
#line 3964
  tspi->dma_control_reg = val;
#line 3965
  val |= 2147483648U;
#line 3966
  tegra_slink_writel(tspi, val, 24UL);
  }
#line 3968
  return (0);
}
}
#line 3971 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_init_dma_param(struct tegra_slink_data *tspi , bool dma_to_memory ) 
{ 
  struct dma_chan *dma_chan ;
  u32 *dma_buf ;
  dma_addr_t dma_phys ;
  int ret ;
  struct dma_slave_config dma_sconfig ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  char *tmp___2 ;

  {
#line 3983
  if ((int )dma_to_memory) {
    {
#line 3983
    tmp___2 = "rx";
    }
  } else {
    {
#line 3983
    tmp___2 = "tx";
    }
  }
  {
#line 3983
  dma_chan = dma_request_slave_channel_reason(tspi->dev, (char const   *)tmp___2);
#line 3984
  tmp___0 = IS_ERR((void const   *)dma_chan);
  }
#line 3986
  if (tmp___0 != 0L) {
    {
#line 3988
    tmp = PTR_ERR((void const   *)dma_chan);
#line 3989
    ret = (int )tmp;
    }
#line 3991
    if (ret != -517) {
      {
#line 3993
      dev_err((struct device  const  *)tspi->dev, (char const   *)"Dma channel is not available: %d\n",
              ret);
      }
    }
#line 3998
    return (ret);
  }
  {
#line 4002
  tmp___1 = dma_alloc_attrs(tspi->dev, tspi->dma_buf_size, & dma_phys, 208U, (struct dma_attrs *)0);
#line 4004
  dma_buf = (u32 *)tmp___1;
  }
#line 4006
  if ((unsigned long )dma_buf == (unsigned long )((u32 *)0U)) {
    {
#line 4008
    dev_err((struct device  const  *)tspi->dev, (char const   *)" Not able to allocate the dma buffer\n");
#line 4009
    dma_release_channel(dma_chan);
    }
#line 4011
    return (-12);
  }
#line 4014
  if ((int )dma_to_memory) {
    {
#line 4015
    dma_sconfig.src_addr = tspi->phys + 384ULL;
#line 4016
    dma_sconfig.src_addr_width = (enum dma_slave_buswidth )4;
#line 4017
    dma_sconfig.src_maxburst = 0U;
    }
  } else {
    {
#line 4019
    dma_sconfig.dst_addr = tspi->phys + 256ULL;
#line 4020
    dma_sconfig.dst_addr_width = (enum dma_slave_buswidth )4;
#line 4021
    dma_sconfig.dst_maxburst = 0U;
    }
  }
  {
#line 4024
  ret = dmaengine_slave_config(dma_chan, & dma_sconfig);
  }
#line 4026
  if (ret != 0) {
#line 4027
    goto scrub;
  }
#line 4030
  if ((int )dma_to_memory) {
    {
#line 4031
    tspi->rx_dma_chan = dma_chan;
#line 4032
    tspi->rx_dma_buf = dma_buf;
#line 4033
    tspi->rx_dma_phys = dma_phys;
    }
  } else {
    {
#line 4035
    tspi->tx_dma_chan = dma_chan;
#line 4036
    tspi->tx_dma_buf = dma_buf;
#line 4037
    tspi->tx_dma_phys = dma_phys;
    }
  }
#line 4039
  return (0);
  scrub: 
  {
#line 4042
  dma_free_attrs(tspi->dev, tspi->dma_buf_size, (void *)dma_buf, dma_phys, (struct dma_attrs *)0);
#line 4044
  dma_release_channel(dma_chan);
  }
#line 4046
  return (ret);
}
}
#line 4049 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void tegra_slink_deinit_dma_param(struct tegra_slink_data *tspi , bool dma_to_memory ) 
{ 
  u32 *dma_buf ;
  dma_addr_t dma_phys ;
  struct dma_chan *dma_chan ;

  {
#line 4055
  if ((int )dma_to_memory) {
    {
#line 4056
    dma_buf = tspi->rx_dma_buf;
#line 4057
    dma_chan = tspi->rx_dma_chan;
#line 4058
    dma_phys = tspi->rx_dma_phys;
#line 4059
    tspi->rx_dma_chan = (struct dma_chan *)0;
#line 4060
    tspi->rx_dma_buf = (u32 *)0U;
    }
  } else {
    {
#line 4062
    dma_buf = tspi->tx_dma_buf;
#line 4063
    dma_chan = tspi->tx_dma_chan;
#line 4064
    dma_phys = tspi->tx_dma_phys;
#line 4065
    tspi->tx_dma_buf = (u32 *)0U;
#line 4066
    tspi->tx_dma_chan = (struct dma_chan *)0;
    }
  }
#line 4068
  if ((unsigned long )dma_chan == (unsigned long )((struct dma_chan *)0)) {
#line 4069
    return;
  }
  {
#line 4073
  dma_free_attrs(tspi->dev, tspi->dma_buf_size, (void *)dma_buf, dma_phys, (struct dma_attrs *)0);
#line 4075
  dma_release_channel(dma_chan);
  }
#line 4077
  return;
}
}
#line 4080 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_start_transfer_one(struct spi_device *spi , struct spi_transfer *t ) 
{ 
  struct tegra_slink_data *tspi ;
  void *tmp ;
  u32 speed ;
  u8 bits_per_word ;
  unsigned int total_fifo_words ;
  int ret ;
  u32 command ;
  u32 command2 ;

  {
  {
#line 4092
  tmp = spi_master_get_devdata(spi->master);
#line 4093
  tspi = (struct tegra_slink_data *)tmp;
#line 4094
  bits_per_word = t->bits_per_word;
#line 4095
  speed = t->speed_hz;
  }
#line 4097
  if (speed != tspi->cur_speed) {
    {
#line 4099
    clk_set_rate(tspi->clk, (unsigned long )(speed * 4U));
#line 4100
    tspi->cur_speed = speed;
    }
  }
  {
#line 4105
  tspi->cur_spi = spi;
#line 4106
  tspi->cur_pos = 0U;
#line 4107
  tspi->cur_rx_pos = 0U;
#line 4108
  tspi->cur_tx_pos = 0U;
#line 4109
  tspi->curr_xfer = t;
#line 4110
  total_fifo_words = tegra_slink_calculate_curr_xfer_param(spi, tspi, t);
#line 4111
  command = tspi->command_reg;
#line 4112
  command &= 4294967264U;
#line 4113
  command |= (u32 )((int )bits_per_word + -1) & 31U;
#line 4114
  command2 = tspi->command2_reg;
#line 4115
  command2 &= 1073741823U;
#line 4116
  tegra_slink_writel(tspi, command, 0UL);
#line 4117
  tspi->command_reg = command;
#line 4118
  tspi->cur_direction = 0U;
  }
#line 4120
  if ((unsigned long )t->rx_buf != (unsigned long )((void *)0)) {
    {
#line 4121
    command2 |= 2147483648U;
#line 4122
    tspi->cur_direction |= 2U;
    }
  }
#line 4125
  if ((unsigned long )t->tx_buf != (unsigned long )((void const   *)0)) {
    {
#line 4126
    command2 |= 1073741824U;
#line 4127
    tspi->cur_direction |= 1U;
    }
  }
  {
#line 4131
  tegra_slink_writel(tspi, command2, 4UL);
#line 4132
  tspi->command2_reg = command2;
  }
#line 4134
  if (total_fifo_words > 32U) {
    {
#line 4136
    ret = tegra_slink_start_dma_based_transfer(tspi, t);
    }
  } else {
    {
#line 4140
    ret = tegra_slink_start_cpu_based_transfer(tspi, t);
    }
  }
#line 4143
  return (ret);
}
}
#line 4146 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_setup(struct spi_device *spi ) 
{ 
  u32 cs_pol_bit[4U] ;
  struct tegra_slink_data *tspi ;
  void *tmp ;
  u32 val ;
  unsigned long flags ;
  int ret ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  long tmp___1 ;
  char *tmp___2 ;
  char *tmp___3 ;

  {
  {
#line 4152
  flags = 0UL;
#line 4159
  cs_pol_bit[0] = 8192U;
#line 4160
  cs_pol_bit[1] = 1048576U;
#line 4161
  cs_pol_bit[2] = 4194304U;
#line 4162
  cs_pol_bit[3] = 8388608U;
#line 4163
  tmp = spi_master_get_devdata(spi->master);
#line 4164
  tspi = (struct tegra_slink_data *)tmp;
#line 4165
  descriptor.modname = (char const   *)"spi_tegra20_slink";
#line 4166
  descriptor.function = (char const   *)"tegra_slink_setup";
#line 4167
  descriptor.filename = (char const   *)"drivers/spi/spi-tegra20-slink.c";
#line 4168
  descriptor.format = (char const   *)"setup %d bpw, %scpol, %scpha, %dHz\n";
#line 4169
  descriptor.lineno = 762U;
#line 4170
  descriptor.flags = 1U;
#line 4171
  tmp___0 = ldv__builtin_expect((long )descriptor.flags & 1L, 0L);
  }
#line 4173
  if (tmp___0 != 0L) {
#line 4175
    if ((int )spi->mode & 1) {
      {
#line 4175
      tmp___2 = "";
      }
    } else {
      {
#line 4175
      tmp___2 = "~";
      }
    }
#line 4175
    if (((int )spi->mode & 2) != 0) {
      {
#line 4175
      tmp___3 = "";
      }
    } else {
      {
#line 4175
      tmp___3 = "~";
      }
    }
    {
#line 4175
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& spi->dev), (char const   *)"setup %d bpw, %scpol, %scpha, %dHz\n",
                      (int )spi->bits_per_word, tmp___3, tmp___2, spi->max_speed_hz);
    }
  }
  {
#line 4182
  tmp___1 = ldv__builtin_expect((long )((unsigned int )spi->chip_select > 3U), 0L);
  }
#line 4184
  if (tmp___1 != 0L) {
    {
#line 4186
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ("drivers/spi/spi-tegra20-slink.c"),
                         "i" (764), "i" (12UL));
#line 4188
    __builtin_unreachable();
    }
  }
#line 4193
  if (spi->max_speed_hz != 0U) {
    {
#line 4193
    spi->max_speed_hz = (u32 )(spi->max_speed_hz != 0U);
    }
  } else {
    {
#line 4193
    spi->max_speed_hz = tspi->spi_max_frequency;
    }
  }
  {
#line 4194
  ret = pm_runtime_get_sync(tspi->dev);
  }
#line 4196
  if (ret < 0) {
    {
#line 4198
    dev_err((struct device  const  *)tspi->dev, (char const   *)"pm runtime failed, e = %d\n",
            ret);
    }
#line 4200
    return (ret);
  }
  {
#line 4204
  ldv___ldv_spin_lock_44(& tspi->lock);
#line 4205
  val = tspi->def_command_reg;
  }
#line 4207
  if (((int )spi->mode & 4) != 0) {
    {
#line 4208
    val |= cs_pol_bit[(int )spi->chip_select];
    }
  } else {
    {
#line 4210
    val &= ~ cs_pol_bit[(int )spi->chip_select];
    }
  }
  {
#line 4213
  tspi->def_command_reg = val;
#line 4214
  tegra_slink_writel(tspi, tspi->def_command_reg, 0UL);
#line 4215
  ldv_spin_unlock_irqrestore_45(& tspi->lock, flags);
#line 4216
  pm_runtime_put(tspi->dev);
  }
#line 4218
  return (0);
}
}
#line 4221 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_prepare_message(struct spi_master *master , struct spi_message *msg ) 
{ 
  struct tegra_slink_data *tspi ;
  void *tmp ;
  struct spi_device *spi ;

  {
  {
#line 4228
  tmp = spi_master_get_devdata(master);
#line 4229
  tspi = (struct tegra_slink_data *)tmp;
#line 4230
  spi = msg->spi;
#line 4231
  tegra_slink_clear_status(tspi);
#line 4232
  tspi->command_reg = tspi->def_command_reg;
#line 4233
  tspi->command_reg |= 6144U;
#line 4234
  tspi->command2_reg = tspi->def_command2_reg;
#line 4235
  tspi->command2_reg |= (u32 )(((int )spi->chip_select & 3) << 18);
#line 4236
  tspi->command_reg &= 4242538495U;
  }
#line 4238
  if ((int )spi->mode & 1) {
    {
#line 4239
    tspi->command_reg |= 2097152U;
    }
  }
#line 4242
  if (((int )spi->mode & 2) != 0) {
    {
#line 4243
    tspi->command_reg |= 16777216U;
    }
  } else {
    {
#line 4245
    tspi->command_reg = tspi->command_reg;
    }
  }
#line 4247
  return (0);
}
}
#line 4250 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_transfer_one(struct spi_master *master , struct spi_device *spi ,
                                    struct spi_transfer *xfer ) 
{ 
  struct tegra_slink_data *tspi ;
  void *tmp ;
  int ret ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  int __ret_warn_on ;
  long tmp___2 ;
  long tmp___3 ;

  {
  {
#line 4263
  tmp = spi_master_get_devdata(master);
#line 4264
  tspi = (struct tegra_slink_data *)tmp;
#line 4265
  reinit_completion(& tspi->xfer_completion);
#line 4266
  ret = tegra_slink_start_transfer_one(spi, xfer);
  }
#line 4268
  if (ret < 0) {
    {
#line 4270
    dev_err((struct device  const  *)tspi->dev, (char const   *)"spi can not start transfer, err %d\n",
            ret);
    }
#line 4273
    return (ret);
  }
  {
#line 4277
  tmp___0 = msecs_to_jiffies((unsigned int const   )1000U);
#line 4278
  tmp___1 = wait_for_completion_timeout(& tspi->xfer_completion, tmp___0);
#line 4279
  ret = (int )tmp___1;
#line 4280
  __ret_warn_on = ret == 0;
#line 4281
  tmp___2 = ldv__builtin_expect((long )(__ret_warn_on != 0), 0L);
  }
#line 4283
  if (tmp___2 != 0L) {
    {
#line 4285
    warn_slowpath_null((char const   *)"drivers/spi/spi-tegra20-slink.c", (int const   )831);
    }
  }
  {
#line 4290
  tmp___3 = ldv__builtin_expect((long )(__ret_warn_on != 0), 0L);
  }
#line 4292
  if (tmp___3 != 0L) {
    {
#line 4294
    dev_err((struct device  const  *)tspi->dev, (char const   *)"spi trasfer timeout, err %d\n",
            ret);
    }
#line 4296
    return (-5);
  }
#line 4299
  if (tspi->tx_status != 0U) {
#line 4300
    return ((int )tspi->tx_status);
  }
#line 4303
  if (tspi->rx_status != 0U) {
#line 4304
    return ((int )tspi->rx_status);
  }
#line 4307
  return (0);
}
}
#line 4310 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_unprepare_message(struct spi_master *master , struct spi_message *msg ) 
{ 
  struct tegra_slink_data *tspi ;
  void *tmp ;

  {
  {
#line 4316
  tmp = spi_master_get_devdata(master);
#line 4317
  tspi = (struct tegra_slink_data *)tmp;
#line 4318
  tegra_slink_writel(tspi, tspi->def_command_reg, 0UL);
#line 4319
  tegra_slink_writel(tspi, tspi->def_command2_reg, 4UL);
  }
#line 4321
  return (0);
}
}
#line 4324 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static irqreturn_t handle_cpu_based_xfer(struct tegra_slink_data *tspi ) 
{ 
  struct spi_transfer *t ;
  unsigned long flags ;
  struct reset_control *tmp ;

  {
  {
#line 4327
  flags = 0UL;
#line 4331
  t = tspi->curr_xfer;
#line 4332
  ldv___ldv_spin_lock_46(& tspi->lock);
  }
#line 4334
  if (*((unsigned long *)tspi + 49UL) != 0UL) {
#line 4334
    goto _L;
  } else
#line 4334
  if ((int )tspi->status_reg < 0) {
    _L: /* CIL Label */ 
    {
#line 4336
    dev_err((struct device  const  *)tspi->dev, (char const   *)"CpuXfer ERROR bit set 0x%x\n",
            tspi->status_reg);
#line 4337
    dev_err((struct device  const  *)tspi->dev, (char const   *)"CpuXfer 0x%08x:0x%08x:0x%08x\n",
            tspi->command_reg, tspi->command2_reg, tspi->dma_control_reg);
#line 4339
    tmp = tspi->rst;
#line 4340
    ldv_assert((char const   *)"", (unsigned long )tmp == (unsigned long )tspi->rst);
#line 4341
    reset_control_assert(tspi->rst);
#line 4342
    __const_udelay(8590UL);
#line 4343
    reset_control_deassert(tspi->rst);
#line 4344
    complete(& tspi->xfer_completion);
    }
#line 4346
    goto exit;
  }
#line 4349
  if ((tspi->cur_direction & 2U) != 0U) {
    {
#line 4351
    tegra_slink_read_rx_fifo_to_client_rxbuf(tspi, t);
    }
  }
#line 4355
  if ((int )tspi->cur_direction & 1) {
    {
#line 4356
    tspi->cur_pos = tspi->cur_tx_pos;
    }
  } else {
    {
#line 4358
    tspi->cur_pos = tspi->cur_rx_pos;
    }
  }
#line 4360
  if (tspi->cur_pos == t->len) {
    {
#line 4362
    complete(& tspi->xfer_completion);
    }
#line 4364
    goto exit;
  }
  {
#line 4368
  tegra_slink_calculate_curr_xfer_param(tspi->cur_spi, tspi, t);
#line 4369
  tegra_slink_start_cpu_based_transfer(tspi, t);
  }
  exit: 
  {
#line 4373
  ldv_spin_unlock_irqrestore_45(& tspi->lock, flags);
  }
#line 4375
  return ((irqreturn_t )1);
}
}
#line 4378 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static irqreturn_t handle_dma_based_xfer(struct tegra_slink_data *tspi ) 
{ 
  struct spi_transfer *t ;
  long wait_status ;
  int err ;
  unsigned int total_fifo_words ;
  unsigned long flags ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
  {
#line 4384
  flags = 0UL;
#line 4388
  t = tspi->curr_xfer;
#line 4389
  err = 0;
  }
#line 4390
  if ((int )tspi->cur_direction & 1) {
#line 4391
    if (tspi->tx_status != 0U) {
      {
#line 4393
      dmaengine_terminate_all(tspi->tx_dma_chan);
#line 4394
      err ++;
      }
    } else {
      {
#line 4398
      tmp = msecs_to_jiffies((unsigned int const   )1000U);
#line 4399
      wait_status = wait_for_completion_interruptible_timeout(& tspi->tx_dma_complete,
                                                              tmp);
      }
#line 4402
      if (wait_status <= 0L) {
        {
#line 4404
        dmaengine_terminate_all(tspi->tx_dma_chan);
#line 4405
        dev_err((struct device  const  *)tspi->dev, (char const   *)"TxDma Xfer failed\n");
#line 4406
        err ++;
        }
      }
    }
  }
#line 4413
  if ((tspi->cur_direction & 2U) != 0U) {
#line 4414
    if (tspi->rx_status != 0U) {
      {
#line 4416
      dmaengine_terminate_all(tspi->rx_dma_chan);
#line 4417
      err += 2;
      }
    } else {
      {
#line 4421
      tmp___0 = msecs_to_jiffies((unsigned int const   )1000U);
#line 4422
      wait_status = wait_for_completion_interruptible_timeout(& tspi->rx_dma_complete,
                                                              tmp___0);
      }
#line 4425
      if (wait_status <= 0L) {
        {
#line 4427
        dmaengine_terminate_all(tspi->rx_dma_chan);
#line 4428
        dev_err((struct device  const  *)tspi->dev, (char const   *)"RxDma Xfer failed\n");
#line 4429
        err += 2;
        }
      }
    }
  }
  {
#line 4437
  ldv___ldv_spin_lock_48(& tspi->lock);
  }
#line 4439
  if (err != 0) {
    {
#line 4441
    dev_err((struct device  const  *)tspi->dev, (char const   *)"DmaXfer: ERROR bit set 0x%x\n",
            tspi->status_reg);
#line 4442
    dev_err((struct device  const  *)tspi->dev, (char const   *)"DmaXfer 0x%08x:0x%08x:0x%08x\n",
            tspi->command_reg, tspi->command2_reg, tspi->dma_control_reg);
#line 4444
    reset_control_assert(tspi->rst);
#line 4445
    __const_udelay(8590UL);
#line 4446
    reset_control_assert(tspi->rst);
#line 4447
    complete(& tspi->xfer_completion);
#line 4448
    ldv_spin_unlock_irqrestore_45(& tspi->lock, flags);
    }
#line 4450
    return ((irqreturn_t )1);
  }
#line 4453
  if ((tspi->cur_direction & 2U) != 0U) {
    {
#line 4455
    tegra_slink_copy_spi_rxbuf_to_client_rxbuf(tspi, t);
    }
  }
#line 4459
  if ((int )tspi->cur_direction & 1) {
    {
#line 4460
    tspi->cur_pos = tspi->cur_tx_pos;
    }
  } else {
    {
#line 4462
    tspi->cur_pos = tspi->cur_rx_pos;
    }
  }
#line 4464
  if (tspi->cur_pos == t->len) {
    {
#line 4466
    complete(& tspi->xfer_completion);
    }
#line 4468
    goto exit;
  }
  {
#line 4472
  total_fifo_words = tegra_slink_calculate_curr_xfer_param(tspi->cur_spi, tspi, t);
  }
#line 4474
  if (total_fifo_words > 32U) {
    {
#line 4476
    err = tegra_slink_start_dma_based_transfer(tspi, t);
    }
  } else {
    {
#line 4480
    err = tegra_slink_start_cpu_based_transfer(tspi, t);
    }
  }
  exit: 
  {
#line 4485
  ldv_spin_unlock_irqrestore_45(& tspi->lock, flags);
  }
#line 4487
  return ((irqreturn_t )1);
}
}
#line 4490 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static irqreturn_t tegra_slink_isr_thread(int irq , void *context_data ) 
{ 
  struct tegra_slink_data *tspi ;
  irqreturn_t tmp ;
  irqreturn_t tmp___0 ;

  {
  {
#line 4496
  tspi = (struct tegra_slink_data *)context_data;
  }
#line 4497
  if (! tspi->is_curr_dma_xfer) {
    {
#line 4499
    tmp = handle_cpu_based_xfer(tspi);
    }
#line 4501
    return (tmp);
  }
  {
#line 4505
  tmp___0 = handle_dma_based_xfer(tspi);
  }
#line 4507
  return (tmp___0);
}
}
#line 4510 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static irqreturn_t tegra_slink_isr(int irq , void *context_data ) 
{ 
  struct tegra_slink_data *tspi ;

  {
  {
#line 4515
  tspi = (struct tegra_slink_data *)context_data;
#line 4516
  tspi->status_reg = tegra_slink_readl(tspi, 8UL);
  }
#line 4518
  if ((int )tspi->cur_direction & 1) {
    {
#line 4519
    tspi->tx_status = tspi->status_reg & 17301504U;
    }
  }
#line 4522
  if ((tspi->cur_direction & 2U) != 0U) {
    {
#line 4523
    tspi->rx_status = tspi->status_reg & 33816576U;
    }
  }
  {
#line 4527
  tegra_slink_clear_status(tspi);
  }
#line 4529
  return ((irqreturn_t )2);
}
}
#line 4532 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void tegra_slink_parse_dt(struct tegra_slink_data *tspi ) 
{ 
  struct device_node *np ;
  int tmp ;

  {
  {
#line 4538
  np = (tspi->dev)->of_node;
#line 4539
  tmp = of_property_read_u32((struct device_node  const  *)np, (char const   *)"spi-max-frequency",
                             & tspi->spi_max_frequency);
  }
#line 4542
  if (tmp != 0) {
    {
#line 4543
    tspi->spi_max_frequency = 25000000U;
    }
  }
#line 4546
  return;
}
}
#line 4549 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static struct tegra_slink_chip_data  const  tegra30_spi_cdata  =    {(bool )1};
#line 4550 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static struct tegra_slink_chip_data  const  tegra20_spi_cdata  =    {(bool )0};
#line 4551 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static struct of_device_id tegra_slink_of_match[3U]  = {      {{(char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0,
       (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0,
       (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0,
       (char)0, (char)0, (char)0, (char)0, (char)0}, {(char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0},
      {(char )'n', (char )'v', (char )'i', (char )'d', (char )'i', (char )'a', (char )',',
       (char )'t', (char )'e', (char )'g', (char )'r', (char )'a', (char )'3', (char )'0',
       (char )'-', (char )'s', (char )'l', (char )'i', (char )'n', (char )'k', (char )'\000'},
      (void const   *)(& tegra30_spi_cdata)}, 
        {{(char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0,
       (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0,
       (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0,
       (char)0, (char)0, (char)0, (char)0, (char)0}, {(char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0,
                                                      (char)0, (char)0, (char)0, (char)0},
      {(char )'n', (char )'v', (char )'i', (char )'d', (char )'i', (char )'a', (char )',',
       (char )'t', (char )'e', (char )'g', (char )'r', (char )'a', (char )'2', (char )'0',
       (char )'-', (char )'s', (char )'l', (char )'i', (char )'n', (char )'k', (char )'\000'},
      (void const   *)(& tegra20_spi_cdata)}};
#line 4577 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct of_device_id  const  __mod_of_device_table  ;
#line 4578 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_probe(struct platform_device *pdev ) 
{ 
  struct spi_master *master ;
  struct tegra_slink_data *tspi ;
  struct resource *r ;
  int ret ;
  int spi_irq ;
  struct tegra_slink_chip_data  const  *cdata ;
  struct of_device_id  const  *match ;
  void *tmp ;
  struct lock_class_key __key ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  bool tmp___7 ;
  int tmp___8 ;
  bool tmp___9 ;
  int tmp___10 ;

  {
  {
#line 4602
  cdata = (struct tegra_slink_chip_data  const  *)0;
#line 4603
  match = __of_match_device((struct of_device_id  const  *)0, (struct device  const  *)(& pdev->dev));
  }
#line 4605
  if ((unsigned long )match == (unsigned long )((struct of_device_id  const  *)0)) {
    {
#line 4607
    dev_err((struct device  const  *)(& pdev->dev), (char const   *)"Error: No device match found\n");
    }
#line 4609
    return (-19);
  }
  {
#line 4613
  cdata = (struct tegra_slink_chip_data  const  *)match->data;
#line 4614
  master = ldv_spi_alloc_master_51(& pdev->dev, 600U);
  }
#line 4616
  if ((unsigned long )master == (unsigned long )((struct spi_master *)0)) {
    {
#line 4618
    dev_err((struct device  const  *)(& pdev->dev), (char const   *)"master allocation failed\n");
    }
#line 4620
    return (-12);
  }
  {
#line 4624
  master->mode_bits = (u16 )7U;
#line 4625
  master->setup = & tegra_slink_setup;
#line 4626
  master->prepare_message = & tegra_slink_prepare_message;
#line 4627
  master->transfer_one = & tegra_slink_transfer_one;
#line 4628
  master->unprepare_message = & tegra_slink_unprepare_message;
#line 4629
  master->auto_runtime_pm = (bool )1;
#line 4630
  master->num_chipselect = (u16 )4U;
#line 4631
  master->bus_num = (s16 )-1;
#line 4632
  platform_set_drvdata(pdev, (void *)master);
#line 4633
  tmp = spi_master_get_devdata(master);
#line 4634
  tspi = (struct tegra_slink_data *)tmp;
#line 4635
  tspi->master = master;
#line 4636
  tspi->dev = & pdev->dev;
#line 4637
  tspi->chip_data = cdata;
#line 4638
  spinlock_check(& tspi->lock);
#line 4639
  __raw_spin_lock_init(& tspi->lock.__annonCompField19.rlock, (char const   *)"&(&tspi->lock)->rlock",
                       & __key);
#line 4641
  tegra_slink_parse_dt(tspi);
#line 4642
  r = platform_get_resource(pdev, 512U, 0U);
  }
#line 4644
  if ((unsigned long )r == (unsigned long )((struct resource *)0)) {
    {
#line 4646
    dev_err((struct device  const  *)(& pdev->dev), (char const   *)"No IO memory resource\n");
#line 4647
    ret = -19;
    }
#line 4649
    goto exit_free_master;
  }
  {
#line 4653
  tspi->phys = r->start;
#line 4654
  tspi->base = devm_ioremap_resource(& pdev->dev, r);
#line 4655
  tmp___1 = IS_ERR((void const   *)tspi->base);
  }
#line 4657
  if (tmp___1 != 0L) {
    {
#line 4659
    tmp___0 = PTR_ERR((void const   *)tspi->base);
#line 4660
    ret = (int )tmp___0;
    }
#line 4662
    goto exit_free_master;
  }
  {
#line 4666
  spi_irq = platform_get_irq(pdev, 0U);
#line 4667
  tspi->irq = (unsigned int )spi_irq;
#line 4668
  tmp___2 = dev_name((struct device  const  *)(& pdev->dev));
#line 4669
  ret = ldv_request_threaded_irq_52(tspi->irq, & tegra_slink_isr, & tegra_slink_isr_thread,
                                    8192UL, tmp___2, (void *)tspi);
  }
#line 4672
  if (ret < 0) {
    {
#line 4674
    dev_err((struct device  const  *)(& pdev->dev), (char const   *)"Failed to register ISR for IRQ %d\n",
            tspi->irq);
    }
#line 4677
    goto exit_free_master;
  }
  {
#line 4681
  tspi->clk = devm_clk_get(& pdev->dev, (char const   *)0);
#line 4682
  tmp___4 = IS_ERR((void const   *)tspi->clk);
  }
#line 4684
  if (tmp___4 != 0L) {
    {
#line 4686
    dev_err((struct device  const  *)(& pdev->dev), (char const   *)"can not get clock\n");
#line 4687
    tmp___3 = PTR_ERR((void const   *)tspi->clk);
#line 4688
    ret = (int )tmp___3;
    }
#line 4690
    goto exit_free_irq;
  }
  {
#line 4694
  tspi->rst = devm_reset_control_get(& pdev->dev, (char const   *)"spi");
#line 4695
  tmp___6 = IS_ERR((void const   *)tspi->rst);
  }
#line 4697
  if (tmp___6 != 0L) {
    {
#line 4699
    dev_err((struct device  const  *)(& pdev->dev), (char const   *)"can not get reset\n");
#line 4700
    tmp___5 = PTR_ERR((void const   *)tspi->rst);
#line 4701
    ret = (int )tmp___5;
    }
#line 4703
    goto exit_free_irq;
  }
  {
#line 4707
  tspi->max_buf_size = 128U;
#line 4708
  tspi->dma_buf_size = 16384U;
#line 4709
  ret = tegra_slink_init_dma_param(tspi, (bool )1);
  }
#line 4711
  if (ret < 0) {
#line 4712
    goto exit_free_irq;
  }
  {
#line 4716
  ret = tegra_slink_init_dma_param(tspi, (bool )0);
  }
#line 4718
  if (ret < 0) {
#line 4719
    goto exit_rx_dma_free;
  }
  {
#line 4723
  tspi->max_buf_size = tspi->dma_buf_size;
#line 4724
  init_completion(& tspi->tx_dma_complete);
#line 4725
  init_completion(& tspi->rx_dma_complete);
#line 4726
  init_completion(& tspi->xfer_completion);
#line 4727
  pm_runtime_enable(& pdev->dev);
#line 4728
  tmp___7 = pm_runtime_enabled(& pdev->dev);
  }
#line 4730
  if (tmp___7) {
    {
#line 4731
    tmp___8 = 0;
    }
  } else {
    {
#line 4733
    tmp___8 = 1;
    }
  }
#line 4735
  if (tmp___8) {
    {
#line 4737
    ret = tegra_slink_runtime_resume(& pdev->dev);
    }
#line 4739
    if (ret != 0) {
#line 4740
      goto exit_pm_disable;
    }
  }
  {
#line 4746
  ret = pm_runtime_get_sync(& pdev->dev);
  }
#line 4748
  if (ret < 0) {
    {
#line 4750
    dev_err((struct device  const  *)(& pdev->dev), (char const   *)"pm runtime get failed, e = %d\n",
            ret);
    }
#line 4753
    goto exit_pm_disable;
  }
  {
#line 4757
  tspi->def_command_reg = 268435456U;
#line 4758
  tspi->def_command2_reg = 131072U;
#line 4759
  tegra_slink_writel(tspi, tspi->def_command_reg, 0UL);
#line 4760
  tegra_slink_writel(tspi, tspi->def_command2_reg, 4UL);
#line 4761
  pm_runtime_put(& pdev->dev);
#line 4762
  master->dev.of_node = pdev->dev.of_node;
#line 4763
  ret = devm_spi_register_master(& pdev->dev, master);
  }
#line 4765
  if (ret < 0) {
    {
#line 4767
    dev_err((struct device  const  *)(& pdev->dev), (char const   *)"can not register to master err %d\n",
            ret);
    }
#line 4770
    goto exit_pm_disable;
  }
#line 4773
  return (ret);
  exit_pm_disable: 
  {
#line 4776
  pm_runtime_disable(& pdev->dev);
#line 4777
  tmp___9 = pm_runtime_status_suspended(& pdev->dev);
  }
#line 4779
  if (tmp___9) {
    {
#line 4780
    tmp___10 = 0;
    }
  } else {
    {
#line 4782
    tmp___10 = 1;
    }
  }
#line 4784
  if (tmp___10) {
    {
#line 4786
    tegra_slink_runtime_suspend(& pdev->dev);
    }
  }
  {
#line 4791
  tegra_slink_deinit_dma_param(tspi, (bool )0);
  }
  exit_rx_dma_free: 
  {
#line 4795
  tegra_slink_deinit_dma_param(tspi, (bool )1);
  }
  exit_free_irq: 
  {
#line 4799
  ldv_free_irq_53((unsigned int )spi_irq, (void *)tspi);
  }
  exit_free_master: 
  {
#line 4803
  spi_master_put(master);
  }
#line 4805
  return (ret);
}
}
#line 4808 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_remove(struct platform_device *pdev ) 
{ 
  struct spi_master *master ;
  void *tmp ;
  struct tegra_slink_data *tspi ;
  void *tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;

  {
  {
#line 4818
  tmp = platform_get_drvdata((struct platform_device  const  *)pdev);
#line 4819
  master = (struct spi_master *)tmp;
#line 4820
  tmp___0 = spi_master_get_devdata(master);
#line 4821
  tspi = (struct tegra_slink_data *)tmp___0;
#line 4822
  ldv_free_irq_54(tspi->irq, (void *)tspi);
  }
#line 4824
  if ((unsigned long )tspi->tx_dma_chan != (unsigned long )((struct dma_chan *)0)) {
    {
#line 4826
    tegra_slink_deinit_dma_param(tspi, (bool )0);
    }
  }
#line 4830
  if ((unsigned long )tspi->rx_dma_chan != (unsigned long )((struct dma_chan *)0)) {
    {
#line 4832
    tegra_slink_deinit_dma_param(tspi, (bool )1);
    }
  }
  {
#line 4837
  pm_runtime_disable(& pdev->dev);
#line 4838
  tmp___1 = pm_runtime_status_suspended(& pdev->dev);
  }
#line 4840
  if (tmp___1) {
    {
#line 4841
    tmp___2 = 0;
    }
  } else {
    {
#line 4843
    tmp___2 = 1;
    }
  }
#line 4845
  if (tmp___2) {
    {
#line 4847
    tegra_slink_runtime_suspend(& pdev->dev);
    }
  }
#line 4851
  return (0);
}
}
#line 4854 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_suspend(struct device *dev ) 
{ 
  struct spi_master *master ;
  void *tmp ;
  int tmp___0 ;

  {
  {
#line 4861
  tmp = ldv_dev_get_drvdata_55((struct device  const  *)dev);
#line 4862
  master = (struct spi_master *)tmp;
#line 4863
  tmp___0 = spi_master_suspend(master);
  }
#line 4865
  return (tmp___0);
}
}
#line 4868 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_resume(struct device *dev ) 
{ 
  struct spi_master *master ;
  void *tmp ;
  struct tegra_slink_data *tspi ;
  void *tmp___0 ;
  int ret ;
  int tmp___1 ;

  {
  {
#line 4878
  tmp = ldv_dev_get_drvdata_56((struct device  const  *)dev);
#line 4879
  master = (struct spi_master *)tmp;
#line 4880
  tmp___0 = spi_master_get_devdata(master);
#line 4881
  tspi = (struct tegra_slink_data *)tmp___0;
#line 4882
  ret = pm_runtime_get_sync(dev);
  }
#line 4884
  if (ret < 0) {
    {
#line 4886
    dev_err((struct device  const  *)dev, (char const   *)"pm runtime failed, e = %d\n",
            ret);
    }
#line 4888
    return (ret);
  }
  {
#line 4892
  tegra_slink_writel(tspi, tspi->command_reg, 0UL);
#line 4893
  tegra_slink_writel(tspi, tspi->command2_reg, 4UL);
#line 4894
  pm_runtime_put(dev);
#line 4895
  tmp___1 = spi_master_resume(master);
  }
#line 4897
  return (tmp___1);
}
}
#line 4900 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_runtime_suspend(struct device *dev ) 
{ 
  struct spi_master *master ;
  void *tmp ;
  struct tegra_slink_data *tspi ;
  void *tmp___0 ;

  {
  {
#line 4908
  tmp = ldv_dev_get_drvdata_57((struct device  const  *)dev);
#line 4909
  master = (struct spi_master *)tmp;
#line 4910
  tmp___0 = spi_master_get_devdata(master);
#line 4911
  tspi = (struct tegra_slink_data *)tmp___0;
#line 4912
  tegra_slink_readl(tspi, 16UL);
#line 4913
  clk_disable_unprepare(tspi->clk);
  }
#line 4915
  return (0);
}
}
#line 4918 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_runtime_resume(struct device *dev ) 
{ 
  struct spi_master *master ;
  void *tmp ;
  struct tegra_slink_data *tspi ;
  void *tmp___0 ;
  int ret ;

  {
  {
#line 4927
  tmp = ldv_dev_get_drvdata_58((struct device  const  *)dev);
#line 4928
  master = (struct spi_master *)tmp;
#line 4929
  tmp___0 = spi_master_get_devdata(master);
#line 4930
  tspi = (struct tegra_slink_data *)tmp___0;
#line 4931
  ret = clk_prepare_enable(tspi->clk);
  }
#line 4933
  if (ret < 0) {
    {
#line 4935
    dev_err((struct device  const  *)tspi->dev, (char const   *)"clk_prepare failed: %d\n",
            ret);
    }
#line 4937
    return (ret);
  }
#line 4940
  return (0);
}
}
#line 4943 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static struct dev_pm_ops  const  slink_pm_ops  = 
#line 4943
     {(int (*)(struct device * ))0, (void (*)(struct device * ))0, & tegra_slink_suspend,
    & tegra_slink_resume, & tegra_slink_suspend, & tegra_slink_resume, & tegra_slink_suspend,
    & tegra_slink_resume, (int (*)(struct device * ))0, (int (*)(struct device * ))0,
    (int (*)(struct device * ))0, (int (*)(struct device * ))0, (int (*)(struct device * ))0,
    (int (*)(struct device * ))0, (int (*)(struct device * ))0, (int (*)(struct device * ))0,
    (int (*)(struct device * ))0, (int (*)(struct device * ))0, (int (*)(struct device * ))0,
    (int (*)(struct device * ))0, & tegra_slink_runtime_suspend, & tegra_slink_runtime_resume,
    (int (*)(struct device * ))0};
#line 4947 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static struct platform_driver tegra_slink_driver  = 
#line 4947
     {& tegra_slink_probe, & tegra_slink_remove, (void (*)(struct platform_device * ))0,
    (int (*)(struct platform_device * , pm_message_t  ))0, (int (*)(struct platform_device * ))0,
    {(char const   *)"spi-tegra-slink", (struct bus_type *)0, & __this_module, (char const   *)0,
     (_Bool)0, (struct of_device_id  const  *)(& tegra_slink_of_match), (struct acpi_device_id  const  *)0,
     (int (*)(struct device * ))0, (int (*)(struct device * ))0, (void (*)(struct device * ))0,
     (int (*)(struct device * , pm_message_t  ))0, (int (*)(struct device * ))0, (struct attribute_group  const  **)0,
     & slink_pm_ops, (struct driver_private *)0}, (struct platform_device_id  const  *)0,
    (_Bool)0};
#line 4952 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int tegra_slink_driver_init(void) 
{ 
  int tmp ;

  {
  {
#line 4957
  tmp = ldv___platform_driver_register_59(& tegra_slink_driver, & __this_module);
  }
#line 4959
  return (tmp);
}
}
#line 4962 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void tegra_slink_driver_exit(void) 
{ 


  {
  {
#line 4966
  ldv_platform_driver_unregister_60(& tegra_slink_driver);
  }
#line 4968
  return;
}
}
#line 4971
void ldv_dispatch_deregister_8_1(struct platform_driver *arg0 ) ;
#line 4972
void ldv_dispatch_insmod_deregister_10_2(void) ;
#line 4973
void ldv_dispatch_insmod_register_10_3(void) ;
#line 4974
void ldv_dispatch_irq_deregister_7_1(int arg0 ) ;
#line 4975
void ldv_dispatch_irq_register_9_3(int arg0 , irqreturn_t (*arg1)(int  , void * ) ,
                                   irqreturn_t (*arg2)(int  , void * ) , void *arg3 ) ;
#line 4977
void ldv_dispatch_pm_deregister_3_5(void) ;
#line 4978
void ldv_dispatch_pm_register_3_6(void) ;
#line 4979
void ldv_dispatch_register_6_3(struct platform_driver *arg0 ) ;
#line 4980
int ldv_emg___platform_driver_register(struct platform_driver *arg0 , struct module *arg1 ) ;
#line 4981
void ldv_emg_free_irq(int arg0 , void *arg1 ) ;
#line 4982
void ldv_emg_platform_driver_unregister(struct platform_driver *arg0 ) ;
#line 4983
int ldv_emg_request_threaded_irq(unsigned int arg0 , irqreturn_t (*arg1)(int  , void * ) ,
                                 irqreturn_t (*arg2)(int  , void * ) , unsigned long arg3 ,
                                 char *arg4 , void *arg5 ) ;
#line 4986
void *ldv_insmod_5(void *arg0 ) ;
#line 4987
void ldv_insmod_tegra_slink_driver_exit_5_2(void (*arg0)(void) ) ;
#line 4988
int ldv_insmod_tegra_slink_driver_init_5_6(int (*arg0)(void) ) ;
#line 4989
void *ldv_interrupt_scenario_2(void *arg0 ) ;
#line 4990
enum irqreturn ldv_interrupt_scenario_handler_2_5(irqreturn_t (*arg0)(int  , void * ) ,
                                                  int arg1 , void *arg2 ) ;
#line 4992
void ldv_interrupt_scenario_thread_2_3(irqreturn_t (*arg0)(int  , void * ) , int arg1 ,
                                       void *arg2 ) ;
#line 4994
void *ldv_main_10(void *arg0 ) ;
#line 4995
void *ldv_platform_instance_3(void *arg0 ) ;
#line 4996
int ldv_platform_instance_probe_3_14(int (*arg0)(struct platform_device * ) , struct platform_device *arg1 ) ;
#line 4997
void ldv_platform_instance_release_3_3(int (*arg0)(struct platform_device * ) , struct platform_device *arg1 ) ;
#line 4998
void *ldv_pm_ops_scenario_4(void *arg0 ) ;
#line 4999
void ldv_pm_ops_scenario_freeze_4_15(int (*arg0)(struct device * ) , struct device *arg1 ) ;
#line 5000
void ldv_pm_ops_scenario_poweroff_4_9(int (*arg0)(struct device * ) , struct device *arg1 ) ;
#line 5001
void ldv_pm_ops_scenario_restore_4_4(int (*arg0)(struct device * ) , struct device *arg1 ) ;
#line 5002
void ldv_pm_ops_scenario_resume_4_16(int (*arg0)(struct device * ) , struct device *arg1 ) ;
#line 5003
void ldv_pm_ops_scenario_runtime_resume_4_24(int (*arg0)(struct device * ) , struct device *arg1 ) ;
#line 5004
void ldv_pm_ops_scenario_runtime_suspend_4_25(int (*arg0)(struct device * ) , struct device *arg1 ) ;
#line 5005
void ldv_pm_ops_scenario_suspend_4_21(int (*arg0)(struct device * ) , struct device *arg1 ) ;
#line 5006
void ldv_pm_ops_scenario_thaw_4_10(int (*arg0)(struct device * ) , struct device *arg1 ) ;
#line 5007
int main(void) ;
#line 5008 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_t ldv_thread_2  ;
#line 5009 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_t ldv_thread_3  ;
#line 5010 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_t ldv_thread_4  ;
#line 5011 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_t ldv_thread_5  ;
#line 5012 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_dispatch_deregister_8_1(struct platform_driver *arg0 ) 
{ 
  int ret ;

  {
  {
#line 5017
  ret = pthread_join(ldv_thread_3, (void **)0);
#line 5018
  assume_abort_if_not(ret == 0);
  }
#line 5020
  return;
}
}
#line 5023 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_dispatch_insmod_deregister_10_2(void) 
{ 
  int ret ;

  {
  {
#line 5028
  ret = pthread_join(ldv_thread_5, (void **)0);
#line 5029
  assume_abort_if_not(ret == 0);
  }
#line 5031
  return;
}
}
#line 5034 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_dispatch_insmod_register_10_3(void) 
{ 
  int ret ;
  struct ldv_struct_platform_instance_3 *cf_arg_5 ;
  void *tmp ;

  {
  {
#line 5041
  tmp = ldv_xmalloc((size_t___0 )16UL);
#line 5042
  cf_arg_5 = (struct ldv_struct_platform_instance_3 *)tmp;
#line 5043
  ret = pthread_create((pthread_t * __restrict  )(& ldv_thread_5), (pthread_attr_t const   * __restrict  )((pthread_attr_t const   *)0),
                       & ldv_insmod_5, (void * __restrict  )((void *)cf_arg_5));
#line 5045
  assume_abort_if_not(ret == 0);
  }
#line 5047
  return;
}
}
#line 5050 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_dispatch_irq_deregister_7_1(int arg0 ) 
{ 
  int ret ;

  {
  {
#line 5055
  ret = pthread_join(ldv_thread_2, (void **)0);
#line 5056
  assume_abort_if_not(ret == 0);
  }
#line 5058
  return;
}
}
#line 5061 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_dispatch_irq_register_9_3(int arg0 , irqreturn_t (*arg1)(int  , void * ) ,
                                   irqreturn_t (*arg2)(int  , void * ) , void *arg3 ) 
{ 
  int ret ;
  struct ldv_struct_interrupt_scenario_2 *cf_arg_2 ;
  void *tmp ;

  {
  {
#line 5069
  tmp = ldv_xmalloc((size_t___0 )40UL);
#line 5070
  cf_arg_2 = (struct ldv_struct_interrupt_scenario_2 *)tmp;
#line 5071
  cf_arg_2->arg0 = arg0;
#line 5072
  cf_arg_2->arg1 = arg1;
#line 5073
  cf_arg_2->arg2 = arg2;
#line 5074
  cf_arg_2->arg3 = arg3;
#line 5075
  ret = pthread_create((pthread_t * __restrict  )(& ldv_thread_2), (pthread_attr_t const   * __restrict  )((pthread_attr_t const   *)0),
                       & ldv_interrupt_scenario_2, (void * __restrict  )((void *)cf_arg_2));
#line 5077
  assume_abort_if_not(ret == 0);
  }
#line 5079
  return;
}
}
#line 5082 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_dispatch_pm_deregister_3_5(void) 
{ 
  int ret ;

  {
  {
#line 5087
  ret = pthread_join(ldv_thread_4, (void **)0);
#line 5088
  assume_abort_if_not(ret == 0);
  }
#line 5090
  return;
}
}
#line 5093 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_dispatch_pm_register_3_6(void) 
{ 
  int ret ;
  struct ldv_struct_platform_instance_3 *cf_arg_4 ;
  void *tmp ;

  {
  {
#line 5100
  tmp = ldv_xmalloc((size_t___0 )16UL);
#line 5101
  cf_arg_4 = (struct ldv_struct_platform_instance_3 *)tmp;
#line 5102
  ret = pthread_create((pthread_t * __restrict  )(& ldv_thread_4), (pthread_attr_t const   * __restrict  )((pthread_attr_t const   *)0),
                       & ldv_pm_ops_scenario_4, (void * __restrict  )((void *)cf_arg_4));
#line 5104
  assume_abort_if_not(ret == 0);
  }
#line 5106
  return;
}
}
#line 5109 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_dispatch_register_6_3(struct platform_driver *arg0 ) 
{ 
  int ret ;
  struct ldv_struct_platform_instance_3 *cf_arg_3 ;
  void *tmp ;

  {
  {
#line 5116
  tmp = ldv_xmalloc((size_t___0 )16UL);
#line 5117
  cf_arg_3 = (struct ldv_struct_platform_instance_3 *)tmp;
#line 5118
  cf_arg_3->arg0 = arg0;
#line 5119
  ret = pthread_create((pthread_t * __restrict  )(& ldv_thread_3), (pthread_attr_t const   * __restrict  )((pthread_attr_t const   *)0),
                       & ldv_platform_instance_3, (void * __restrict  )((void *)cf_arg_3));
#line 5121
  assume_abort_if_not(ret == 0);
  }
#line 5123
  return;
}
}
#line 5126 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_emg___platform_driver_register(struct platform_driver *arg0 , struct module *arg1 ) 
{ 
  struct platform_driver *ldv_6_platform_driver_platform_driver ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 5133
  tmp___1 = ldv_undef_int();
  }
#line 5135
  if (tmp___1 != 0) {
    {
#line 5137
    ldv_6_platform_driver_platform_driver = arg0;
#line 5138
    ldv_dispatch_register_6_3(ldv_6_platform_driver_platform_driver);
    }
#line 5140
    return (0);
  } else {
    {
#line 5143
    tmp___0 = ldv_undef_int_negative();
    }
#line 5145
    return (tmp___0);
  }
}
}
#line 5149 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_emg_free_irq(int arg0 , void *arg1 ) 
{ 
  int ldv_7_line_line ;

  {
  {
#line 5154
  ldv_7_line_line = arg0;
#line 5155
  ldv_dispatch_irq_deregister_7_1(ldv_7_line_line);
  }
#line 5157
  return;
#line 5158
  return;
}
}
#line 5161 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_emg_platform_driver_unregister(struct platform_driver *arg0 ) 
{ 
  struct platform_driver *ldv_8_platform_driver_platform_driver ;

  {
  {
#line 5166
  ldv_8_platform_driver_platform_driver = arg0;
#line 5167
  ldv_dispatch_deregister_8_1(ldv_8_platform_driver_platform_driver);
  }
#line 5169
  return;
#line 5170
  return;
}
}
#line 5173 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_emg_request_threaded_irq(unsigned int arg0 , irqreturn_t (*arg1)(int  , void * ) ,
                                 irqreturn_t (*arg2)(int  , void * ) , unsigned long arg3 ,
                                 char *arg4 , void *arg5 ) 
{ 
  irqreturn_t (*ldv_9_callback_handler)(int  , void * ) ;
  void *ldv_9_data_data ;
  int ldv_9_line_line ;
  irqreturn_t (*ldv_9_thread_thread)(int  , void * ) ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 5185
  tmp___2 = ldv_undef_int();
  }
#line 5187
  if (tmp___2 != 0) {
    {
#line 5189
    ldv_9_line_line = (int )arg0;
#line 5190
    ldv_9_callback_handler = arg1;
#line 5191
    ldv_9_thread_thread = arg2;
#line 5192
    ldv_9_data_data = arg5;
#line 5193
    ldv_dispatch_irq_register_9_3(ldv_9_line_line, ldv_9_callback_handler, ldv_9_thread_thread,
                                  ldv_9_data_data);
    }
#line 5196
    return (0);
  } else {
    {
#line 5199
    tmp___1 = ldv_undef_int_negative();
    }
#line 5201
    return (tmp___1);
  }
}
}
#line 5205 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_insmod_5(void *arg0 ) 
{ 
  int ldv_5_ret_default ;
  void (*ldv_5_tegra_slink_driver_exit_default)(void) ;
  int (*ldv_5_tegra_slink_driver_init_default)(void) ;
  int tmp___1 ;

  {
  {
#line 5213
  ldv_5_tegra_slink_driver_exit_default = (void (*)(void))0;
#line 5214
  ldv_5_tegra_slink_driver_init_default = (int (*)(void))0;
#line 5215
  ldv_free(arg0);
#line 5216
  ldv_5_ret_default = ldv_insmod_tegra_slink_driver_init_5_6(ldv_5_tegra_slink_driver_init_default);
#line 5217
  ldv_5_ret_default = ldv_post_init(ldv_5_ret_default);
#line 5218
  tmp___1 = ldv_undef_int();
  }
#line 5220
  if (tmp___1 != 0) {
    {
#line 5222
    assume_abort_if_not(ldv_5_ret_default != 0);
    }
#line 5224
    return ((void *)0);
  } else {
    {
#line 5227
    assume_abort_if_not(ldv_5_ret_default == 0);
#line 5228
    ldv_insmod_tegra_slink_driver_exit_5_2(ldv_5_tegra_slink_driver_exit_default);
    }
#line 5230
    return ((void *)0);
  }
#line 5232
  return ((void *)0);
}
}
#line 5235 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_insmod_tegra_slink_driver_exit_5_2(void (*arg0)(void) ) 
{ 


  {
  {
#line 5239
  tegra_slink_driver_exit();
  }
#line 5241
  return;
}
}
#line 5244 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_insmod_tegra_slink_driver_init_5_6(int (*arg0)(void) ) 
{ 
  int tmp ;

  {
  {
#line 5249
  tmp = tegra_slink_driver_init();
  }
#line 5251
  return (tmp);
}
}
#line 5254 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_interrupt_scenario_2(void *arg0 ) 
{ 
  irqreturn_t (*ldv_2_callback_handler)(int  , void * ) ;
  void *ldv_2_data_data ;
  int ldv_2_line_line ;
  int tmp ;
  enum irqreturn ldv_2_ret_val_default ;
  irqreturn_t (*ldv_2_thread_thread)(int  , void * ) ;
  struct ldv_struct_interrupt_scenario_2 *data ;
  int tmp___1 ;

  {
  {
#line 5258
  tmp = ldv_undef_int();
#line 5258
  ldv_2_line_line = tmp;
#line 5265
  data = (struct ldv_struct_interrupt_scenario_2 *)arg0;
#line 5266
  ldv_2_callback_handler = (irqreturn_t (*)(int  , void * ))0;
#line 5267
  ldv_2_data_data = (void *)0;
#line 5268
  ldv_2_thread_thread = (irqreturn_t (*)(int  , void * ))0;
  }
#line 5270
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_interrupt_scenario_2 *)0)) {
    {
#line 5272
    ldv_2_line_line = data->arg0;
#line 5273
    ldv_2_callback_handler = data->arg1;
#line 5274
    ldv_2_thread_thread = data->arg2;
#line 5275
    ldv_2_data_data = data->arg3;
#line 5276
    ldv_free((void *)data);
    }
  }
  {
#line 5281
  ldv_switch_to_interrupt_context();
#line 5282
  ldv_2_ret_val_default = ldv_interrupt_scenario_handler_2_5(ldv_2_callback_handler,
                                                             ldv_2_line_line, ldv_2_data_data);
#line 5284
  ldv_switch_to_process_context();
#line 5285
  tmp___1 = ldv_undef_int();
  }
#line 5287
  if (tmp___1 != 0) {
    {
#line 5289
    assume_abort_if_not((unsigned int )ldv_2_ret_val_default == 2U);
#line 5290
    ldv_interrupt_scenario_thread_2_3(ldv_2_thread_thread, ldv_2_line_line, ldv_2_data_data);
    }
  } else {
    {
#line 5294
    assume_abort_if_not((unsigned int )ldv_2_ret_val_default != 2U);
    }
  }
#line 5297
  return ((void *)0);
#line 5298
  return ((void *)0);
}
}
#line 5301 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
enum irqreturn ldv_interrupt_scenario_handler_2_5(irqreturn_t (*arg0)(int  , void * ) ,
                                                  int arg1 , void *arg2 ) 
{ 
  irqreturn_t tmp ;

  {
  {
#line 5307
  tmp = tegra_slink_isr(arg1, arg2);
  }
#line 5309
  return (tmp);
}
}
#line 5312 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_interrupt_scenario_thread_2_3(irqreturn_t (*arg0)(int  , void * ) , int arg1 ,
                                       void *arg2 ) 
{ 


  {
  {
#line 5317
  tegra_slink_isr_thread(arg1, arg2);
  }
#line 5319
  return;
}
}
#line 5322 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_main_10(void *arg0 ) 
{ 


  {
  {
#line 5326
  ldv_initialize();
#line 5327
  ldv_dispatch_insmod_register_10_3();
#line 5328
  ldv_dispatch_insmod_deregister_10_2();
#line 5329
  ldv_check_final_state();
#line 5330
  assume_abort_if_not(0);
  }
#line 5332
  return ((void *)0);
#line 5333
  return ((void *)0);
}
}
#line 5336 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_platform_instance_3(void *arg0 ) 
{ 
  struct platform_driver *ldv_3_container_platform_driver ;
  int ldv_3_probed_default ;
  struct platform_device *ldv_3_resource_platform_device ;
  struct ldv_struct_platform_instance_3 *data ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
  {
#line 5348
  data = (struct ldv_struct_platform_instance_3 *)arg0;
#line 5349
  ldv_3_container_platform_driver = (struct platform_driver *)0;
#line 5350
  ldv_3_probed_default = ldv_undef_int();
  }
#line 5352
  if ((unsigned long )data != (unsigned long )((struct ldv_struct_platform_instance_3 *)0)) {
    {
#line 5354
    ldv_3_container_platform_driver = data->arg0;
#line 5355
    ldv_free((void *)data);
    }
  }
  {
#line 5360
  tmp___1 = ldv_xmalloc((size_t___0 )1432UL);
#line 5361
  ldv_3_resource_platform_device = (struct platform_device *)tmp___1;
  }
#line 5363
  goto ldv_main_3;
#line 5364
  return ((void *)0);
  ldv_main_3: 
  {
#line 5367
  tmp___3 = ldv_undef_int();
  }
#line 5369
  if (tmp___3 != 0) {
    {
#line 5371
    ldv_pre_probe();
#line 5372
    ldv_3_probed_default = ldv_platform_instance_probe_3_14(ldv_3_container_platform_driver->probe,
                                                            ldv_3_resource_platform_device);
#line 5374
    ldv_3_probed_default = ldv_post_probe(ldv_3_probed_default);
#line 5375
    tmp___2 = ldv_undef_int();
    }
#line 5377
    if (tmp___2 != 0) {
      {
#line 5379
      assume_abort_if_not(ldv_3_probed_default == 0);
      }
#line 5381
      goto ldv_call_3;
    } else {
      {
#line 5384
      assume_abort_if_not(ldv_3_probed_default != 0);
      }
#line 5386
      goto ldv_main_3;
    }
  } else {
    {
#line 5390
    ldv_free((void *)ldv_3_resource_platform_device);
    }
#line 5392
    return ((void *)0);
  }
#line 5394
  return ((void *)0);
  ldv_call_3: 
  {
#line 5397
  tmp___4 = ldv_undef_int();
  }
#line 5400
  if (tmp___4 == 1) {
#line 5401
    goto case_1;
  }
#line 5404
  if (tmp___4 == 2) {
#line 5405
    goto case_2;
  }
#line 5408
  if (tmp___4 == 3) {
#line 5409
    goto case_3;
  }
#line 5412
  goto switch_default;
  case_1: 
  {

  }
#line 5414
  goto ldv_call_3;
  case_2: 
  {
#line 5417
  ldv_dispatch_pm_register_3_6();
#line 5418
  ldv_dispatch_pm_deregister_3_5();
  }
#line 5420
  goto ldv_call_3;
  case_3: 
  {
#line 5423
  ldv_platform_instance_release_3_3(ldv_3_container_platform_driver->remove, ldv_3_resource_platform_device);
#line 5424
  ldv_3_probed_default = 1;
  }
#line 5426
  goto ldv_main_3;
  switch_default: 
  {
#line 5429
  assume_abort_if_not(0);
  }
  switch_break: 
  {

  }
#line 5433
  return ((void *)0);
}
}
#line 5436 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_platform_instance_probe_3_14(int (*arg0)(struct platform_device * ) , struct platform_device *arg1 ) 
{ 
  int tmp ;

  {
  {
#line 5441
  tmp = tegra_slink_probe(arg1);
  }
#line 5443
  return (tmp);
}
}
#line 5446 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_platform_instance_release_3_3(int (*arg0)(struct platform_device * ) , struct platform_device *arg1 ) 
{ 


  {
  {
#line 5450
  tegra_slink_remove(arg1);
  }
#line 5452
  return;
}
}
#line 5455 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_pm_ops_scenario_4(void *arg0 ) 
{ 
  struct device *ldv_4_device_device ;
  struct dev_pm_ops *ldv_4_pm_ops_dev_pm_ops ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp ;
  void *tmp___6 ;

  {
  {
#line 5466
  tmp = ldv_malloc((size_t___0 )sizeof(struct device ));
#line 5466
  ldv_4_device_device = (struct device *)tmp;
#line 5467
  tmp___6 = ldv_malloc((size_t___0 )sizeof(struct dev_pm_ops ));
#line 5467
  ldv_4_pm_ops_dev_pm_ops = (struct dev_pm_ops *)tmp___6;
#line 5468
  ldv_free(arg0);
  }
#line 5470
  goto ldv_do_4;
#line 5471
  return ((void *)0);
  ldv_do_4: 
  {
#line 5474
  tmp___1 = ldv_undef_int();
  }
#line 5477
  if (tmp___1 == 1) {
#line 5478
    goto case_1;
  }
#line 5481
  if (tmp___1 == 2) {
#line 5482
    goto case_2;
  }
#line 5485
  if (tmp___1 == 3) {
#line 5486
    goto case_3;
  }
#line 5489
  if (tmp___1 == 4) {
#line 5490
    goto case_4;
  }
#line 5493
  goto switch_default___0;
  case_1: 
  {

  }
#line 5495
  goto ldv_do_4;
  case_2: 
  {
#line 5498
  ldv_pm_ops_scenario_runtime_suspend_4_25(ldv_4_pm_ops_dev_pm_ops->runtime_suspend,
                                           ldv_4_device_device);
#line 5500
  ldv_pm_ops_scenario_runtime_resume_4_24(ldv_4_pm_ops_dev_pm_ops->runtime_resume,
                                          ldv_4_device_device);
  }
#line 5503
  goto ldv_do_4;
  case_3: 
  {
#line 5506
  tmp___2 = ldv_undef_int();
  }
#line 5509
  if (tmp___2 == 1) {
#line 5510
    goto case_1___0;
  }
#line 5513
  if (tmp___2 == 2) {
#line 5514
    goto case_2___0;
  }
#line 5517
  if (tmp___2 == 3) {
#line 5518
    goto case_3___0;
  }
#line 5521
  goto switch_default;
  case_1___0: 
  {
#line 5524
  ldv_pm_ops_scenario_suspend_4_21(ldv_4_pm_ops_dev_pm_ops->suspend, ldv_4_device_device);
#line 5525
  tmp___3 = ldv_undef_int();
#line 5526
  ldv_pm_ops_scenario_resume_4_16(ldv_4_pm_ops_dev_pm_ops->resume, ldv_4_device_device);
  }
#line 5528
  goto ldv_28455;
  case_2___0: 
  {
#line 5531
  ldv_pm_ops_scenario_freeze_4_15(ldv_4_pm_ops_dev_pm_ops->freeze, ldv_4_device_device);
#line 5532
  tmp___4 = ldv_undef_int();
#line 5533
  ldv_pm_ops_scenario_thaw_4_10(ldv_4_pm_ops_dev_pm_ops->thaw, ldv_4_device_device);
  }
#line 5535
  goto ldv_28455;
  case_3___0: 
  {
#line 5538
  ldv_pm_ops_scenario_poweroff_4_9(ldv_4_pm_ops_dev_pm_ops->poweroff, ldv_4_device_device);
#line 5539
  tmp___5 = ldv_undef_int();
#line 5540
  ldv_pm_ops_scenario_restore_4_4(ldv_4_pm_ops_dev_pm_ops->restore, ldv_4_device_device);
  }
#line 5542
  goto ldv_28455;
  switch_default: 
  {
#line 5545
  assume_abort_if_not(0);
  }
  switch_break___0: 
  {

  }
  ldv_28455: 
  {

  }
#line 5550
  goto ldv_do_4;
  case_4: 
  {

  }
#line 5552
  return ((void *)0);
  switch_default___0: 
  {
#line 5555
  assume_abort_if_not(0);
  }
  switch_break: 
  {

  }
#line 5559
  return ((void *)0);
}
}
#line 5562 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_pm_ops_scenario_freeze_4_15(int (*arg0)(struct device * ) , struct device *arg1 ) 
{ 


  {
  {
#line 5566
  tegra_slink_suspend(arg1);
  }
#line 5568
  return;
}
}
#line 5571 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_pm_ops_scenario_poweroff_4_9(int (*arg0)(struct device * ) , struct device *arg1 ) 
{ 


  {
  {
#line 5575
  tegra_slink_suspend(arg1);
  }
#line 5577
  return;
}
}
#line 5580 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_pm_ops_scenario_restore_4_4(int (*arg0)(struct device * ) , struct device *arg1 ) 
{ 


  {
  {
#line 5584
  tegra_slink_resume(arg1);
  }
#line 5586
  return;
}
}
#line 5589 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_pm_ops_scenario_resume_4_16(int (*arg0)(struct device * ) , struct device *arg1 ) 
{ 


  {
  {
#line 5593
  tegra_slink_resume(arg1);
  }
#line 5595
  return;
}
}
#line 5598 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_pm_ops_scenario_runtime_resume_4_24(int (*arg0)(struct device * ) , struct device *arg1 ) 
{ 


  {
  {
#line 5602
  tegra_slink_runtime_resume(arg1);
  }
#line 5604
  return;
}
}
#line 5607 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_pm_ops_scenario_runtime_suspend_4_25(int (*arg0)(struct device * ) , struct device *arg1 ) 
{ 


  {
  {
#line 5611
  tegra_slink_runtime_suspend(arg1);
  }
#line 5613
  return;
}
}
#line 5616 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_pm_ops_scenario_suspend_4_21(int (*arg0)(struct device * ) , struct device *arg1 ) 
{ 


  {
  {
#line 5620
  tegra_slink_suspend(arg1);
  }
#line 5622
  return;
}
}
#line 5625 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_pm_ops_scenario_thaw_4_10(int (*arg0)(struct device * ) , struct device *arg1 ) 
{ 


  {
  {
#line 5629
  tegra_slink_resume(arg1);
  }
#line 5631
  return;
}
}
#line 5634 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int main(void) 
{ 


  {
  {
#line 5638
  ldv_main_10((void *)0);
  }
#line 5640
  return (0);
}
}
#line 5643 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static long PTR_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  {
#line 5648
  tmp = ldv_ptr_err(ptr);
  }
#line 5650
  return (tmp);
}
}
#line 5653 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
  {
#line 5658
  tmp = ldv_is_err(ptr);
  }
#line 5660
  return (tmp);
}
}
#line 5663 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void *ldv_dev_get_drvdata_30(struct device  const  *dev ) 
{ 
  void *tmp ;

  {
  {
#line 5668
  tmp = ldv_dev_get_drvdata(dev);
  }
#line 5670
  return (tmp);
}
}
#line 5673 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int ldv_dev_set_drvdata_31(struct device *dev , void *data ) 
{ 
  int tmp ;

  {
  {
#line 5678
  tmp = ldv_dev_set_drvdata(dev, data);
  }
#line 5680
  return (tmp);
}
}
#line 5683 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void *ldv_dev_get_drvdata_42(struct device  const  *dev ) 
{ 
  void *tmp ;

  {
  {
#line 5688
  tmp = ldv_dev_get_drvdata(dev);
  }
#line 5690
  return (tmp);
}
}
#line 5693 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void ldv___ldv_spin_lock_44(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  {
#line 5697
  ldv_spin_lock_lock_of_tegra_slink_data();
#line 5698
  __ldv_spin_lock(ldv_func_arg1);
  }
#line 5700
  return;
}
}
#line 5703 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
__inline static void ldv_spin_unlock_irqrestore_45(spinlock_t *lock , unsigned long flags ) 
{ 


  {
  {
#line 5707
  ldv_spin_unlock_lock_of_tegra_slink_data();
#line 5708
  spin_unlock_irqrestore(lock, flags);
  }
#line 5710
  return;
}
}
#line 5713 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void ldv___ldv_spin_lock_46(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  {
#line 5717
  ldv_spin_lock_lock_of_tegra_slink_data();
#line 5718
  __ldv_spin_lock(ldv_func_arg1);
  }
#line 5720
  return;
}
}
#line 5723 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void ldv___ldv_spin_lock_48(spinlock_t *ldv_func_arg1 ) 
{ 


  {
  {
#line 5727
  ldv_spin_lock_lock_of_tegra_slink_data();
#line 5728
  __ldv_spin_lock(ldv_func_arg1);
  }
#line 5730
  return;
}
}
#line 5733 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static struct spi_master *ldv_spi_alloc_master_51(struct device *host , unsigned int size ) 
{ 
  struct spi_master *tmp ;

  {
  {
#line 5738
  tmp = ldv_spi_alloc_master(host, size);
  }
#line 5740
  return (tmp);
}
}
#line 5743 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int ldv_request_threaded_irq_52(unsigned int ldv_func_arg1 , irqreturn_t (*ldv_func_arg2)(int  ,
                                                                                                 void * ) ,
                                       irqreturn_t (*ldv_func_arg3)(int  , void * ) ,
                                       unsigned long ldv_func_arg4 , char const   *ldv_func_arg5 ,
                                       void *ldv_func_arg6 ) 
{ 
  int tmp ;

  {
  {
#line 5752
  tmp = ldv_emg_request_threaded_irq(ldv_func_arg1, ldv_func_arg2, ldv_func_arg3,
                                     ldv_func_arg4, (char *)ldv_func_arg5, ldv_func_arg6);
  }
#line 5755
  return (tmp);
}
}
#line 5758 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void ldv_free_irq_53(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) 
{ 


  {
  {
#line 5762
  ldv_emg_free_irq((int )ldv_func_arg1, ldv_func_arg2);
  }
#line 5764
  return;
}
}
#line 5767 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void ldv_free_irq_54(unsigned int ldv_func_arg1 , void *ldv_func_arg2 ) 
{ 


  {
  {
#line 5771
  ldv_emg_free_irq((int )ldv_func_arg1, ldv_func_arg2);
  }
#line 5773
  return;
}
}
#line 5776 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void *ldv_dev_get_drvdata_55(struct device  const  *dev ) 
{ 
  void *tmp ;

  {
  {
#line 5781
  tmp = ldv_dev_get_drvdata(dev);
  }
#line 5783
  return (tmp);
}
}
#line 5786 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void *ldv_dev_get_drvdata_56(struct device  const  *dev ) 
{ 
  void *tmp ;

  {
  {
#line 5791
  tmp = ldv_dev_get_drvdata(dev);
  }
#line 5793
  return (tmp);
}
}
#line 5796 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void *ldv_dev_get_drvdata_57(struct device  const  *dev ) 
{ 
  void *tmp ;

  {
  {
#line 5801
  tmp = ldv_dev_get_drvdata(dev);
  }
#line 5803
  return (tmp);
}
}
#line 5806 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void *ldv_dev_get_drvdata_58(struct device  const  *dev ) 
{ 
  void *tmp ;

  {
  {
#line 5811
  tmp = ldv_dev_get_drvdata(dev);
  }
#line 5813
  return (tmp);
}
}
#line 5816 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int ldv___platform_driver_register_59(struct platform_driver *ldv_func_arg1 ,
                                             struct module *ldv_func_arg2 ) 
{ 
  int tmp ;

  {
  {
#line 5822
  tmp = ldv_emg___platform_driver_register(ldv_func_arg1, ldv_func_arg2);
  }
#line 5824
  return (tmp);
}
}
#line 5827 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static void ldv_platform_driver_unregister_60(struct platform_driver *ldv_func_arg1 ) 
{ 


  {
  {
#line 5831
  ldv_emg_platform_driver_unregister(ldv_func_arg1);
  }
#line 5833
  return;
}
}
#line 5836
void *ldv_xzalloc(size_t___0 size ) ;
#line 5837 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 5840
  if ((unsigned long )dev != (unsigned long )((struct device  const  *)0)) {
#line 5840
    if ((unsigned long )dev->p != (unsigned long )((struct device_private *)0)) {
#line 5841
      return ((dev->p)->driver_data);
    }
  }
#line 5844
  return ((void *)0);
}
}
#line 5847 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_dev_set_drvdata(struct device *dev , void *data ) 
{ 
  void *tmp ;

  {
  {
#line 5852
  tmp = ldv_xzalloc((size_t___0 )8UL);
#line 5853
  dev->p = (struct device_private *)tmp;
#line 5854
  (dev->p)->driver_data = data;
  }
#line 5856
  return (0);
}
}
#line 5859
void *ldv_zalloc(size_t___0 size ) ;
#line 5860 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct spi_master *ldv_spi_alloc_master(struct device *host , unsigned int size ) 
{ 
  struct spi_master *master ;
  void *tmp ;

  {
  {
#line 5866
  tmp = ldv_zalloc((size_t___0 )((unsigned long )size + 2200UL));
#line 5867
  master = (struct spi_master *)tmp;
  }
#line 5869
  if ((unsigned long )master == (unsigned long )((struct spi_master *)0)) {
#line 5870
    return ((struct spi_master *)0);
  }
  {
#line 5874
  ldv_dev_set_drvdata(& master->dev, (void *)(master + 1U));
  }
#line 5876
  return (master);
}
}
#line 5879 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
long ldv_is_err(void const   *ptr ) 
{ 


  {
#line 5882
  return ((long )((unsigned long )ptr > 4294967295UL));
}
}
#line 5885 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_err_ptr(long error ) 
{ 


  {
#line 5888
  return ((void *)(4294967295L - error));
}
}
#line 5891 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
long ldv_ptr_err(void const   *ptr ) 
{ 


  {
#line 5894
  return ((long )(4294967295UL - (unsigned long )ptr));
}
}
#line 5897 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
long ldv_is_err_or_null(void const   *ptr ) 
{ 
  long tmp ;
  int tmp___0 ;

  {
#line 5902
  if ((unsigned long )ptr == (unsigned long )((void const   *)0)) {
    {
#line 5903
    tmp___0 = 1;
    }
  } else {
    {
#line 5906
    tmp = ldv_is_err(ptr);
    }
#line 5908
    if (tmp != 0L) {
      {
#line 5909
      tmp___0 = 1;
      }
    } else {
      {
#line 5911
      tmp___0 = 0;
      }
    }
  }
#line 5914
  return ((long )tmp___0);
}
}
#line 5917
int ldv_filter_err_code(int ret_val ) ;
#line 5918 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
static int ldv_filter_positive_int(int val ) 
{ 


  {
  {
#line 5922
  assume_abort_if_not(val <= 0);
  }
#line 5924
  return (val);
}
}
#line 5927 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_post_init(int init_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 5932
  tmp = ldv_filter_positive_int(init_ret_val);
  }
#line 5934
  return (tmp);
}
}
#line 5937 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_post_probe(int probe_ret_val ) 
{ 
  int tmp ;

  {
  {
#line 5942
  tmp = ldv_filter_positive_int(probe_ret_val);
  }
#line 5944
  return (tmp);
}
}
#line 5947 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_filter_err_code(int ret_val ) 
{ 
  int tmp ;

  {
  {
#line 5952
  tmp = ldv_filter_positive_int(ret_val);
  }
#line 5954
  return (tmp);
}
}
#line 5957
void ldv_check_alloc_flags(gfp_t arg0 ) ;
#line 5958
void ldv_after_alloc(void *arg0 ) ;
#line 5959 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_kzalloc(size_t___0 size , gfp_t flags ) 
{ 
  void *res ;

  {
  {
#line 5964
  ldv_check_alloc_flags(flags);
#line 5965
  res = ldv_zalloc(size);
#line 5966
  ldv_after_alloc(res);
  }
#line 5968
  return (res);
}
}
#line 5971 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
long ldv__builtin_expect(long exp , long c ) 
{ 


  {
#line 5974
  return (exp);
}
}
#line 5977 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv__builtin_trap(void) 
{ 


  {
  {
#line 5981
  ldv_assert((char const   *)"", 0);
  }
#line 5983
  return;
}
}
#line 5986
void *ldv_calloc(size_t___0 nmemb , size_t___0 size ) ;
#line 5987
extern void *malloc(size_t___0  ) ;
#line 5988
extern void *calloc(size_t___0  , size_t___0  ) ;
#line 5989
extern void free(void * ) ;
#line 5990
extern void *memset(void * , int  , size_t___0  ) ;
#line 5991 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_malloc(size_t___0 size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 5999
  tmp___1 = ldv_undef_int();
  }
#line 6001
  if (tmp___1 != 0) {
    {
#line 6003
    tmp = malloc(size);
#line 6004
    res = tmp;
#line 6005
    assume_abort_if_not((unsigned long )res != (unsigned long )((void *)0));
#line 6006
    tmp___0 = ldv_is_err((void const   *)res);
#line 6007
    assume_abort_if_not(tmp___0 == 0L);
    }
#line 6009
    return (res);
  } else {
#line 6011
    return ((void *)0);
  }
}
}
#line 6015 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_calloc(size_t___0 nmemb , size_t___0 size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
  {
#line 6023
  tmp___1 = ldv_undef_int();
  }
#line 6025
  if (tmp___1 != 0) {
    {
#line 6027
    tmp = calloc(nmemb, size);
#line 6028
    res = tmp;
#line 6029
    assume_abort_if_not((unsigned long )res != (unsigned long )((void *)0));
#line 6030
    tmp___0 = ldv_is_err((void const   *)res);
#line 6031
    assume_abort_if_not(tmp___0 == 0L);
    }
#line 6033
    return (res);
  } else {
#line 6035
    return ((void *)0);
  }
}
}
#line 6039 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_zalloc(size_t___0 size ) 
{ 
  void *tmp ;

  {
  {
#line 6044
  tmp = ldv_calloc((size_t___0 )1UL, size);
  }
#line 6046
  return (tmp);
}
}
#line 6049 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_free(void *s ) 
{ 


  {
  {
#line 6053
  free(s);
  }
#line 6055
  return;
}
}
#line 6058 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_xmalloc(size_t___0 size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 6065
  tmp = malloc(size);
#line 6066
  res = tmp;
#line 6067
  assume_abort_if_not((unsigned long )res != (unsigned long )((void *)0));
#line 6068
  tmp___0 = ldv_is_err((void const   *)res);
#line 6069
  assume_abort_if_not(tmp___0 == 0L);
  }
#line 6071
  return (res);
}
}
#line 6074 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *ldv_xzalloc(size_t___0 size ) 
{ 
  void *res ;
  void *tmp ;
  long tmp___0 ;

  {
  {
#line 6081
  tmp = calloc((size_t___0 )1UL, size);
#line 6082
  res = tmp;
#line 6083
  assume_abort_if_not((unsigned long )res != (unsigned long )((void *)0));
#line 6084
  tmp___0 = ldv_is_err((void const   *)res);
#line 6085
  assume_abort_if_not(tmp___0 == 0L);
  }
#line 6087
  return (res);
}
}
#line 6090
unsigned long ldv_undef_ulong(void) ;
#line 6091
int ldv_undef_int_nonpositive(void) ;
#line 6094 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_undef_int(void) 
{ 
  int tmp ;

  {
  {
#line 6099
  tmp = __VERIFIER_nondet_int();
  }
#line 6101
  return (tmp);
}
}
#line 6104 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
unsigned long ldv_undef_ulong(void) 
{ 
  unsigned long tmp ;

  {
  {
#line 6109
  tmp = __VERIFIER_nondet_ulong();
  }
#line 6111
  return (tmp);
}
}
#line 6114 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_undef_int_negative(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 6120
  tmp = ldv_undef_int();
#line 6121
  ret = tmp;
#line 6122
  assume_abort_if_not(ret < 0);
  }
#line 6124
  return (ret);
}
}
#line 6127 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_undef_int_nonpositive(void) 
{ 
  int ret ;
  int tmp ;

  {
  {
#line 6133
  tmp = ldv_undef_int();
#line 6134
  ret = tmp;
#line 6135
  assume_abort_if_not(ret <= 0);
  }
#line 6137
  return (ret);
}
}
#line 6142
extern void ( __attribute__((__leaf__)) __assert_fail)(char const   *__assertion ,
                                                       char const   *__file , unsigned int __line ,
                                                       char const   *__function )  __attribute__((__nothrow__,
__noreturn__)) ;
#line 6145
extern void ( __attribute__((__leaf__)) __assert_perror_fail)(int __errnum , char const   *__file ,
                                                              unsigned int __line ,
                                                              char const   *__function )  __attribute__((__nothrow__,
__noreturn__)) ;
#line 6148
extern void ( __attribute__((__leaf__)) __assert)(char const   *__assertion , char const   *__file ,
                                                  int __line )  __attribute__((__nothrow__,
__noreturn__)) ;
#line 6151 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void reach_error(void) 
{ 


  {
  {
#line 6151
  __assert_fail((char const   *)"0", (char const   *)"linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.c",
                6417U, (char const   *)"reach_error");
  }
}
}
#line 6154 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_mutex_t___0 pmutex_lock  ;
#line 6155 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_mutex_lock_lock(struct mutex *lock ) 
{ 


  {
  {
#line 6159
  pthread_mutex_lock(& pmutex_lock);
  }
#line 6161
  return;
}
}
#line 6164 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_mutex_lock_interruptible_or_killable_lock(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 6169
  tmp = ldv_undef_int();
  }
#line 6171
  if (tmp != 0) {
    {
#line 6173
    pthread_mutex_lock(& pmutex_lock);
    }
#line 6175
    return (0);
  } else {
#line 6177
    return (-4);
  }
}
}
#line 6181 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_mutex_is_locked_lock(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 6186
  tmp = ldv_undef_int();
  }
#line 6188
  if (tmp != 0) {
#line 6189
    return (1);
  } else {
#line 6191
    return (0);
  }
}
}
#line 6195 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_mutex_trylock_lock(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 6200
  tmp = pthread_mutex_trylock(& pmutex_lock);
  }
#line 6202
  return (tmp);
}
}
#line 6205 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_atomic_dec_and_mutex_lock_lock(atomic_t *cnt , struct mutex *lock ) 
{ 


  {
  {
#line 6208
  (cnt->counter) --;
  }
#line 6209
  if (cnt->counter != 0) {
#line 6210
    return (0);
  } else {
    {
#line 6213
    pthread_mutex_lock(& pmutex_lock);
    }
#line 6215
    return (1);
  }
}
}
#line 6219 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_mutex_unlock_lock(struct mutex *lock ) 
{ 


  {
  {
#line 6223
  pthread_mutex_unlock(& pmutex_lock);
  }
#line 6225
  return;
}
}
#line 6228 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_mutex_t___0 pmutex_mutex_of_device  ;
#line 6229 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
  {
#line 6233
  pthread_mutex_lock(& pmutex_mutex_of_device);
  }
#line 6235
  return;
}
}
#line 6238 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_mutex_lock_interruptible_or_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 6243
  tmp = ldv_undef_int();
  }
#line 6245
  if (tmp != 0) {
    {
#line 6247
    pthread_mutex_lock(& pmutex_mutex_of_device);
    }
#line 6249
    return (0);
  } else {
#line 6251
    return (-4);
  }
}
}
#line 6255 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 6260
  tmp = ldv_undef_int();
  }
#line 6262
  if (tmp != 0) {
#line 6263
    return (1);
  } else {
#line 6265
    return (0);
  }
}
}
#line 6269 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int tmp ;

  {
  {
#line 6274
  tmp = pthread_mutex_trylock(& pmutex_mutex_of_device);
  }
#line 6276
  return (tmp);
}
}
#line 6279 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 


  {
  {
#line 6282
  (cnt->counter) --;
  }
#line 6283
  if (cnt->counter != 0) {
#line 6284
    return (0);
  } else {
    {
#line 6287
    pthread_mutex_lock(& pmutex_mutex_of_device);
    }
#line 6289
    return (1);
  }
}
}
#line 6293 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
  {
#line 6297
  pthread_mutex_unlock(& pmutex_mutex_of_device);
  }
#line 6299
  return;
}
}
#line 6302 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_initialize(void) 
{ 


  {
#line 6305
  return;
}
}
#line 6308 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_check_final_state(void) 
{ 


  {
#line 6311
  return;
}
}
#line 6314 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_assert(char const   *desc , int expr ) 
{ 


  {
#line 6317
  if (expr == 0) {
    {
#line 6319
    reach_error();
    }
  }
#line 6323
  return;
}
}
#line 6327 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_mutex_t___0 smutex_alloc_lock_of_task_struct  ;
#line 6328 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
  {
#line 6332
  pthread_mutex_lock(& smutex_alloc_lock_of_task_struct);
  }
#line 6334
  return;
}
}
#line 6337 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
  {
#line 6341
  pthread_mutex_unlock(& smutex_alloc_lock_of_task_struct);
  }
#line 6343
  return;
}
}
#line 6346 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;

  {
  {
#line 6351
  tmp = pthread_mutex_trylock(& smutex_alloc_lock_of_task_struct);
  }
#line 6353
  return (tmp);
}
}
#line 6356 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
#line 6359
  return;
}
}
#line 6362 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;

  {
  {
#line 6367
  tmp = ldv_undef_int();
  }
#line 6369
  if (tmp != 0) {
#line 6370
    return (1);
  } else {
#line 6372
    return (0);
  }
}
}
#line 6376 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;

  {
  {
#line 6381
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
  }
#line 6383
  return (tmp == 0);
}
}
#line 6386 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 6391
  is_spin_contended = ldv_undef_int();
  }
#line 6393
  if (is_spin_contended != 0) {
#line 6394
    return (0);
  } else {
#line 6396
    return (1);
  }
}
}
#line 6400 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 6405
  atomic_value_after_dec = ldv_undef_int();
  }
#line 6407
  if (atomic_value_after_dec == 0) {
    {
#line 6409
    ldv_spin_lock_alloc_lock_of_task_struct();
    }
#line 6411
    return (1);
  }
#line 6414
  return (0);
}
}
#line 6417 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_mutex_t___0 smutex_lock  ;
#line 6418 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_lock_lock(void) 
{ 


  {
  {
#line 6422
  pthread_mutex_lock(& smutex_lock);
  }
#line 6424
  return;
}
}
#line 6427 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_lock(void) 
{ 


  {
  {
#line 6431
  pthread_mutex_unlock(& smutex_lock);
  }
#line 6433
  return;
}
}
#line 6436 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_trylock_lock(void) 
{ 
  int tmp ;

  {
  {
#line 6441
  tmp = pthread_mutex_trylock(& smutex_lock);
  }
#line 6443
  return (tmp);
}
}
#line 6446 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_wait_lock(void) 
{ 


  {
#line 6449
  return;
}
}
#line 6452 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_locked_lock(void) 
{ 
  int tmp ;

  {
  {
#line 6457
  tmp = ldv_undef_int();
  }
#line 6459
  if (tmp != 0) {
#line 6460
    return (1);
  } else {
#line 6462
    return (0);
  }
}
}
#line 6466 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_can_lock_lock(void) 
{ 
  int tmp ;

  {
  {
#line 6471
  tmp = ldv_spin_is_locked_lock();
  }
#line 6473
  return (tmp == 0);
}
}
#line 6476 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_contended_lock(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 6481
  is_spin_contended = ldv_undef_int();
  }
#line 6483
  if (is_spin_contended != 0) {
#line 6484
    return (0);
  } else {
#line 6486
    return (1);
  }
}
}
#line 6490 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_atomic_dec_and_lock_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 6495
  atomic_value_after_dec = ldv_undef_int();
  }
#line 6497
  if (atomic_value_after_dec == 0) {
    {
#line 6499
    ldv_spin_lock_lock();
    }
#line 6501
    return (1);
  }
#line 6504
  return (0);
}
}
#line 6507 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_mutex_t___0 smutex_lock_of_NOT_ARG_SIGN  ;
#line 6508 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 6512
  pthread_mutex_lock(& smutex_lock_of_NOT_ARG_SIGN);
  }
#line 6514
  return;
}
}
#line 6517 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
  {
#line 6521
  pthread_mutex_unlock(& smutex_lock_of_NOT_ARG_SIGN);
  }
#line 6523
  return;
}
}
#line 6526 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 6531
  tmp = pthread_mutex_trylock(& smutex_lock_of_NOT_ARG_SIGN);
  }
#line 6533
  return (tmp);
}
}
#line 6536 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 6539
  return;
}
}
#line 6542 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 6547
  tmp = ldv_undef_int();
  }
#line 6549
  if (tmp != 0) {
#line 6550
    return (1);
  } else {
#line 6552
    return (0);
  }
}
}
#line 6556 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;

  {
  {
#line 6561
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
  }
#line 6563
  return (tmp == 0);
}
}
#line 6566 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 6571
  is_spin_contended = ldv_undef_int();
  }
#line 6573
  if (is_spin_contended != 0) {
#line 6574
    return (0);
  } else {
#line 6576
    return (1);
  }
}
}
#line 6580 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 6585
  atomic_value_after_dec = ldv_undef_int();
  }
#line 6587
  if (atomic_value_after_dec == 0) {
    {
#line 6589
    ldv_spin_lock_lock_of_NOT_ARG_SIGN();
    }
#line 6591
    return (1);
  }
#line 6594
  return (0);
}
}
#line 6597 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_mutex_t___0 smutex_lock_of_tegra_slink_data  ;
#line 6598 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_lock_lock_of_tegra_slink_data(void) 
{ 


  {
  {
#line 6602
  pthread_mutex_lock(& smutex_lock_of_tegra_slink_data);
  }
#line 6604
  return;
}
}
#line 6607 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_lock_of_tegra_slink_data(void) 
{ 


  {
  {
#line 6611
  pthread_mutex_unlock(& smutex_lock_of_tegra_slink_data);
  }
#line 6613
  return;
}
}
#line 6616 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_trylock_lock_of_tegra_slink_data(void) 
{ 
  int tmp ;

  {
  {
#line 6621
  tmp = pthread_mutex_trylock(& smutex_lock_of_tegra_slink_data);
  }
#line 6623
  return (tmp);
}
}
#line 6626 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_wait_lock_of_tegra_slink_data(void) 
{ 


  {
#line 6629
  return;
}
}
#line 6632 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_locked_lock_of_tegra_slink_data(void) 
{ 
  int tmp ;

  {
  {
#line 6637
  tmp = ldv_undef_int();
  }
#line 6639
  if (tmp != 0) {
#line 6640
    return (1);
  } else {
#line 6642
    return (0);
  }
}
}
#line 6646 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_can_lock_lock_of_tegra_slink_data(void) 
{ 
  int tmp ;

  {
  {
#line 6651
  tmp = ldv_spin_is_locked_lock_of_tegra_slink_data();
  }
#line 6653
  return (tmp == 0);
}
}
#line 6656 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_contended_lock_of_tegra_slink_data(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 6661
  is_spin_contended = ldv_undef_int();
  }
#line 6663
  if (is_spin_contended != 0) {
#line 6664
    return (0);
  } else {
#line 6666
    return (1);
  }
}
}
#line 6670 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_atomic_dec_and_lock_lock_of_tegra_slink_data(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 6675
  atomic_value_after_dec = ldv_undef_int();
  }
#line 6677
  if (atomic_value_after_dec == 0) {
    {
#line 6679
    ldv_spin_lock_lock_of_tegra_slink_data();
    }
#line 6681
    return (1);
  }
#line 6684
  return (0);
}
}
#line 6687 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_mutex_t___0 smutex_node_size_lock_of_pglist_data  ;
#line 6688 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_lock_node_size_lock_of_pglist_data(void) 
{ 


  {
  {
#line 6692
  pthread_mutex_lock(& smutex_node_size_lock_of_pglist_data);
  }
#line 6694
  return;
}
}
#line 6697 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_node_size_lock_of_pglist_data(void) 
{ 


  {
  {
#line 6701
  pthread_mutex_unlock(& smutex_node_size_lock_of_pglist_data);
  }
#line 6703
  return;
}
}
#line 6706 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_trylock_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;

  {
  {
#line 6711
  tmp = pthread_mutex_trylock(& smutex_node_size_lock_of_pglist_data);
  }
#line 6713
  return (tmp);
}
}
#line 6716 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_wait_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 6719
  return;
}
}
#line 6722 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_locked_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;

  {
  {
#line 6727
  tmp = ldv_undef_int();
  }
#line 6729
  if (tmp != 0) {
#line 6730
    return (1);
  } else {
#line 6732
    return (0);
  }
}
}
#line 6736 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_can_lock_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;

  {
  {
#line 6741
  tmp = ldv_spin_is_locked_node_size_lock_of_pglist_data();
  }
#line 6743
  return (tmp == 0);
}
}
#line 6746 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_contended_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 6751
  is_spin_contended = ldv_undef_int();
  }
#line 6753
  if (is_spin_contended != 0) {
#line 6754
    return (0);
  } else {
#line 6756
    return (1);
  }
}
}
#line 6760 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_atomic_dec_and_lock_node_size_lock_of_pglist_data(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 6765
  atomic_value_after_dec = ldv_undef_int();
  }
#line 6767
  if (atomic_value_after_dec == 0) {
    {
#line 6769
    ldv_spin_lock_node_size_lock_of_pglist_data();
    }
#line 6771
    return (1);
  }
#line 6774
  return (0);
}
}
#line 6777 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_mutex_t___0 smutex_ptl  ;
#line 6778 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_lock_ptl(void) 
{ 


  {
  {
#line 6782
  pthread_mutex_lock(& smutex_ptl);
  }
#line 6784
  return;
}
}
#line 6787 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_ptl(void) 
{ 


  {
  {
#line 6791
  pthread_mutex_unlock(& smutex_ptl);
  }
#line 6793
  return;
}
}
#line 6796 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_trylock_ptl(void) 
{ 
  int tmp ;

  {
  {
#line 6801
  tmp = pthread_mutex_trylock(& smutex_ptl);
  }
#line 6803
  return (tmp);
}
}
#line 6806 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_wait_ptl(void) 
{ 


  {
#line 6809
  return;
}
}
#line 6812 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_locked_ptl(void) 
{ 
  int tmp ;

  {
  {
#line 6817
  tmp = ldv_undef_int();
  }
#line 6819
  if (tmp != 0) {
#line 6820
    return (1);
  } else {
#line 6822
    return (0);
  }
}
}
#line 6826 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_can_lock_ptl(void) 
{ 
  int tmp ;

  {
  {
#line 6831
  tmp = ldv_spin_is_locked_ptl();
  }
#line 6833
  return (tmp == 0);
}
}
#line 6836 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_contended_ptl(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 6841
  is_spin_contended = ldv_undef_int();
  }
#line 6843
  if (is_spin_contended != 0) {
#line 6844
    return (0);
  } else {
#line 6846
    return (1);
  }
}
}
#line 6850 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_atomic_dec_and_lock_ptl(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 6855
  atomic_value_after_dec = ldv_undef_int();
  }
#line 6857
  if (atomic_value_after_dec == 0) {
    {
#line 6859
    ldv_spin_lock_ptl();
    }
#line 6861
    return (1);
  }
#line 6864
  return (0);
}
}
#line 6867 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
pthread_mutex_t___0 smutex_siglock_of_sighand_struct  ;
#line 6868 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
  {
#line 6872
  pthread_mutex_lock(& smutex_siglock_of_sighand_struct);
  }
#line 6874
  return;
}
}
#line 6877 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
  {
#line 6881
  pthread_mutex_unlock(& smutex_siglock_of_sighand_struct);
  }
#line 6883
  return;
}
}
#line 6886 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;

  {
  {
#line 6891
  tmp = pthread_mutex_trylock(& smutex_siglock_of_sighand_struct);
  }
#line 6893
  return (tmp);
}
}
#line 6896 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
#line 6899
  return;
}
}
#line 6902 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int tmp ;

  {
  {
#line 6907
  tmp = ldv_undef_int();
  }
#line 6909
  if (tmp != 0) {
#line 6910
    return (1);
  } else {
#line 6912
    return (0);
  }
}
}
#line 6916 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;

  {
  {
#line 6921
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
  }
#line 6923
  return (tmp == 0);
}
}
#line 6926 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
  {
#line 6931
  is_spin_contended = ldv_undef_int();
  }
#line 6933
  if (is_spin_contended != 0) {
#line 6934
    return (0);
  } else {
#line 6936
    return (1);
  }
}
}
#line 6940 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
  {
#line 6945
  atomic_value_after_dec = ldv_undef_int();
  }
#line 6947
  if (atomic_value_after_dec == 0) {
    {
#line 6949
    ldv_spin_lock_siglock_of_sighand_struct();
    }
#line 6951
    return (1);
  }
#line 6954
  return (0);
}
}
#line 6958 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void kfree(void const   *p ) 
{ 


  {
  {
#line 6959
  free((void *)p);
  }
#line 6960
  return;
}
}
#line 6961 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void debug_dma_sync_single_for_device(struct device *arg0 , dma_addr_t arg1 , size_t___0 arg2 ,
                                      int arg3 ) 
{ 


  {
#line 6962
  return;
}
}
#line 6964 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void debug_dma_alloc_coherent(struct device *arg0 , size_t___0 arg1 , dma_addr_t arg2 ,
                              void *arg3 ) 
{ 


  {
#line 6965
  return;
}
}
#line 6967 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void __raw_spin_lock_init(raw_spinlock_t *arg0 , char const   *arg1 , struct lock_class_key *arg2 ) 
{ 


  {
#line 6968
  return;
}
}
#line 6970 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void __const_udelay(unsigned long arg0 ) 
{ 


  {
#line 6971
  return;
}
}
#line 6973 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void _raw_spin_unlock_irqrestore(raw_spinlock_t *arg0 , unsigned long arg1 ) 
{ 


  {
#line 6974
  return;
}
}
#line 6977 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int reset_control_assert(struct reset_control *arg0 ) 
{ 
  int tmp ;

  {
  {
#line 6978
  tmp = __VERIFIER_nondet_int();
  }
#line 6978
  return (tmp);
}
}
#line 6981 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int platform_get_irq(struct platform_device *arg0 , unsigned int arg1 ) 
{ 
  int tmp ;

  {
  {
#line 6982
  tmp = __VERIFIER_nondet_int();
  }
#line 6982
  return (tmp);
}
}
#line 6985 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int devm_spi_register_master(struct device *arg0 , struct spi_master *arg1 ) 
{ 
  int tmp ;

  {
  {
#line 6986
  tmp = __VERIFIER_nondet_int();
  }
#line 6986
  return (tmp);
}
}
#line 6988 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_after_alloc(void *arg0 ) 
{ 


  {
#line 6989
  return;
}
}
#line 6991 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void debug_dma_sync_single_for_cpu(struct device *arg0 , dma_addr_t arg1 , size_t___0 arg2 ,
                                   int arg3 ) 
{ 


  {
#line 6992
  return;
}
}
#line 6995 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int clk_enable(struct clk *arg0 ) 
{ 
  int tmp ;

  {
  {
#line 6996
  tmp = __VERIFIER_nondet_int();
  }
#line 6996
  return (tmp);
}
}
#line 6999 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
long wait_for_completion_interruptible_timeout(struct completion *arg0 , unsigned long arg1 ) 
{ 
  long tmp ;

  {
  {
#line 7000
  tmp = __VERIFIER_nondet_long();
  }
#line 7000
  return (tmp);
}
}
#line 7002 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct dma_chan *dma_request_slave_channel_reason(struct device *arg0 , char const   *arg1 ) 
{ 
  void *tmp ;

  {
  {
#line 7003
  tmp = ldv_malloc((size_t___0 )sizeof(struct dma_chan ));
  }
#line 7003
  return ((struct dma_chan *)tmp);
}
}
#line 7006 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
unsigned long wait_for_completion_timeout(struct completion *arg0 , unsigned long arg1 ) 
{ 
  unsigned long tmp ;

  {
  {
#line 7007
  tmp = __VERIFIER_nondet_ulong();
  }
#line 7007
  return (tmp);
}
}
#line 7009 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_switch_to_interrupt_context(void) 
{ 


  {
#line 7010
  return;
}
}
#line 7012 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void __pm_runtime_disable(struct device *arg0 , bool arg1 ) 
{ 


  {
#line 7013
  return;
}
}
#line 7016 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int reset_control_deassert(struct reset_control *arg0 ) 
{ 
  int tmp ;

  {
  {
#line 7017
  tmp = __VERIFIER_nondet_int();
  }
#line 7017
  return (tmp);
}
}
#line 7019 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_check_alloc_flags(gfp_t arg0 ) 
{ 


  {
#line 7020
  return;
}
}
#line 7022 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct resource *platform_get_resource(struct platform_device *arg0 , unsigned int arg1 ,
                                       unsigned int arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 7023
  tmp = ldv_malloc((size_t___0 )sizeof(struct resource ));
  }
#line 7023
  return ((struct resource *)tmp);
}
}
#line 7026 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int clk_set_rate(struct clk *arg0 , unsigned long arg1 ) 
{ 
  int tmp ;

  {
  {
#line 7027
  tmp = __VERIFIER_nondet_int();
  }
#line 7027
  return (tmp);
}
}
#line 7029 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void sg_init_table(struct scatterlist *arg0 , unsigned int arg1 ) 
{ 


  {
#line 7030
  return;
}
}
#line 7033 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int __pm_runtime_resume(struct device *arg0 , int arg1 ) 
{ 
  int tmp ;

  {
  {
#line 7034
  tmp = __VERIFIER_nondet_int();
  }
#line 7034
  return (tmp);
}
}
#line 7036 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void __ldv_spin_lock(spinlock_t *arg0 ) 
{ 


  {
#line 7037
  return;
}
}
#line 7039 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_switch_to_process_context(void) 
{ 


  {
#line 7040
  return;
}
}
#line 7042 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void warn_slowpath_null(char const   *arg0 , int const   arg1 ) 
{ 


  {
#line 7043
  return;
}
}
#line 7045 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void ldv_pre_probe(void) 
{ 


  {
#line 7046
  return;
}
}
#line 7048 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void put_device(struct device *arg0 ) 
{ 


  {
#line 7049
  return;
}
}
#line 7051 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct reset_control *devm_reset_control_get(struct device *arg0 , char const   *arg1 ) 
{ 
  void *tmp ;

  {
  {
#line 7052
  tmp = ldv_malloc((size_t___0 )0UL);
  }
#line 7052
  return ((struct reset_control *)tmp);
}
}
#line 7055 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int dev_err(struct device  const  *arg0 , char const   *arg1  , ...) 
{ 
  int tmp ;

  {
  {
#line 7056
  tmp = __VERIFIER_nondet_int();
  }
#line 7056
  return (tmp);
}
}
#line 7059 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
unsigned long msecs_to_jiffies(unsigned int const   arg0 ) 
{ 
  unsigned long tmp ;

  {
  {
#line 7060
  tmp = __VERIFIER_nondet_ulong();
  }
#line 7060
  return (tmp);
}
}
#line 7063 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int __dynamic_dev_dbg(struct _ddebug *arg0 , struct device  const  *arg1 , char const   *arg2 
                      , ...) 
{ 
  int tmp ;

  {
  {
#line 7064
  tmp = __VERIFIER_nondet_int();
  }
#line 7064
  return (tmp);
}
}
#line 7067 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int spi_master_resume(struct spi_master *arg0 ) 
{ 
  int tmp ;

  {
  {
#line 7068
  tmp = __VERIFIER_nondet_int();
  }
#line 7068
  return (tmp);
}
}
#line 7070 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void pm_runtime_enable(struct device *arg0 ) 
{ 


  {
#line 7071
  return;
}
}
#line 7073 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *devm_ioremap_resource(struct device *arg0 , struct resource *arg1 ) 
{ 
  void *tmp ;

  {
  {
#line 7074
  tmp = ldv_malloc((size_t___0 )0UL);
  }
#line 7074
  return (tmp);
}
}
#line 7076 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
struct clk *devm_clk_get(struct device *arg0 , char const   *arg1 ) 
{ 
  void *tmp ;

  {
  {
#line 7077
  tmp = ldv_malloc((size_t___0 )0UL);
  }
#line 7077
  return ((struct clk *)tmp);
}
}
#line 7079 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void __init_waitqueue_head(wait_queue_head_t *arg0 , char const   *arg1 , struct lock_class_key *arg2 ) 
{ 


  {
#line 7080
  return;
}
}
#line 7083 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int __pm_runtime_idle(struct device *arg0 , int arg1 ) 
{ 
  int tmp ;

  {
  {
#line 7084
  tmp = __VERIFIER_nondet_int();
  }
#line 7084
  return (tmp);
}
}
#line 7087 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int spi_master_suspend(struct spi_master *arg0 ) 
{ 
  int tmp ;

  {
  {
#line 7088
  tmp = __VERIFIER_nondet_int();
  }
#line 7088
  return (tmp);
}
}
#line 7090 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void debug_dma_free_coherent(struct device *arg0 , size_t___0 arg1 , void *arg2 ,
                             dma_addr_t arg3 ) 
{ 


  {
#line 7091
  return;
}
}
#line 7093 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void clk_unprepare(struct clk *arg0 ) 
{ 


  {
#line 7094
  return;
}
}
#line 7096 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void *memcpy(void *arg0 , void const   *arg1 , size_t___0 arg2 ) 
{ 
  void *tmp ;

  {
  {
#line 7097
  tmp = ldv_malloc((size_t___0 )0UL);
  }
#line 7097
  return (tmp);
}
}
#line 7100 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
int clk_prepare(struct clk *arg0 ) 
{ 
  int tmp ;

  {
  {
#line 7101
  tmp = __VERIFIER_nondet_int();
  }
#line 7101
  return (tmp);
}
}
#line 7103 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void dma_release_channel(struct dma_chan *arg0 ) 
{ 


  {
#line 7104
  return;
}
}
#line 7106 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void complete(struct completion *arg0 ) 
{ 


  {
#line 7107
  return;
}
}
#line 7109 "linux-3.14--drivers--spi--spi-tegra20-slink.ko.cil.i"
void clk_disable(struct clk *arg0 ) 
{ 


  {
#line 7110
  return;
}
}
