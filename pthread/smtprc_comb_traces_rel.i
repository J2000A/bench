/* Generated by CIL v. 1.8.2 */
/* print_CIL_Input is true */

#line 143 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef long ptrdiff_t;
#line 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef unsigned long size_t;
#line 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef int wchar_t;
#line 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
struct __anonstruct_max_align_t_896270833 {
   long long __max_align_ll  __attribute__((__aligned__(__alignof__(long long )))) ;
   long double __max_align_ld  __attribute__((__aligned__(__alignof__(long double )))) ;
};
#line 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef struct __anonstruct_max_align_t_896270833 max_align_t;
#line 31 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned char __u_char;
#line 32 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned short __u_short;
#line 33 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __u_int;
#line 34 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __u_long;
#line 37 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef signed char __int8_t;
#line 38 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned char __uint8_t;
#line 39 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef short __int16_t;
#line 40 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned short __uint16_t;
#line 41 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __int32_t;
#line 42 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __uint32_t;
#line 44 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __int64_t;
#line 45 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __uint64_t;
#line 52 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int8_t __int_least8_t;
#line 53 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint8_t __uint_least8_t;
#line 54 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int16_t __int_least16_t;
#line 55 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint16_t __uint_least16_t;
#line 56 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int32_t __int_least32_t;
#line 57 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint32_t __uint_least32_t;
#line 58 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int64_t __int_least64_t;
#line 59 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint64_t __uint_least64_t;
#line 63 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __quad_t;
#line 64 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __u_quad_t;
#line 72 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __intmax_t;
#line 73 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __uintmax_t;
#line 145 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __dev_t;
#line 146 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __uid_t;
#line 147 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __gid_t;
#line 148 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __ino_t;
#line 149 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __ino64_t;
#line 150 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __mode_t;
#line 151 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __nlink_t;
#line 152 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off_t;
#line 153 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off64_t;
#line 154 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __pid_t;
#line 155 "/usr/include/x86_64-linux-gnu/bits/types.h"
struct __anonstruct___fsid_t_109580352 {
   int __val[2] ;
};
#line 155 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef struct __anonstruct___fsid_t_109580352 __fsid_t;
#line 156 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __clock_t;
#line 157 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __rlim_t;
#line 158 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __rlim64_t;
#line 159 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __id_t;
#line 160 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __time_t;
#line 161 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __useconds_t;
#line 162 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __suseconds_t;
#line 163 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __suseconds64_t;
#line 165 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __daddr_t;
#line 166 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __key_t;
#line 169 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __clockid_t;
#line 172 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef void *__timer_t;
#line 175 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blksize_t;
#line 180 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blkcnt_t;
#line 181 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blkcnt64_t;
#line 184 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsblkcnt_t;
#line 185 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsblkcnt64_t;
#line 188 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsfilcnt_t;
#line 189 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsfilcnt64_t;
#line 192 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __fsword_t;
#line 194 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __ssize_t;
#line 197 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __syscall_slong_t;
#line 199 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __syscall_ulong_t;
#line 203 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __off64_t __loff_t;
#line 204 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef char *__caddr_t;
#line 207 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __intptr_t;
#line 210 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __socklen_t;
#line 215 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __sig_atomic_t;
#line 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h"
typedef __time_t time_t;
#line 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h"
struct timespec {
   __time_t tv_sec ;
   long tv_nsec ;
};
#line 38 "/usr/include/sched.h"
typedef __pid_t pid_t;
#line 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h"
struct sched_param {
   int sched_priority ;
};
#line 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
typedef unsigned long __cpu_mask;
#line 39 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
struct __anonstruct_cpu_set_t_826868708 {
   __cpu_mask __bits[1024UL / (8UL * sizeof(__cpu_mask ))] ;
};
#line 39 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
typedef struct __anonstruct_cpu_set_t_826868708 cpu_set_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h"
typedef __clock_t clock_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
struct tm {
   int tm_sec ;
   int tm_min ;
   int tm_hour ;
   int tm_mday ;
   int tm_mon ;
   int tm_year ;
   int tm_wday ;
   int tm_yday ;
   int tm_isdst ;
   long tm_gmtoff ;
   char const   *tm_zone ;
};
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h"
typedef __clockid_t clockid_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h"
typedef __timer_t timer_t;
#line 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h"
struct itimerspec {
   struct timespec it_interval ;
   struct timespec it_value ;
};
#line 49 "/usr/include/time.h"
struct sigevent ;
#line 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
struct __locale_data ;
#line 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
struct __locale_struct {
   struct __locale_data *__locales[13] ;
   unsigned short const   *__ctype_b ;
   int const   *__ctype_tolower ;
   int const   *__ctype_toupper ;
   char const   *__names[13] ;
};
#line 42 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
typedef struct __locale_struct *__locale_t;
#line 24 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h"
typedef __locale_t locale_t;
#line 49 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_internal_list {
   struct __pthread_internal_list *__prev ;
   struct __pthread_internal_list *__next ;
};
#line 49 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __pthread_internal_list __pthread_list_t;
#line 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_internal_slist {
   struct __pthread_internal_slist *__next ;
};
#line 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __pthread_internal_slist __pthread_slist_t;
#line 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h"
struct __pthread_mutex_s {
   int __lock ;
   unsigned int __count ;
   int __owner ;
   unsigned int __nusers ;
   int __kind ;
   short __spins ;
   short __elision ;
   __pthread_list_t __list ;
};
#line 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h"
struct __pthread_rwlock_arch_t {
   unsigned int __readers ;
   unsigned int __writers ;
   unsigned int __wrphase_futex ;
   unsigned int __writers_futex ;
   unsigned int __pad3 ;
   unsigned int __pad4 ;
   int __cur_writer ;
   int __shared ;
   signed char __rwelision ;
   unsigned char __pad1[7] ;
   unsigned long __pad2 ;
   unsigned int __flags ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___wseq32_817613185 {
   unsigned int __low ;
   unsigned int __high ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
union __anonunion____missing_field_name_930316680 {
   unsigned long long __wseq ;
   struct __anonstruct___wseq32_817613185 __wseq32 ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___g1_start32_817613186 {
   unsigned int __low ;
   unsigned int __high ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
union __anonunion____missing_field_name_397133489 {
   unsigned long long __g1_start ;
   struct __anonstruct___g1_start32_817613186 __g1_start32 ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_cond_s {
   union __anonunion____missing_field_name_930316680 __annonCompField1 ;
   union __anonunion____missing_field_name_397133489 __annonCompField2 ;
   unsigned int __g_refs[2] ;
   unsigned int __g_size[2] ;
   unsigned int __g1_orig_size ;
   unsigned int __wrefs ;
   unsigned int __g_signals[2] ;
};
#line 119 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef unsigned int __tss_t;
#line 120 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef unsigned long __thrd_t;
#line 122 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___once_flag_930316681 {
   int __data ;
};
#line 122 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __anonstruct___once_flag_930316681 __once_flag;
#line 27 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 32 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_mutexattr_t_488594144 {
   char __size[4] ;
   int __align ;
};
#line 32 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_mutexattr_t_488594144 pthread_mutexattr_t;
#line 41 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_condattr_t_488594145 {
   char __size[4] ;
   int __align ;
};
#line 41 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_condattr_t_488594145 pthread_condattr_t;
#line 49 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef unsigned int pthread_key_t;
#line 53 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef int pthread_once_t;
#line 56 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union pthread_attr_t {
   char __size[56] ;
   long __align ;
};
#line 62 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union pthread_attr_t pthread_attr_t;
#line 67 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_mutex_t_335460617 {
   struct __pthread_mutex_s __data ;
   char __size[40] ;
   long __align ;
};
#line 67 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_mutex_t_335460617 pthread_mutex_t;
#line 75 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_cond_t_951761805 {
   struct __pthread_cond_s __data ;
   char __size[48] ;
   long long __align ;
};
#line 75 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_cond_t_951761805 pthread_cond_t;
#line 86 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_rwlock_t_656928968 {
   struct __pthread_rwlock_arch_t __data ;
   char __size[56] ;
   long __align ;
};
#line 86 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_rwlock_t_656928968 pthread_rwlock_t;
#line 93 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_rwlockattr_t_145707745 {
   char __size[8] ;
   long __align ;
};
#line 93 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_rwlockattr_t_145707745 pthread_rwlockattr_t;
#line 103 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef int volatile   pthread_spinlock_t;
#line 108 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_barrier_t_145707746 {
   char __size[32] ;
   long __align ;
};
#line 108 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_barrier_t_145707746 pthread_barrier_t;
#line 114 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_barrierattr_t_951761806 {
   char __size[4] ;
   int __align ;
};
#line 114 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_barrierattr_t_951761806 pthread_barrierattr_t;
#line 31 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
typedef long __jmp_buf[8];
#line 5 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h"
struct __anonstruct___sigset_t_764561023 {
   unsigned long __val[1024UL / (8UL * sizeof(unsigned long ))] ;
};
#line 5 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h"
typedef struct __anonstruct___sigset_t_764561023 __sigset_t;
#line 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h"
struct __jmp_buf_tag {
   __jmp_buf __jmpbuf ;
   int __mask_was_saved ;
   __sigset_t __saved_mask ;
};
#line 37 "/usr/include/pthread.h"
enum __anonenum_34415463 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1
} ;
#line 47
enum __anonenum_508643754 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
    PTHREAD_MUTEX_NORMAL = 0,
    PTHREAD_MUTEX_RECURSIVE = 1,
    PTHREAD_MUTEX_ERRORCHECK = 2,
    PTHREAD_MUTEX_DEFAULT = 0
} ;
#line 69
enum __anonenum_931900394 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_STALLED_NP = 0,
    PTHREAD_MUTEX_ROBUST = 1,
    PTHREAD_MUTEX_ROBUST_NP = 1
} ;
#line 81
enum __anonenum_205214487 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2
} ;
#line 104
enum __anonenum_25043950 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
    PTHREAD_RWLOCK_DEFAULT_NP = 0
} ;
#line 124
enum __anonenum_436439511 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1
} ;
#line 134
enum __anonenum_998661166 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1
} ;
#line 144
enum __anonenum_146137331 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1
} ;
#line 159 "/usr/include/pthread.h"
struct _pthread_cleanup_buffer {
   void (*__routine)(void * ) ;
   void *__arg ;
   int __canceltype ;
   struct _pthread_cleanup_buffer *__prev ;
};
#line 168
enum __anonenum_53396917 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1
} ;
#line 175
enum __anonenum_904563783 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1
} ;
#line 538 "/usr/include/pthread.h"
struct __cancel_jmp_buf_tag {
   __jmp_buf __cancel_jmp_buf ;
   int __mask_was_saved ;
};
#line 544 "/usr/include/pthread.h"
struct __anonstruct___pthread_unwind_buf_t_530692248 {
   struct __cancel_jmp_buf_tag __cancel_jmp_buf[1] ;
   void *__pad[4] ;
};
#line 544 "/usr/include/pthread.h"
typedef struct __anonstruct___pthread_unwind_buf_t_530692248  __attribute__((__aligned__)) __pthread_unwind_buf_t;
#line 557 "/usr/include/pthread.h"
struct __pthread_cleanup_frame {
   void (*__cancel_routine)(void * ) ;
   void *__cancel_arg ;
   int __do_it ;
   int __cancel_type ;
};
#line 4 "smtprc_comb.c"
typedef unsigned int size_t___0;
#line 6 "smtprc_comb.c"
struct _check {
   unsigned char failed ;
   unsigned char passed ;
   unsigned char error_code ;
   char *helo ;
   char *mail_from ;
   char *rcpt_to ;
   char *r_banner ;
   char *r_helo ;
   char *r_mail_from ;
   char *r_rcpt_to ;
   char *r_data_start ;
   char *r_data_end ;
   char *r_reset ;
};
#line 21 "smtprc_comb.c"
typedef struct _check check;
#line 22 "smtprc_comb.c"
struct _host {
   unsigned char smtp_open ;
   unsigned char resolved ;
   unsigned char fatal_error ;
   unsigned char fatal ;
   char *ip_address ;
   char *hostname ;
   char *r_quit ;
   check **smtp_check ;
};
#line 32 "smtprc_comb.c"
typedef struct _host host;
#line 33 "smtprc_comb.c"
struct _rule {
   char *helo ;
   char *mail_from ;
   char *rcpt_to ;
};
#line 38 "smtprc_comb.c"
typedef struct _rule rule;
#line 39 "smtprc_comb.c"
struct options {
   unsigned int time ;
   unsigned short number_of_threads ;
   unsigned short c_timeout ;
   unsigned short r_timeout ;
   unsigned short m_timeout ;
   unsigned short cur_threads ;
   unsigned short no_rules ;
   unsigned long no_hostnames ;
   unsigned long cur_host ;
   pthread_t *tid ;
   char *email_address ;
   char *ip_range ;
   char *ip_list ;
   char *mailbox ;
   char *auto_config_file ;
   char *generate_file ;
   char *config_file ;
   char *email_template ;
   char *name ;
   char *domain ;
   char *html_file ;
   char *html_path ;
   char *xml_file ;
   char *xml_path ;
   char *machine_file ;
   char *machine_path ;
   char *text_file ;
   char *text_path ;
   char *email ;
   char *email_subject ;
   unsigned char hours ;
   unsigned char mins ;
   unsigned char seconds ;
};
#line 74 "smtprc_comb.c"
typedef long long __quad_t___0;
#line 76 "smtprc_comb.c"
typedef __quad_t___0 __off64_t___0;
#line 79 "smtprc_comb.c"
typedef int __ssize_t___0;
#line 81
struct _IO_FILE ;
#line 82 "smtprc_comb.c"
typedef struct _IO_FILE FILE;
#line 83 "smtprc_comb.c"
typedef void _IO_lock_t;
#line 84 "smtprc_comb.c"
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
#line 89 "smtprc_comb.c"
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t___0 _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t___0 __pad5 ;
   int _mode ;
   char _unused2[(15UL * sizeof(int ) - 4UL * sizeof(void *)) - sizeof(size_t___0 )] ;
};
#line 120 "smtprc_comb.c"
typedef __ssize_t___0 ssize_t;
#line 121 "smtprc_comb.c"
struct timeval {
   __time_t tv_sec ;
   __suseconds_t tv_usec ;
};
#line 125 "smtprc_comb.c"
typedef long __fd_mask;
#line 126 "smtprc_comb.c"
struct __anonstruct_fd_set_13 {
   __fd_mask __fds_bits[1024UL / (8UL * sizeof(__fd_mask ))] ;
};
#line 129 "smtprc_comb.c"
typedef struct __anonstruct_fd_set_13 fd_set;
#line 130 "smtprc_comb.c"
typedef unsigned short uint16_t;
#line 131 "smtprc_comb.c"
typedef unsigned int uint32_t;
#line 132 "smtprc_comb.c"
typedef __socklen_t socklen_t;
#line 133 "smtprc_comb.c"
typedef unsigned short sa_family_t;
#line 134 "smtprc_comb.c"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14] ;
};
#line 138 "smtprc_comb.c"
typedef uint16_t in_port_t;
#line 139 "smtprc_comb.c"
typedef uint32_t in_addr_t;
#line 140 "smtprc_comb.c"
struct in_addr {
   in_addr_t s_addr ;
};
#line 143 "smtprc_comb.c"
struct sockaddr_in {
   sa_family_t sin_family ;
   in_port_t sin_port ;
   struct in_addr sin_addr ;
   unsigned char sin_zero[((sizeof(struct sockaddr ) - sizeof(unsigned short )) - sizeof(in_port_t )) - sizeof(struct in_addr )] ;
};
#line 149 "smtprc_comb.c"
struct hostent {
   char *h_name ;
   char **h_aliases ;
   int h_addrtype ;
   int h_length ;
   char **h_addr_list ;
};
#line 156 "smtprc_comb.c"
struct flags {
   unsigned char debug ;
   unsigned char verbose ;
   unsigned char check_mailbox ;
   unsigned char maildir ;
   unsigned char mbox ;
   unsigned char pop ;
   unsigned char auto_config ;
   unsigned char generate_config ;
   unsigned char output_html ;
   unsigned char output_text ;
   unsigned char output_machine ;
   unsigned char output_xml ;
   unsigned char resolve_hostnames ;
   unsigned char display_only_ips ;
   unsigned char ip_range ;
   unsigned char ip_list ;
   unsigned char send_email ;
   unsigned char config_file ;
   unsigned char email_template ;
   unsigned char got_name_macro ;
   unsigned char got_email ;
   unsigned char threads ;
   unsigned char display_all ;
};
#line 183 "smtprc_comb.c"
struct dirent {
   __ino_t d_ino ;
   __off_t d_off ;
   unsigned short d_reclen ;
   unsigned char d_type ;
   char d_name[256] ;
};
#line 190
struct __dirstream ;
#line 191 "smtprc_comb.c"
typedef struct __dirstream DIR;
#line 197 "smtprc_comb.c"
union __anonunion_pthread_attr_t_14 {
   char __size[36] ;
   long __align ;
};
#line 201 "smtprc_comb.c"
typedef union __anonunion_pthread_attr_t_14 pthread_attr_t___0;
#line 206 "smtprc_comb.c"
union __anonunion____missing_field_name_16 {
   int __spins ;
   __pthread_slist_t __list ;
};
#line 210 "smtprc_comb.c"
struct __pthread_mutex_s___0 {
   int __lock ;
   unsigned int __count ;
   int __owner ;
   int __kind ;
   unsigned int __nusers ;
   union __anonunion____missing_field_name_16 __annonCompField1 ;
};
#line 218 "smtprc_comb.c"
union __anonunion_pthread_mutex_t_15 {
   struct __pthread_mutex_s___0 __data ;
   char __size[24] ;
   long __align ;
};
#line 223 "smtprc_comb.c"
typedef union __anonunion_pthread_mutex_t_15 pthread_mutex_t___0;
#line 224 "smtprc_comb.c"
union __anonunion_pthread_mutexattr_t_17 {
   char __size[4] ;
   long __align ;
};
#line 228 "smtprc_comb.c"
typedef union __anonunion_pthread_mutexattr_t_17 pthread_mutexattr_t___0;
#line 229 "smtprc_comb.c"
typedef __builtin_va_list __gnuc_va_list;
#line 230 "smtprc_comb.c"
typedef __gnuc_va_list va_list;
/* compiler builtin: 
   void __builtin_va_copy(__builtin_va_list  , __builtin_va_list  ) ;  */
/* compiler builtin: 
   void *__builtin_frob_return_address(void * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_and_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_or(...) ;  */
/* compiler builtin: 
   int __builtin_popcountll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch(...) ;  */
/* compiler builtin: 
   float __builtin_atanf(float  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_addps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   unsigned long __builtin_strcspn(char const   * , char const   * ) ;  */
/* compiler builtin: 
   float __builtin_asinf(float  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_maxps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpckhps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   double __builtin_acos(double  ) ;  */
/* compiler builtin: 
   int __builtin___sprintf_chk(char * , int  , unsigned long  , char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_16(...) ;  */
/* compiler builtin: 
   double __builtin_cosh(double  ) ;  */
/* compiler builtin: 
   float __builtin_tanhf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_16(...) ;  */
/* compiler builtin: 
   void *__builtin_mempcpy(void * , void const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_1(...) ;  */
/* compiler builtin: 
   long double __builtin_sqrtl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_parity(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or(...) ;  */
/* compiler builtin: 
   long double __builtin_coshl(long double  ) ;  */
/* compiler builtin: 
   long double __builtin_cosl(long double  ) ;  */
/* compiler builtin: 
   float __builtin_cosf(float  ) ;  */
/* compiler builtin: 
   void __sync_synchronize(...) ;  */
/* compiler builtin: 
   long double __builtin_acosl(long double  ) ;  */
/* compiler builtin: 
   void *__builtin___mempcpy_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_or_and_fetch(...) ;  */
/* compiler builtin: 
   int __builtin_clz(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_4(...) ;  */
/* compiler builtin: 
   double __builtin_log10(double  ) ;  */
/* compiler builtin: 
   char *__builtin___strcat_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_modff(float  , float * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_4(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_n(...) ;  */
/* compiler builtin: 
   double __builtin_sin(double  ) ;  */
/* compiler builtin: 
   double __builtin_frexp(double  , int * ) ;  */
/* compiler builtin: 
   float __builtin_acosf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_add_and_fetch(...) ;  */
/* compiler builtin: 
   long double __builtin_sinhl(long double  ) ;  */
/* compiler builtin: 
   char *__builtin___stpcpy_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __atomic_signal_fence(int  ) ;  */
/* compiler builtin: 
   double __builtin_fabs(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_nand(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_2(...) ;  */
/* compiler builtin: 
   void __atomic_thread_fence(int  ) ;  */
/* compiler builtin: 
   void __atomic_store_16(...) ;  */
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_8(...) ;  */
/* compiler builtin: 
   short __builtin_bswap16(short  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_2(...) ;  */
/* compiler builtin: 
   _Bool __atomic_test_and_set(void * , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_8(...) ;  */
/* compiler builtin: 
   int __builtin_ctz(unsigned int  ) ;  */
/* compiler builtin: 
   char *__builtin_strpbrk(char const   * , char const   * ) ;  */
/* compiler builtin: 
   char *__builtin_strcpy(char * , char const   * ) ;  */
/* compiler builtin: 
   double __builtin_sqrt(double  ) ;  */
/* compiler builtin: 
   __builtin_va_list __builtin_next_arg(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_16(...) ;  */
/* compiler builtin: 
   void __atomic_clear(_Bool * , int  ) ;  */
/* compiler builtin: 
   void __atomic_store(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_2(...) ;  */
/* compiler builtin: 
   float __builtin_log10f(float  ) ;  */
/* compiler builtin: 
   long double __builtin_fabsl(long double  ) ;  */
/* compiler builtin: 
   long double __builtin_floorl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch(...) ;  */
/* compiler builtin: 
   float __builtin_floorf(float  ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_4(...) ;  */
/* compiler builtin: 
   void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_sub_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_nand_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_16(...) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_subps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   int __builtin_parityll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __builtin_va_end(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __builtin_bzero(void * , unsigned long  ) ;  */
/* compiler builtin: 
   _Bool __atomic_always_lock_free(unsigned long  , void * ) ;  */
/* compiler builtin: 
   int __builtin_strncmp(char const   * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_xor_and_fetch(...) ;  */
/* compiler builtin: 
   int __builtin___vsprintf_chk(char * , int  , unsigned long  , char const   * ,
                                __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __builtin_sqrtf(float  ) ;  */
/* compiler builtin: 
   double __builtin_nans(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_8(...) ;  */
/* compiler builtin: 
   double __builtin_exp(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_1(...) ;  */
/* compiler builtin: 
   int __builtin_strcmp(char const   * , char const   * ) ;  */
/* compiler builtin: 
   float __builtin_ldexpf(float  , int  ) ;  */
/* compiler builtin: 
   float __builtin_powif(float  , int  ) ;  */
/* compiler builtin: 
   long double __builtin_log10l(long double  ) ;  */
/* compiler builtin: 
   void *__builtin___memmove_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_and(...) ;  */
/* compiler builtin: 
   void *__builtin_return_address(unsigned int  ) ;  */
/* compiler builtin: 
   void __atomic_feraiseexcept(int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_4(...) ;  */
/* compiler builtin: 
   float __builtin_fabsf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_1(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_object_size(void * , int  ) ;  */
/* compiler builtin: 
   void *__builtin_alloca(unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin_va_arg_pack_len(void) ;  */
/* compiler builtin: 
   long double __builtin_tanl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_2(...) ;  */
/* compiler builtin: 
   void __sync_lock_release(...) ;  */
/* compiler builtin: 
   long double __builtin_modfl(long double  , long double * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_8(...) ;  */
/* compiler builtin: 
   char *__builtin_stpcpy(char * , char const   * ) ;  */
/* compiler builtin: 
   long double __builtin_sinl(long double  ) ;  */
/* compiler builtin: 
   double __builtin_asin(double  ) ;  */
/* compiler builtin: 
   float __builtin_sinhf(float  ) ;  */
/* compiler builtin: 
   int __builtin_ctzl(unsigned long  ) ;  */
/* compiler builtin: 
   long double __builtin_tanhl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add(...) ;  */
/* compiler builtin: 
   long __builtin_bswap64(long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_2(...) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_mulps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   double __builtin_tan(double  ) ;  */
/* compiler builtin: 
   char *__builtin_strncpy(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_inff(void) ;  */
/* compiler builtin: 
   void *__builtin___memset_chk(void * , int  , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_n(...) ;  */
/* compiler builtin: 
   double __builtin_huge_val(void) ;  */
/* compiler builtin: 
   int __builtin_clzl(unsigned long  ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_16(...) ;  */
/* compiler builtin: 
   float __builtin_frexpf(float  , int * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_n(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_1(...) ;  */
/* compiler builtin: 
   long double __builtin_fmodl(long double  ) ;  */
/* compiler builtin: 
   double __builtin_atan(double  ) ;  */
/* compiler builtin: 
   int __builtin___fprintf_chk(void * , int  , char const   *  , ...) ;  */
/* compiler builtin: 
   float __builtin_ceilf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_1(...) ;  */
/* compiler builtin: 
   void __builtin_return(void const   * ) ;  */
/* compiler builtin: 
   long double __builtin_asinl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_ffsll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_1(...) ;  */
/* compiler builtin: 
   int __builtin_va_arg_pack(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_4(...) ;  */
/* compiler builtin: 
   char *__builtin___strncpy_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   double __builtin_powi(double  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_2(...) ;  */
/* compiler builtin: 
   char *__builtin_strchr(char * , int  ) ;  */
/* compiler builtin: 
   char *__builtin___strncat_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __atomic_store_2(...) ;  */
/* compiler builtin: 
   long double __builtin_huge_vall(void) ;  */
/* compiler builtin: 
   int __builtin_ffsl(unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin___vprintf_chk(int  , char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpcklps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   char *__builtin_strncat(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin_ctzll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __builtin_stdarg_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_xor(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_4(...) ;  */
/* compiler builtin: 
   long double __builtin_frexpl(long double  , int * ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange(...) ;  */
/* compiler builtin: 
   float __builtin_tanf(float  ) ;  */
/* compiler builtin: 
   long double __builtin_logl(long double  ) ;  */
/* compiler builtin: 
   void __builtin_va_arg(__builtin_va_list  , unsigned long  , void * ) ;  */
/* compiler builtin: 
   long __builtin_expect(long  , long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_1(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_1(...) ;  */
/* compiler builtin: 
   int __builtin___printf_chk(int  , char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_2(...) ;  */
/* compiler builtin: 
   int __builtin___vfprintf_chk(void * , int  , char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   void __builtin_prefetch(void const   *  , ...) ;  */
/* compiler builtin: 
   long double __builtin_nansl(char const   * ) ;  */
/* compiler builtin: 
   double __builtin_fmod(double  ) ;  */
/* compiler builtin: 
   void __atomic_load(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_val_compare_and_swap(...) ;  */
/* compiler builtin: 
   void __atomic_store_4(...) ;  */
/* compiler builtin: 
   double __builtin_tanh(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_16(...) ;  */
/* compiler builtin: 
   void __builtin_unreachable(void) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_2(...) ;  */
/* compiler builtin: 
   long double __builtin_ldexpl(long double  , int  ) ;  */
/* compiler builtin: 
   void *__builtin_apply(void (*)() , void * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_sinf(float  ) ;  */
/* compiler builtin: 
   double __builtin_ceil(double  ) ;  */
/* compiler builtin: 
   void __atomic_exchange(...) ;  */
/* compiler builtin: 
   long double __builtin_powil(long double  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_8(...) ;  */
/* compiler builtin: 
   long double __builtin_expl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_constant_p(int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_16(...) ;  */
/* compiler builtin: 
   double __builtin_log(double  ) ;  */
/* compiler builtin: 
   float __builtin_expf(float  ) ;  */
/* compiler builtin: 
   int __builtin_types_compatible_p(unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   long double __builtin_atan2l(long double  , long double  ) ;  */
/* compiler builtin: 
   void *__builtin_apply_args(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_2(...) ;  */
/* compiler builtin: 
   float __builtin_logf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_2(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_strlen(char const   * ) ;  */
/* compiler builtin: 
   int __builtin_ffs(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_16(...) ;  */
/* compiler builtin: 
   double __builtin_inf(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_16(...) ;  */
/* compiler builtin: 
   void *__builtin___memcpy_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_4(...) ;  */
/* compiler builtin: 
   void __atomic_store_n(...) ;  */
/* compiler builtin: 
   void __builtin_trap(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_4(...) ;  */
/* compiler builtin: 
   int __builtin_parityl(unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_lock_test_and_set(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_strspn(char const   * , char const   * ) ;  */
/* compiler builtin: 
   void __builtin_varargs_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_16(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch(...) ;  */
/* compiler builtin: 
   double __builtin_nan(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_8(...) ;  */
/* compiler builtin: 
   int __builtin___snprintf_chk(char * , unsigned long  , int  , unsigned long  ,
                                char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch(...) ;  */
/* compiler builtin: 
   long double __builtin_atanl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_clzll(unsigned long long  ) ;  */
/* compiler builtin: 
   float __builtin_huge_valf(void) ;  */
/* compiler builtin: 
   float __builtin_coshf(float  ) ;  */
/* compiler builtin: 
   float __builtin_nansf(char const   * ) ;  */
/* compiler builtin: 
   void __atomic_store_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_add(...) ;  */
/* compiler builtin: 
   int __builtin___vsnprintf_chk(char * , unsigned long  , int  , unsigned long  ,
                                 char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __builtin_nanf(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_8(...) ;  */
/* compiler builtin: 
   _Bool __sync_bool_compare_and_swap(...) ;  */
/* compiler builtin: 
   double __builtin_atan2(double  , double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __builtin_tgmath(...) ;  */
/* compiler builtin: 
   int __builtin_popcountl(unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_1(...) ;  */
/* compiler builtin: 
   long double __builtin_ceill(long double  ) ;  */
/* compiler builtin: 
   void __atomic_store_1(...) ;  */
/* compiler builtin: 
   char *__builtin___strcpy_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_16(...) ;  */
/* compiler builtin: 
   double __builtin_floor(double  ) ;  */
/* compiler builtin: 
   double __builtin_cos(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_sub(...) ;  */
/* compiler builtin: 
   void *__builtin_memset(void * , int  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_2(...) ;  */
/* compiler builtin: 
   long double __builtin_nanl(char const   * ) ;  */
/* compiler builtin: 
   float __builtin_atan2f(float  , float  ) ;  */
/* compiler builtin: 
   _Bool __atomic_is_lock_free(unsigned long  , void * ) ;  */
/* compiler builtin: 
   int __builtin_popcount(unsigned int  ) ;  */
/* compiler builtin: 
   double __builtin_sinh(double  ) ;  */
/* compiler builtin: 
   void __builtin_bcopy(void const   * , void * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub(...) ;  */
/* compiler builtin: 
   void *__builtin_extract_return_addr(void * ) ;  */
/* compiler builtin: 
   int __builtin_bswap32(int  ) ;  */
/* compiler builtin: 
   double __builtin_ldexp(double  , int  ) ;  */
/* compiler builtin: 
   long double __builtin_infl(void) ;  */
/* compiler builtin: 
   float __builtin_fmodf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_4(...) ;  */
/* compiler builtin: 
   void *__builtin_frame_address(unsigned int  ) ;  */
#line 6 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 7
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 7 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) ) 
{ 
  size_t i ;
  size_t j ;
  size_t i___0 ;
  size_t j___0 ;
  int r ;
  size_t k ;
  char *a ;
  char *b ;
  char c ;

  {
  {
#line 9
  i = (size_t )0;
  }
  {
#line 9
  while (1) {
    while_continue: /* CIL Label */ ;
#line 9
    if (! (i < count)) {
#line 9
      goto while_break;
    }
    {
#line 10
    j = (size_t )0;
    }
    {
#line 10
    while (1) {
      while_continue___0: /* CIL Label */ ;
#line 10
      if (! (j < count)) {
#line 10
        goto while_break___0;
      }
      {
#line 11
      (*comp)((void const   *)(ptr + i * size), (void const   *)(ptr + j * size));
#line 10
      j ++;
      }
    }
    while_break___0: /* CIL Label */ ;
    }
    {
#line 9
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 16
  i___0 = (size_t )0;
  }
  {
#line 16
  while (1) {
    while_continue___1: /* CIL Label */ ;
#line 16
    if (! (i___0 < count)) {
#line 16
      goto while_break___1;
    }
    {
#line 17
    j___0 = (size_t )0;
    }
    {
#line 17
    while (1) {
      while_continue___2: /* CIL Label */ ;
#line 17
      if (! (j___0 < count)) {
#line 17
        goto while_break___2;
      }
#line 19
      if (r) {
        {
#line 21
        k = (size_t )0;
        }
        {
#line 21
        while (1) {
          while_continue___3: /* CIL Label */ ;
#line 21
          if (! (k < size)) {
#line 21
            goto while_break___3;
          }
          {
#line 22
          a = (char *)((ptr + i___0 * size) + k);
#line 23
          b = (char *)((ptr + j___0 * size) + k);
#line 24
          c = *a;
#line 25
          *a = *b;
#line 26
          *b = c;
#line 21
          k ++;
          }
        }
        while_break___3: /* CIL Label */ ;
        }
      }
      {
#line 17
      j___0 ++;
      }
    }
    while_break___2: /* CIL Label */ ;
    }
    {
#line 16
    i___0 ++;
    }
  }
  while_break___1: /* CIL Label */ ;
  }
#line 33
  return;
}
}
#line 37
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 38
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 38 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) ) 
{ 
  size_t i ;
  void const   *a ;
  int tmp ;

  {
  {
#line 40
  i = (size_t )0;
  }
  {
#line 40
  while (1) {
    while_continue: /* CIL Label */ ;
#line 40
    if (! (i < count)) {
#line 40
      goto while_break;
    }
    {
#line 41
    a = ptr + i * size;
#line 42
    tmp = (*comp)(key, a);
    }
#line 42
    if (tmp == 0) {
#line 43
      return ((void *)a);
    }
    {
#line 40
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 47
  return ((void *)0);
}
}
#line 117 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
extern int ( __attribute__((__leaf__)) __sched_cpucount)(size_t __setsize , cpu_set_t const   *__setp )  __attribute__((__nothrow__)) ;
#line 119
extern cpu_set_t *( __attribute__((__leaf__)) __sched_cpualloc)(size_t __count )  __attribute__((__nothrow__)) ;
#line 120
extern void ( __attribute__((__leaf__)) __sched_cpufree)(cpu_set_t *__set )  __attribute__((__nothrow__)) ;
#line 54 "/usr/include/sched.h"
extern int ( __attribute__((__leaf__)) sched_setparam)(__pid_t __pid , struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 58
extern int ( __attribute__((__leaf__)) sched_getparam)(__pid_t __pid , struct sched_param *__param )  __attribute__((__nothrow__)) ;
#line 61
extern int ( __attribute__((__leaf__)) sched_setscheduler)(__pid_t __pid , int __policy ,
                                                           struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 65
extern int ( __attribute__((__leaf__)) sched_getscheduler)(__pid_t __pid )  __attribute__((__nothrow__)) ;
#line 68
extern int ( __attribute__((__leaf__)) sched_yield)(void)  __attribute__((__nothrow__)) ;
#line 71
extern int ( __attribute__((__leaf__)) sched_get_priority_max)(int __algorithm )  __attribute__((__nothrow__)) ;
#line 74
extern int ( __attribute__((__leaf__)) sched_get_priority_min)(int __algorithm )  __attribute__((__nothrow__)) ;
#line 78
extern int ( __attribute__((__leaf__)) sched_rr_get_interval)(__pid_t __pid , struct timespec *__t )  __attribute__((__nothrow__)) ;
#line 72 "/usr/include/time.h"
extern clock_t ( __attribute__((__leaf__)) clock)(void)  __attribute__((__nothrow__)) ;
#line 76
extern time_t ( __attribute__((__leaf__)) time)(time_t *__timer )  __attribute__((__nothrow__)) ;
#line 79
extern double ( __attribute__((__leaf__)) difftime)(time_t __time1 , time_t __time0 )  __attribute__((__nothrow__,
__const__)) ;
#line 83
extern time_t ( __attribute__((__leaf__)) mktime)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 100
extern size_t ( __attribute__((__leaf__)) strftime)(char * __restrict  __s , size_t __maxsize ,
                                                    char const   * __restrict  __format ,
                                                    struct tm  const  * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 116
extern size_t ( __attribute__((__leaf__)) strftime_l)(char * __restrict  __s , size_t __maxsize ,
                                                      char const   * __restrict  __format ,
                                                      struct tm  const  * __restrict  __tp ,
                                                      locale_t __loc )  __attribute__((__nothrow__)) ;
#line 132
extern struct tm *( __attribute__((__leaf__)) gmtime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 136
extern struct tm *( __attribute__((__leaf__)) localtime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 154
extern struct tm *( __attribute__((__leaf__)) gmtime_r)(time_t const   * __restrict  __timer ,
                                                        struct tm * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 159
extern struct tm *( __attribute__((__leaf__)) localtime_r)(time_t const   * __restrict  __timer ,
                                                           struct tm * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 179
extern char *( __attribute__((__leaf__)) asctime)(struct tm  const  *__tp )  __attribute__((__nothrow__)) ;
#line 183
extern char *( __attribute__((__leaf__)) ctime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 197
extern char *( __attribute__((__leaf__)) asctime_r)(struct tm  const  * __restrict  __tp ,
                                                    char * __restrict  __buf )  __attribute__((__nothrow__)) ;
#line 202
extern char *( __attribute__((__leaf__)) ctime_r)(time_t const   * __restrict  __timer ,
                                                  char * __restrict  __buf )  __attribute__((__nothrow__)) ;
#line 217
extern char *__tzname[2] ;
#line 218
extern int __daylight ;
#line 219
extern long __timezone ;
#line 224
extern char *tzname[2] ;
#line 228
extern void ( __attribute__((__leaf__)) tzset)(void)  __attribute__((__nothrow__)) ;
#line 232
extern int daylight ;
#line 233
extern long timezone ;
#line 249
extern time_t ( __attribute__((__leaf__)) timegm)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 251
extern time_t ( __attribute__((__leaf__)) timelocal)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 262
extern int ( __attribute__((__leaf__)) dysize)(int __year )  __attribute__((__nothrow__,
__const__)) ;
#line 272
extern int nanosleep(struct timespec  const  *__requested_time , struct timespec *__remaining ) ;
#line 276
extern int ( __attribute__((__leaf__)) clock_getres)(clockid_t __clock_id , struct timespec *__res )  __attribute__((__nothrow__)) ;
#line 279
extern int ( __attribute__((__leaf__)) clock_gettime)(clockid_t __clock_id , struct timespec *__tp )  __attribute__((__nothrow__)) ;
#line 282
extern int ( __attribute__((__leaf__)) clock_settime)(clockid_t __clock_id , struct timespec  const  *__tp )  __attribute__((__nothrow__)) ;
#line 311
extern int clock_nanosleep(clockid_t __clock_id , int __flags , struct timespec  const  *__req ,
                           struct timespec *__rem ) ;
#line 326
extern int ( __attribute__((__leaf__)) clock_getcpuclockid)(pid_t __pid , clockid_t *__clock_id )  __attribute__((__nothrow__)) ;
#line 331
extern int ( __attribute__((__leaf__)) timer_create)(clockid_t __clock_id , struct sigevent * __restrict  __evp ,
                                                     timer_t * __restrict  __timerid )  __attribute__((__nothrow__)) ;
#line 336
extern int ( __attribute__((__leaf__)) timer_delete)(timer_t __timerid )  __attribute__((__nothrow__)) ;
#line 340
extern int ( __attribute__((__leaf__)) timer_settime)(timer_t __timerid , int __flags ,
                                                      struct itimerspec  const  * __restrict  __value ,
                                                      struct itimerspec * __restrict  __ovalue )  __attribute__((__nothrow__)) ;
#line 345
extern int ( __attribute__((__leaf__)) timer_gettime)(timer_t __timerid , struct itimerspec *__value )  __attribute__((__nothrow__)) ;
#line 364
extern int ( __attribute__((__leaf__)) timer_getoverrun)(timer_t __timerid )  __attribute__((__nothrow__)) ;
#line 371
extern int ( __attribute__((__nonnull__(1), __leaf__)) timespec_get)(struct timespec *__ts ,
                                                                     int __base )  __attribute__((__nothrow__)) ;
#line 202 "/usr/include/pthread.h"
extern int ( __attribute__((__nonnull__(1,3))) pthread_create)(pthread_t * __restrict  __newthread ,
                                                               pthread_attr_t const   * __restrict  __attr ,
                                                               void *(*__start_routine)(void * ) ,
                                                               void * __restrict  __arg )  __attribute__((__nothrow__)) ;
#line 211
extern void pthread_exit(void *__retval )  __attribute__((__noreturn__)) ;
#line 219
extern int pthread_join(pthread_t __th , void **__thread_return ) ;
#line 269
extern int ( __attribute__((__leaf__)) pthread_detach)(pthread_t __th )  __attribute__((__nothrow__)) ;
#line 273
extern pthread_t ( __attribute__((__leaf__)) pthread_self)(void)  __attribute__((__nothrow__,
__const__)) ;
#line 276
extern int ( __attribute__((__leaf__)) pthread_equal)(pthread_t __thread1 , pthread_t __thread2 )  __attribute__((__nothrow__,
__const__)) ;
#line 285
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_init)(pthread_attr_t *__attr )  __attribute__((__nothrow__)) ;
#line 288
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_destroy)(pthread_attr_t *__attr )  __attribute__((__nothrow__)) ;
#line 292
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getdetachstate)(pthread_attr_t const   *__attr ,
                                                                                      int *__detachstate )  __attribute__((__nothrow__)) ;
#line 297
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setdetachstate)(pthread_attr_t *__attr ,
                                                                                    int __detachstate )  __attribute__((__nothrow__)) ;
#line 303
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getguardsize)(pthread_attr_t const   *__attr ,
                                                                                    size_t *__guardsize )  __attribute__((__nothrow__)) ;
#line 308
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setguardsize)(pthread_attr_t *__attr ,
                                                                                  size_t __guardsize )  __attribute__((__nothrow__)) ;
#line 314
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getschedparam)(pthread_attr_t const   * __restrict  __attr ,
                                                                                     struct sched_param * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 319
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_setschedparam)(pthread_attr_t * __restrict  __attr ,
                                                                                     struct sched_param  const  * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 324
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getschedpolicy)(pthread_attr_t const   * __restrict  __attr ,
                                                                                      int * __restrict  __policy )  __attribute__((__nothrow__)) ;
#line 329
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setschedpolicy)(pthread_attr_t *__attr ,
                                                                                    int __policy )  __attribute__((__nothrow__)) ;
#line 333
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getinheritsched)(pthread_attr_t const   * __restrict  __attr ,
                                                                                       int * __restrict  __inherit )  __attribute__((__nothrow__)) ;
#line 338
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setinheritsched)(pthread_attr_t *__attr ,
                                                                                     int __inherit )  __attribute__((__nothrow__)) ;
#line 344
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getscope)(pthread_attr_t const   * __restrict  __attr ,
                                                                                int * __restrict  __scope )  __attribute__((__nothrow__)) ;
#line 349
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setscope)(pthread_attr_t *__attr ,
                                                                              int __scope )  __attribute__((__nothrow__)) ;
#line 353
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getstackaddr)(pthread_attr_t const   * __restrict  __attr ,
                                                                                    void ** __restrict  __stackaddr )  __attribute__((__nothrow__,
__deprecated__)) ;
#line 361
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstackaddr)(pthread_attr_t *__attr ,
                                                                                  void *__stackaddr )  __attribute__((__nothrow__,
__deprecated__)) ;
#line 366
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getstacksize)(pthread_attr_t const   * __restrict  __attr ,
                                                                                    size_t * __restrict  __stacksize )  __attribute__((__nothrow__)) ;
#line 373
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstacksize)(pthread_attr_t *__attr ,
                                                                                  size_t __stacksize )  __attribute__((__nothrow__)) ;
#line 379
extern int ( __attribute__((__nonnull__(1,2,3), __leaf__)) pthread_attr_getstack)(pthread_attr_t const   * __restrict  __attr ,
                                                                                  void ** __restrict  __stackaddr ,
                                                                                  size_t * __restrict  __stacksize )  __attribute__((__nothrow__)) ;
#line 387
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstack)(pthread_attr_t *__attr ,
                                                                              void *__stackaddr ,
                                                                              size_t __stacksize )  __attribute__((__nothrow__)) ;
#line 441
extern int ( __attribute__((__nonnull__(3), __leaf__)) pthread_setschedparam)(pthread_t __target_thread ,
                                                                              int __policy ,
                                                                              struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 446
extern int ( __attribute__((__nonnull__(2,3), __leaf__)) pthread_getschedparam)(pthread_t __target_thread ,
                                                                                int * __restrict  __policy ,
                                                                                struct sched_param * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 452
extern int ( __attribute__((__leaf__)) pthread_setschedprio)(pthread_t __target_thread ,
                                                             int __prio )  __attribute__((__nothrow__)) ;
#line 509
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) )  __attribute__((__goblint_stub__)) ;
#line 521
extern int pthread_setcancelstate(int __state , int *__oldstate ) ;
#line 525
extern int pthread_setcanceltype(int __type , int *__oldtype ) ;
#line 528
extern int pthread_cancel(pthread_t __th ) ;
#line 533
extern void pthread_testcancel(void) ;
#line 697
extern void __pthread_register_cancel(__pthread_unwind_buf_t *__buf ) ;
#line 709
extern void __pthread_unregister_cancel(__pthread_unwind_buf_t *__buf ) ;
#line 750
extern void __pthread_unwind_next(__pthread_unwind_buf_t *__buf )  __attribute__((__weak__,
__noreturn__)) ;
#line 766
extern int __sigsetjmp_cancel(struct __cancel_jmp_buf_tag *__env , int __savemask )  __asm__("__sigsetjmp") __attribute__((__returns_twice__,
__nothrow__)) ;
#line 781
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_init)(pthread_mutex_t *__mutex ,
                                                                           pthread_mutexattr_t const   *__mutexattr )  __attribute__((__nothrow__)) ;
#line 786
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_destroy)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 790
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_trylock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 794
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_lock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 800
extern int ( __attribute__((__nonnull__(1,2))) pthread_mutex_timedlock)(pthread_mutex_t * __restrict  __mutex ,
                                                                        struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 835
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_unlock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 840
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutex_getprioceiling)(pthread_mutex_t const   * __restrict  __mutex ,
                                                                                       int * __restrict  __prioceiling )  __attribute__((__nothrow__)) ;
#line 847
extern int ( __attribute__((__nonnull__(1,3), __leaf__)) pthread_mutex_setprioceiling)(pthread_mutex_t * __restrict  __mutex ,
                                                                                       int __prioceiling ,
                                                                                       int * __restrict  __old_ceiling )  __attribute__((__nothrow__)) ;
#line 855
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_consistent)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 874
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_init)(pthread_mutexattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 878
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_destroy)(pthread_mutexattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 882
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getpshared)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                       int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 888
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setpshared)(pthread_mutexattr_t *__attr ,
                                                                                     int __pshared )  __attribute__((__nothrow__)) ;
#line 894
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_gettype)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                    int * __restrict  __kind )  __attribute__((__nothrow__)) ;
#line 901
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_settype)(pthread_mutexattr_t *__attr ,
                                                                                  int __kind )  __attribute__((__nothrow__)) ;
#line 906
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getprotocol)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __protocol )  __attribute__((__nothrow__)) ;
#line 913
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setprotocol)(pthread_mutexattr_t *__attr ,
                                                                                      int __protocol )  __attribute__((__nothrow__)) ;
#line 918
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getprioceiling)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                           int * __restrict  __prioceiling )  __attribute__((__nothrow__)) ;
#line 924
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setprioceiling)(pthread_mutexattr_t *__attr ,
                                                                                         int __prioceiling )  __attribute__((__nothrow__)) ;
#line 930
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getrobust)(pthread_mutexattr_t const   *__attr ,
                                                                                      int *__robustness )  __attribute__((__nothrow__)) ;
#line 946
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setrobust)(pthread_mutexattr_t *__attr ,
                                                                                    int __robustness )  __attribute__((__nothrow__)) ;
#line 967
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlock_init)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                            pthread_rwlockattr_t const   * __restrict  __attr )  __attribute__((__nothrow__)) ;
#line 972
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlock_destroy)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 976
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_rdlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 980
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_tryrdlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 986
extern int ( __attribute__((__nonnull__(1,2))) pthread_rwlock_timedrdlock)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                           struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 1023
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_wrlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1027
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_trywrlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1033
extern int ( __attribute__((__nonnull__(1,2))) pthread_rwlock_timedwrlock)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                           struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 1071
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_unlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1078
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_init)(pthread_rwlockattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1082
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_destroy)(pthread_rwlockattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1086
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_rwlockattr_getpshared)(pthread_rwlockattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1092
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_setpshared)(pthread_rwlockattr_t *__attr ,
                                                                                      int __pshared )  __attribute__((__nothrow__)) ;
#line 1097
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_rwlockattr_getkind_np)(pthread_rwlockattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __pref )  __attribute__((__nothrow__)) ;
#line 1103
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_setkind_np)(pthread_rwlockattr_t *__attr ,
                                                                                      int __pref )  __attribute__((__nothrow__)) ;
#line 1112
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_cond_init)(pthread_cond_t * __restrict  __cond ,
                                                                          pthread_condattr_t const   * __restrict  __cond_attr )  __attribute__((__nothrow__)) ;
#line 1117
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_cond_destroy)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1121
extern int ( __attribute__((__nonnull__(1))) pthread_cond_signal)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1125
extern int ( __attribute__((__nonnull__(1))) pthread_cond_broadcast)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1133
extern int ( __attribute__((__nonnull__(1,2))) pthread_cond_wait)(pthread_cond_t * __restrict  __cond ,
                                                                  pthread_mutex_t * __restrict  __mutex ) ;
#line 1145
extern int ( __attribute__((__nonnull__(1,2,3))) pthread_cond_timedwait)(pthread_cond_t * __restrict  __cond ,
                                                                         pthread_mutex_t * __restrict  __mutex ,
                                                                         struct timespec  const  * __restrict  __abstime ) ;
#line 1194
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_init)(pthread_condattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1198
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_destroy)(pthread_condattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1202
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_condattr_getpshared)(pthread_condattr_t const   * __restrict  __attr ,
                                                                                      int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1208
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_setpshared)(pthread_condattr_t *__attr ,
                                                                                    int __pshared )  __attribute__((__nothrow__)) ;
#line 1213
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_condattr_getclock)(pthread_condattr_t const   * __restrict  __attr ,
                                                                                    __clockid_t * __restrict  __clock_id )  __attribute__((__nothrow__)) ;
#line 1219
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_setclock)(pthread_condattr_t *__attr ,
                                                                                  __clockid_t __clock_id )  __attribute__((__nothrow__)) ;
#line 1230
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_spin_init)(pthread_spinlock_t *__lock ,
                                                                          int __pshared )  __attribute__((__nothrow__)) ;
#line 1234
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_spin_destroy)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1238
extern int ( __attribute__((__nonnull__(1))) pthread_spin_lock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1242
extern int ( __attribute__((__nonnull__(1))) pthread_spin_trylock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1246
extern int ( __attribute__((__nonnull__(1))) pthread_spin_unlock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1254
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrier_init)(pthread_barrier_t * __restrict  __barrier ,
                                                                             pthread_barrierattr_t const   * __restrict  __attr ,
                                                                             unsigned int __count )  __attribute__((__nothrow__)) ;
#line 1260
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrier_destroy)(pthread_barrier_t *__barrier )  __attribute__((__nothrow__)) ;
#line 1264
extern int ( __attribute__((__nonnull__(1))) pthread_barrier_wait)(pthread_barrier_t *__barrier )  __attribute__((__nothrow__)) ;
#line 1269
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_init)(pthread_barrierattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1273
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_destroy)(pthread_barrierattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1277
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_barrierattr_getpshared)(pthread_barrierattr_t const   * __restrict  __attr ,
                                                                                         int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1283
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_setpshared)(pthread_barrierattr_t *__attr ,
                                                                                       int __pshared )  __attribute__((__nothrow__)) ;
#line 1297
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_key_create)(pthread_key_t *__key ,
                                                                           void (*__destr_function)(void * ) )  __attribute__((__nothrow__)) ;
#line 1302
extern int ( __attribute__((__leaf__)) pthread_key_delete)(pthread_key_t __key )  __attribute__((__nothrow__)) ;
#line 1305
extern void *( __attribute__((__leaf__)) pthread_getspecific)(pthread_key_t __key )  __attribute__((__nothrow__)) ;
#line 1308
extern int ( __attribute__((__leaf__)) pthread_setspecific)(pthread_key_t __key ,
                                                            void const   *__pointer )  __attribute__((__nothrow__,
__access__(__none__,2))) ;
#line 1315
extern int ( __attribute__((__nonnull__(2), __leaf__)) pthread_getcpuclockid)(pthread_t __thread_id ,
                                                                              __clockid_t *__clock_id )  __attribute__((__nothrow__)) ;
#line 1332
extern int ( __attribute__((__leaf__)) pthread_atfork)(void (*__prepare)(void) , void (*__parent)(void) ,
                                                       void (*__child)(void) )  __attribute__((__nothrow__)) ;
#line 5 "/home/simmo/dev/goblint/sv-comp/goblint/includes/pthread.c"
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) )  __attribute__((__goblint_stub__)) ;
#line 5 "/home/simmo/dev/goblint/sv-comp/goblint/includes/pthread.c"
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) ) 
{ 
  int top ;

  {
  {
#line 8
  (*init_routine)();
  }
#line 9
  return (top);
}
}
#line 231 "smtprc_comb.c"
#pragma merger(0,"/tmp/cil-igB1lIFD.i","-Wall,-g,-pthread")
#line 232
extern int ( __attribute__((__nonnull__(1))) atoi)(char const   *__nptr )  __attribute__((__pure__,
__nothrow__)) ;
#line 234
int check_mail_file(char *email_address , char *key ) ;
#line 235
extern char *( __attribute__((__nonnull__(1,2))) strncpy)(char * __restrict  __dest ,
                                                          char const   * __restrict  __src ,
                                                          size_t___0 __n )  __attribute__((__nothrow__)) ;
#line 237
extern int ( __attribute__((__nonnull__(1,2))) strncmp)(char const   *__s1 , char const   *__s2 ,
                                                        size_t___0 __n )  __attribute__((__pure__,
__nothrow__)) ;
#line 240
extern char *( __attribute__((__nonnull__(2))) strtok)(char * __restrict  __s , char const   * __restrict  __delim )  __attribute__((__nothrow__)) ;
#line 241
extern size_t___0 ( __attribute__((__nonnull__(1))) strlen)(char const   *__s )  __attribute__((__pure__,
__nothrow__)) ;
#line 243
void swap_rule(char *dest , char const   *rule___0 , int hostn ) ;
#line 244 "smtprc_comb.c"
struct options o  ;
#line 245 "smtprc_comb.c"
host **hosts  ;
#line 246 "smtprc_comb.c"
rule **rules  ;
#line 247 "smtprc_comb.c"
int check_mail_file(char *email_address , char *key ) 
{ 
  char mac_buf[8193] ;
  char tmp[9][8193] ;
  char *word ;
  int count ;
  int emailc ;
  int x ;
  int y ;
  int flag ;
  size_t___0 tmp___0 ;
  int tmp___1 ;
  size_t___0 tmp___2 ;
  size_t___0 tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  {
#line 264
  count = 0;
#line 265
  emailc = 0;
#line 266
  x = 0;
#line 267
  y = 0;
#line 268
  flag = 0;
  }
#line 269
  if ((unsigned int )email_address == (unsigned int )((void *)0)) {
#line 270
    return (0);
  }
  {
#line 272
  x = 0;
  }
  {
#line 273
  while (1) {
    while_continue: /* CIL Label */ ;
#line 273
    if (! ((unsigned long )x < o.no_hostnames)) {
#line 273
      goto while_break;
    }
#line 274
    if (! (*(hosts + x))->smtp_open) {
#line 275
      goto __Cont;
    }
    {
#line 277
    y = 0;
    }
    {
#line 278
    while (1) {
      while_continue___0: /* CIL Label */ ;
#line 278
      if (! (y < (int )o.no_rules)) {
#line 278
        goto while_break___0;
      }
      {
#line 279
      swap_rule(mac_buf, (char const   *)(*(rules + y))->mail_from, x);
#line 280
      tmp___0 = strlen((char const   *)(mac_buf));
#line 281
      tmp___1 = strncmp((char const   *)email_address, (char const   *)(mac_buf),
                        tmp___0);
      }
#line 283
      if (! tmp___1) {
        {
#line 284
        emailc ++;
        }
      }
      {
#line 286
      y ++;
      }
    }
    while_break___0: /* CIL Label */ ;
    }
    __Cont: 
    {
#line 289
    x ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 291
  if (! emailc) {
#line 292
    return (0);
  } else {
    {
#line 294
    word = strtok((char * __restrict  )key, (char const   * __restrict  )":");
    }
    {
#line 295
    while (1) {
      while_continue___1: /* CIL Label */ ;
#line 295
      if (! word) {
#line 295
        goto while_break___1;
      }
      {
#line 296
      count ++;
      }
#line 297
      if (count < 6) {
        {
#line 298
        strncpy((char * __restrict  )(tmp[count]), (char const   * __restrict  )word,
                8192U);
#line 300
        tmp[count][8192] = (char )'\000';
        }
      }
      {
#line 302
      word = strtok((char * __restrict  )((void *)0), (char const   * __restrict  )":");
      }
    }
    while_break___1: /* CIL Label */ ;
    }
    {
#line 304
    tmp___5 = atoi((char const   *)(tmp[2]));
    }
#line 305
    if ((unsigned int )tmp___5 == o.time) {
      {
#line 306
      x = 0;
      }
      {
#line 307
      while (1) {
        while_continue___2: /* CIL Label */ ;
#line 307
        if (! ((unsigned long )x < o.no_hostnames)) {
#line 307
          goto while_break___2;
        }
        {
#line 308
        y = 0;
#line 309
        tmp___2 = strlen((char const   *)(tmp[3]));
#line 310
        tmp___3 = strlen((char const   *)(*(hosts + x))->ip_address);
        }
#line 311
        if (tmp___2 != tmp___3) {
#line 312
          goto __Cont___0;
        }
        {
#line 314
        while (1) {
          while_continue___3: /* CIL Label */ ;
#line 314
          if (! tmp[3][y]) {
#line 314
            goto while_break___3;
          }
#line 315
          if ((int )tmp[3][y] != (int )*((*(hosts + x))->ip_address + y)) {
            {
#line 316
            flag ++;
            }
          }
          {
#line 318
          y ++;
          }
        }
        while_break___3: /* CIL Label */ ;
        }
#line 320
        if (! flag) {
          {
#line 321
          tmp___4 = atoi((char const   *)(tmp[4]));
#line 322
          (*((*(hosts + x))->smtp_check + tmp___4))->failed = (unsigned char)2;
          }
        }
        {
#line 324
        flag = 0;
#line 325
        y = 0;
        }
        __Cont___0: 
        {
#line 327
        x ++;
        }
      }
      while_break___2: /* CIL Label */ ;
      }
    }
  }
#line 331
  return (0);
}
}
#line 334
#pragma merger(0,"/tmp/cil-ZtejrG4Q.i","-Wall,-g,-pthread")
#line 335
extern struct _IO_FILE *stderr ;
#line 336
extern int fprintf(FILE * __restrict  __stream , char const   * __restrict  __format 
                   , ...) ;
#line 338
extern int printf(char const   * __restrict  __format  , ...) ;
#line 339
extern void perror(char const   *__s ) ;
#line 340
extern int select(int __nfds , fd_set * __restrict  __readfds , fd_set * __restrict  __writefds ,
                  fd_set * __restrict  __exceptfds , struct timeval * __restrict  __timeout ) ;
#line 342
extern void free(void *__ptr )  __attribute__((__nothrow__)) ;
#line 343
extern void exit(int __status )  __attribute__((__nothrow__, __noreturn__)) ;
#line 344
extern int *__errno_location(void)  __attribute__((__nothrow__, __const__)) ;
#line 345
extern void *( __attribute__((__nonnull__(1,2))) memcpy)(void * __restrict  __dest ,
                                                         void const   * __restrict  __src ,
                                                         size_t___0 __n )  __attribute__((__nothrow__)) ;
#line 347
extern void ( __attribute__((__nonnull__(1))) bzero)(void *__s , size_t___0 __n )  __attribute__((__nothrow__)) ;
#line 348
extern int socket(int __domain , int __type , int __protocol )  __attribute__((__nothrow__)) ;
#line 349
extern int connect(int __fd , struct sockaddr  const  *__addr , socklen_t __len ) ;
#line 350
extern int getsockopt(int __fd , int __level , int __optname , void * __restrict  __optval ,
                      socklen_t * __restrict  __optlen )  __attribute__((__nothrow__)) ;
#line 353
extern uint16_t htons(uint16_t __hostshort )  __attribute__((__nothrow__, __const__)) ;
#line 354
extern struct hostent *gethostbyaddr(void const   *__addr , __socklen_t __len , int __type ) ;
#line 355
extern struct hostent *gethostbyname(char const   *__name ) ;
#line 356
extern int close(int __fd ) ;
#line 357
extern ssize_t read(int __fd , void *__buf , size_t___0 __nbytes ) ;
#line 358
extern unsigned int sleep(unsigned int __seconds ) ;
#line 359
extern int fcntl(int __fd , int __cmd  , ...) ;
#line 360
extern in_addr_t inet_addr(char const   *__cp )  __attribute__((__nothrow__)) ;
#line 361
void fatal(char *fmt  , ...) ;
#line 362
void error(char *fmt  , ...) ;
#line 363
long get_ip(char *host___0 ) ;
#line 364
int tcp_connect(long ipa ) ;
#line 365
int connect_non_blocking(int sockfd , struct sockaddr  const  *thaddr , socklen_t salen ,
                         int nsec ) ;
#line 367
int read_timeo(int sockfd , char *string , int max , int timeo ) ;
#line 368
char *get_hostname(char const   *addr ) ;
#line 369
void *s_malloc(unsigned long size ) ;
#line 370 "smtprc_comb.c"
struct flags f  ;
#line 371 "smtprc_comb.c"
long get_ip(char *host___0 ) 
{ 
  long ia ;
  struct hostent *h ;
  in_addr_t tmp ;

  {
#line 377
  if (f.debug) {
    {
#line 378
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Getting IP\n");
    }
  }
  {
#line 380
  tmp = inet_addr((char const   *)host___0);
#line 381
  ia = (long )tmp;
  }
#line 382
  if (ia == -1L) {
    {
#line 383
    h = gethostbyname((char const   *)host___0);
    }
#line 384
    if ((unsigned int )h == (unsigned int )((void *)0)) {
#line 385
      if (f.debug) {
        {
#line 386
        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Couldn\'t resolv ip\n");
        }
      }
#line 388
      return (-1L);
    }
    {
#line 390
    memcpy((void * __restrict  )(& ia), (void const   * __restrict  )*(h->h_addr_list + 0),
           4U);
    }
  }
#line 393
  if (f.debug) {
    {
#line 394
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Got ip ok\n");
    }
  }
#line 396
  return (ia);
}
}
#line 399 "smtprc_comb.c"
int tcp_connect(long ipa ) 
{ 
  struct sockaddr_in their_addr ;
  int sockfd ;
  int socket_f ;

  {
  {
#line 405
  socket_f = 0;
  }
  START1: 
  {
#line 407
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 408
    sockfd = socket(2, 1, 0);
    }
#line 409
    if (! (sockfd == -1)) {
#line 410
      goto while_break;
    }
    {
#line 412
    perror((char const   *)"socket: ");
#line 413
    exit(1);
    }
#line 414
    if (socket_f > 12) {
      {
#line 415
      fatal("Still unable to create socket after 60 secs.... Try reducing the number of threads.....");
      }
    }
    {
#line 417
    socket_f ++;
    }
#line 418
    if (f.verbose) {
      {
#line 419
      error("Unable to create socket.... sleeping for 5 seconds");
      }
    } else {
      {
#line 421
      error("Unable to create socket.... sleeping for 5 seconds");
      }
    }
    {
#line 423
    sleep(5U);
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 425
  if (sockfd > 2000) {
    {
#line 426
    close(sockfd);
#line 427
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Socket count exceding 2000; sleeping 5!\n");
#line 428
    sleep(5U);
    }
#line 429
    goto START1;
  }
  {
#line 431
  their_addr.sin_family = (unsigned short)2;
#line 432
  their_addr.sin_port = htons((unsigned short)25);
#line 433
  their_addr.sin_addr.s_addr = (unsigned int )ipa;
#line 434
  bzero((void *)(& their_addr.sin_zero), 8U);
#line 435
  sockfd = connect_non_blocking(sockfd, (struct sockaddr  const  *)((struct sockaddr *)(& their_addr)),
                                (socklen_t )sizeof(struct sockaddr ), (int )o.c_timeout);
  }
#line 437
  if (sockfd == -1) {
#line 438
    if ((int )f.verbose > 1) {
      {
#line 439
      error("! Unable to connect to host");
      }
    }
#line 441
    return (-1);
  }
#line 443
  if (sockfd > 2000) {
    {
#line 444
    printf((char const   * __restrict  )"\n\n\n\n\n\n\n\n******** in tcp_connect\n");
#line 445
    sleep(10U);
    }
  }
#line 447
  return (sockfd);
}
}
#line 450 "smtprc_comb.c"
int connect_non_blocking(int sockfd , struct sockaddr  const  *thaddr , socklen_t salen ,
                         int nsec ) 
{ 
  int n ;
  int flags ;
  int serror ;
  socklen_t len ;
  fd_set rset ;
  fd_set wset ;
  struct timeval tval ;
  int tmp ;
  int *tmp___0 ;
  int __d0 ;
  int __d1 ;
  int *tmp___1 ;
  struct timeval *tmp___2 ;
  int tmp___3 ;
  register char __result ;
  register char __result___0 ;
  int tmp___4 ;
  int *tmp___5 ;

  {
  {
#line 472
  flags = fcntl(sockfd, 3, 0);
  }
#line 473
  if (flags == -1) {
    {
#line 474
    perror((char const   *)"Cant set flags");
#line 475
    close(sockfd);
    }
#line 476
    return (-1);
  }
  {
#line 478
  tmp = fcntl(sockfd, 4, flags | 2048);
  }
#line 479
  if (tmp == -1) {
    {
#line 480
    perror((char const   *)"Cant set socket options");
#line 481
    close(sockfd);
    }
#line 482
    return (-1);
  }
  {
#line 484
  serror = 0;
#line 485
  n = connect(sockfd, thaddr, salen);
  }
#line 486
  if (n == -1) {
    {
#line 487
    tmp___0 = __errno_location();
    }
#line 488
    if (*tmp___0 != 115) {
      {
#line 489
      close(sockfd);
      }
#line 490
      return (-1);
    }
  }
#line 493
  if (sockfd > 2000) {
    {
#line 494
    printf((char const   * __restrict  )"\n\n\n\n\n\n******** in connect non blocking\n");
#line 495
    sleep(10U);
    }
  }
#line 497
  if (n == 0) {
#line 498
    goto done;
  }
  {
#line 500
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 501
    __asm__  volatile   ("cld; rep; stosl": "=c" (__d0), "=D" (__d1): "a" (0), "0" (sizeof(fd_set ) / sizeof(__fd_mask )),
                         "1" (& rset.__fds_bits[0]): "memory");
    }
#line 503
    goto while_break;
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 505
  __asm__  volatile   ("btsl %1,%0": "=m" (rset.__fds_bits[(unsigned long )((unsigned int )sockfd) / (8UL * sizeof(__fd_mask ))]): "r" ((unsigned long )((unsigned int )sockfd) % (8UL * sizeof(__fd_mask ))): "cc",
                       "memory");
#line 507
  wset = rset;
#line 508
  tval.tv_sec = (long )nsec;
#line 509
  tval.tv_usec = 500000L;
  }
#line 510
  if (nsec) {
    {
#line 511
    tmp___2 = & tval;
    }
  } else {
    {
#line 513
    tmp___2 = (struct timeval *)((void *)0);
    }
  }
  {
#line 515
  n = select(sockfd + 1, (fd_set * __restrict  )(& rset), (fd_set * __restrict  )(& wset),
             (fd_set * __restrict  )((void *)0), (struct timeval * __restrict  )tmp___2);
  }
#line 517
  if (n == 0) {
    {
#line 518
    close(sockfd);
#line 519
    tmp___1 = __errno_location();
#line 520
    *tmp___1 = 110;
    }
#line 521
    return (-1);
  } else
#line 523
  if (n == -1) {
    {
#line 524
    perror((char const   *)"Select failed\n");
#line 525
    close(sockfd);
    }
#line 526
    return (-1);
  }
  {
#line 529
  __asm__  volatile   ("btl %1,%2 ; setcb %b0": "=q" (__result): "r" ((unsigned long )((unsigned int )sockfd) % (8UL * sizeof(__fd_mask ))),
                       "m" (rset.__fds_bits[(unsigned long )((unsigned int )sockfd) / (8UL * sizeof(__fd_mask ))]): "cc");
  }
#line 531
  if (__result) {
#line 532
    goto _L;
  } else {
    {
#line 534
    __asm__  volatile   ("btl %1,%2 ; setcb %b0": "=q" (__result___0): "r" ((unsigned long )((unsigned int )sockfd) % (8UL * sizeof(__fd_mask ))),
                         "m" (wset.__fds_bits[(unsigned long )((unsigned int )sockfd) / (8UL * sizeof(__fd_mask ))]): "cc");
    }
#line 536
    if (__result___0) {
      _L: 
      {
#line 538
      len = (socklen_t )sizeof(serror);
#line 539
      tmp___3 = getsockopt(sockfd, 1, 4, (void * __restrict  )(& serror), (socklen_t * __restrict  )(& len));
      }
#line 540
      if (tmp___3 < 0) {
        {
#line 541
        close(sockfd);
        }
#line 542
        return (-1);
      }
    } else {
      {
#line 545
      error("**** Socket not set..... ");
#line 546
      perror((char const   *)"FD_SET: ");
#line 547
      close(sockfd);
#line 548
      exit(-1);
      }
    }
  }
  done: 
  {
#line 552
  tmp___4 = fcntl(sockfd, 4, flags);
  }
#line 553
  if (tmp___4 == -1) {
    {
#line 554
    perror((char const   *)"Can\'t restore the socket opts\n");
#line 555
    close(sockfd);
    }
#line 556
    return (-1);
  }
#line 558
  if (serror) {
    {
#line 559
    tmp___5 = __errno_location();
#line 560
    *tmp___5 = serror;
#line 561
    close(sockfd);
    }
#line 562
    return (-1);
  }
#line 564
  return (sockfd);
}
}
#line 567 "smtprc_comb.c"
int read_timeo(int sockfd , char *string , int max , int timeo ) 
{ 
  struct timeval tv ;
  int numbytes ;
  fd_set readfds ;
  int __d0 ;
  int __d1 ;
  register char __result ;

  {
  {
#line 576
  numbytes = 0;
#line 577
  tv.tv_sec = (long )timeo;
#line 578
  tv.tv_usec = 500000L;
  }
  {
#line 579
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 580
    __asm__  volatile   ("cld; rep; stosl": "=c" (__d0), "=D" (__d1): "a" (0), "0" (sizeof(fd_set ) / sizeof(__fd_mask )),
                         "1" (& readfds.__fds_bits[0]): "memory");
    }
#line 582
    goto while_break;
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 584
  __asm__  volatile   ("btsl %1,%0": "=m" (readfds.__fds_bits[(unsigned long )((unsigned int )sockfd) / (8UL * sizeof(__fd_mask ))]): "r" ((unsigned long )((unsigned int )sockfd) % (8UL * sizeof(__fd_mask ))): "cc",
                       "memory");
#line 586
  select(sockfd + 1, (fd_set * __restrict  )(& readfds), (fd_set * __restrict  )((void *)0),
         (fd_set * __restrict  )((void *)0), (struct timeval * __restrict  )(& tv));
#line 588
  __asm__  volatile   ("btl %1,%2 ; setcb %b0": "=q" (__result): "r" ((unsigned long )((unsigned int )sockfd) % (8UL * sizeof(__fd_mask ))),
                       "m" (readfds.__fds_bits[(unsigned long )((unsigned int )sockfd) / (8UL * sizeof(__fd_mask ))]): "cc");
  }
#line 590
  if (__result) {
    {
#line 591
    numbytes = read(sockfd, (void *)string, (unsigned int )max);
    }
#line 592
    if (numbytes < 1) {
#line 593
      return (0);
    } else {
      {
#line 595
      *(string + numbytes) = (char )'\000';
      }
    }
  } else {
#line 598
    return (-1);
  }
#line 600
  return (1);
}
}
#line 603 "smtprc_comb.c"
char *get_hostname(char const   *addr ) 
{ 
  struct hostent *hn ;
  struct in_addr *myaddr ;
  void *tmp ;

  {
  {
#line 609
  tmp = s_malloc(sizeof(struct in_addr ));
#line 610
  myaddr = (struct in_addr *)tmp;
#line 611
  myaddr->s_addr = inet_addr(addr);
#line 612
  hn = gethostbyaddr((void const   *)((char *)myaddr), 4U, 2);
  }
#line 613
  if ((unsigned int )hn == (unsigned int )((void *)0)) {
    {
#line 614
    free((void *)myaddr);
    }
#line 615
    return ((char *)addr);
  }
  {
#line 617
  free((void *)myaddr);
  }
#line 618
  return (hn->h_name);
}
}
#line 621
#pragma merger(0,"/tmp/cil-Pwl1SXo2.i","-Wall,-g,-pthread")
#line 622
void display_screen(void) ;
#line 623 "smtprc_comb.c"
void display_screen(void) 
{ 
  int x ;
  int y ;

  {
  {
#line 628
  x = 0;
#line 629
  y = 0;
#line 630
  x = 0;
  }
  {
#line 631
  while (1) {
    while_continue: /* CIL Label */ ;
#line 631
    if (! ((unsigned long )x < o.no_hostnames)) {
#line 631
      goto while_break;
    }
#line 632
    if ((*(hosts + x))->smtp_open) {
      {
#line 633
      printf((char const   * __restrict  )"Results for host: %s\n\n", (*(hosts + x))->ip_address);
      }
#line 634
      if ((*(hosts + x))->fatal_error) {
        {
#line 635
        printf((char const   * __restrict  )"There was a fatal error (%d) scanning this host\n",
               (int )(*(hosts + x))->fatal_error);
        }
#line 637
        if ((int )(*(hosts + x))->fatal_error == 6) {
#line 638
          goto _L;
        } else
#line 640
        if ((int )(*(hosts + x))->fatal_error == 7) {
#line 641
          goto _L;
        } else
#line 643
        if ((int )(*(hosts + x))->fatal_error == 8) {
          _L: 
          {
#line 645
          y = 0;
          }
          {
#line 646
          while (1) {
            while_continue___0: /* CIL Label */ ;
#line 646
            if (! (y <= (int )o.no_rules)) {
#line 646
              goto while_break___0;
            }
            {
#line 647
            printf((char const   * __restrict  )"\tResults for check: %d\n", y);
#line 648
            printf((char const   * __restrict  )"\t\tError code: %d\n", (int )(*((*(hosts + x))->smtp_check + y))->error_code);
            }
#line 649
            if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 3) {
              {
#line 650
              printf((char const   * __restrict  )"\t\t*%s*\n", (*((*(hosts + x))->smtp_check + y))->r_mail_from);
              }
            }
#line 652
            if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 4) {
              {
#line 653
              printf((char const   * __restrict  )"\t\t*%s*\n", (*((*(hosts + x))->smtp_check + y))->r_rcpt_to);
              }
            }
#line 655
            if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 7) {
              {
#line 656
              printf((char const   * __restrict  )"\t\t*%s*\n", (*((*(hosts + x))->smtp_check + y))->r_reset);
              }
            }
            {
#line 658
            y ++;
            }
          }
          while_break___0: /* CIL Label */ ;
          }
        }
      } else {
        {
#line 664
        y = 0;
        }
        {
#line 665
        while (1) {
          while_continue___1: /* CIL Label */ ;
#line 665
          if (! (y <= (int )o.no_rules)) {
#line 665
            goto while_break___1;
          }
          {
#line 666
          printf((char const   * __restrict  )"\tResults for check: %d\n", y);
          }
#line 667
          if ((*((*(hosts + x))->smtp_check + y))->error_code) {
            {
#line 668
            printf((char const   * __restrict  )"This checkl failed with error code (%d)\n",
                   (int )(*((*(hosts + x))->smtp_check + y))->error_code);
            }
          } else
#line 671
          if ((*((*(hosts + x))->smtp_check + y))->passed) {
            {
#line 672
            printf((char const   * __restrict  )"\t\t*Passed this check\n");
            }
          } else {
            {
#line 674
            printf((char const   * __restrict  )"\t\t!Failed this check\n");
            }
          }
          {
#line 677
          y ++;
          }
        }
        while_break___1: /* CIL Label */ ;
        }
      }
    }
    {
#line 681
    x ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 683
  return;
}
}
#line 686
#pragma merger(0,"/tmp/cil-keSUczDt.i","-Wall,-g,-pthread")
#line 688
void set_defaults(void) ;
#line 689
void banner(void) ;
#line 690
void validate_options(void) ;
#line 691
void parse_args(int argc , char **argv ) ;
#line 692
int get_domain(void) ;
#line 693
int get_ip_range(char *iprange ) ;
#line 694
int parse_config(char *configfile ) ;
#line 695
int get_email_file(char *email_file ) ;
#line 696
int parse_aconfig(void) ;
#line 697
void start_scan(void) ;
#line 698
void display_html(void) ;
#line 699
void display_machine(void) ;
#line 700
void display_text(void) ;
#line 701
void display_xml(void) ;
#line 702
int parse_mbox(void) ;
#line 703
int parse_maildir(void) ;
#line 704
int parse_popbox(void) ;
#line 705 "smtprc_comb.c"
int main(int argc , char **argv ) 
{ 
  time_t b_seconds ;
  time_t a_seconds ;
  int t_diff ;

  {
  {
#line 711
  b_seconds = (time_t )0;
#line 712
  a_seconds = (time_t )0;
#line 713
  banner();
#line 714
  set_defaults();
#line 715
  parse_args(argc, (char **)argv);
  }
#line 716
  if (f.auto_config) {
    {
#line 717
    parse_aconfig();
    }
  }
  {
#line 719
  validate_options();
#line 720
  get_ip_range(o.ip_range);
#line 721
  parse_config(o.config_file);
#line 722
  get_domain();
#line 723
  get_email_file(o.email_template);
#line 724
  printf((char const   * __restrict  )"Starting the scan....... Please wait!\n\n\n");
#line 725
  b_seconds = time((time_t *)((void *)0));
#line 726
  start_scan();
#line 727
  a_seconds = time((time_t *)((void *)0));
  }
#line 728
  if (b_seconds == -1L) {
    {
#line 729
    a_seconds = 20L;
#line 730
    b_seconds = 0L;
    }
  } else
#line 732
  if (a_seconds == -1L) {
    {
#line 733
    a_seconds = 20L;
#line 734
    b_seconds = 0L;
    }
  } else
#line 736
  if (a_seconds == b_seconds) {
    {
#line 737
    a_seconds = 20L;
#line 738
    b_seconds = 0L;
    }
  }
  {
#line 742
  t_diff = (int )(a_seconds - b_seconds);
#line 743
  o.hours = (unsigned char )(t_diff / 3600);
#line 744
  t_diff -= (int )o.hours * 3600;
#line 745
  o.mins = (unsigned char )(t_diff / 60);
#line 746
  t_diff -= (int )o.mins * 60;
#line 747
  o.seconds = (unsigned char )t_diff;
  }
#line 748
  if (f.check_mailbox) {
    {
#line 749
    printf((char const   * __restrict  )"\n\n\nFinished Scanning, Waiting %d seconds for mails to arrive......\n\n",
           (int )o.m_timeout);
#line 751
    sleep((unsigned int )o.m_timeout);
#line 752
    printf((char const   * __restrict  )"Checking mail....... Please Wait!\n");
    }
#line 753
    if (f.maildir) {
      {
#line 754
      parse_maildir();
      }
    } else
#line 756
    if (f.mbox) {
      {
#line 757
      parse_mbox();
      }
    } else
#line 759
    if (f.pop) {
      {
#line 760
      parse_popbox();
      }
    }
  }
#line 765
  if (f.output_html) {
    {
#line 766
    printf((char const   * __restrict  )"\n\nGenerating HTML results...... Please wait.\n\n");
#line 767
    display_html();
    }
  }
#line 769
  if (f.output_text) {
    {
#line 770
    printf((char const   * __restrict  )"\n\nGenerating TEXT results...... Please wait.\n\n");
#line 771
    display_text();
    }
  }
#line 773
  if (f.output_machine) {
    {
#line 774
    printf((char const   * __restrict  )"\n\nGenerating Machine Readable results...... Please wait.\n\n");
#line 775
    display_machine();
    }
  }
#line 777
  if (f.output_xml) {
    {
#line 778
    printf((char const   * __restrict  )"\n\nGenerating XML results...... Please wait.\n\n");
#line 779
    display_xml();
    }
  }
  {
#line 781
  banner();
  }
#line 782
  return (0);
}
}
#line 785
#pragma merger(0,"/tmp/cil-1UcA1mvr.i","-Wall,-g,-pthread")
#line 786
extern void *( __attribute__((__warn_unused_result__)) realloc)(void *__ptr , size_t___0 __size )  __attribute__((__nothrow__,
__malloc__)) ;
#line 788
extern struct _IO_FILE *stdin ;
#line 789
extern int fclose(FILE *__stream ) ;
#line 790
extern FILE *fopen(char const   * __restrict  __filename , char const   * __restrict  __modes ) ;
#line 791
extern int snprintf(char * __restrict  __s , size_t___0 __maxlen , char const   * __restrict  __format 
                    , ...)  __attribute__((__nothrow__)) ;
#line 795
extern int sscanf(char const   * __restrict  __s , char const   * __restrict  __format 
                  , ...)  __attribute__((__nothrow__)) ;
#line 797
extern int fgetc(FILE *__stream ) ;
#line 798
extern char *fgets(char * __restrict  __s , int __n , FILE * __restrict  __stream ) ;
#line 799
extern void rewind(FILE *__stream ) ;
#line 800
extern void *( __attribute__((__nonnull__(1))) memset)(void *__s , int __c , size_t___0 __n )  __attribute__((__nothrow__)) ;
#line 801
extern char *( __attribute__((__nonnull__(1,2))) strcat)(char * __restrict  __dest ,
                                                         char const   * __restrict  __src )  __attribute__((__nothrow__)) ;
#line 802
extern char *( __attribute__((__nonnull__(1,2))) strncat)(char * __restrict  __dest ,
                                                          char const   * __restrict  __src ,
                                                          size_t___0 __n )  __attribute__((__nothrow__)) ;
#line 804
extern char *( __attribute__((__nonnull__(1,2))) strstr)(char const   *__haystack ,
                                                         char const   *__needle )  __attribute__((__pure__,
__nothrow__)) ;
#line 806
extern unsigned short const   **__ctype_b_loc(void)  __attribute__((__const__)) ;
#line 807
char *chomp(char *string ) ;
#line 808
void debug(char *fmt  , ...) ;
#line 811 "smtprc_comb.c"
int get_ip_range(char *iprange ) 
{ 
  int start[4] ;
  int startc[4] ;
  int tstart[4] ;
  int tstartc[4] ;
  int end[4] ;
  int endc[4] ;
  int tend[4] ;
  int tendc[4] ;
  int i ;
  int last ;
  int hostnames ;
  char *r ;
  char *t ;
  char *p ;
  char buf[8193] ;
  char *addy[5] ;
  char *temp[2] ;
  char *iprange2 ;
  char hostnamet[8193] ;
  char *tmp ;
  size_t___0 tmp___0 ;
  size_t___0 tmp___1 ;
  void *tmp___2 ;
  size_t___0 tmp___3 ;
  size_t___0 tmp___4 ;
  unsigned short const   **tmp___5 ;
  unsigned short const   **tmp___6 ;
  char *tmp___7 ;
  char *tmp___8 ;
  void *tmp___9 ;
  void *tmp___10 ;
  void *tmp___11 ;
  size_t___0 tmp___12 ;
  void *tmp___13 ;
  size_t___0 tmp___14 ;
  size_t___0 tmp___15 ;
  char *tmp___16 ;
  char *tmp___17 ;

  {
  {
#line 852
  i = 0;
#line 853
  last = 0;
#line 854
  hostnames = 0;
#line 855
  tmp = strstr((char const   *)iprange, (char const   *)"/");
  }
#line 856
  if (tmp) {
    {
#line 857
    fatal("Netmask notation is not supported yet...... please use the format 192.168.*.1-255\n");
    }
  }
  {
#line 859
  printf((char const   * __restrict  )"\nCreating a list of IP\'s to scan....... Please wait!\n\n");
#line 860
  tmp___17 = strstr((char const   *)iprange, (char const   *)",");
  }
#line 861
  if ((unsigned int )tmp___17 == (unsigned int )((void *)0)) {
    {
#line 862
    strncpy((char * __restrict  )(buf), (char const   * __restrict  )iprange, 8192U);
#line 863
    tmp___0 = strlen((char const   *)iprange);
#line 864
    buf[tmp___0] = (char )'\000';
#line 865
    last = 1;
    }
#line 866
    goto GETIP;
  } else {
    {
#line 868
    p = iprange;
#line 869
    t = p;
    }
    {
#line 870
    while (1) {
      while_continue: /* CIL Label */ ;
      {
#line 871
      tmp___16 = p;
#line 872
      p ++;
      }
#line 873
      if (! *tmp___16) {
#line 874
        goto while_break;
      }
#line 876
      if ((int )*p == 44) {
        {
#line 877
        *p = (char )'\000';
#line 878
        p ++;
#line 879
        strncpy((char * __restrict  )(buf), (char const   * __restrict  )t, 8192U);
        }
        GETIP: 
        {
#line 881
        tmp___1 = strlen((char const   *)(buf));
#line 882
        tmp___2 = s_malloc((unsigned long )(tmp___1 + 1U) * sizeof(char ));
#line 883
        iprange2 = (char *)tmp___2;
#line 884
        tmp___3 = strlen((char const   *)(buf));
#line 885
        strncpy((char * __restrict  )iprange2, (char const   * __restrict  )(buf),
                tmp___3);
#line 887
        tmp___4 = strlen((char const   *)(buf));
#line 888
        *(iprange2 + tmp___4) = (char )'\000';
#line 889
        addy[4] = (char *)((void *)0);
#line 890
        addy[3] = addy[4];
#line 891
        addy[2] = addy[3];
#line 892
        addy[1] = addy[2];
#line 893
        addy[0] = addy[1];
#line 894
        r = buf;
#line 895
        addy[0] = r;
#line 896
        debug("R == %s\n", r);
        }
        {
#line 897
        while (1) {
          while_continue___0: /* CIL Label */ ;
          {
#line 898
          r ++;
          }
#line 899
          if (! *r) {
#line 900
            goto while_break___0;
          }
#line 902
          if ((int )*r == 46) {
            {
#line 903
            i ++;
            }
#line 904
            if (i < 4) {
              {
#line 905
              *r = (char )'\000';
#line 906
              addy[i] = r + 1;
              }
            } else {
#line 908
              goto _L;
            }
          } else
          _L: 
#line 912
          if ((int )*r != 46) {
#line 913
            if ((int )*r != 42) {
#line 914
              if ((int )*r != 45) {
                {
#line 915
                tmp___5 = __ctype_b_loc();
                }
#line 916
                if (! ((int const   )*(*tmp___5 + (int )*r) & 2048)) {
#line 917
                  if ((int )*r != 10) {
                    {
#line 918
                    fatal("Invalid character in IP address notation\n");
                    }
                  }
                }
              }
            }
          }
        }
        while_break___0: /* CIL Label */ ;
        }
#line 926
        if (i != 3) {
          {
#line 927
          fatal("IP address format is illegal\n");
          }
        }
        {
#line 929
        i = 0;
#line 930
        i = 0;
        }
        {
#line 931
        while (1) {
          while_continue___1: /* CIL Label */ ;
#line 931
          if (! (i < 4)) {
#line 931
            goto while_break___1;
          }
#line 932
          if ((int )*(addy[i]) == 42) {
#line 933
            if (i == 0) {
              {
#line 934
              fatal("For some reason I don\'t think it\'s wise scanning the whole bloody net\n\nBut if you sure then edit the source and remove this line\n");
              }
            }
#line 936
            if (i == 1) {
              {
#line 937
              fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Sure you wanna scan a entire class A.... \n\n..... OK!\n\n");
              }
            }
            {
#line 939
            start[i] = 1;
#line 940
            startc[i] = 1;
#line 941
            end[i] = 255;
#line 942
            endc[i] = 255;
            }
          } else {
            {
#line 944
            tmp___8 = strstr((char const   *)addy[i], (char const   *)"-");
            }
#line 945
            if ((unsigned int )tmp___8 != (unsigned int )((void *)0)) {
              {
#line 946
              temp[0] = addy[i];
              }
              {
#line 947
              while (1) {
                while_continue___2: /* CIL Label */ ;
#line 948
                if ((int )*(addy[i]) != 10) {
#line 949
                  if ((int )*(addy[i]) != 46) {
#line 950
                    if (! *(addy[i])) {
#line 951
                      goto while_break___2;
                    }
                  } else {
#line 954
                    goto while_break___2;
                  }
                } else {
#line 957
                  goto while_break___2;
                }
#line 959
                if ((int )*(addy[i]) == 45) {
                  {
#line 960
                  *(addy[i]) = (char )'\000';
#line 961
                  temp[1] = addy[i] + 1;
#line 962
                  start[i] = atoi((char const   *)temp[0]);
#line 963
                  startc[i] = atoi((char const   *)temp[0]);
#line 964
                  end[i] = atoi((char const   *)temp[1]);
#line 965
                  endc[i] = atoi((char const   *)temp[1]);
                  }
                } else {
                  {
#line 967
                  tmp___6 = __ctype_b_loc();
                  }
#line 968
                  if (! ((int const   )*(*tmp___6 + (int )*(addy[i])) & 2048)) {
                    {
#line 969
                    fatal("Invalid host specification\n");
                    }
                  }
                }
                {
#line 972
                tmp___7 = addy[i];
#line 973
                (addy[i]) ++;
                }
              }
              while_break___2: /* CIL Label */ ;
              }
            } else {
              {
#line 979
              start[i] = atoi((char const   *)addy[i]);
#line 980
              startc[i] = atoi((char const   *)addy[i]);
#line 981
              end[i] = atoi((char const   *)addy[i]);
#line 982
              endc[i] = atoi((char const   *)addy[i]);
              }
            }
          }
          {
#line 985
          tstart[i] = start[i];
#line 986
          tstartc[i] = start[i];
#line 987
          tend[i] = end[i];
#line 988
          tendc[i] = endc[i];
          }
#line 989
          if (start[i] > end[i]) {
            {
#line 990
            fatal("Invalid ip range\n");
            }
          } else
#line 992
          if (start[i] < 0) {
            {
#line 993
            fatal("Invalid ip range\n");
            }
          } else
#line 995
          if (end[i] > 255) {
            {
#line 996
            fatal("Invalid ip range\n");
            }
          }
          {
#line 1000
          i ++;
          }
        }
        while_break___1: /* CIL Label */ ;
        }
        {
#line 1002
        i = 0;
        }
        {
#line 1003
        while (1) {
          while_continue___3: /* CIL Label */ ;
#line 1003
          if (! (i < 1)) {
#line 1003
            goto while_break___3;
          }
          {
#line 1004
          while (1) {
            while_continue___4: /* CIL Label */ ;
#line 1004
            if (! (start[i] <= end[i])) {
#line 1004
              goto while_break___4;
            }
            {
#line 1005
            while (1) {
              while_continue___5: /* CIL Label */ ;
#line 1005
              if (! (start[i + 1] <= end[i + 1])) {
#line 1005
                goto while_break___5;
              }
              {
#line 1006
              while (1) {
                while_continue___6: /* CIL Label */ ;
#line 1006
                if (! (start[i + 2] <= end[i + 2])) {
#line 1006
                  goto while_break___6;
                }
                {
#line 1007
                while (1) {
                  while_continue___7: /* CIL Label */ ;
#line 1007
                  if (! (start[i + 3] <= end[i + 3])) {
#line 1007
                    goto while_break___7;
                  }
                  {
#line 1008
                  (o.no_hostnames) ++;
#line 1009
                  (start[i + 3]) ++;
                  }
                }
                while_break___7: /* CIL Label */ ;
                }
                {
#line 1011
                start[i + 3] = tstart[i + 3];
#line 1012
                end[i + 3] = tend[i + 3];
#line 1013
                (start[i + 2]) ++;
                }
              }
              while_break___6: /* CIL Label */ ;
              }
              {
#line 1015
              start[i + 2] = tstart[i + 2];
#line 1016
              end[i + 2] = tend[i + 2];
#line 1017
              (start[i + 1]) ++;
              }
            }
            while_break___5: /* CIL Label */ ;
            }
            {
#line 1019
            start[i + 1] = tstart[i + 1];
#line 1020
            end[i + 1] = tend[i + 1];
#line 1021
            (start[i]) ++;
            }
          }
          while_break___4: /* CIL Label */ ;
          }
          {
#line 1023
          i ++;
          }
        }
        while_break___3: /* CIL Label */ ;
        }
#line 1025
        if ((unsigned int )hosts == (unsigned int )((void *)0)) {
          {
#line 1026
          tmp___9 = s_malloc((o.no_hostnames + 1UL) * sizeof(host **));
#line 1027
          hosts = (host **)tmp___9;
          }
        } else {
          {
#line 1029
          tmp___10 = realloc((void *)hosts, (unsigned int )((o.no_hostnames + 1UL) * sizeof(host **)));
#line 1030
          hosts = (host **)tmp___10;
          }
        }
        {
#line 1032
        i = 0;
        }
        {
#line 1033
        while (1) {
          while_continue___8: /* CIL Label */ ;
#line 1033
          if (! (i < 1)) {
#line 1033
            goto while_break___8;
          }
          {
#line 1034
          while (1) {
            while_continue___9: /* CIL Label */ ;
#line 1034
            if (! (startc[i] <= endc[i])) {
#line 1034
              goto while_break___9;
            }
            {
#line 1035
            while (1) {
              while_continue___10: /* CIL Label */ ;
#line 1035
              if (! (startc[i + 1] <= endc[i + 1])) {
#line 1035
                goto while_break___10;
              }
              {
#line 1036
              while (1) {
                while_continue___11: /* CIL Label */ ;
#line 1036
                if (! (startc[i + 2] <= endc[i + 2])) {
#line 1036
                  goto while_break___11;
                }
                {
#line 1037
                while (1) {
                  while_continue___12: /* CIL Label */ ;
#line 1037
                  if (! (startc[i + 3] <= endc[i + 3])) {
#line 1037
                    goto while_break___12;
                  }
#line 1038
                  if (f.debug) {
                    {
#line 1039
                    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"list == %i.%i.%i.%i\n",
                            startc[i], startc[i + 1], startc[i + 2], startc[i + 3]);
#line 1041
                    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"end --> %i.%i.%i.%i\n",
                            endc[i], endc[i + 1], endc[i + 2], endc[i + 3]);
                    }
                  }
                  {
#line 1044
                  snprintf((char * __restrict  )(hostnamet), 8192U, (char const   * __restrict  )"%i.%i.%i.%i",
                           startc[i], startc[i + 1], startc[i + 2], startc[i + 3]);
#line 1046
                  tmp___11 = s_malloc(sizeof(host ));
#line 1047
                  *(hosts + hostnames) = (host *)tmp___11;
#line 1048
                  (*(hosts + hostnames))->resolved = (unsigned char)0;
#line 1049
                  (*(hosts + hostnames))->smtp_open = (unsigned char)0;
#line 1050
                  (*(hosts + hostnames))->fatal = (unsigned char)0;
#line 1051
                  (*(hosts + hostnames))->fatal_error = (unsigned char)0;
#line 1052
                  tmp___12 = strlen((char const   *)(hostnamet));
#line 1053
                  tmp___13 = s_malloc((unsigned long )(tmp___12 + 1U) * sizeof(char ));
#line 1054
                  (*(hosts + hostnames))->ip_address = (char *)tmp___13;
#line 1055
                  tmp___14 = strlen((char const   *)(hostnamet));
#line 1056
                  strncpy((char * __restrict  )(*(hosts + hostnames))->ip_address,
                          (char const   * __restrict  )(hostnamet), tmp___14);
#line 1058
                  tmp___15 = strlen((char const   *)(hostnamet));
#line 1059
                  *((*(hosts + hostnames))->ip_address + tmp___15) = (char )'\000';
                  }
#line 1060
                  if (f.debug) {
                    {
#line 1061
                    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Hostname == %s",
                            (*(hosts + hostnames))->ip_address);
                    }
                  }
                  {
#line 1064
                  hostnames ++;
#line 1065
                  (startc[i + 3]) ++;
                  }
                }
                while_break___12: /* CIL Label */ ;
                }
                {
#line 1067
                startc[i + 3] = tstartc[i + 3];
#line 1068
                endc[i + 3] = tendc[i + 3];
#line 1069
                (startc[i + 2]) ++;
                }
              }
              while_break___11: /* CIL Label */ ;
              }
              {
#line 1071
              startc[i + 2] = tstartc[i + 2];
#line 1072
              endc[i + 2] = tendc[i + 2];
#line 1073
              (startc[i + 1]) ++;
              }
            }
            while_break___10: /* CIL Label */ ;
            }
            {
#line 1075
            startc[i + 1] = tstartc[i + 1];
#line 1076
            endc[i + 1] = tendc[i + 1];
#line 1077
            (startc[i]) ++;
            }
          }
          while_break___9: /* CIL Label */ ;
          }
          {
#line 1079
          i ++;
          }
        }
        while_break___8: /* CIL Label */ ;
        }
#line 1081
        if (last) {
#line 1082
          goto END;
        }
#line 1084
        if ((unsigned int )iprange2 != (unsigned int )((void *)0)) {
          {
#line 1085
          free((void *)iprange2);
#line 1086
          iprange2 = (char *)((void *)0);
          }
        }
        {
#line 1088
        strncpy((char * __restrict  )(buf), (char const   * __restrict  )t, 8192U);
#line 1089
        t = p;
#line 1090
        i = 0;
        }
      }
    }
    while_break: /* CIL Label */ ;
    }
#line 1093
    if (t) {
#line 1094
      if ((unsigned int )iprange2 != (unsigned int )((void *)0)) {
        {
#line 1095
        free((void *)iprange2);
#line 1096
        iprange2 = (char *)((void *)0);
        }
      }
      {
#line 1098
      strncpy((char * __restrict  )(buf), (char const   * __restrict  )t, 8192U);
#line 1099
      t = p;
#line 1100
      i = 0;
#line 1101
      last = 1;
      }
#line 1102
      goto GETIP;
    }
  }
  END: 
#line 1106
  if ((unsigned int )iprange2 != (unsigned int )((void *)0)) {
    {
#line 1107
    free((void *)iprange2);
#line 1108
    iprange2 = (char *)((void *)0);
    }
  }
#line 1110
  return (0);
}
}
#line 1113 "smtprc_comb.c"
int parse_config(char *configfile ) 
{ 
  FILE *fd ;
  int i ;
  int nolines ;
  char *buf1 ;
  char buf2[3][250] ;
  char c ;
  int tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  char *tmp___2 ;
  char *tmp___3 ;
  char *tmp___4 ;
  void *tmp___5 ;
  size_t___0 tmp___6 ;
  void *tmp___7 ;
  size_t___0 tmp___8 ;
  size_t___0 tmp___9 ;
  size_t___0 tmp___10 ;
  void *tmp___11 ;
  size_t___0 tmp___12 ;
  size_t___0 tmp___13 ;
  size_t___0 tmp___14 ;
  void *tmp___15 ;
  size_t___0 tmp___16 ;
  size_t___0 tmp___17 ;
  int tmp___18 ;
  char *tmp___19 ;

  {
  {
#line 1143
  i = 0;
#line 1144
  nolines = 0;
#line 1145
  fd = fopen((char const   * __restrict  )configfile, (char const   * __restrict  )"r");
  }
#line 1146
  if ((unsigned int )fd == (unsigned int )((void *)0)) {
    {
#line 1147
    fatal("Unable to open config file \"%s\"\n", configfile);
    }
  }
  {
#line 1149
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 1150
    tmp = fgetc(fd);
#line 1151
    c = (char )tmp;
    }
#line 1152
    if (! ((int )c != -1)) {
#line 1153
      goto while_break;
    }
#line 1155
    if ((int )c == 10) {
      {
#line 1156
      nolines ++;
      }
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 1159
  nolines ++;
#line 1160
  rewind(fd);
#line 1161
  tmp___0 = s_malloc((unsigned long )((unsigned int )nolines) * sizeof(rule **));
#line 1162
  rules = (rule **)tmp___0;
#line 1163
  i = 0;
#line 1164
  tmp___1 = s_malloc(352UL * sizeof(char ));
#line 1165
  buf1 = (char *)tmp___1;
  }
  {
#line 1166
  while (1) {
    while_continue___0: /* CIL Label */ ;
    {
#line 1167
    tmp___19 = fgets((char * __restrict  )buf1, 350, (FILE * __restrict  )fd);
    }
#line 1168
    if (! tmp___19) {
#line 1169
      goto while_break___0;
    }
#line 1171
    if ((int )*(buf1 + 0) == 35) {
#line 1172
      goto while_continue___0;
    } else
#line 1174
    if ((int )*(buf1 + 0) == 10) {
#line 1175
      goto while_continue___0;
    } else
#line 1177
    if ((int )*(buf1 + 0) == 32) {
#line 1178
      goto while_continue___0;
    }
    {
#line 1182
    tmp___2 = strstr((char const   *)buf1, (char const   *)"--NAME--");
    }
#line 1183
    if ((unsigned int )tmp___2 != (unsigned int )((void *)0)) {
#line 1184
      goto _L;
    } else {
      {
#line 1186
      tmp___3 = strstr((char const   *)buf1, (char const   *)"--DOMAIN--");
      }
#line 1187
      if ((unsigned int )tmp___3 != (unsigned int )((void *)0)) {
        _L: 
#line 1189
        if (! f.send_email) {
          {
#line 1190
          fatal("You can only use the --NAME-- and --DOMAIN-- macro\'s if you supply the -b (email_address) option");
          }
        }
        {
#line 1192
        f.got_name_macro = (unsigned char)1;
        }
      }
    }
#line 1195
    if (! f.resolve_hostnames) {
      {
#line 1196
      tmp___4 = strstr((char const   *)buf1, (char const   *)"--HOSTNAME--");
      }
#line 1197
      if ((unsigned int )tmp___4 != (unsigned int )((void *)0)) {
        {
#line 1198
        fatal("You can only use the --HOSTNAME-- macro\'s in the configuration file\nif you specify the -n option on the command line or set RESOLVEDOMAINS:Yes in the auto config file\n");
        }
      }
    }
    {
#line 1201
    tmp___18 = sscanf((char const   * __restrict  )buf1, (char const   * __restrict  )"%240s%240s%240s",
                      buf2[0], buf2[1], buf2[2]);
    }
#line 1203
    if (tmp___18 == 3) {
      {
#line 1204
      tmp___5 = s_malloc(sizeof(rule *));
#line 1205
      *(rules + i) = (rule *)tmp___5;
#line 1206
      tmp___6 = strlen((char const   *)(buf2[0]));
#line 1207
      tmp___7 = s_malloc((unsigned long )(tmp___6 + 1U) * sizeof(char ));
#line 1208
      (*(rules + i))->helo = (char *)tmp___7;
#line 1209
      tmp___8 = strlen((char const   *)(buf2[0]));
#line 1210
      strncpy((char * __restrict  )(*(rules + i))->helo, (char const   * __restrict  )(buf2[0]),
              tmp___8);
#line 1212
      tmp___9 = strlen((char const   *)(buf2[0]));
#line 1213
      *((*(rules + i))->helo + tmp___9) = (char )'\000';
#line 1214
      debug("Rules->helo: %s\n", (*(rules + i))->helo);
#line 1215
      tmp___10 = strlen((char const   *)(buf2[1]));
#line 1216
      tmp___11 = s_malloc((unsigned long )(tmp___10 + 1U) * sizeof(char ));
#line 1217
      (*(rules + i))->mail_from = (char *)tmp___11;
#line 1218
      tmp___12 = strlen((char const   *)(buf2[1]));
#line 1219
      strncpy((char * __restrict  )(*(rules + i))->mail_from, (char const   * __restrict  )(buf2[1]),
              tmp___12);
#line 1221
      tmp___13 = strlen((char const   *)(buf2[1]));
#line 1222
      *((*(rules + i))->mail_from + tmp___13) = (char )'\000';
#line 1223
      debug("Rules->mail_from: %s\n", (*(rules + i))->mail_from);
#line 1224
      tmp___14 = strlen((char const   *)(buf2[2]));
#line 1225
      tmp___15 = s_malloc((unsigned long )(tmp___14 + 1U) * sizeof(char ));
#line 1226
      (*(rules + i))->rcpt_to = (char *)tmp___15;
#line 1227
      tmp___16 = strlen((char const   *)(buf2[2]));
#line 1228
      strncpy((char * __restrict  )(*(rules + i))->rcpt_to, (char const   * __restrict  )(buf2[2]),
              tmp___16);
#line 1230
      tmp___17 = strlen((char const   *)(buf2[2]));
#line 1231
      *((*(rules + i))->rcpt_to + tmp___17) = (char )'\000';
#line 1232
      debug("Rules->rcpt_to: %s\n", (*(rules + i))->rcpt_to);
#line 1233
      o.no_rules = (unsigned short )((int )o.no_rules + 1);
#line 1234
      i ++;
      }
    }
  }
  while_break___0: /* CIL Label */ ;
  }
  {
#line 1237
  o.no_rules = (unsigned short )((int )o.no_rules - 1);
#line 1238
  fclose(fd);
  }
#line 1239
  return (0);
}
}
#line 1242 "smtprc_comb.c"
int get_email_file(char *email_file ) 
{ 
  FILE *fd ;
  char *p ;
  char *t ;
  char *s ;
  char buf[8193] ;
  char c ;
  char *temp ;
  int subject ;
  int body ;
  int rflag ;
  int nflag ;
  int size ;
  int count ;
  int tmp ;
  int tmp___0 ;
  size_t___0 tmp___1 ;
  size_t___0 tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;
  char *tmp___5 ;
  size_t___0 tmp___6 ;
  size_t___0 tmp___7 ;
  void *tmp___8 ;
  void *tmp___9 ;
  char *tmp___10 ;
  int tmp___11 ;
  char *tmp___12 ;
  size_t___0 tmp___13 ;
  size_t___0 tmp___14 ;
  void *tmp___15 ;
  void *tmp___16 ;
  char *tmp___17 ;
  size_t___0 tmp___18 ;
  size_t___0 tmp___19 ;
  void *tmp___20 ;
  void *tmp___21 ;
  char *tmp___22 ;
  int tmp___23 ;
  char *tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  size_t___0 tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  size_t___0 tmp___36 ;
  char *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  char *tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  size_t___0 tmp___43 ;
  void *tmp___44 ;
  size_t___0 tmp___45 ;
  char *tmp___46 ;
  size_t___0 tmp___47 ;
  void *tmp___48 ;
  size_t___0 tmp___49 ;
  size_t___0 tmp___50 ;

  {
  {
#line 1310
  subject = 0;
#line 1311
  body = 0;
#line 1312
  rflag = 0;
#line 1313
  nflag = 0;
#line 1314
  size = 0;
#line 1315
  count = 0;
#line 1316
  fd = fopen((char const   * __restrict  )email_file, (char const   * __restrict  )"r");
  }
#line 1317
  if ((unsigned int )fd == (unsigned int )((void *)0)) {
    {
#line 1318
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n\nERROR:\n\nUnable to open the email file [%s] you specified\nDo you wan to continue using the default?\n\nContinue:\t[y] [n]\n:",
            email_file);
#line 1320
    tmp = fgetc(stdin);
#line 1321
    c = (char )tmp;
    }
#line 1322
    if ((int )c == 121) {
      {
#line 1323
      f.got_email = (unsigned char)0;
      }
#line 1324
      return (1);
    } else {
      {
#line 1326
      tmp___0 = fgetc(stdin);
#line 1327
      c = (char )tmp___0;
      }
#line 1328
      if ((int )c == 89) {
        {
#line 1329
        f.got_email = (unsigned char)0;
        }
#line 1330
        return (1);
      } else {
        {
#line 1332
        exit(1);
        }
      }
    }
  }
  {
#line 1336
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 1337
    tmp___12 = fgets((char * __restrict  )(buf), 8192, (FILE * __restrict  )fd);
    }
#line 1338
    if (! tmp___12) {
#line 1339
      goto while_break;
    }
    {
#line 1341
    tmp___11 = strncmp((char const   *)(buf), (char const   *)"SUBJECT:", 8U);
    }
#line 1342
    if (! tmp___11) {
      {
#line 1343
      subject = 1;
#line 1344
      p = buf + 8;
      }
#line 1345
      if ((int )*p != 0) {
#line 1346
        if (f.debug) {
          {
#line 1347
          fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"DEBUG: email subject == [%s]\n",
                  p);
          }
        }
        {
#line 1350
        tmp___1 = strlen((char const   *)p);
#line 1351
        size = (int )tmp___1;
#line 1352
        t = strstr((char const   *)p, (char const   *)"ENDSUBJECT");
        }
#line 1353
        if ((unsigned int )t != (unsigned int )((void *)0)) {
          {
#line 1354
          *t = (char )'\000';
#line 1355
          tmp___2 = strlen((char const   *)p);
#line 1356
          size = (int )tmp___2;
#line 1357
          tmp___3 = s_malloc((unsigned long )((unsigned int )(size + 1)) * sizeof(char ));
#line 1358
          o.email_subject = (char *)tmp___3;
#line 1359
          strncpy((char * __restrict  )o.email_subject, (char const   * __restrict  )p,
                  (unsigned int )size);
#line 1361
          *(o.email_subject + size) = (char )'\000';
          }
#line 1362
          goto while_break;
        }
        {
#line 1364
        tmp___4 = s_malloc((unsigned long )((unsigned int )(size + 1)) * sizeof(char ));
#line 1365
        o.email_subject = (char *)tmp___4;
#line 1366
        strncpy((char * __restrict  )o.email_subject, (char const   * __restrict  )p,
                (unsigned int )size);
#line 1368
        *(o.email_subject + size) = (char )'\000';
        }
      }
      {
#line 1370
      while (1) {
        while_continue___0: /* CIL Label */ ;
        {
#line 1371
        tmp___5 = fgets((char * __restrict  )(buf), 8192, (FILE * __restrict  )fd);
        }
#line 1372
        if ((unsigned int )tmp___5 == (unsigned int )((void *)0)) {
          {
#line 1373
          subject = 0;
          }
#line 1374
          goto while_break___0;
        }
        {
#line 1376
        tmp___6 = strlen((char const   *)(buf));
#line 1377
        size = (int )((size_t___0 )size + tmp___6);
        }
#line 1378
        if (f.debug) {
          {
#line 1379
          fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"DEBUG: email subject == [%s]\r\n",
                  buf);
          }
        }
        {
#line 1382
        t = strstr((char const   *)(buf), (char const   *)"ENDSUBJECT");
        }
#line 1383
        if ((unsigned int )t != (unsigned int )((void *)0)) {
          {
#line 1384
          *t = (char )'\000';
#line 1385
          tmp___7 = strlen((char const   *)(buf));
#line 1386
          size = (int )((size_t___0 )size + tmp___7);
#line 1387
          tmp___8 = realloc((void *)o.email_subject, (size_t___0 )((unsigned long )((unsigned int )(size + 2)) * sizeof(char )));
#line 1388
          o.email_subject = (char *)tmp___8;
          }
#line 1389
          if ((unsigned int )o.email_subject == (unsigned int )((void *)0)) {
            {
#line 1390
            fatal("Realloc Error\n");
            }
          }
          {
#line 1392
          strncat((char * __restrict  )o.email_subject, (char const   * __restrict  )(buf),
                  (unsigned int )size);
#line 1394
          *(o.email + size) = (char )'\000';
          }
#line 1395
          goto while_break___0;
        }
        {
#line 1397
        tmp___9 = realloc((void *)o.email_subject, (size_t___0 )((unsigned long )((unsigned int )(size + 1)) * sizeof(char )));
#line 1398
        o.email_subject = (char *)tmp___9;
        }
#line 1399
        if ((unsigned int )o.email_subject == (unsigned int )((void *)0)) {
          {
#line 1400
          fatal("Realloc Error\n");
          }
        }
        {
#line 1402
        strncat((char * __restrict  )o.email_subject, (char const   * __restrict  )(buf),
                (unsigned int )size);
#line 1404
        *(o.email + size) = (char )'\000';
#line 1405
        tmp___10 = strstr((char const   *)(buf), (char const   *)"ENDSUBJECT");
        }
#line 1406
        if (! ((unsigned int )tmp___10 == (unsigned int )((void *)0))) {
#line 1407
          goto while_break___0;
        }
      }
      while_break___0: /* CIL Label */ ;
      }
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 1412
  rewind(fd);
  }
  {
#line 1413
  while (1) {
    while_continue___1: /* CIL Label */ ;
    {
#line 1414
    tmp___24 = fgets((char * __restrict  )(buf), 8192, (FILE * __restrict  )fd);
    }
#line 1415
    if (! tmp___24) {
#line 1416
      goto while_break___1;
    }
    {
#line 1418
    tmp___23 = strncmp((char const   *)(buf), (char const   *)"BODY:", 5U);
    }
#line 1419
    if (! tmp___23) {
      {
#line 1420
      body = 1;
#line 1421
      p = buf + 5;
      }
#line 1422
      if ((int )*p != 0) {
#line 1423
        if (f.debug) {
          {
#line 1424
          fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"DEBUG: email body == [%s]\n",
                  p);
          }
        }
        {
#line 1427
        tmp___13 = strlen((char const   *)p);
#line 1428
        size = (int )tmp___13;
#line 1429
        t = strstr((char const   *)(buf), (char const   *)"ENDBODY");
        }
#line 1430
        if ((unsigned int )t != (unsigned int )((void *)0)) {
          {
#line 1431
          *t = (char )'\000';
#line 1432
          tmp___14 = strlen((char const   *)(buf));
#line 1433
          size = (int )tmp___14;
#line 1434
          tmp___15 = s_malloc((unsigned long )((unsigned int )(size + 1)) * sizeof(char ));
#line 1435
          o.email = (char *)tmp___15;
#line 1436
          strncpy((char * __restrict  )o.email, (char const   * __restrict  )p, (unsigned int )size);
#line 1437
          *(o.email + size) = (char )'\000';
          }
#line 1438
          goto while_break___1;
        }
        {
#line 1440
        tmp___16 = s_malloc((unsigned long )((unsigned int )(size + 1)) * sizeof(char ));
#line 1441
        o.email = (char *)tmp___16;
#line 1442
        strncpy((char * __restrict  )o.email, (char const   * __restrict  )p, (unsigned int )size);
#line 1443
        *(o.email + size) = (char )'\000';
        }
      }
      {
#line 1445
      while (1) {
        while_continue___2: /* CIL Label */ ;
        {
#line 1446
        tmp___17 = fgets((char * __restrict  )(buf), 8192, (FILE * __restrict  )fd);
        }
#line 1447
        if ((unsigned int )tmp___17 == (unsigned int )((void *)0)) {
          {
#line 1448
          body = 0;
          }
#line 1449
          goto while_break___2;
        }
        {
#line 1451
        tmp___18 = strlen((char const   *)(buf));
#line 1452
        size = (int )((size_t___0 )size + tmp___18);
        }
#line 1453
        if (f.debug) {
          {
#line 1454
          fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"DEBUG: email body == [%s]\n",
                  buf);
          }
        }
        {
#line 1457
        t = strstr((char const   *)(buf), (char const   *)"ENDBODY");
        }
#line 1458
        if ((unsigned int )t != (unsigned int )((void *)0)) {
          {
#line 1459
          *t = (char )'\000';
#line 1460
          tmp___19 = strlen((char const   *)(buf));
#line 1461
          size = (int )((size_t___0 )size + tmp___19);
#line 1462
          tmp___20 = realloc((void *)o.email, (size_t___0 )((unsigned long )((unsigned int )(size + 1)) * sizeof(char )));
#line 1463
          o.email = (char *)tmp___20;
          }
#line 1464
          if ((unsigned int )o.email == (unsigned int )((void *)0)) {
            {
#line 1465
            fatal("Realloc Error\n");
            }
          }
          {
#line 1467
          strncat((char * __restrict  )o.email, (char const   * __restrict  )(buf),
                  (unsigned int )size);
#line 1469
          *(o.email + size) = (char )'\000';
          }
#line 1470
          goto while_break___2;
        }
        {
#line 1472
        tmp___21 = realloc((void *)o.email, (size_t___0 )((unsigned long )((unsigned int )(size + 1)) * sizeof(char )));
#line 1473
        o.email = (char *)tmp___21;
        }
#line 1474
        if ((unsigned int )o.email == (unsigned int )((void *)0)) {
          {
#line 1475
          fatal("Realloc Error\n");
          }
        }
        {
#line 1477
        strncat((char * __restrict  )o.email, (char const   * __restrict  )(buf),
                (unsigned int )size);
#line 1479
        *(o.email + size) = (char )'\000';
#line 1480
        tmp___22 = strstr((char const   *)(buf), (char const   *)"ENDBODY");
        }
#line 1481
        if (! ((unsigned int )tmp___22 == (unsigned int )((void *)0))) {
#line 1482
          goto while_break___2;
        }
      }
      while_break___2: /* CIL Label */ ;
      }
    }
  }
  while_break___1: /* CIL Label */ ;
  }
#line 1487
  if (! body) {
#line 1488
    goto _L;
  } else
#line 1490
  if (! subject) {
    _L: 
    {
#line 1492
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n\nERROR:\n\nEmail file is in the wrong format\nDo you want to continue using the default?\n\nContinue\t[y] [n]\t:");
#line 1493
    tmp___25 = fgetc(stdin);
#line 1494
    c = (char )tmp___25;
    }
#line 1495
    if ((int )c == 121) {
      {
#line 1496
      f.got_email = (unsigned char)0;
      }
#line 1497
      return (1);
    } else {
      {
#line 1499
      tmp___26 = fgetc(stdin);
#line 1500
      c = (char )tmp___26;
      }
#line 1501
      if ((int )c == 89) {
        {
#line 1502
        f.got_email = (unsigned char)0;
        }
#line 1503
        return (1);
      } else {
        {
#line 1505
        exit(1);
        }
      }
    }
  }
#line 1510
  if (! o.email) {
    {
#line 1511
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n\nERROR:\n\nThe body of your email is empty\nDo you want to continue using the default?\n\nContinue\t[y] [n]\t:");
#line 1512
    tmp___27 = fgetc(stdin);
#line 1513
    c = (char )tmp___27;
    }
#line 1514
    if ((int )c == 121) {
      {
#line 1515
      f.got_email = (unsigned char)0;
      }
#line 1516
      return (1);
    } else {
      {
#line 1518
      tmp___28 = fgetc(stdin);
#line 1519
      c = (char )tmp___28;
      }
#line 1520
      if ((int )c == 89) {
        {
#line 1521
        f.got_email = (unsigned char)0;
        }
#line 1522
        return (1);
      } else {
        {
#line 1524
        exit(1);
        }
      }
    }
  }
#line 1528
  if (! o.email_subject) {
    {
#line 1529
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n\nERROR:\n\nThe subject of your email is empty\nDo you want to continue using the default?\n\nContinue\t[y] [n]\t:");
#line 1530
    tmp___29 = fgetc(stdin);
#line 1531
    c = (char )tmp___29;
    }
#line 1532
    if ((int )c == 121) {
      {
#line 1533
      f.got_email = (unsigned char)0;
      }
#line 1534
      return (1);
    } else {
      {
#line 1536
      tmp___30 = fgetc(stdin);
#line 1537
      c = (char )tmp___30;
      }
#line 1538
      if ((int )c == 89) {
        {
#line 1539
        f.got_email = (unsigned char)0;
        }
#line 1540
        return (1);
      } else {
        {
#line 1542
        exit(1);
        }
      }
    }
  }
  {
#line 1546
  tmp___33 = strlen((char const   *)o.email);
  }
#line 1547
  if (tmp___33 < 2U) {
    {
#line 1548
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n\nERROR:\n\nThe body of your email contains 1 character\nDo you want to continue using the default?\n\nContinue\t[y] [n]\t:");
#line 1549
    tmp___31 = fgetc(stdin);
#line 1550
    c = (char )tmp___31;
    }
#line 1551
    if ((int )c == 121) {
      {
#line 1552
      f.got_email = (unsigned char)0;
      }
#line 1553
      return (1);
    } else {
      {
#line 1555
      tmp___32 = fgetc(stdin);
#line 1556
      c = (char )tmp___32;
      }
#line 1557
      if ((int )c == 89) {
        {
#line 1558
        f.got_email = (unsigned char)0;
        }
#line 1559
        return (1);
      } else {
        {
#line 1561
        exit(1);
        }
      }
    }
  }
  {
#line 1565
  tmp___36 = strlen((char const   *)o.email_subject);
  }
#line 1566
  if (tmp___36 < 2U) {
    {
#line 1567
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n\nERROR:\n\nThe subject of your email contains 1 character\nDo you want to continue using the default?\n\nContinue\t[y] [n]\t:");
#line 1568
    tmp___34 = fgetc(stdin);
#line 1569
    c = (char )tmp___34;
    }
#line 1570
    if ((int )c == 121) {
      {
#line 1571
      f.got_email = (unsigned char)0;
      }
#line 1572
      return (1);
    } else {
      {
#line 1574
      tmp___35 = fgetc(stdin);
#line 1575
      c = (char )tmp___35;
      }
#line 1576
      if ((int )c == 89) {
        {
#line 1577
        f.got_email = (unsigned char)0;
        }
#line 1578
        return (1);
      } else {
        {
#line 1580
        exit(1);
        }
      }
    }
  }
  {
#line 1584
  p = o.email_subject;
  }
  {
#line 1585
  while (1) {
    while_continue___3: /* CIL Label */ ;
#line 1586
    if ((int )*p == 10) {
      {
#line 1587
      nflag ++;
      }
    }
#line 1589
    if ((int )*p == 13) {
      {
#line 1590
      rflag ++;
      }
    }
    {
#line 1592
    tmp___37 = p;
#line 1593
    p ++;
    }
#line 1594
    if (! ((int )*tmp___37 != 0)) {
#line 1595
      goto while_break___3;
    }
  }
  while_break___3: /* CIL Label */ ;
  }
#line 1598
  if (nflag > 1) {
#line 1599
    goto _L___2;
  } else
#line 1601
  if (rflag > 1) {
    _L___2: 
    {
#line 1603
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n\nERROR:\n\nThere is more than one line feed in the email subject\nDo you want to continue using the default?\n\nContinue\t[y] [n]\t:");
#line 1604
    tmp___38 = fgetc(stdin);
#line 1605
    c = (char )tmp___38;
    }
#line 1606
    if ((int )c == 121) {
      {
#line 1607
      f.got_email = (unsigned char)0;
      }
#line 1608
      return (1);
    } else {
      {
#line 1610
      tmp___39 = fgetc(stdin);
#line 1611
      c = (char )tmp___39;
      }
#line 1612
      if ((int )c == 89) {
        {
#line 1613
        f.got_email = (unsigned char)0;
        }
#line 1614
        return (1);
      } else {
        {
#line 1616
        exit(1);
        }
      }
    }
  } else
#line 1620
  if (nflag == 0) {
#line 1621
    if (rflag == 0) {
      {
#line 1622
      strcat((char * __restrict  )o.email_subject, (char const   * __restrict  )"\r\n");
      }
    } else {
#line 1624
      goto _L___1;
    }
  } else
  _L___1: 
#line 1628
  if (nflag == 0) {
#line 1629
    if (rflag == 1) {
      {
#line 1630
      strcat((char * __restrict  )o.email_subject, (char const   * __restrict  )"\r");
      }
    } else {
#line 1632
      goto _L___0;
    }
  } else
  _L___0: 
#line 1636
  if (nflag == 1) {
#line 1637
    if (rflag == 1) {
      {
#line 1638
      nflag = 0;
#line 1639
      rflag = 0;
#line 1640
      p = o.email_subject;
      }
      {
#line 1641
      while (1) {
        while_continue___4: /* CIL Label */ ;
#line 1642
        if ((int )*p == 10) {
          {
#line 1643
          s = p;
#line 1644
          *s = (char )((int )*s - 1);
          }
#line 1645
          if ((int )*s == 13) {
            {
#line 1646
            rflag ++;
            }
          }
        }
        {
#line 1649
        tmp___40 = p;
#line 1650
        p ++;
        }
#line 1651
        if (! ((int )*tmp___40 != 0)) {
#line 1652
          goto while_break___4;
        }
      }
      while_break___4: /* CIL Label */ ;
      }
#line 1655
      if (! rflag) {
        {
#line 1656
        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n\nERROR:\n\nThere is supurious carraige return in the subject\nDo you want to continue using the default?\n\nContinue\t[y] [n]\t:");
#line 1657
        tmp___41 = fgetc(stdin);
#line 1658
        c = (char )tmp___41;
        }
#line 1659
        if ((int )c == 121) {
          {
#line 1660
          f.got_email = (unsigned char)0;
          }
#line 1661
          return (1);
        } else {
          {
#line 1663
          tmp___42 = fgetc(stdin);
#line 1664
          c = (char )tmp___42;
          }
#line 1665
          if ((int )c == 89) {
            {
#line 1666
            f.got_email = (unsigned char)0;
            }
#line 1667
            return (1);
          } else {
            {
#line 1669
            exit(1);
            }
          }
        }
      }
    }
  }
  {
#line 1679
  tmp___43 = strlen((char const   *)o.email);
#line 1680
  tmp___44 = s_malloc((unsigned long )(tmp___43 + 1U) * sizeof(char ));
#line 1681
  temp = (char *)tmp___44;
#line 1682
  tmp___45 = strlen((char const   *)o.email);
#line 1683
  strncpy((char * __restrict  )temp, (char const   * __restrict  )o.email, tmp___45);
#line 1684
  p = temp;
#line 1685
  rflag = 0;
#line 1686
  count = 0;
#line 1687
  memset((void *)(buf), 0, 8192U);
  }
  {
#line 1688
  while (1) {
    while_continue___5: /* CIL Label */ ;
#line 1689
    if ((int )*p == 10) {
#line 1690
      if (! count) {
        {
#line 1691
        strncat((char * __restrict  )(buf), (char const   * __restrict  )"\r\n", 8192U);
#line 1692
        rflag ++;
#line 1693
        rflag ++;
        }
#line 1694
        goto __Cont;
      }
      {
#line 1696
      s = p;
#line 1697
      *s = (char )((int )*s - 1);
      }
#line 1698
      if ((int )*s != 13) {
        {
#line 1699
        strncat((char * __restrict  )(buf), (char const   * __restrict  )"\r\n", 8192U);
#line 1700
        rflag ++;
#line 1701
        rflag ++;
        }
#line 1702
        goto __Cont;
      }
    }
#line 1705
    if ((int )*p == 0) {
#line 1706
      goto while_break___5;
    }
    {
#line 1708
    buf[rflag] = *p;
#line 1709
    count ++;
#line 1710
    rflag ++;
    }
    __Cont: 
    {
#line 1712
    tmp___46 = p;
#line 1713
    p ++;
    }
#line 1714
    if (! ((int )*tmp___46 != 0)) {
#line 1715
      goto while_break___5;
    }
  }
  while_break___5: /* CIL Label */ ;
  }
  {
#line 1718
  tmp___47 = strlen((char const   *)(buf));
#line 1719
  tmp___48 = realloc((void *)o.email, (size_t___0 )((unsigned long )(tmp___47 + 1U) * sizeof(char )));
#line 1720
  o.email = (char *)tmp___48;
  }
#line 1721
  if ((unsigned int )o.email == (unsigned int )((void *)0)) {
    {
#line 1722
    fatal("Realloc Error\n");
    }
  }
  {
#line 1724
  tmp___49 = strlen((char const   *)(buf));
#line 1725
  strncpy((char * __restrict  )o.email, (char const   * __restrict  )(buf), tmp___49);
#line 1726
  tmp___50 = strlen((char const   *)(buf));
#line 1727
  *(o.email + tmp___50) = (char )'\000';
  }
#line 1728
  if (f.debug) {
    {
#line 1729
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"DEBUG: end subject == [%s]\n",
            o.email_subject);
#line 1731
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"DEBUG: end body == [%s]\n",
            o.email);
    }
  }
  {
#line 1734
  free((void *)temp);
  }
#line 1735
  return (0);
}
}
#line 1738 "smtprc_comb.c"
int parse_aconfig(void) 
{ 
  FILE *fd ;
  char buf[8192] ;
  char *p ;
  size_t___0 tmp ;
  void *tmp___0 ;
  size_t___0 tmp___1 ;
  char *tmp___2 ;
  size_t___0 tmp___3 ;
  size_t___0 tmp___4 ;
  void *tmp___5 ;
  size_t___0 tmp___6 ;
  char *tmp___7 ;
  size_t___0 tmp___8 ;
  size_t___0 tmp___9 ;
  void *tmp___10 ;
  size_t___0 tmp___11 ;
  char *tmp___12 ;
  size_t___0 tmp___13 ;
  int tmp___14 ;
  size_t___0 tmp___15 ;
  void *tmp___16 ;
  size_t___0 tmp___17 ;
  char *tmp___18 ;
  size_t___0 tmp___19 ;
  size_t___0 tmp___20 ;
  void *tmp___21 ;
  size_t___0 tmp___22 ;
  char *tmp___23 ;
  size_t___0 tmp___24 ;
  size_t___0 tmp___25 ;
  void *tmp___26 ;
  size_t___0 tmp___27 ;
  char *tmp___28 ;
  size_t___0 tmp___29 ;
  size_t___0 tmp___30 ;
  void *tmp___31 ;
  size_t___0 tmp___32 ;
  char *tmp___33 ;
  size_t___0 tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  int tmp___43 ;
  size_t___0 tmp___44 ;
  void *tmp___45 ;
  size_t___0 tmp___46 ;
  char *tmp___47 ;
  size_t___0 tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  int tmp___65 ;
  int tmp___66 ;
  char *tmp___67 ;

  {
  {
#line 1813
  fd = fopen((char const   * __restrict  )o.auto_config_file, (char const   * __restrict  )"r");
  }
#line 1814
  if ((unsigned int )fd == (unsigned int )((void *)0)) {
    {
#line 1815
    fatal("Unable to open auto config file %s\n\n", o.auto_config_file);
    }
  }
  {
#line 1817
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 1818
    tmp___67 = fgets((char * __restrict  )(buf), 8191, (FILE * __restrict  )fd);
    }
#line 1819
    if (! ((unsigned int )tmp___67 != (unsigned int )((void *)0))) {
#line 1820
      goto while_break;
    }
#line 1822
    if ((int )buf[0] == 35) {
#line 1823
      goto while_continue;
    } else
#line 1825
    if ((int )buf[1] == 35) {
#line 1826
      goto while_continue;
    } else
#line 1828
    if ((int )buf[0] == 32) {
#line 1829
      goto while_continue;
    } else
#line 1831
    if ((int )buf[0] == 10) {
#line 1832
      goto while_continue;
    }
    {
#line 1837
    tmp___66 = strncmp((char const   *)(buf), (char const   *)"IPRANGE:", 8U);
    }
#line 1838
    if (tmp___66) {
      {
#line 1839
      tmp___65 = strncmp((char const   *)(buf), (char const   *)"CONFIGFILE:", 11U);
      }
#line 1840
      if (tmp___65) {
        {
#line 1841
        tmp___64 = strncmp((char const   *)(buf), (char const   *)"WEBPAGE:", 8U);
        }
#line 1842
        if (tmp___64) {
          {
#line 1843
          tmp___63 = strncmp((char const   *)(buf), (char const   *)"THREADS:", 8U);
          }
#line 1844
          if (tmp___63) {
            {
#line 1845
            tmp___62 = strncmp((char const   *)(buf), (char const   *)"IPLIST:", 7U);
            }
#line 1846
            if (tmp___62) {
              {
#line 1847
              tmp___61 = strncmp((char const   *)(buf), (char const   *)"RELAYEMAIL:",
                                 11U);
              }
#line 1848
              if (tmp___61) {
                {
#line 1849
                tmp___60 = strncmp((char const   *)(buf), (char const   *)"MBOXMAILBOX:",
                                   12U);
                }
#line 1850
                if (tmp___60) {
                  {
#line 1851
                  tmp___59 = strncmp((char const   *)(buf), (char const   *)"MAILDIRMAILBOX:",
                                     15U);
                  }
#line 1852
                  if (tmp___59) {
                    {
#line 1853
                    tmp___58 = strncmp((char const   *)(buf), (char const   *)"ALLSCANS:",
                                       9U);
                    }
#line 1854
                    if (tmp___58) {
                      {
#line 1855
                      tmp___57 = strncmp((char const   *)(buf), (char const   *)"RESOLVEDOMAINS:",
                                         15U);
                      }
#line 1857
                      if (tmp___57) {
                        {
#line 1858
                        tmp___56 = strncmp((char const   *)(buf), (char const   *)"CONNECTTIMEOUT:",
                                           15U);
                        }
#line 1860
                        if (tmp___56) {
                          {
#line 1861
                          tmp___55 = strncmp((char const   *)(buf), (char const   *)"READTIMEOUT:",
                                             12U);
                          }
#line 1863
                          if (tmp___55) {
                            {
#line 1864
                            tmp___54 = strncmp((char const   *)(buf), (char const   *)"WAITFORMAILTIME:",
                                               16U);
                            }
#line 1866
                            if (tmp___54) {
                              {
#line 1867
                              tmp___53 = strncmp((char const   *)(buf), (char const   *)"EMAILTEMPLATE:",
                                                 14U);
                              }
#line 1869
                              if (tmp___53) {
                                {
#line 1870
                                tmp___52 = strncmp((char const   *)(buf), (char const   *)"DISPLAYONLYIPS:",
                                                   15U);
                                }
#line 1872
                                if (tmp___52) {
                                  {
#line 1873
                                  fatal("Detected error \"%s\" in configuration file...\n",
                                        buf);
                                  }
                                } else {
                                  {
#line 1876
                                  p = & buf[15];
#line 1877
                                  tmp___49 = strncmp((char const   *)p, (char const   *)"Yes",
                                                     3U);
                                  }
#line 1878
                                  if (tmp___49) {
                                    {
#line 1879
                                    tmp___50 = strncmp((char const   *)p, (char const   *)"YES",
                                                       3U);
                                    }
#line 1880
                                    if (tmp___50) {
                                      {
#line 1881
                                      tmp___51 = strncmp((char const   *)p, (char const   *)"yes",
                                                         3U);
                                      }
#line 1883
                                      if (! tmp___51) {
                                        {
#line 1884
                                        f.display_only_ips = (unsigned char)1;
                                        }
                                      }
                                    } else {
                                      {
#line 1887
                                      f.display_only_ips = (unsigned char)1;
                                      }
                                    }
                                  } else {
                                    {
#line 1890
                                    f.display_only_ips = (unsigned char)1;
                                    }
                                  }
                                }
                              } else
#line 1894
                              if (! f.got_email) {
                                {
#line 1895
                                p = & buf[14];
#line 1896
                                f.got_email = (unsigned char)1;
#line 1897
                                tmp___44 = strlen((char const   *)p);
#line 1898
                                tmp___45 = s_malloc((unsigned long )(tmp___44 + 1U) * sizeof(char ));
#line 1899
                                o.email_template = (char *)tmp___45;
#line 1900
                                tmp___46 = strlen((char const   *)p);
#line 1901
                                tmp___47 = chomp(p);
#line 1902
                                strncpy((char * __restrict  )o.email_template, (char const   * __restrict  )tmp___47,
                                        tmp___46);
#line 1904
                                tmp___48 = strlen((char const   *)p);
#line 1905
                                *(o.email_template + tmp___48) = (char )'\000';
                                }
                              }
                            } else
#line 1909
                            if (! o.m_timeout == 60) {
                              {
#line 1910
                              p = & buf[16];
#line 1911
                              tmp___43 = atoi((char const   *)p);
#line 1912
                              o.m_timeout = (unsigned short )tmp___43;
                              }
                            }
                          } else
#line 1916
                          if (! o.r_timeout) {
                            {
#line 1917
                            p = & buf[12];
#line 1918
                            tmp___42 = atoi((char const   *)p);
#line 1919
                            o.r_timeout = (unsigned short )tmp___42;
                            }
                          }
                        } else
#line 1923
                        if (! o.c_timeout) {
                          {
#line 1924
                          p = & buf[15];
#line 1925
                          tmp___41 = atoi((char const   *)p);
#line 1926
                          o.c_timeout = (unsigned short )tmp___41;
                          }
                        }
                      } else {
                        {
#line 1930
                        p = & buf[15];
#line 1931
                        tmp___38 = strncmp((char const   *)p, (char const   *)"Yes",
                                           3U);
                        }
#line 1932
                        if (tmp___38) {
                          {
#line 1933
                          tmp___39 = strncmp((char const   *)p, (char const   *)"YES",
                                             3U);
                          }
#line 1934
                          if (tmp___39) {
                            {
#line 1935
                            tmp___40 = strncmp((char const   *)p, (char const   *)"yes",
                                               3U);
                            }
#line 1936
                            if (! tmp___40) {
                              {
#line 1937
                              f.resolve_hostnames = (unsigned char)1;
                              }
                            }
                          } else {
                            {
#line 1940
                            f.resolve_hostnames = (unsigned char)1;
                            }
                          }
                        } else {
                          {
#line 1943
                          f.resolve_hostnames = (unsigned char)1;
                          }
                        }
                      }
                    } else {
                      {
#line 1947
                      p = & buf[9];
#line 1948
                      tmp___35 = strncmp((char const   *)p, (char const   *)"Yes",
                                         3U);
                      }
#line 1949
                      if (tmp___35) {
                        {
#line 1950
                        tmp___36 = strncmp((char const   *)p, (char const   *)"YES",
                                           3U);
                        }
#line 1951
                        if (tmp___36) {
                          {
#line 1952
                          tmp___37 = strncmp((char const   *)p, (char const   *)"yes",
                                             3U);
                          }
#line 1953
                          if (! tmp___37) {
                            {
#line 1954
                            f.display_all = (unsigned char)1;
                            }
                          }
                        } else {
                          {
#line 1957
                          f.display_all = (unsigned char)1;
                          }
                        }
                      } else {
                        {
#line 1960
                        f.display_all = (unsigned char)1;
                        }
                      }
                    }
                  } else {
#line 1964
                    if (! f.check_mailbox) {
                      {
#line 1965
                      p = & buf[15];
#line 1966
                      f.check_mailbox = (unsigned char)1;
#line 1967
                      f.maildir = (unsigned char)1;
#line 1968
                      tmp___30 = strlen((char const   *)p);
#line 1969
                      tmp___31 = s_malloc((unsigned long )(tmp___30 + 1U) * sizeof(char ));
#line 1970
                      o.mailbox = (char *)tmp___31;
#line 1971
                      tmp___32 = strlen((char const   *)p);
#line 1972
                      tmp___33 = chomp(p);
#line 1973
                      strncpy((char * __restrict  )o.mailbox, (char const   * __restrict  )tmp___33,
                              tmp___32);
#line 1975
                      tmp___34 = strlen((char const   *)p);
#line 1976
                      *(o.mailbox + tmp___34) = (char )'\000';
                      }
                    }
                    {
#line 1978
                    f.maildir = (unsigned char)1;
                    }
                  }
                } else {
#line 1981
                  if (! f.check_mailbox) {
                    {
#line 1982
                    p = & buf[12];
#line 1983
                    f.check_mailbox = (unsigned char)1;
#line 1984
                    f.mbox = (unsigned char)1;
#line 1985
                    tmp___25 = strlen((char const   *)p);
#line 1986
                    tmp___26 = s_malloc((unsigned long )(tmp___25 + 1U) * sizeof(char ));
#line 1987
                    o.mailbox = (char *)tmp___26;
#line 1988
                    tmp___27 = strlen((char const   *)p);
#line 1989
                    tmp___28 = chomp(p);
#line 1990
                    strncpy((char * __restrict  )o.mailbox, (char const   * __restrict  )tmp___28,
                            tmp___27);
#line 1992
                    tmp___29 = strlen((char const   *)p);
#line 1993
                    *(o.mailbox + tmp___29) = (char )'\000';
                    }
                  }
                  {
#line 1995
                  f.mbox = (unsigned char)1;
                  }
                }
              } else
#line 1998
              if (! f.send_email) {
                {
#line 1999
                p = & buf[11];
#line 2000
                f.send_email = (unsigned char)1;
#line 2001
                tmp___20 = strlen((char const   *)p);
#line 2002
                tmp___21 = s_malloc((unsigned long )(tmp___20 + 1U) * sizeof(char ));
#line 2003
                o.email_address = (char *)tmp___21;
#line 2004
                tmp___22 = strlen((char const   *)p);
#line 2005
                tmp___23 = chomp(p);
#line 2006
                strncpy((char * __restrict  )o.email_address, (char const   * __restrict  )tmp___23,
                        tmp___22);
#line 2008
                tmp___24 = strlen((char const   *)p);
#line 2009
                *(o.email_address + tmp___24) = (char )'\000';
                }
              }
            } else
#line 2013
            if (! f.ip_list) {
              {
#line 2014
              p = & buf[7];
              }
#line 2015
              if (f.ip_range) {
                {
#line 2016
                fatal("IPLIST and IPRANGE can\'t both be define in the config file\n");
                }
              }
              {
#line 2018
              f.ip_list = (unsigned char)1;
#line 2019
              tmp___15 = strlen((char const   *)p);
#line 2020
              tmp___16 = s_malloc((unsigned long )(tmp___15 + 1U) * sizeof(char ) + 1UL);
#line 2021
              o.ip_list = (char *)tmp___16;
#line 2022
              tmp___17 = strlen((char const   *)p);
#line 2023
              tmp___18 = chomp(p);
#line 2024
              strncpy((char * __restrict  )o.ip_list, (char const   * __restrict  )tmp___18,
                      tmp___17);
#line 2026
              tmp___19 = strlen((char const   *)p);
#line 2027
              *(o.ip_list + tmp___19) = (char )'\000';
              }
            }
          } else
#line 2031
          if (! f.threads) {
            {
#line 2032
            p = & buf[8];
#line 2033
            tmp___14 = atoi((char const   *)p);
#line 2034
            o.number_of_threads = (unsigned short )tmp___14;
            }
          }
        } else
#line 2038
        if (! f.output_html) {
          {
#line 2039
          p = & buf[8];
#line 2040
          f.output_html = (unsigned char)1;
#line 2041
          tmp___9 = strlen((char const   *)p);
#line 2042
          tmp___10 = s_malloc((unsigned long )(tmp___9 + 1U) * sizeof(char ));
#line 2043
          o.html_file = (char *)tmp___10;
#line 2044
          tmp___11 = strlen((char const   *)p);
#line 2045
          tmp___12 = chomp(p);
#line 2046
          strncpy((char * __restrict  )o.html_file, (char const   * __restrict  )tmp___12,
                  tmp___11);
#line 2048
          tmp___13 = strlen((char const   *)p);
#line 2049
          *(o.html_file + tmp___13) = (char )'\000';
          }
        }
      } else
#line 2053
      if (! f.config_file) {
        {
#line 2054
        p = & buf[11];
#line 2055
        f.config_file = (unsigned char)1;
#line 2056
        tmp___4 = strlen((char const   *)p);
#line 2057
        tmp___5 = s_malloc((unsigned long )(tmp___4 + 1U) * sizeof(char ));
#line 2058
        o.config_file = (char *)tmp___5;
#line 2059
        tmp___6 = strlen((char const   *)p);
#line 2060
        tmp___7 = chomp(p);
#line 2061
        strncpy((char * __restrict  )o.config_file, (char const   * __restrict  )tmp___7,
                tmp___6);
#line 2063
        tmp___8 = strlen((char const   *)p);
#line 2064
        *(o.config_file + tmp___8) = (char )'\000';
        }
      }
    } else
#line 2068
    if (! f.ip_range) {
      {
#line 2069
      p = & buf[8];
#line 2070
      f.ip_range = (unsigned char)1;
#line 2071
      tmp = strlen((char const   *)p);
#line 2072
      tmp___0 = s_malloc((unsigned long )(tmp + 1U) * sizeof(char ));
#line 2073
      o.ip_range = (char *)tmp___0;
#line 2074
      tmp___1 = strlen((char const   *)p);
#line 2075
      tmp___2 = chomp(p);
#line 2076
      strncpy((char * __restrict  )o.ip_range, (char const   * __restrict  )tmp___2,
              tmp___1);
#line 2078
      tmp___3 = strlen((char const   *)p);
#line 2079
      *(o.ip_range + tmp___3) = (char )'\000';
      }
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 2083
  return (0);
}
}
#line 2086
#pragma merger(0,"/tmp/cil-yhUmpuTR.i","-Wall,-g,-pthread")
#line 2087
char *get_sender_address(char *string ) ;
#line 2088
int is_mbox_seperator(char *string ) ;
#line 2089
extern DIR *( __attribute__((__nonnull__(1))) opendir)(char const   *__name ) ;
#line 2090
extern int ( __attribute__((__nonnull__(1))) closedir)(DIR *__dirp ) ;
#line 2091
extern struct dirent *( __attribute__((__nonnull__(1))) readdir)(DIR *__dirp ) ;
#line 2092 "smtprc_comb.c"
int parse_mbox(void) 
{ 
  FILE *fd ;
  char buf[8193] ;
  char temp[8193] ;
  char *email_address ;
  int tmp ;
  int tmp___0 ;
  char *tmp___1 ;
  int tmp___2 ;
  char *tmp___3 ;

  {
  {
#line 2104
  email_address = (char *)((void *)0);
#line 2105
  fd = fopen((char const   * __restrict  )o.mailbox, (char const   * __restrict  )"r");
  }
#line 2106
  if ((unsigned int )fd == (unsigned int )((void *)0)) {
    {
#line 2107
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Unable to open %s for reading\n",
            o.mailbox);
#line 2109
    exit(1);
    }
  }
  {
#line 2111
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 2112
    tmp___3 = fgets((char * __restrict  )(buf), 8192, (FILE * __restrict  )fd);
    }
#line 2113
    if (! ((unsigned int )tmp___3 != (unsigned int )((void *)0))) {
#line 2114
      goto while_break;
    }
    START: 
    {
#line 2117
    strncpy((char * __restrict  )(temp), (char const   * __restrict  )(buf), 8192U);
#line 2118
    temp[8192] = (char )'\000';
#line 2119
    tmp___2 = is_mbox_seperator(temp);
    }
#line 2120
    if (tmp___2) {
      {
#line 2121
      strncpy((char * __restrict  )(temp), (char const   * __restrict  )(buf), 8192U);
#line 2122
      temp[8192] = (char )'\000';
#line 2123
      email_address = get_sender_address(temp);
      }
#line 2124
      if ((unsigned int )email_address == (unsigned int )((void *)0)) {
#line 2125
        goto while_continue;
      }
      {
#line 2127
      while (1) {
        while_continue___0: /* CIL Label */ ;
        {
#line 2128
        tmp___1 = fgets((char * __restrict  )(buf), 8192, (FILE * __restrict  )fd);
        }
#line 2129
        if (! ((unsigned int )tmp___1 != (unsigned int )((void *)0))) {
#line 2130
          goto while_break___0;
        }
        {
#line 2132
        tmp = strncmp((char const   *)(buf), (char const   *)":SmtpRCKey:", 11U);
        }
#line 2133
        if (! tmp) {
          {
#line 2134
          check_mail_file(email_address, buf);
          }
        }
        {
#line 2136
        strncpy((char * __restrict  )(temp), (char const   * __restrict  )(buf), 8192U);
#line 2137
        temp[8192] = (char )'\000';
#line 2138
        tmp___0 = is_mbox_seperator(temp);
        }
#line 2139
        if (tmp___0) {
#line 2140
          goto START;
        }
      }
      while_break___0: /* CIL Label */ ;
      }
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 2145
  fclose(fd);
  }
#line 2146
  return (0);
}
}
#line 2149 "smtprc_comb.c"
int parse_maildir(void) 
{ 
  DIR *dip ;
  FILE *fd ;
  struct dirent *dit ;
  char dir[8193] ;
  char buf[8193] ;
  char temp[8193] ;
  char filename[8193] ;
  char *email_address ;
  size_t___0 tmp ;
  size_t___0 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char *tmp___3 ;
  int tmp___4 ;

  {
  {
#line 2166
  email_address = (char *)((void *)0);
#line 2167
  tmp = strlen((char const   *)o.mailbox);
  }
#line 2168
  if ((int )*(o.mailbox + tmp) == 47) {
    {
#line 2169
    snprintf((char * __restrict  )(dir), 8192U, (char const   * __restrict  )"%snew",
             o.mailbox);
    }
  } else {
    {
#line 2172
    snprintf((char * __restrict  )(dir), 8192U, (char const   * __restrict  )"%s/new",
             o.mailbox);
    }
  }
  {
#line 2175
  dir[8192] = (char )'\000';
#line 2176
  dip = opendir((char const   *)(dir));
  }
#line 2177
  if ((unsigned int )dip == (unsigned int )((void *)0)) {
    {
#line 2178
    perror((char const   *)"opendir");
#line 2179
    fatal("error opening maildir folder (%s)", dir);
    }
  }
  {
#line 2181
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 2182
    dit = readdir(dip);
    }
#line 2183
    if (! ((unsigned int )dit != (unsigned int )((void *)0))) {
#line 2184
      goto while_break;
    }
#line 2186
    if ((int )dit->d_name[0] == 46) {
      {
#line 2187
      tmp___0 = strlen((char const   *)(dit->d_name));
      }
#line 2188
      if (tmp___0 < 3U) {
#line 2189
        goto while_continue;
      }
    }
    {
#line 2192
    snprintf((char * __restrict  )(filename), 8192U, (char const   * __restrict  )"%s/%s",
             dir, dit->d_name);
#line 2194
    filename[8192] = (char )'\000';
#line 2195
    fd = fopen((char const   * __restrict  )(filename), (char const   * __restrict  )"r");
    }
#line 2196
    if ((unsigned int )fd == (unsigned int )((void *)0)) {
      {
#line 2197
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Unable to open mailfile (%s) for reading... Skipping\n",
              filename);
      }
#line 2199
      goto while_continue;
    }
    {
#line 2201
    while (1) {
      while_continue___0: /* CIL Label */ ;
      {
#line 2202
      tmp___3 = fgets((char * __restrict  )(buf), 8192, (FILE * __restrict  )fd);
      }
#line 2203
      if (! ((unsigned int )tmp___3 != (unsigned int )((void *)0))) {
#line 2204
        goto while_break___0;
      }
      {
#line 2206
      tmp___1 = strncmp((char const   *)(buf), (char const   *)"From: ", 6U);
      }
#line 2207
      if (! tmp___1) {
        {
#line 2208
        strncpy((char * __restrict  )(temp), (char const   * __restrict  )(buf), 8192U);
#line 2209
        temp[8192] = (char )'\000';
#line 2210
        email_address = get_sender_address(temp);
        }
#line 2211
        if ((unsigned int )email_address == (unsigned int )((void *)0)) {
#line 2212
          goto while_continue___0;
        }
      }
      {
#line 2215
      tmp___2 = strncmp((char const   *)(buf), (char const   *)":SmtpRCKey:", 11U);
      }
#line 2216
      if (! tmp___2) {
        {
#line 2217
        check_mail_file(email_address, buf);
        }
      }
    }
    while_break___0: /* CIL Label */ ;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 2221
  tmp___4 = closedir(dip);
  }
#line 2222
  if (tmp___4 == -1) {
    {
#line 2223
    perror((char const   *)"closedir");
    }
#line 2224
    return (0);
  }
#line 2226
  return (0);
}
}
#line 2229 "smtprc_comb.c"
int parse_popbox(void) 
{ 


  {
#line 2233
  return (0);
}
}
#line 2236 "smtprc_comb.c"
int is_mbox_seperator(char *string ) 
{ 
  char tmp[9][8193] ;
  int count ;
  char *word ;
  int tmp___0 ;

  {
  {
#line 2243
  count = 0;
#line 2244
  tmp___0 = strncmp((char const   *)string, (char const   *)"From ", 5U);
  }
#line 2245
  if (tmp___0) {
#line 2246
    return (0);
  } else {
    {
#line 2248
    word = strtok((char * __restrict  )string, (char const   * __restrict  )" ");
    }
    {
#line 2249
    while (1) {
      while_continue: /* CIL Label */ ;
#line 2249
      if (! word) {
#line 2249
        goto while_break;
      }
      {
#line 2250
      count ++;
      }
#line 2251
      if (count < 8) {
        {
#line 2252
        strncpy((char * __restrict  )(tmp[count]), (char const   * __restrict  )word,
                8191U);
        }
      }
      {
#line 2255
      word = strtok((char * __restrict  )((void *)0), (char const   * __restrict  )" ");
      }
    }
    while_break: /* CIL Label */ ;
    }
#line 2257
    if (count == 7) {
#line 2258
      return (1);
    } else {
#line 2260
      return (0);
    }
  }
}
}
#line 2265 "smtprc_comb.c"
char *get_sender_address(char *string ) 
{ 
  int count ;
  char *word ;
  char *address ;
  size_t___0 tmp ;
  void *tmp___0 ;
  size_t___0 tmp___1 ;
  size_t___0 tmp___2 ;
  size_t___0 tmp___3 ;

  {
  {
#line 2276
  count = 0;
#line 2277
  address = (char *)((void *)0);
#line 2278
  word = strtok((char * __restrict  )string, (char const   * __restrict  )" ");
  }
  {
#line 2279
  while (1) {
    while_continue: /* CIL Label */ ;
#line 2279
    if (! word) {
#line 2279
      goto while_break;
    }
    {
#line 2280
    count ++;
    }
#line 2281
    if (count == 2) {
      {
#line 2282
      tmp___3 = strlen((char const   *)word);
      }
#line 2283
      if (tmp___3 > 5U) {
        {
#line 2284
        tmp = strlen((char const   *)word);
#line 2285
        tmp___0 = s_malloc((unsigned long )(tmp + 1U) * sizeof(char ));
#line 2286
        address = (char *)tmp___0;
#line 2287
        tmp___1 = strlen((char const   *)word);
#line 2288
        strncpy((char * __restrict  )address, (char const   * __restrict  )word, tmp___1 + 2U);
#line 2289
        tmp___2 = strlen((char const   *)word);
#line 2290
        *(address + (tmp___2 + 1U)) = (char )'\000';
        }
#line 2291
        goto while_break;
      }
    }
    {
#line 2294
    word = strtok((char * __restrict  )((void *)0), (char const   * __restrict  )" ");
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 2296
  if ((unsigned int )address != (unsigned int )((void *)0)) {
#line 2297
    return (address);
  } else {
#line 2299
    return ((char *)((void *)0));
  }
}
}
#line 2303
#pragma merger(0,"/tmp/cil-kzMrYIFm.i","-Wall,-g,-pthread")
#line 2304
extern int usleep(__useconds_t __useconds ) ;
#line 2305
int thread_start(long cur_host ) ;
#line 2306
int cleaner_start(void) ;
#line 2323
int relay_check(int *sockfd , long cur_host ) ;
#line 2324 "smtprc_comb.c"
pthread_mutex_t___0 main_thread_count_mutex  ;
#line 2325 "smtprc_comb.c"
void start_scan(void) 
{ 
  struct timespec tv ;
  pthread_t c_tid ;
  pthread_attr_t___0 attr ;
  unsigned char flag ;
  unsigned char res ;
  int x ;
  int ret ;
  size_t___0 stack_size ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  {
#line 2339
  flag = (unsigned char)0;
#line 2340
  res = (unsigned char)0;
#line 2341
  x = 0;
#line 2342
  ret = 0;
#line 2343
  tv.tv_sec = 0L;
#line 2344
  tv.tv_nsec = 500000000L;
#line 2345
  pthread_mutex_init(& main_thread_count_mutex, (pthread_mutexattr_t___0 const   *)((void *)0));
#line 2346
  ret = pthread_attr_getstacksize((pthread_attr_t___0 const   * __restrict  )(& attr),
                                  (size_t___0 * __restrict  )(& stack_size));
  }
#line 2348
  if (ret != 0) {
    {
#line 2349
    fatal("cannot get stacksize");
    }
  }
  {
#line 2351
  debug("\n\nstack size: %d\n", stack_size);
#line 2352
  stack_size = 28672U;
#line 2353
  ret = pthread_attr_init(& attr);
#line 2354
  ret = pthread_attr_setstacksize(& attr, stack_size);
  }
#line 2355
  if (ret != 0) {
    {
#line 2356
    fatal("cannot setting stacksize");
    }
  }
  {
#line 2358
  ret = pthread_attr_getstacksize((pthread_attr_t___0 const   * __restrict  )(& attr),
                                  (size_t___0 * __restrict  )(& stack_size));
  }
#line 2360
  if (ret != 0) {
    {
#line 2361
    fatal("cannot get stacksize");
    }
  }
  {
#line 2363
  debug("\n\nstack size: %d\n", stack_size);
#line 2364
  tmp = s_malloc((o.no_hostnames + 1UL) * sizeof(pthread_t ));
#line 2365
  o.tid = (pthread_t *)tmp;
#line 2366
  x = 0;
  }
  {
#line 2367
  while (1) {
    while_continue: /* CIL Label */ ;
#line 2367
    if (! ((unsigned long )x < o.no_hostnames)) {
#line 2367
      goto while_break;
    }
    {
#line 2368
    *(o.tid + x) = 0UL;
#line 2369
    x ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 2371
  tmp___0 = pthread_create((pthread_t * __restrict  )(& c_tid), (pthread_attr_t___0 const   * __restrict  )(& attr),
                           (void *(*)(void * ))((void *)(& cleaner_start)), (void * __restrict  )((void *)0));
  }
#line 2373
  if (tmp___0 != 0) {
    {
#line 2374
    fatal("Unable to start cleaner thread");
#line 2375
    perror((char const   *)"aa");
    }
  }
  {
#line 2377
  o.cur_host = 0UL;
  }
  {
#line 2378
  while (1) {
    while_continue___0: /* CIL Label */ ;
#line 2378
    if (! (o.cur_host < o.no_hostnames)) {
#line 2378
      goto while_break___0;
    }
    {
#line 2379
    pthread_mutex_lock(& main_thread_count_mutex);
    }
    {
#line 2380
    while (1) {
      while_continue___1: /* CIL Label */ ;
#line 2380
      if (! ((int )o.cur_threads >= (int )o.number_of_threads)) {
#line 2380
        goto while_break___1;
      }
      {
#line 2381
      pthread_mutex_unlock(& main_thread_count_mutex);
#line 2382
      debug("Sleeping cur child == %d, max child == %d\n", (int )o.cur_threads, (int )o.number_of_threads);
#line 2384
      nanosleep((struct timespec  const  *)(& tv), (struct timespec *)((void *)0));
      }
    }
    while_break___1: /* CIL Label */ ;
    }
    {
#line 2386
    pthread_mutex_unlock(& main_thread_count_mutex);
    }
    {
#line 2387
    while (1) {
      while_continue___2: /* CIL Label */ ;
      {
#line 2388
      tmp___1 = pthread_create((pthread_t * __restrict  )(& c_tid), (pthread_attr_t___0 const   * __restrict  )(& attr),
                               (void *(*)(void * ))((void *)(& thread_start)), (void * __restrict  )((int *)o.cur_host));
#line 2390
      res = (unsigned char )tmp___1;
      }
#line 2391
      if (! ((int )res != 0)) {
#line 2392
        goto while_break___2;
      }
#line 2394
      if ((int )res != 11) {
        {
#line 2395
        fatal("Unable to create thread - (try reducing the number of threads)\n");
        }
      }
#line 2397
      if (! flag) {
        {
#line 2398
        error("** Failed to create thread!!\nTrying to use sleep to compensate.... although you should run this again with a lower value for -p\n\n");
#line 2399
        flag = (unsigned char )((int )flag + 1);
        }
      }
      {
#line 2401
      usleep(200000U);
      }
    }
    while_break___2: /* CIL Label */ ;
    }
    {
#line 2403
    debug("Created thread\n");
#line 2404
    pthread_mutex_lock(& main_thread_count_mutex);
#line 2405
    o.cur_threads = (unsigned short )((int )o.cur_threads + 1);
#line 2406
    pthread_mutex_unlock(& main_thread_count_mutex);
#line 2407
    (o.cur_host) ++;
    }
  }
  while_break___0: /* CIL Label */ ;
  }
  {
#line 2409
  flag = (unsigned char)0;
#line 2410
  pthread_mutex_lock(& main_thread_count_mutex);
#line 2411
  __VERIFIER_atomic_begin();
#line 2411
  assert(0LL - (long long )smtp_open >= 0LL);
#line 2411
  assert((long long )smtp_open >= 0LL);
#line 2411
  __VERIFIER_atomic_end();
  }
  {
#line 2411
  while (1) {
    while_continue___3: /* CIL Label */ ;
#line 2411
    if (! ((int )o.cur_threads > 0)) {
#line 2411
      goto while_break___3;
    }
    {
#line 2412
    pthread_mutex_unlock(& main_thread_count_mutex);
#line 2413
    flag = (unsigned char )((int )flag + 1);
    }
#line 2414
    if (f.debug) {
#line 2415
      goto _L;
    } else
#line 2417
    if ((int )f.verbose > 1) {
      _L: 
#line 2419
      if ((int )flag > 1) {
        {
#line 2420
        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"O.cur_childs(%d) id greater than zero...... sleepingz\n",
                (int )o.cur_threads);
#line 2422
        flag = (unsigned char)0;
        }
      }
    }
    {
#line 2426
    nanosleep((struct timespec  const  *)(& tv), (struct timespec *)((void *)0));
    }
  }
  while_break___3: /* CIL Label */ ;
  }
  {
#line 2428
  pthread_mutex_unlock(& main_thread_count_mutex);
  }
#line 2429
  return;
}
}
#line 2432 "smtprc_comb.c"
int cleaner_start(void) 
{ 
  int x ;
  int tmp ;

  {
  {
#line 2437
  x = 0;
  }
  {
#line 2438
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 2439
    x = 0;
    }
    {
#line 2440
    while (1) {
      while_continue___0: /* CIL Label */ ;
#line 2440
      if (! ((unsigned long )x < o.no_hostnames)) {
#line 2440
        goto while_break___0;
      }
#line 2441
      if ((int )*(o.tid + x)) {
        {
#line 2442
        tmp = pthread_join(*(o.tid + x), (void **)((void *)0));
        }
#line 2443
        if (! tmp) {
          {
#line 2444
          pthread_mutex_lock(& main_thread_count_mutex);
#line 2445
          o.cur_threads = (unsigned short )((int )o.cur_threads - 1);
#line 2446
          pthread_mutex_unlock(& main_thread_count_mutex);
#line 2447
          *(o.tid + x) = 0UL;
          }
        }
      }
      {
#line 2450
      x ++;
      }
    }
    while_break___0: /* CIL Label */ ;
    }
    {
#line 2452
    usleep(200000U);
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 2454
  return (0);
}
}
#line 2457 "smtprc_comb.c"
int thread_start(long cur_host ) 
{ 
  int sockfd ;
  int counter ;
  int x ;
  int res ;
  long ip ;
  char hostnamer[8193] ;
  char *tmp ;
  size_t___0 tmp___0 ;
  void *tmp___1 ;
  size_t___0 tmp___2 ;
  size_t___0 tmp___3 ;
  size_t___0 tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;
  void *tmp___7 ;

  {
  {
#line 2475
  counter = 0;
#line 2476
  x = 0;
#line 2477
  res = 0;
#line 2478
  debug("Starting thread_start process\n");
#line 2479
  debug("hostname == %s o.cur_host == %d\n", (*(hosts + cur_host))->ip_address, (int )cur_host);
#line 2481
  ip = get_ip((*(hosts + cur_host))->ip_address);
  }
#line 2482
  if (ip == -1L) {
    {
#line 2483
    debug("Couldn\'t resolve ip\n");
#line 2484
    *(o.tid + cur_host) = pthread_self();
    }
#line 2485
    return ((int )((void *)0));
  }
  {
#line 2487
  sockfd = tcp_connect(ip);
  }
#line 2488
  if (sockfd != -1) {
    {
#line 2489
    counter ++;
    }
#line 2490
    if (f.resolve_hostnames) {
      {
#line 2491
      tmp = get_hostname((char const   *)(*(hosts + cur_host))->ip_address);
#line 2492
      strncpy((char * __restrict  )(hostnamer), (char const   * __restrict  )tmp,
              8192U);
#line 2494
      hostnamer[8192] = (char )'\000';
#line 2495
      tmp___4 = strlen((char const   *)(*(hosts + cur_host))->ip_address);
#line 2496
      tmp___5 = strncmp((char const   *)(*(hosts + cur_host))->ip_address, (char const   *)(hostnamer),
                        tmp___4);
      }
#line 2498
      if (tmp___5) {
        {
#line 2499
        tmp___0 = strlen((char const   *)(hostnamer));
#line 2500
        tmp___1 = s_malloc((unsigned long )(tmp___0 + 1U) * sizeof(char ));
#line 2501
        (*(hosts + cur_host))->hostname = (char *)tmp___1;
#line 2502
        tmp___2 = strlen((char const   *)(hostnamer));
#line 2503
        strncpy((char * __restrict  )(*(hosts + cur_host))->hostname, (char const   * __restrict  )(hostnamer),
                tmp___2);
#line 2505
        tmp___3 = strlen((char const   *)(hostnamer));
#line 2506
        *((*(hosts + cur_host))->hostname + tmp___3) = (char )'\000';
#line 2507
        (*(hosts + cur_host))->resolved = (unsigned char)1;
        }
      }
    }
    {
#line 2510
    (*(hosts + cur_host))->smtp_open = (unsigned char)1;
#line 2511
    tmp___6 = s_malloc((unsigned long )((unsigned int )((int )o.no_rules + 1)) * sizeof(check **));
#line 2512
    (*(hosts + cur_host))->smtp_check = (check **)tmp___6;
#line 2513
    x = 0;
    }
    {
#line 2514
    while (1) {
      while_continue: /* CIL Label */ ;
#line 2514
      if (! (x <= (int )o.no_rules)) {
#line 2514
        goto while_break;
      }
      {
#line 2515
      tmp___7 = s_malloc(sizeof(check ));
#line 2516
      *((*(hosts + cur_host))->smtp_check + x) = (check *)tmp___7;
#line 2517
      (*((*(hosts + cur_host))->smtp_check + x))->failed = (unsigned char)0;
#line 2518
      (*((*(hosts + cur_host))->smtp_check + x))->passed = (unsigned char)0;
#line 2519
      (*((*(hosts + cur_host))->smtp_check + x))->error_code = (unsigned char)0;
#line 2520
      x ++;
      }
    }
    while_break: /* CIL Label */ ;
    }
    {
#line 2522
    res = relay_check(& sockfd, cur_host);
    }
#line 2523
    if (res == -1) {
      {
#line 2524
      close(sockfd);
      }
    }
    {
#line 2526
    close(sockfd);
    }
  } else {
    {
#line 2528
    close(sockfd);
    }
  }
  {
#line 2530
  *(o.tid + cur_host) = pthread_self();
  }
#line 2531
  return ((int )((void *)0));
}
}
#line 2538
#pragma merger(0,"/tmp/cil-5Ceo1BbJ.i","-Wall,-g,-pthread")
#line 2539
extern struct _IO_FILE *stdout ;
#line 2540
extern int fflush(FILE *__stream ) ;
#line 2541
extern int vfprintf(FILE * __restrict  __s , char const   * __restrict  __format ,
                    __gnuc_va_list __arg ) ;
#line 2543
extern void *malloc(size_t___0 __size )  __attribute__((__nothrow__, __malloc__)) ;
#line 2544
extern void *calloc(size_t___0 __nmemb , size_t___0 __size )  __attribute__((__nothrow__,
__malloc__)) ;
#line 2545
void *s_zmalloc(int size ) ;
#line 2546
void swap_macro(char *string , char const   *replace , char const   *macro ) ;
#line 2547
void convert_rule(char *string , int ind ) ;
#line 2548
int check_file_path(char *filename , char *path ) ;
#line 2549
void return_data(long cur_host , int rule___0 , char *string ) ;
#line 2550
void not_implemented(void) ;
#line 2551 "smtprc_comb.c"
void *s_malloc(unsigned long size ) 
{ 
  void *mymem ;

  {
#line 2555
  if (size < 0UL) {
    {
#line 2556
    fatal("Tried to allocate a negative amount of memory!!");
    }
  }
  {
#line 2558
  mymem = malloc((unsigned int )size);
  }
#line 2559
  if ((unsigned int )mymem == (unsigned int )((void *)0)) {
    {
#line 2560
    fatal("Malloc failed! Probably out of memory!!");
    }
  }
#line 2562
  return (mymem);
}
}
#line 2565 "smtprc_comb.c"
void *s_zmalloc(int size ) 
{ 
  void *mymem ;

  {
#line 2569
  if (size < 0) {
    {
#line 2570
    fatal("Tried to allocate a negative amount of memory!!");
    }
  }
  {
#line 2572
  mymem = calloc(1U, (unsigned int )size);
  }
#line 2573
  if ((unsigned int )mymem == (unsigned int )((void *)0)) {
    {
#line 2574
    fatal("Malloc failed! Probably out of memory!!");
    }
  }
#line 2576
  return (mymem);
}
}
#line 2579 "smtprc_comb.c"
char *chomp(char *string ) 
{ 
  int len ;
  size_t___0 tmp ;

  {
  {
#line 2584
  tmp = strlen((char const   *)string);
#line 2585
  len = (int )tmp;
  }
#line 2586
  if (len < 1) {
#line 2587
    return (string);
  }
#line 2589
  if ((int )*(string + (len - 1)) != 10) {
#line 2590
    if ((int )*(string + (len - 1)) != 13) {
#line 2591
      return (string);
    }
  }
#line 2594
  if (len > 1) {
#line 2595
    if ((int )*(string + (len - 2)) == 13) {
      {
#line 2596
      *(string + (len - 2)) = (char )'\000';
      }
    } else {
      {
#line 2598
      *(string + (len - 1)) = (char )'\000';
      }
    }
  } else {
    {
#line 2601
    *(string + (len - 1)) = (char )'\000';
    }
  }
#line 2603
  return (string);
}
}
#line 2606 "smtprc_comb.c"
void swap_rule(char *dest , char const   *rule___0 , int hostn ) 
{ 
  char *tmp ;
  char *tmp___0 ;
  char *tmp___1 ;
  char *tmp___2 ;
  char *tmp___3 ;

  {
  {
#line 2614
  strncpy((char * __restrict  )dest, (char const   * __restrict  )rule___0, 8192U);
#line 2615
  *(dest + 8192) = (char )'\000';
#line 2616
  tmp = strstr(rule___0, (char const   *)"--NAME--");
  }
#line 2617
  if ((unsigned int )tmp != (unsigned int )((void *)0)) {
    {
#line 2618
    swap_macro(dest, (char const   *)o.name, (char const   *)"--NAME--");
    }
  }
  {
#line 2620
  tmp___0 = strstr(rule___0, (char const   *)"--DOMAIN--");
  }
#line 2621
  if ((unsigned int )tmp___0 != (unsigned int )((void *)0)) {
    {
#line 2622
    swap_macro(dest, (char const   *)o.domain, (char const   *)"--DOMAIN--");
    }
  }
  {
#line 2624
  tmp___1 = strstr(rule___0, (char const   *)"--IP_ADDRESS--");
  }
#line 2625
  if ((unsigned int )tmp___1 != (unsigned int )((void *)0)) {
    {
#line 2626
    swap_macro(dest, (char const   *)(*(hosts + hostn))->ip_address, (char const   *)"--IP_ADDRESS--");
    }
  }
  {
#line 2628
  tmp___3 = strstr(rule___0, (char const   *)"--HOSTNAME--");
  }
#line 2629
  if ((unsigned int )tmp___3 != (unsigned int )((void *)0)) {
#line 2630
    if (f.resolve_hostnames) {
#line 2631
      if ((*(hosts + hostn))->resolved) {
        {
#line 2632
        swap_macro(dest, (char const   *)(*(hosts + hostn))->hostname, (char const   *)"--HOSTNAME--");
        }
      } else {
#line 2634
        goto _L___0;
      }
    } else {
#line 2637
      goto _L___0;
    }
  } else {
    _L___0: 
    {
#line 2641
    tmp___2 = strstr(rule___0, (char const   *)"--HOSTNAME--");
    }
#line 2642
    if ((unsigned int )tmp___2 != (unsigned int )((void *)0)) {
#line 2643
      if (f.resolve_hostnames) {
        {
#line 2644
        swap_macro(dest, (char const   *)(*(hosts + hostn))->ip_address, (char const   *)"--HOSTNAME--");
        }
      }
    }
  }
#line 2648
  return;
}
}
#line 2651 "smtprc_comb.c"
void swap_macro(char *string , char const   *replace , char const   *macro ) 
{ 
  char *p ;
  char *buf ;
  void *tmp ;
  size_t___0 tmp___0 ;

  {
  {
#line 2658
  tmp = s_malloc(8193UL * sizeof(char ));
#line 2659
  buf = (char *)tmp;
  }
  {
#line 2660
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 2661
    p = strstr((char const   *)string, macro);
    }
#line 2662
    if (! ((unsigned int )p != (unsigned int )((void *)0))) {
#line 2663
      goto while_break;
    }
    {
#line 2665
    memcpy((void * __restrict  )buf, (void const   * __restrict  )string, (unsigned int )(p - string));
#line 2666
    *(buf + (p - string)) = (char )'\000';
#line 2667
    tmp___0 = strlen(macro);
#line 2668
    p += tmp___0;
#line 2669
    strncat((char * __restrict  )buf, (char const   * __restrict  )replace, 8192U);
#line 2670
    strncat((char * __restrict  )buf, (char const   * __restrict  )p, 8192U);
#line 2671
    *(buf + 8192) = (char )'\000';
#line 2672
    strncpy((char * __restrict  )string, (char const   * __restrict  )buf, 8192U);
#line 2673
    *(string + 8192) = (char )'\000';
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 2675
  free((void *)buf);
  }
#line 2676
  return;
}
}
#line 2679 "smtprc_comb.c"
void convert_rule(char *string , int ind ) 
{ 
  char *buf ;
  void *tmp ;

  {
  {
#line 2684
  tmp = s_malloc(8193UL * sizeof(char ));
#line 2685
  buf = (char *)tmp;
  }
#line 2686
  if (ind == 1) {
    {
#line 2687
    snprintf((char * __restrict  )buf, 8192U, (char const   * __restrict  )"HELO %s\r\n",
             string);
#line 2689
    strncpy((char * __restrict  )string, (char const   * __restrict  )buf, 8192U);
#line 2690
    *(string + 8192) = (char )'\000';
    }
  } else
#line 2692
  if (ind == 2) {
    {
#line 2693
    snprintf((char * __restrict  )buf, 8192U, (char const   * __restrict  )"MAIL FROM:%s\r\n",
             string);
#line 2695
    strncpy((char * __restrict  )string, (char const   * __restrict  )buf, 8192U);
#line 2696
    *(string + 8192) = (char )'\000';
    }
  } else
#line 2698
  if (ind == 3) {
    {
#line 2699
    snprintf((char * __restrict  )buf, 8192U, (char const   * __restrict  )"RCPT TO:%s\r\n",
             string);
#line 2701
    strncpy((char * __restrict  )string, (char const   * __restrict  )buf, 8192U);
#line 2702
    *(string + 8192) = (char )'\000';
    }
  }
#line 2706
  return;
}
}
#line 2709 "smtprc_comb.c"
void debug(char *fmt  , ...) 
{ 
  va_list ap ;

  {
#line 2713
  if (f.debug) {
    {
#line 2714
    __builtin_va_start(ap, fmt);
#line 2715
    fflush(stdout);
#line 2716
    fprintf((FILE * __restrict  )stdout, (char const   * __restrict  )"DEBUG: ");
#line 2717
    vfprintf((FILE * __restrict  )stderr, (char const   * __restrict  )fmt, ap);
#line 2718
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n");
#line 2719
    __builtin_va_end(ap);
    }
  }
#line 2721
  return;
}
}
#line 2724 "smtprc_comb.c"
int check_file_path(char *filename , char *path ) 
{ 
  char *s ;
  char *p ;
  int slash_flag ;
  char *fn ;
  FILE *fd ;
  size_t___0 tmp ;
  void *tmp___0 ;
  size_t___0 tmp___1 ;
  size_t___0 tmp___2 ;
  char *tmp___3 ;
  size_t___0 tmp___4 ;
  void *tmp___5 ;
  size_t___0 tmp___6 ;
  size_t___0 tmp___7 ;

  {
  {
#line 2741
  slash_flag = 0;
#line 2742
  fd = fopen((char const   * __restrict  )filename, (char const   * __restrict  )"w");
  }
#line 2743
  if ((unsigned int )fd == (unsigned int )((void *)0)) {
#line 2744
    return (-1);
  }
  {
#line 2746
  fclose(fd);
#line 2747
  tmp = strlen((char const   *)filename);
#line 2748
  tmp___0 = s_malloc((unsigned long )(tmp + 1U) * sizeof(char ));
#line 2749
  fn = (char *)tmp___0;
#line 2750
  tmp___1 = strlen((char const   *)filename);
#line 2751
  strncpy((char * __restrict  )fn, (char const   * __restrict  )filename, tmp___1);
#line 2752
  tmp___2 = strlen((char const   *)filename);
#line 2753
  *(fn + tmp___2) = (char )'\000';
#line 2754
  s = fn;
  }
  {
#line 2755
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 2756
    tmp___3 = s;
#line 2757
    s ++;
    }
#line 2758
    if (! *tmp___3) {
#line 2759
      goto while_break;
    }
#line 2761
    if ((int )*s == 47) {
      {
#line 2762
      p = s;
#line 2763
      slash_flag = 1;
      }
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 2766
  p ++;
#line 2767
  *p = (char )'\000';
  }
#line 2768
  if (! slash_flag) {
    {
#line 2769
    tmp___4 = strlen((char const   *)"./");
#line 2770
    tmp___5 = s_malloc((unsigned long )(tmp___4 + 2U) * sizeof(char ));
#line 2771
    path = (char *)tmp___5;
#line 2772
    tmp___6 = strlen((char const   *)"./");
#line 2773
    strncpy((char * __restrict  )path, (char const   * __restrict  )"./", tmp___6);
#line 2774
    tmp___7 = strlen((char const   *)"./");
#line 2775
    *(path + tmp___7) = (char )'\000';
    }
  } else {
    {
#line 2777
    strncpy((char * __restrict  )path, (char const   * __restrict  )fn, 8192U);
#line 2778
    *(path + 8192) = (char )'\000';
    }
  }
  {
#line 2780
  free((void *)fn);
  }
#line 2781
  return (0);
}
}
#line 2784 "smtprc_comb.c"
void return_data(long cur_host , int rule___0 , char *string ) 
{ 
  char *buf ;
  void *tmp ;

  {
  {
#line 2789
  tmp = s_zmalloc((int )(8193UL * sizeof(char )));
#line 2790
  buf = (char *)tmp;
#line 2791
  snprintf((char * __restrict  )buf, 8192U, (char const   * __restrict  )"Subject: %s\r\n%s\r\n\r\n:SmtpRCKey:%d:%s:%d:\r\n\r\n.\r\n",
           o.email_subject, o.email, (int )o.time, (*(hosts + cur_host))->ip_address,
           rule___0);
#line 2794
  strncpy((char * __restrict  )string, (char const   * __restrict  )buf, 8192U);
#line 2795
  *(string + 8192) = (char )'\000';
  }
#line 2796
  return;
}
}
#line 2799 "smtprc_comb.c"
void set_defaults(void) 
{ 
  size_t___0 tmp ;
  void *tmp___0 ;
  size_t___0 tmp___1 ;
  size_t___0 tmp___2 ;
  size_t___0 tmp___3 ;
  void *tmp___4 ;
  size_t___0 tmp___5 ;
  size_t___0 tmp___6 ;

  {
  {
#line 2810
  o.number_of_threads = (unsigned short)1000;
#line 2811
  o.c_timeout = (unsigned short)10;
#line 2812
  o.r_timeout = (unsigned short)60;
#line 2813
  o.m_timeout = (unsigned short)60;
#line 2814
  tmp = strlen((char const   *)"/usr/local/etc/smtprc/rcheck.conf");
#line 2815
  tmp___0 = s_malloc((unsigned long )(tmp + 1U) * sizeof(char ));
#line 2816
  o.config_file = (char *)tmp___0;
#line 2817
  tmp___1 = strlen((char const   *)"/usr/local/etc/smtprc/rcheck.conf");
#line 2818
  strncpy((char * __restrict  )o.config_file, (char const   * __restrict  )"/usr/local/etc/smtprc/rcheck.conf",
          tmp___1);
#line 2820
  tmp___2 = strlen((char const   *)"/usr/local/etc/smtprc/rcheck.conf");
#line 2821
  *(o.config_file + tmp___2) = (char )'\000';
#line 2822
  f.config_file = (unsigned char)1;
#line 2823
  tmp___3 = strlen((char const   *)"/usr/local/etc/smtprc/email.tmpl");
#line 2824
  tmp___4 = s_malloc((unsigned long )(tmp___3 + 1U) * sizeof(char ));
#line 2825
  o.email_template = (char *)tmp___4;
#line 2826
  tmp___5 = strlen((char const   *)"/usr/local/etc/smtprc/email.tmpl");
#line 2827
  strncpy((char * __restrict  )o.email_template, (char const   * __restrict  )"/usr/local/etc/smtprc/email.tmpl",
          tmp___5);
#line 2829
  tmp___6 = strlen((char const   *)"/usr/local/etc/smtprc/email.tmpl");
#line 2830
  *(o.email_template + tmp___6) = (char )'\000';
#line 2831
  f.email_template = (unsigned char)1;
  }
#line 2832
  return;
}
}
#line 2835 "smtprc_comb.c"
void not_implemented(void) 
{ 


  {
  {
#line 2839
  fatal("Sorry, This function is not yet implemented");
  }
#line 2840
  return;
}
}
#line 2843
#pragma merger(0,"/tmp/cil-VVVPpkmc.i","-Wall,-g,-pthread")
#line 2844
void print_html_header(FILE *fd , char *title ) ;
#line 2845
void print_html_footer(FILE *fd , long smtp_open___0 ) ;
#line 2846
void print_link(FILE *fd , char *link___0 , char *text , char *color ) ;
#line 2847
void print_check(FILE *fd , long x , int y , char *color ) ;
#line 2848
void print_errord_check(FILE *fd , long x , int y , char *color ) ;
#line 2849
void print_check_details(char *filename , long host___0 ) ;
#line 2850
void print_quit(FILE *fd , long x , int y , char *color ) ;
#line 2851
char *escape_html_chars(char *string , char *s ) ;
#line 2852 "smtprc_comb.c"
char *passed  =    "smtprc_passed.html";
#line 2853 "smtprc_comb.c"
char *errord  =    "smtprc_errord.html";
#line 2854 "smtprc_comb.c"
char *failed_file  ;
#line 2855 "smtprc_comb.c"
long smtp_open  =    0L;
#line 2856 "smtprc_comb.c"
void display_html(void) 
{ 
  FILE *failed_fd ;
  FILE *passed_fd ;
  FILE *errord_fd ;
  char buf[8192] ;
  char *p ;
  char *s ;
  char *boo ;
  int failed ;
  int failed_count ;
  int passed_count ;
  int errord_count ;
  int count ;
  long x ;
  int y ;
  size_t___0 tmp ;
  void *tmp___0 ;
  size_t___0 tmp___1 ;
  size_t___0 tmp___2 ;
  char *tmp___3 ;
  size_t___0 tmp___4 ;
  void *tmp___5 ;
  size_t___0 tmp___6 ;
  size_t___0 tmp___7 ;
  size_t___0 tmp___8 ;
  void *tmp___9 ;
  size_t___0 tmp___10 ;
  size_t___0 tmp___11 ;

  {
  {
#line 2886
  failed = 0;
#line 2887
  failed_count = 0;
#line 2888
  passed_count = 0;
#line 2889
  errord_count = 0;
#line 2890
  count = 0;
#line 2891
  x = 0L;
#line 2892
  y = 0;
#line 2893
  tmp = strlen((char const   *)o.html_file);
#line 2894
  tmp___0 = s_malloc((unsigned long )(tmp + 1U) * sizeof(char ));
#line 2895
  boo = (char *)tmp___0;
#line 2896
  tmp___1 = strlen((char const   *)o.html_file);
#line 2897
  strncpy((char * __restrict  )boo, (char const   * __restrict  )o.html_file, tmp___1);
#line 2898
  tmp___2 = strlen((char const   *)o.html_file);
#line 2899
  *(boo + tmp___2) = (char )'\000';
#line 2900
  p = boo;
  }
  {
#line 2901
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 2902
    tmp___3 = p;
#line 2903
    p ++;
    }
#line 2904
    if (! *tmp___3) {
#line 2905
      goto while_break;
    }
#line 2907
    if ((int )*p == 47) {
      {
#line 2908
      count ++;
#line 2909
      p ++;
#line 2910
      s = p;
      }
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 2913
  if (! count) {
    {
#line 2914
    tmp___4 = strlen((char const   *)o.html_file);
#line 2915
    tmp___5 = s_malloc((unsigned long )(tmp___4 + 1U) * sizeof(char ));
#line 2916
    failed_file = (char *)tmp___5;
#line 2917
    tmp___6 = strlen((char const   *)o.html_file);
#line 2918
    strncpy((char * __restrict  )failed_file, (char const   * __restrict  )o.html_file,
            tmp___6);
#line 2920
    tmp___7 = strlen((char const   *)o.html_file);
#line 2921
    *(failed_file + tmp___7) = (char )'\000';
    }
  } else {
    {
#line 2923
    tmp___8 = strlen((char const   *)s);
#line 2924
    tmp___9 = s_malloc((unsigned long )(tmp___8 + 1U) * sizeof(char ));
#line 2925
    failed_file = (char *)tmp___9;
#line 2926
    tmp___10 = strlen((char const   *)s);
#line 2927
    strncpy((char * __restrict  )failed_file, (char const   * __restrict  )s, tmp___10);
#line 2928
    tmp___11 = strlen((char const   *)s);
#line 2929
    *(failed_file + tmp___11) = (char )'\000';
    }
  }
  {
#line 2931
  count = 0;
#line 2932
  failed_fd = fopen((char const   * __restrict  )o.html_file, (char const   * __restrict  )"w");
  }
#line 2933
  if ((unsigned int )failed_fd == (unsigned int )((void *)0)) {
    {
#line 2934
    fatal("Unable to open html file");
    }
  }
  {
#line 2936
  snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s",
           o.html_path, passed);
#line 2938
  passed_fd = fopen((char const   * __restrict  )(buf), (char const   * __restrict  )"w");
  }
#line 2939
  if ((unsigned int )passed_fd == (unsigned int )((void *)0)) {
    {
#line 2940
    fatal("Unable to open html file");
    }
  }
  {
#line 2942
  snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s",
           o.html_path, errord);
#line 2944
  errord_fd = fopen((char const   * __restrict  )(buf), (char const   * __restrict  )"w");
  }
#line 2945
  if ((unsigned int )errord_fd == (unsigned int )((void *)0)) {
    {
#line 2946
    fatal("Unable to open html file");
    }
  }
  {
#line 2948
  print_html_header(failed_fd, "SMTP Relay Checker");
#line 2949
  print_html_header(passed_fd, "SMTP Relay Checker");
#line 2950
  print_html_header(errord_fd, "SMTP Relay Checker");
#line 2951
  fprintf((FILE * __restrict  )failed_fd, (char const   * __restrict  )"<font size=\"1\">Scans marked in <font color=\"orange\">Orange</font> are suspected open relays</font><br />\n");
#line 2952
  fprintf((FILE * __restrict  )failed_fd, (char const   * __restrict  )"<font size=\"1\">Scans marked in <font color=\"red\">Red</font> are definite open relays</font><br /><br /><br /><br />\n");
#line 2953
  fprintf((FILE * __restrict  )passed_fd, (char const   * __restrict  )"<font size=\"1\">Scans marked in <font color=\"blue\">Blue</font> are not open relays and have passed all tests</font><br /><br /><br /><br />\n");
#line 2954
  fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"<font size=\"1\">Scans marked in <font color=\"black\">Black</font> Closed the connection after it was established (Probably due to a firewall)</font><br />\n");
#line 2955
  fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"<font size=\"1\">Scans marked in <font color=\"darkblue\">Dark Blue</font> Had restrictions in place to disallow access</font><br />\n");
#line 2956
  fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"<font size=\"1\">Scans marked in <font color=\"green\">Green</font> Produced Read Timeouts</font><br />\n");
#line 2957
  fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"<font size=\"1\">Scans marked in <font color=\"purple\">Purple</font> Produced Unknown Errors</font><br /><br /><br /><br />\n");
#line 2958
  fprintf((FILE * __restrict  )failed_fd, (char const   * __restrict  )"<table align=\"center\" border=\"0\" cellspacing=\"10\"><tr>\n");
#line 2959
  fprintf((FILE * __restrict  )passed_fd, (char const   * __restrict  )"<table align=\"center\" border=\"0\" cellspacing=\"10\"><tr>\n");
#line 2960
  fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"<table align=\"center\" border=\"0\" cellspacing=\"10\"><tr>\n");
#line 2961
  x = 0L;
  }
  {
#line 2962
  while (1) {
    while_continue___0: /* CIL Label */ ;
#line 2962
    if (! ((unsigned long )x < o.no_hostnames)) {
#line 2962
      goto while_break___0;
    }
#line 2963
    if ((*(hosts + x))->smtp_open) {
      {
#line 2964
      smtp_open ++;
      }
    }
    {
#line 2966
    x ++;
    }
  }
  while_break___0: /* CIL Label */ ;
  }
  {
#line 2968
  x = 0L;
  }
  {
#line 2969
  while (1) {
    while_continue___1: /* CIL Label */ ;
#line 2969
    if (! ((unsigned long )x < o.no_hostnames)) {
#line 2969
      goto while_break___1;
    }
#line 2970
    if ((*(hosts + x))->smtp_open) {
      {
#line 2971
      y = 0;
      }
      {
#line 2972
      while (1) {
        while_continue___2: /* CIL Label */ ;
#line 2972
        if (! (y <= (int )o.no_rules)) {
#line 2972
          goto while_break___2;
        }
#line 2973
        if ((int )(*((*(hosts + x))->smtp_check + y))->failed == 1) {
#line 2974
          if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
#line 2975
            if (failed < 1) {
              {
#line 2976
              failed = 1;
              }
            }
          }
        }
#line 2980
        if ((int )(*((*(hosts + x))->smtp_check + y))->failed == 2) {
#line 2981
          if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
#line 2982
            if (failed < 2) {
              {
#line 2983
              failed = 2;
              }
            }
          }
        }
        {
#line 2987
        y ++;
        }
      }
      while_break___2: /* CIL Label */ ;
      }
#line 2989
      if (failed) {
#line 2990
        if (failed == 1) {
          {
#line 2991
          fprintf((FILE * __restrict  )failed_fd, (char const   * __restrict  )"<td>");
#line 2992
          failed_count ++;
          }
#line 2993
          if ((*(hosts + x))->resolved) {
            {
#line 2994
            snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                     (*(hosts + x))->hostname);
#line 2996
            print_link(failed_fd, buf, (*(hosts + x))->hostname, "orange");
#line 2997
            snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                     o.html_path, (*(hosts + x))->hostname);
            }
          } else {
            {
#line 3000
            snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                     (*(hosts + x))->ip_address);
#line 3002
            print_link(failed_fd, buf, (*(hosts + x))->ip_address, "orange");
#line 3003
            snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                     o.html_path, (*(hosts + x))->ip_address);
            }
          }
          {
#line 3006
          fprintf((FILE * __restrict  )failed_fd, (char const   * __restrict  )"</td>");
          }
#line 3007
          if (failed_count % 5 == 0) {
            {
#line 3008
            fprintf((FILE * __restrict  )failed_fd, (char const   * __restrict  )"</tr><tr>\n");
            }
          }
        } else
#line 3011
        if (failed == 2) {
          {
#line 3012
          failed_count ++;
#line 3013
          fprintf((FILE * __restrict  )failed_fd, (char const   * __restrict  )"<td>");
          }
#line 3014
          if ((*(hosts + x))->resolved) {
            {
#line 3015
            snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                     (*(hosts + x))->hostname);
#line 3017
            print_link(failed_fd, buf, (*(hosts + x))->hostname, "red");
#line 3018
            snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                     o.html_path, (*(hosts + x))->hostname);
            }
          } else {
            {
#line 3021
            snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                     (*(hosts + x))->ip_address);
#line 3023
            print_link(failed_fd, buf, (*(hosts + x))->ip_address, "red");
#line 3024
            snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                     o.html_path, (*(hosts + x))->ip_address);
            }
          }
          {
#line 3027
          fprintf((FILE * __restrict  )failed_fd, (char const   * __restrict  )"</td>");
          }
#line 3028
          if (failed_count % 5 == 0) {
            {
#line 3029
            fprintf((FILE * __restrict  )failed_fd, (char const   * __restrict  )"</tr><tr>\n");
            }
          }
        }
      } else
#line 3034
      if ((*(hosts + x))->fatal_error) {
#line 3035
        if ((int )(*(hosts + x))->fatal < 2) {
#line 3036
          if ((int )(*((*(hosts + x))->smtp_check + 0))->error_code == 1) {
            {
#line 3037
            errord_count ++;
#line 3038
            fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"<td>");
            }
#line 3039
            if ((*(hosts + x))->resolved) {
              {
#line 3040
              snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                       (*(hosts + x))->hostname);
#line 3042
              print_link(errord_fd, buf, (*(hosts + x))->hostname, "black");
#line 3043
              snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                       o.html_path, (*(hosts + x))->hostname);
              }
            } else {
              {
#line 3046
              snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                       (*(hosts + x))->ip_address);
#line 3048
              print_link(errord_fd, buf, (*(hosts + x))->ip_address, "black");
#line 3049
              snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                       o.html_path, (*(hosts + x))->ip_address);
              }
            }
            {
#line 3052
            fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"</td>");
            }
#line 3053
            if (errord_count % 5 == 0) {
              {
#line 3054
              fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"</tr><tr>\n");
              }
            }
          } else {
#line 3057
            goto _L___2;
          }
        } else {
#line 3060
          goto _L___2;
        }
      } else
      _L___2: 
#line 3064
      if ((*(hosts + x))->fatal_error) {
#line 3065
        if ((int )(*(hosts + x))->fatal < 2) {
#line 3066
          if ((int )(*((*(hosts + x))->smtp_check + 0))->error_code == 2) {
            {
#line 3067
            errord_count ++;
#line 3068
            fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"<td>");
            }
#line 3069
            if ((*(hosts + x))->resolved) {
              {
#line 3070
              snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                       (*(hosts + x))->hostname);
#line 3072
              print_link(errord_fd, buf, (*(hosts + x))->hostname, "darkblue");
#line 3073
              snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                       o.html_path, (*(hosts + x))->hostname);
              }
            } else {
              {
#line 3076
              snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                       (*(hosts + x))->ip_address);
#line 3078
              print_link(errord_fd, buf, (*(hosts + x))->ip_address, "darkblue");
#line 3079
              snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                       o.html_path, (*(hosts + x))->ip_address);
              }
            }
            {
#line 3082
            fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"</td>");
            }
#line 3083
            if (errord_count % 5 == 0) {
              {
#line 3084
              fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"</tr><tr>\n");
              }
            }
          } else {
#line 3087
            goto _L___0;
          }
        } else {
#line 3090
          goto _L___0;
        }
      } else
      _L___0: 
#line 3094
      if ((int )(*(hosts + x))->fatal_error == 3) {
        {
#line 3095
        errord_count ++;
#line 3096
        fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"<td>");
        }
#line 3097
        if ((*(hosts + x))->resolved) {
          {
#line 3098
          snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                   (*(hosts + x))->hostname);
#line 3100
          print_link(errord_fd, buf, (*(hosts + x))->hostname, "green");
#line 3101
          snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                   o.html_path, (*(hosts + x))->hostname);
          }
        } else {
          {
#line 3104
          snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                   (*(hosts + x))->ip_address);
#line 3106
          print_link(errord_fd, buf, (*(hosts + x))->ip_address, "green");
#line 3107
          snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                   o.html_path, (*(hosts + x))->ip_address);
          }
        }
        {
#line 3110
        fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"</td>");
        }
#line 3111
        if (errord_count % 5 == 0) {
          {
#line 3112
          fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"</tr><tr>\n");
          }
        }
      } else
#line 3115
      if ((*(hosts + x))->fatal_error) {
        {
#line 3116
        errord_count ++;
#line 3117
        fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"<td>");
        }
#line 3118
        if ((*(hosts + x))->resolved) {
          {
#line 3119
          snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                   (*(hosts + x))->hostname);
#line 3121
          print_link(errord_fd, buf, (*(hosts + x))->hostname, "purple");
#line 3122
          snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                   o.html_path, (*(hosts + x))->hostname);
          }
        } else {
          {
#line 3125
          snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                   (*(hosts + x))->ip_address);
#line 3127
          print_link(errord_fd, buf, (*(hosts + x))->ip_address, "purple");
#line 3128
          snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                   o.html_path, (*(hosts + x))->ip_address);
          }
        }
        {
#line 3131
        fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"</td>");
        }
#line 3132
        if (errord_count % 5 == 0) {
          {
#line 3133
          fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"</tr><tr>\n");
          }
        }
      } else {
        {
#line 3136
        passed_count ++;
#line 3137
        fprintf((FILE * __restrict  )passed_fd, (char const   * __restrict  )"<td>");
        }
#line 3138
        if ((*(hosts + x))->resolved) {
          {
#line 3139
          snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                   (*(hosts + x))->hostname);
#line 3141
          print_link(passed_fd, buf, (*(hosts + x))->hostname, "blue");
#line 3142
          snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                   o.html_path, (*(hosts + x))->hostname);
          }
        } else {
          {
#line 3145
          snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s.html",
                   (*(hosts + x))->ip_address);
#line 3147
          print_link(passed_fd, buf, (*(hosts + x))->ip_address, "blue");
#line 3148
          snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%s%s.html",
                   o.html_path, (*(hosts + x))->ip_address);
          }
        }
        {
#line 3151
        fprintf((FILE * __restrict  )passed_fd, (char const   * __restrict  )"</td>");
        }
#line 3152
        if (passed_count % 5 == 0) {
          {
#line 3153
          fprintf((FILE * __restrict  )passed_fd, (char const   * __restrict  )"</tr><tr>\n");
          }
        }
      }
      {
#line 3160
      print_check_details(buf, x);
#line 3161
      failed = 0;
      }
    }
    {
#line 3163
    x ++;
    }
  }
  while_break___1: /* CIL Label */ ;
  }
  {
#line 3165
  fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"</tr></table>");
#line 3166
  fprintf((FILE * __restrict  )failed_fd, (char const   * __restrict  )"</tr></table>");
#line 3167
  fprintf((FILE * __restrict  )passed_fd, (char const   * __restrict  )"</tr></table>");
  }
#line 3168
  if (! failed_count) {
    {
#line 3169
    fprintf((FILE * __restrict  )failed_fd, (char const   * __restrict  )"<br /><br /><br /><center><font size=\"2\" color=\"black\"><b>No Open Relays Were Found</b></font></center><br /><br /><br />\n");
    }
  }
#line 3171
  if (! passed_count) {
    {
#line 3172
    fprintf((FILE * __restrict  )passed_fd, (char const   * __restrict  )"<br /><br /><br /><center><font size=\"2\" color=\"black\"><b>No Mail Servers Passed The Tests</b></font></center><br /><br /><br />\n");
    }
  }
#line 3174
  if (! errord_count) {
    {
#line 3175
    fprintf((FILE * __restrict  )errord_fd, (char const   * __restrict  )"<br /><br /><br /><center><font size=\"2\" color=\"black\"><b>No Errors Were Encountered While Scanning</b></font></center><br /><br /><br />\n");
    }
  }
  {
#line 3177
  print_html_footer(failed_fd, smtp_open);
#line 3178
  print_html_footer(errord_fd, smtp_open);
#line 3179
  print_html_footer(passed_fd, smtp_open);
#line 3180
  fclose(failed_fd);
#line 3181
  fclose(passed_fd);
#line 3182
  fclose(errord_fd);
  }
#line 3183
  return;
}
}
#line 3186 "smtprc_comb.c"
void print_check_details(char *filename , long host___0 ) 
{ 
  FILE *fd ;
  char color[8193] ;
  int y ;

  {
  {
#line 3192
  y = 0;
#line 3193
  fd = fopen((char const   * __restrict  )filename, (char const   * __restrict  )"w");
  }
#line 3194
  if ((unsigned int )fd == (unsigned int )((void *)0)) {
    {
#line 3195
    fatal("Unable to open file: %s\n", filename);
    }
  }
  {
#line 3197
  print_html_header(fd, "SMTP Relay Checker");
#line 3198
  y = 0;
  }
  {
#line 3199
  while (1) {
    while_continue: /* CIL Label */ ;
#line 3199
    if (! (y <= (int )o.no_rules)) {
#line 3199
      goto while_break;
    }
#line 3200
    if ((int )(*((*(hosts + host___0))->smtp_check + y))->failed == 1) {
      {
#line 3201
      strncpy((char * __restrict  )(color), (char const   * __restrict  )"orange",
              8192U);
#line 3203
      color[8192] = (char )'\000';
      }
    } else
#line 3205
    if ((int )(*((*(hosts + host___0))->smtp_check + y))->failed == 2) {
      {
#line 3206
      strncpy((char * __restrict  )(color), (char const   * __restrict  )"red", 8192U);
#line 3208
      color[8192] = (char )'\000';
      }
    } else
#line 3210
    if ((*((*(hosts + host___0))->smtp_check + y))->passed) {
      {
#line 3211
      strncpy((char * __restrict  )(color), (char const   * __restrict  )"blue", 8192U);
#line 3213
      color[8192] = (char )'\000';
      }
    } else {
      {
#line 3215
      strncpy((char * __restrict  )(color), (char const   * __restrict  )"purple",
              8192U);
#line 3217
      color[8192] = (char )'\000';
      }
    }
#line 3221
    if ((*(hosts + host___0))->fatal_error) {
#line 3222
      if (y <= (int )(*(hosts + host___0))->fatal) {
#line 3223
        if ((*((*(hosts + host___0))->smtp_check + y))->error_code) {
#line 3224
          if ((int )(*((*(hosts + host___0))->smtp_check + y))->error_code < 21) {
            {
#line 3225
            print_errord_check(fd, host___0, y, "green");
            }
          } else {
#line 3227
            goto _L;
          }
        } else
        _L: 
#line 3231
        if ((*((*(hosts + host___0))->smtp_check + y))->passed) {
          {
#line 3232
          print_check(fd, host___0, y, color);
          }
        } else
#line 3234
        if ((*((*(hosts + host___0))->smtp_check + y))->failed) {
          {
#line 3235
          print_check(fd, host___0, y, color);
          }
        }
      }
    } else {
      {
#line 3241
      print_check(fd, host___0, y, color);
      }
    }
    {
#line 3243
    y ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 3245
  if ((int )(*((*(hosts + host___0))->smtp_check + (int )o.no_rules))->error_code > 20) {
#line 3246
    if ((int )(*(hosts + host___0))->fatal == (int )o.no_rules) {
      {
#line 3247
      print_quit(fd, host___0, (int )o.no_rules, "green");
      }
    } else {
#line 3249
      goto _L___0;
    }
  } else
  _L___0: 
#line 3253
  if (! (*(hosts + host___0))->fatal_error) {
    {
#line 3254
    print_quit(fd, host___0, (int )o.no_rules, "blue");
    }
  }
  {
#line 3257
  print_html_footer(fd, smtp_open);
#line 3258
  fclose(fd);
  }
#line 3259
  return;
}
}
#line 3262 "smtprc_comb.c"
void print_quit(FILE *fd , long x , int y , char *color ) 
{ 


  {
  {
#line 3266
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n\n<br /><br /><table border=\"0\" cellspacing=\"1\"><font color=\"%s\"><br />\n",
          color);
  }
#line 3268
  if ((*(hosts + x))->resolved) {
    {
#line 3269
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td colspan=\"2\"><b>Quit sequence for %s [%s]</font></b><br /><br /></td></tr>\n",
            (*(hosts + x))->hostname, (*(hosts + x))->ip_address);
    }
  } else {
    {
#line 3272
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td colspan=\"2\"><b>Quit sequence for [%s]</font></b><br /><br /></td></tr>\n",
            (*(hosts + x))->ip_address);
    }
  }
#line 3275
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 21) {
    {
#line 3276
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;A fatal error occured while trying to read/write</font><br /></td></tr>\n",
            color);
    }
  } else
#line 3279
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 22) {
    {
#line 3280
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;A fatal error occured while trying to read/write</font><br /></td></tr>\n",
            color);
    }
  }
  {
#line 3284
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">QUIT SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
          color, "QUIT\r\n");
#line 3286
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">QUIT REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
          color, (*(hosts + x))->r_quit);
#line 3288
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"</table></font><br /><br /><br />\n\n");
  }
#line 3289
  return;
}
}
#line 3292 "smtprc_comb.c"
void print_errord_check(FILE *fd , long x , int y , char *color ) 
{ 
  char *p ;
  char *buf ;
  char *tmp ;
  char *tmp___0 ;
  char *tmp___1 ;
  char *tmp___2 ;
  char *tmp___3 ;
  char *tmp___4 ;
  char *tmp___5 ;
  char *tmp___6 ;
  char *tmp___7 ;
  char *tmp___8 ;
  char *tmp___9 ;
  char *tmp___10 ;
  void *tmp___11 ;
  char *tmp___12 ;
  char *tmp___13 ;
  char *tmp___14 ;
  char *tmp___15 ;

  {
  {
#line 3314
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n\n<br /><br /><table border=\"0\" cellspacing=\"1\"><font color=\"%s\"><br />\n",
          color);
  }
#line 3316
  if ((*(hosts + x))->resolved) {
    {
#line 3317
    tmp = escape_html_chars((*(hosts + x))->ip_address, p);
#line 3318
    tmp___0 = escape_html_chars((*(hosts + x))->hostname, p);
#line 3319
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td colspan=\"2\"><b>Results for %s [%s] check %d</font></b><br /><br /></td></tr>\n",
            tmp___0, tmp, y);
    }
  } else {
    {
#line 3322
    tmp___1 = escape_html_chars((*(hosts + x))->ip_address, p);
#line 3323
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td colspan=\"2\"><b>Results for [%s] check %d</font></b><br /><br /></td></tr>\n",
            tmp___1, y);
    }
  }
#line 3326
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 1) {
    {
#line 3327
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;The server closed the connection.... probably due to a firewall</font><br /></td></tr>\n",
            color);
    }
  }
#line 3330
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
    {
#line 3331
    tmp___2 = escape_html_chars((*((*(hosts + x))->smtp_check + 0))->r_banner, p);
#line 3332
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">BANNER:</font><font color=\"black\"></td>\n<td>&#9;%s</font><br /></td></tr>\n",
            color, tmp___2);
    }
  } else
#line 3335
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 1) {
    {
#line 3336
    tmp___2 = escape_html_chars((*((*(hosts + x))->smtp_check + 0))->r_banner, p);
#line 3337
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">BANNER:</font><font color=\"black\"></td>\n<td>&#9;%s</font><br /></td></tr>\n",
            color, tmp___2);
    }
  }
#line 3341
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 3) {
    {
#line 3342
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;An fatal error occured while trying to read/write HELO</font><br /></td></tr>\n",
            color);
    }
  } else
#line 3345
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 4) {
    {
#line 3346
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;An fatal error occured while trying to read/write HELO</font><br /></td></tr>\n",
            color);
    }
  }
#line 3350
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
    {
#line 3351
    tmp___3 = escape_html_chars((*((*(hosts + x))->smtp_check + 0))->helo, p);
#line 3352
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">HELO SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___3);
    }
  } else
#line 3355
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 4) {
    {
#line 3356
    tmp___3 = escape_html_chars((*((*(hosts + x))->smtp_check + 0))->helo, p);
#line 3357
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">HELO SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___3);
    }
  }
#line 3361
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
    {
#line 3362
    tmp___4 = escape_html_chars((*((*(hosts + x))->smtp_check + 0))->r_helo, p);
#line 3363
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">HELO REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___4);
    }
  } else
#line 3366
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 4) {
    {
#line 3367
    tmp___4 = escape_html_chars((*((*(hosts + x))->smtp_check + 0))->r_helo, p);
#line 3368
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">HELO REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___4);
    }
  }
#line 3372
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 6) {
    {
#line 3373
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;An fatal error occured while trying to read/write MAIL FROM</font><br /></td></tr>\n",
            color);
    }
  } else
#line 3376
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 7) {
    {
#line 3377
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;An fatal error occured while trying to read/write MAIL FROM</font><br /></td></tr>\n",
            color);
    }
  }
#line 3381
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
    {
#line 3382
    tmp___5 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->mail_from, p);
#line 3383
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">MAIL FROM SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___5);
    }
  } else
#line 3386
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 7) {
    {
#line 3387
    tmp___5 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->mail_from, p);
#line 3389
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">MAIL FROM SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___5);
    }
  }
#line 3393
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
    {
#line 3394
    tmp___6 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_mail_from,
                                p);
#line 3396
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">MAIL FROM REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___6);
    }
  } else
#line 3399
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 7) {
    {
#line 3400
    tmp___6 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_mail_from,
                                p);
#line 3402
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">MAIL FROM REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___6);
    }
  }
#line 3406
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 9) {
    {
#line 3407
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;An fatal error occured while trying to read/write RCPT TO</font><br /></td></tr>\n",
            color);
    }
  } else
#line 3410
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 10) {
    {
#line 3411
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;An fatal error occured while trying to read/write RCPT TO</font><br /></td></tr>\n",
            color);
    }
  }
#line 3415
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
#line 3416
    goto _L;
  } else
#line 3418
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 10) {
    _L: 
#line 3420
    if ((int )(*((*(hosts + x))->smtp_check + y))->passed > 3) {
      {
#line 3421
      tmp___7 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->rcpt_to, p);
#line 3423
      fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">RCPT TO SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
              color, tmp___7);
      }
    }
  }
#line 3428
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
#line 3429
    goto _L___0;
  } else
#line 3431
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 10) {
    _L___0: 
#line 3433
    if ((int )(*((*(hosts + x))->smtp_check + y))->passed > 3) {
      {
#line 3434
      tmp___8 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_rcpt_to,
                                  p);
#line 3436
      fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">RCPT TO REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
              color, tmp___8);
      }
    }
  }
#line 3441
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 12) {
    {
#line 3442
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;An fatal error occured while trying to read/write DATA</font><br /></td></tr>\n",
            color);
    }
  } else
#line 3445
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 13) {
    {
#line 3446
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;An fatal error occured while trying to read/write DATA</font><br /></td></tr>\n",
            color);
    }
  }
#line 3450
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
#line 3451
    goto _L___1;
  } else
#line 3453
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 13) {
    _L___1: 
#line 3455
    if ((int )(*((*(hosts + x))->smtp_check + y))->passed > 4) {
      {
#line 3456
      tmp___9 = escape_html_chars("DATA\r\n", p);
#line 3457
      fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">DATA START SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
              color, tmp___9);
      }
    }
  }
#line 3462
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
#line 3463
    goto _L___2;
  } else
#line 3465
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 13) {
    _L___2: 
#line 3467
    if ((int )(*((*(hosts + x))->smtp_check + y))->passed > 4) {
      {
#line 3468
      tmp___10 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_data_start,
                                   p);
#line 3470
      fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">DATA START REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
              color, tmp___10);
      }
    }
  }
#line 3475
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 15) {
    {
#line 3476
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;An fatal error occured while trying to read/write DATA</font><br /></td></tr>\n",
            color);
    }
  } else
#line 3479
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 16) {
    {
#line 3480
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;An fatal error occured while trying to read/write DATA</font><br /></td></tr>\n",
            color);
    }
  }
  {
#line 3484
  tmp___11 = s_malloc(8193UL * sizeof(char ));
#line 3485
  buf = (char *)tmp___11;
#line 3486
  return_data(x, y, buf);
  }
#line 3487
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
#line 3488
    goto _L___3;
  } else
#line 3490
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 16) {
    _L___3: 
#line 3492
    if ((int )(*((*(hosts + x))->smtp_check + y))->passed > 5) {
      {
#line 3493
      tmp___12 = escape_html_chars(buf, p);
#line 3494
      fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">DATA SENT:</font> &#9;<font color=\"black\"></td>\n<td><pre>%s</pre></font><br /></td></tr>\n",
              color, tmp___12);
      }
    }
  }
  {
#line 3499
  free((void *)buf);
  }
#line 3500
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
#line 3501
    goto _L___4;
  } else
#line 3503
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 16) {
    _L___4: 
#line 3505
    if ((int )(*((*(hosts + x))->smtp_check + y))->passed > 6) {
      {
#line 3506
      tmp___13 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_data_end,
                                   p);
#line 3508
      fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">DATA REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
              color, tmp___13);
      }
    }
  }
#line 3513
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 18) {
    {
#line 3514
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;An fatal error occured while trying to read/write RSET</font><br /></td></tr>\n",
            color);
    }
  } else
#line 3517
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code == 19) {
    {
#line 3518
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">FATAL ERROR:</font><font color=\"black\"></td>\n<td>&#9;An fatal error occured while trying to read/write RSET</font><br /></td></tr>\n",
            color);
    }
  }
#line 3522
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
    {
#line 3523
    tmp___14 = escape_html_chars("RSET\r\n", p);
#line 3524
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">RESET SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___14);
    }
  } else
#line 3527
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 19) {
    {
#line 3528
    tmp___14 = escape_html_chars("RSET\r\n", p);
#line 3529
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">RESET SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___14);
    }
  }
#line 3533
  if (! (*((*(hosts + x))->smtp_check + y))->error_code) {
    {
#line 3534
    tmp___15 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_reset, p);
#line 3535
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">RESET REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___15);
    }
  } else
#line 3538
  if ((int )(*((*(hosts + x))->smtp_check + y))->error_code > 19) {
    {
#line 3539
    tmp___15 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_reset, p);
#line 3540
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">RESET REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___15);
    }
  }
  {
#line 3544
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"</table></font><br /><br /><br />\n\n");
  }
#line 3545
  return;
}
}
#line 3548 "smtprc_comb.c"
void print_check(FILE *fd , long x , int y , char *color ) 
{ 
  int passed___0 ;
  char *p ;
  char *buf ;
  char *tmp ;
  char *tmp___0 ;
  char *tmp___1 ;
  char *tmp___2 ;
  char *tmp___3 ;
  char *tmp___4 ;
  char *tmp___5 ;
  char *tmp___6 ;
  char *tmp___7 ;
  char *tmp___8 ;
  char *tmp___9 ;
  char *tmp___10 ;
  void *tmp___11 ;
  char *tmp___12 ;
  char *tmp___13 ;
  char *tmp___14 ;
  char *tmp___15 ;

  {
  {
#line 3571
  passed___0 = 0;
#line 3572
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n\n<br /><br /><table border=\"0\" cellspacing=\"1\"><font color=\"%s\"><br />\n",
          color);
  }
#line 3574
  if ((*(hosts + x))->resolved) {
    {
#line 3575
    tmp = escape_html_chars((*(hosts + x))->ip_address, p);
#line 3576
    tmp___0 = escape_html_chars((*(hosts + x))->hostname, p);
#line 3577
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td colspan=\"2\"><b>Results for %s [%s] check %d</font></b><br /><br /></td></tr>\n",
            tmp___0, tmp, y);
    }
  } else {
    {
#line 3580
    tmp___1 = escape_html_chars((*(hosts + x))->ip_address, p);
#line 3581
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td colspan=\"2\"><b>Results for [%s] check %d</font></b><br /><br /></td></tr>\n",
            tmp___1, y);
    }
  }
#line 3584
  if (! (*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3585
    tmp___2 = escape_html_chars((*((*(hosts + x))->smtp_check + 0))->r_banner, p);
#line 3586
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">BANNER:</font><font color=\"black\"></td>\n<td>&#9;%s</font><br /></td></tr>\n",
            color, tmp___2);
    }
  } else
#line 3589
  if (passed___0 < (int )(*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3590
    tmp___2 = escape_html_chars((*((*(hosts + x))->smtp_check + 0))->r_banner, p);
#line 3591
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">BANNER:</font><font color=\"black\"></td>\n<td>&#9;%s</font><br /></td></tr>\n",
            color, tmp___2);
    }
  }
  {
#line 3595
  passed___0 ++;
  }
#line 3596
  if (! (*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3597
    tmp___3 = escape_html_chars((*((*(hosts + x))->smtp_check + 0))->helo, p);
#line 3598
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">HELO SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___3);
    }
  } else
#line 3601
  if (passed___0 < (int )(*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3602
    tmp___3 = escape_html_chars((*((*(hosts + x))->smtp_check + 0))->helo, p);
#line 3603
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">HELO SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___3);
    }
  }
#line 3607
  if (! (*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3608
    tmp___4 = escape_html_chars((*((*(hosts + x))->smtp_check + 0))->r_helo, p);
#line 3609
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">HELO REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___4);
    }
  } else
#line 3612
  if (passed___0 < (int )(*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3613
    tmp___4 = escape_html_chars((*((*(hosts + x))->smtp_check + 0))->r_helo, p);
#line 3614
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">HELO REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___4);
    }
  }
  {
#line 3618
  passed___0 ++;
  }
#line 3619
  if (! (*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3620
    tmp___5 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->mail_from, p);
#line 3621
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">MAIL FROM SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___5);
    }
  } else
#line 3624
  if (passed___0 < (int )(*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3625
    tmp___5 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->mail_from, p);
#line 3627
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">MAIL FROM SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___5);
    }
  }
#line 3631
  if (! (*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3632
    tmp___6 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_mail_from,
                                p);
#line 3634
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">MAIL FROM REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___6);
    }
  } else
#line 3637
  if (passed___0 < (int )(*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3638
    tmp___6 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_mail_from,
                                p);
#line 3640
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">MAIL FROM REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___6);
    }
  }
  {
#line 3644
  passed___0 ++;
  }
#line 3645
  if (! (*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3646
    tmp___7 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->rcpt_to, p);
#line 3647
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">RCPT TO SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___7);
    }
  } else
#line 3650
  if (passed___0 < (int )(*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3651
    tmp___7 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->rcpt_to, p);
#line 3652
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">RCPT TO SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___7);
    }
  }
#line 3656
  if (! (*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3657
    tmp___8 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_rcpt_to, p);
#line 3658
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">RCPT TO REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___8);
    }
  } else
#line 3661
  if (passed___0 < (int )(*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3662
    tmp___8 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_rcpt_to, p);
#line 3664
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">RCPT TO REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___8);
    }
  }
  {
#line 3668
  passed___0 ++;
  }
#line 3669
  if (! (*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3670
    tmp___9 = escape_html_chars("DATA\r\n", p);
#line 3671
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">DATA START SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___9);
    }
  } else
#line 3674
  if (passed___0 < (int )(*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3675
    tmp___9 = escape_html_chars("DATA\r\n", p);
#line 3676
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">DATA START SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___9);
    }
  }
#line 3680
  if (! (*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3681
    tmp___10 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_data_start,
                                 p);
#line 3683
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">DATA START REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___10);
    }
  } else
#line 3686
  if (passed___0 < (int )(*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3687
    tmp___10 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_data_start,
                                 p);
#line 3689
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">DATA START REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___10);
    }
  }
  {
#line 3693
  passed___0 ++;
#line 3694
  tmp___11 = s_malloc(8193UL * sizeof(char ));
#line 3695
  buf = (char *)tmp___11;
#line 3696
  return_data(x, y, buf);
  }
#line 3697
  if (! (*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3698
    tmp___12 = escape_html_chars(buf, p);
#line 3699
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">DATA SENT:</font> &#9;<font color=\"black\"></td>\n<td><pre>%s</pre></font><br /></td></tr>\n",
            color, tmp___12);
    }
  } else
#line 3702
  if (passed___0 < (int )(*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3703
    tmp___12 = escape_html_chars(buf, p);
#line 3704
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">DATA SENT:</font> &#9;<font color=\"black\"></td>\n<td><pre>%s</pre></font><br /></td></tr>\n",
            color, tmp___12);
    }
  }
  {
#line 3708
  free((void *)buf);
  }
#line 3709
  if (! (*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3710
    tmp___13 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_data_end,
                                 p);
#line 3712
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">DATA REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___13);
    }
  } else
#line 3715
  if (passed___0 < (int )(*((*(hosts + x))->smtp_check + y))->passed) {
    {
#line 3716
    tmp___13 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_data_end,
                                 p);
#line 3718
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">DATA REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
            color, tmp___13);
    }
  }
  {
#line 3722
  passed___0 ++;
#line 3723
  tmp___14 = escape_html_chars("RSET\r\n", p);
#line 3724
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">RESET SENT:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
          color, tmp___14);
#line 3726
  tmp___15 = escape_html_chars((*((*(hosts + x))->smtp_check + y))->r_reset, p);
#line 3727
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\n<tr><td>&#9;<font color=\"%s\">RESET REPLY:</font> &#9;<font color=\"black\"></td>\n<td>%s</font><br /></td></tr>\n",
          color, tmp___15);
#line 3729
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"</table></font><br /><br /><br />\n\n");
  }
#line 3730
  return;
}
}
#line 3733 "smtprc_comb.c"
void print_html_header(FILE *fd , char *title ) 
{ 


  {
  {
#line 3737
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
#line 3738
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\t<html xmlns=\"http://www.w3.org/1999/xhtml\">");
#line 3739
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\t<head><LINK rel=\"stylesheet\" type=\"text/css\" href=\"default.css\">");
#line 3740
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\t\t<style type=\"text/css\">");
#line 3741
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\t\t\ttable {\n\t\t\t}\n\t\t\tth, td {\n\t\t\t}\n\t\t\th1, h2, h3, h4, h5, h6 {\n\t\t\t\ttext-transform:capitalize;\n\t\t\t\tfont-size: medium;");
#line 3742
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\t\t\t}\n\t\t\tA:link {\n\t\t\t\tcolor: darkblue;\n\t\t\t}\n\t\t\tA:visited {\n\t\t\t\tcolor: darkblue;\n\t\t\t}\n\t\t\tA:active {\n\t\t\t\tcolor: violet;");
#line 3743
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\t\t\t}\n\t\t\tbody {\n\t\t\t\tcolor: black;\n\t\t\t\tbackground-color: white;\n\t\t\t\tfont-family: Verdana, Arial, Helvetica, sans-serif;\n");
#line 3744
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\t\t\t\tfont-size: small;\n\t\t\t\tborder-width: 10px;\n\t\t\t\tborder-style: solid;\n\t\t\t\tborder-color: darkblue;\n\t\t\t\tpadding-top: 10px;\n");
#line 3745
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\t\t\t\tpadding-left: 32px;\n\t\t\t\tpadding-right: 10px;\n\t\t\t\tpadding-bottom: 10px;\n\t\t\t\tmargin: 10px;\n\t\t\t}\n\t\t\tblockquote {\n");
#line 3746
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\t\t\t\tpadding:10px;\n\t\t\t\tborder:red 5px solid;\n\t\t\t\tborder-style:inset outset inset;\n\t\t\t}\n\t\t</style>\n");
#line 3747
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"\t\t<title>%s</title>\n\t</head>\n\t<body>",
          title);
#line 3749
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"<Font size=\"5\">Smtp Relay Checker</font><br /><br /><br /><br />\n");
#line 3750
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"<table border=\"0\" cellpadding=\"5\" align=\"center\"><tr>\n");
#line 3751
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"<td><a href=\"%s\">Checks that Failed</a></td>\n",
          failed_file);
#line 3753
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"<td><a href=\"%s\">Checks that passed</a></td>\n",
          passed);
#line 3755
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"<td><a href=\"%s\">Checks that produced errors</a></td>\n",
          errord);
#line 3757
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"</tr></table>");
#line 3758
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"<br /><br />");
  }
#line 3759
  return;
}
}
#line 3762 "smtprc_comb.c"
void print_html_footer(FILE *fd , long smtp_open___0 ) 
{ 
  char buf[8193] ;

  {
#line 3766
  if (o.hours) {
    {
#line 3767
    snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%d Hours, %d Mins and %d Seconds",
             (int )o.hours, (int )o.mins, (int )o.seconds);
    }
  } else
#line 3770
  if (o.mins) {
    {
#line 3771
    snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%d Mins and %d Seconds",
             (int )o.mins, (int )o.seconds);
    }
  } else {
    {
#line 3774
    snprintf((char * __restrict  )(buf), 8192U, (char const   * __restrict  )"%d Seconds",
             (int )o.seconds);
    }
  }
  {
#line 3778
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"<br /><br /><center><br /><br /><hr width=\"30%%\">");
#line 3779
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"<font size=\"1\">Scanned %ld hosts in %s<br />%ld of which were running mail servers<br />Spencer Hardy - <a href=\"mailto:diceman@dircon.co.uk\">diceman@dircon.co.uk</a><br /><a href=\"http://www.moejo.co.uk/smtprc-website\">http://www.moejo.co.uk/smtprc-website</a></font><hr width=\"30%%\"></center></body>",
          o.no_hostnames, buf, smtp_open___0);
  }
#line 3781
  return;
}
}
#line 3784 "smtprc_comb.c"
void print_link(FILE *fd , char *link___0 , char *text , char *color ) 
{ 
  char buf[30] ;
  int x ;
  size_t___0 tmp ;

  {
  {
#line 3790
  x = 0;
  }
  {
#line 3791
  while (1) {
    while_continue: /* CIL Label */ ;
#line 3792
    if (x < 20) {
      {
#line 3793
      tmp = strlen((char const   *)text);
      }
#line 3794
      if (! ((size_t___0 )x < tmp)) {
#line 3795
        goto while_break;
      }
    } else {
#line 3798
      goto while_break;
    }
    {
#line 3800
    buf[x] = *(text + x);
#line 3801
    x ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 3803
  buf[x] = (char )'\000';
#line 3804
  fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"<a href=\"%s\"><font color=\"%s\">%s</font></a>",
          link___0, color, buf);
  }
#line 3806
  return;
}
}
#line 3809 "smtprc_comb.c"
char *escape_html_chars(char *string , char *s ) 
{ 
  char *p ;
  char buf[8193] ;
  int count ;
  size_t___0 tmp ;
  void *tmp___0 ;
  char *tmp___1 ;
  size_t___0 tmp___2 ;
  void *tmp___3 ;
  size_t___0 tmp___4 ;
  size_t___0 tmp___5 ;

  {
  {
#line 3822
  count = 0;
#line 3823
  memset((void *)(buf), 0, 8192U);
  }
#line 3824
  if ((unsigned int )string == (unsigned int )((void *)0)) {
    {
#line 3825
    tmp = strlen((char const   *)"NULL");
#line 3826
    tmp___0 = s_malloc((unsigned long )(tmp + 2U) * sizeof(char ));
#line 3827
    s = (char *)tmp___0;
#line 3828
    strncpy((char * __restrict  )s, (char const   * __restrict  )"NULL", 4U);
#line 3829
    *(s + 5) = (char )'\000';
    }
#line 3830
    return (s);
  }
  {
#line 3832
  p = string;
  }
  {
#line 3833
  while (1) {
    while_continue: /* CIL Label */ ;
#line 3834
    if ((int )*p == 60) {
      {
#line 3835
      strncat((char * __restrict  )(buf), (char const   * __restrict  )"&lt;", 8192U);
#line 3836
      count += 4;
      }
#line 3837
      goto __Cont;
    }
#line 3839
    if ((int )*p == 62) {
      {
#line 3840
      strncat((char * __restrict  )(buf), (char const   * __restrict  )"&gt;", 8192U);
#line 3841
      count += 4;
      }
#line 3842
      goto __Cont;
    }
    {
#line 3844
    buf[count] = *p;
#line 3845
    count ++;
    }
    __Cont: 
    {
#line 3847
    tmp___1 = p;
#line 3848
    p ++;
    }
#line 3849
    if (! ((int )*tmp___1 != 0)) {
#line 3850
      goto while_break;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 3853
  tmp___2 = strlen((char const   *)(buf));
#line 3854
  tmp___3 = s_malloc((unsigned long )(tmp___2 + 1U) * sizeof(char ));
#line 3855
  s = (char *)tmp___3;
#line 3856
  tmp___4 = strlen((char const   *)(buf));
#line 3857
  strncpy((char * __restrict  )s, (char const   * __restrict  )(buf), tmp___4);
#line 3858
  tmp___5 = strlen((char const   *)(buf));
#line 3859
  *(s + tmp___5) = (char )'\000';
  }
#line 3860
  return (s);
}
}
#line 3863
#pragma merger(0,"/tmp/cil-0nwjV0jq.i","-Wall,-g,-pthread")
#line 3864 "smtprc_comb.c"
void display_text(void) 
{ 


  {
#line 3868
  return;
}
}
#line 3871
#pragma merger(0,"/tmp/cil-mL4HxtOc.i","-Wall,-g,-pthread")
#line 3872 "smtprc_comb.c"
void validate_options(void) 
{ 
  FILE *fd ;
  DIR *dip ;
  char dir[8193] ;
  char buf[8193] ;
  int tmp ;
  size_t___0 tmp___0 ;
  void *tmp___1 ;
  size_t___0 tmp___2 ;
  size_t___0 tmp___3 ;
  int tmp___4 ;
  size_t___0 tmp___5 ;
  void *tmp___6 ;
  size_t___0 tmp___7 ;
  size_t___0 tmp___8 ;
  int tmp___9 ;
  size_t___0 tmp___10 ;
  void *tmp___11 ;
  size_t___0 tmp___12 ;
  size_t___0 tmp___13 ;
  int tmp___14 ;
  size_t___0 tmp___15 ;
  void *tmp___16 ;
  size_t___0 tmp___17 ;
  size_t___0 tmp___18 ;
  size_t___0 tmp___19 ;
  time_t tmp___20 ;

  {
#line 3901
  if (f.ip_range) {
#line 3902
    if (f.ip_list) {
      {
#line 3903
      fatal("You cannont supply both an ip list and ip range\n");
      }
    }
  }
#line 3906
  if (f.auto_config) {
#line 3907
    if (f.generate_config) {
      {
#line 3908
      fatal("You can only generate the auto config file from command line options. You cannot also specify the \'-j\' option.\n");
      }
    }
  }
#line 3911
  if (! f.ip_range) {
#line 3912
    if (! f.ip_list) {
      {
#line 3913
      fatal("You must supply either an ip range or a file that contains a list of ip addresses to scan.\n");
      }
    }
  }
#line 3916
  if ((int )o.number_of_threads < 5) {
    {
#line 3917
    fatal("You can only scan with a minumum of 5 threads... please increas the number of threads.\n");
    }
  }
#line 3919
  if (f.output_html) {
    {
#line 3920
    tmp = check_file_path(o.html_file, buf);
    }
#line 3921
    if (tmp == -1) {
      {
#line 3922
      fatal("Unable to open output HTML file %s", o.html_file);
      }
    }
    {
#line 3924
    tmp___0 = strlen((char const   *)(buf));
#line 3925
    tmp___1 = s_malloc((unsigned long )(tmp___0 + 1U) * sizeof(char ));
#line 3926
    o.html_path = (char *)tmp___1;
#line 3927
    tmp___2 = strlen((char const   *)(buf));
#line 3928
    strncpy((char * __restrict  )o.html_path, (char const   * __restrict  )(buf),
            tmp___2);
#line 3930
    tmp___3 = strlen((char const   *)(buf));
#line 3931
    *(o.html_path + tmp___3) = (char )'\000';
    }
  }
#line 3933
  if (f.output_text) {
    {
#line 3934
    tmp___4 = check_file_path(o.text_file, buf);
    }
#line 3935
    if (tmp___4 == -1) {
      {
#line 3936
      fatal("Unable to open output TEXT file %s", o.text_file);
      }
    }
    {
#line 3938
    tmp___5 = strlen((char const   *)(buf));
#line 3939
    tmp___6 = s_malloc((unsigned long )(tmp___5 + 1U) * sizeof(char ));
#line 3940
    o.text_path = (char *)tmp___6;
#line 3941
    tmp___7 = strlen((char const   *)(buf));
#line 3942
    strncpy((char * __restrict  )o.text_path, (char const   * __restrict  )(buf),
            tmp___7);
#line 3944
    tmp___8 = strlen((char const   *)(buf));
#line 3945
    *(o.text_path + tmp___8) = (char )'\000';
    }
  }
#line 3947
  if (f.output_machine) {
    {
#line 3948
    tmp___9 = check_file_path(o.machine_file, buf);
    }
#line 3949
    if (tmp___9 == -1) {
      {
#line 3950
      fatal("Unable to open output MACHINE file %s", o.machine_file);
      }
    }
    {
#line 3952
    tmp___10 = strlen((char const   *)(buf));
#line 3953
    tmp___11 = s_malloc((unsigned long )(tmp___10 + 1U) * sizeof(char ));
#line 3954
    o.machine_path = (char *)tmp___11;
#line 3955
    tmp___12 = strlen((char const   *)(buf));
#line 3956
    strncpy((char * __restrict  )o.machine_path, (char const   * __restrict  )(buf),
            tmp___12);
#line 3958
    tmp___13 = strlen((char const   *)(buf));
#line 3959
    *(o.machine_path + tmp___13) = (char )'\000';
    }
  }
#line 3961
  if (f.output_xml) {
    {
#line 3962
    tmp___14 = check_file_path(o.xml_file, buf);
    }
#line 3963
    if (tmp___14 == -1) {
      {
#line 3964
      fatal("Unable to open output XML file %s", o.xml_file);
      }
    }
    {
#line 3966
    tmp___15 = strlen((char const   *)(buf));
#line 3967
    tmp___16 = s_malloc((unsigned long )(tmp___15 + 1U) * sizeof(char ));
#line 3968
    o.xml_path = (char *)tmp___16;
#line 3969
    tmp___17 = strlen((char const   *)(buf));
#line 3970
    strncpy((char * __restrict  )o.xml_path, (char const   * __restrict  )(buf), tmp___17);
#line 3971
    tmp___18 = strlen((char const   *)(buf));
#line 3972
    *(o.xml_path + tmp___18) = (char )'\000';
    }
  }
#line 3974
  if (f.maildir) {
    {
#line 3975
    tmp___19 = strlen((char const   *)o.mailbox);
    }
#line 3976
    if ((int )*(o.mailbox + tmp___19) == 47) {
      {
#line 3977
      snprintf((char * __restrict  )(dir), 8192U, (char const   * __restrict  )"%snew",
               o.mailbox);
      }
    } else {
      {
#line 3980
      snprintf((char * __restrict  )(dir), 8192U, (char const   * __restrict  )"%s/new",
               o.mailbox);
      }
    }
    {
#line 3983
    dir[8192] = (char )'\000';
#line 3984
    dip = opendir((char const   *)(dir));
    }
#line 3985
    if ((unsigned int )dip == (unsigned int )((void *)0)) {
      {
#line 3986
      fatal("Unable to open maildir folder (%s)", dir);
      }
    }
  }
#line 3989
  if (f.mbox) {
    {
#line 3990
    fd = fopen((char const   * __restrict  )o.mailbox, (char const   * __restrict  )"r");
    }
#line 3991
    if ((unsigned int )fd == (unsigned int )((void *)0)) {
      {
#line 3992
      fatal("Unable to mbox (%s)\n", o.mailbox);
      }
    }
  }
#line 3995
  if (((int )f.mbox + (int )f.maildir) + (int )f.pop > 1) {
    {
#line 3996
    fatal("You can only supply one mail retreival format");
    }
  }
#line 3998
  if (! f.config_file) {
    {
#line 3999
    printf((char const   * __restrict  )"\nConfig file not specified, using the default location (%s)\n",
           o.config_file);
#line 4001
    f.config_file = (unsigned char)1;
    }
  }
#line 4003
  if (! f.email_template) {
    {
#line 4004
    printf((char const   * __restrict  )"\nEmail template not specified, using the default location (%s)\n",
           o.email_template);
#line 4006
    f.email_template = (unsigned char)1;
    }
  }
  {
#line 4008
  tmp___20 = time((time_t *)((void *)0));
#line 4009
  o.time = (unsigned int )tmp___20;
  }
#line 4010
  return;
}
}
#line 4013
#pragma merger(0,"/tmp/cil-SMk1onHu.i","-Wall,-g,-pthread")
#line 4014
int check_banner(int *sockfd , long cur_host , int rule___0 ) ;
#line 4015
int check_helo(int *sockfd , long cur_host , int rule___0 ) ;
#line 4016
int check_mail_from(int *sockfd , long cur_host , int rule___0 ) ;
#line 4017
int check_rcpt_to(int *sockfd , long cur_host , int rule___0 ) ;
#line 4018
int check_send_data_start(int *sockfd , long cur_host , int rule___0 ) ;
#line 4019
int check_send_data(int *sockfd , long cur_host , int rule___0 ) ;
#line 4020
int suspected_open_relay(long cur_host , int rule___0 ) ;
#line 4021
int reset_smtp(int *sockfd , long cur_host , int rule___0 ) ;
#line 4022
int quit_smtp(int *sockfd , long cur_host , int rule___0 ) ;
#line 4023 "smtprc_comb.c"
int relay_check(int *sockfd , long cur_host ) 
{ 
  int rule___0 ;
  int res ;
  int padding ;
  char checking[8193] ;

  {
  {
#line 4030
  rule___0 = 0;
#line 4031
  res = 0;
#line 4032
  padding = 60;
  }
#line 4033
  if (f.resolve_hostnames) {
#line 4034
    if ((*(hosts + cur_host))->resolved) {
#line 4035
      if (! f.display_only_ips) {
        {
#line 4036
        snprintf((char * __restrict  )(checking), (unsigned int )padding, (char const   * __restrict  )"Checking %s%200c",
                 (*(hosts + cur_host))->hostname, ' ');
        }
      } else {
        {
#line 4039
        snprintf((char * __restrict  )(checking), (unsigned int )padding, (char const   * __restrict  )"Checking %s%200c",
                 (*(hosts + cur_host))->ip_address, ' ');
        }
      }
    } else {
      {
#line 4043
      snprintf((char * __restrict  )(checking), (unsigned int )padding, (char const   * __restrict  )"Checking %s%200c",
               (*(hosts + cur_host))->ip_address, ' ');
      }
    }
  } else {
    {
#line 4047
    snprintf((char * __restrict  )(checking), (unsigned int )padding, (char const   * __restrict  )"Checking %s%200c",
             (*(hosts + cur_host))->ip_address, ' ');
    }
  }
  {
#line 4050
  rule___0 = 0;
  }
  {
#line 4051
  while (1) {
    while_continue: /* CIL Label */ ;
#line 4051
    if (! (rule___0 <= (int )o.no_rules)) {
#line 4051
      goto while_break;
    }
#line 4052
    if (! rule___0) {
      {
#line 4053
      res = check_banner(sockfd, cur_host, rule___0);
      }
#line 4054
      if (res == -1) {
        {
#line 4055
        strncat((char * __restrict  )(checking), (char const   * __restrict  )" !",
                8192U);
        }
#line 4057
        if (f.verbose) {
          {
#line 4058
          printf((char const   * __restrict  )"%s\n", checking);
          }
        }
#line 4060
        return (-1);
      } else
#line 4062
      if (res == 1) {
        {
#line 4063
        strncat((char * __restrict  )(checking), (char const   * __restrict  )" o",
                8192U);
        }
#line 4065
        goto RESET;
      }
      {
#line 4068
      res = check_helo(sockfd, cur_host, rule___0);
      }
#line 4069
      if (res == -1) {
        {
#line 4070
        strncat((char * __restrict  )(checking), (char const   * __restrict  )" !",
                8192U);
        }
#line 4072
        if (f.verbose) {
          {
#line 4073
          printf((char const   * __restrict  )"%s\n", checking);
          }
        }
#line 4075
        return (-1);
      } else
#line 4077
      if (res == 1) {
        {
#line 4078
        strncat((char * __restrict  )(checking), (char const   * __restrict  )" o",
                8192U);
        }
#line 4080
        goto RESET;
      }
    }
    {
#line 4084
    res = check_mail_from(sockfd, cur_host, rule___0);
    }
#line 4085
    if (res == -1) {
      {
#line 4086
      strncat((char * __restrict  )(checking), (char const   * __restrict  )" !",
              8192U);
      }
#line 4088
      if (f.verbose) {
        {
#line 4089
        printf((char const   * __restrict  )"%s\n", checking);
        }
      }
#line 4091
      return (-1);
    } else
#line 4093
    if (res == 1) {
      {
#line 4094
      strncat((char * __restrict  )(checking), (char const   * __restrict  )" o",
              8192U);
      }
#line 4096
      goto RESET;
    }
    {
#line 4099
    res = check_rcpt_to(sockfd, cur_host, rule___0);
    }
#line 4100
    if (res == -1) {
      {
#line 4101
      strncat((char * __restrict  )(checking), (char const   * __restrict  )" !",
              8192U);
      }
#line 4103
      if (f.verbose) {
        {
#line 4104
        printf((char const   * __restrict  )"%s\n", checking);
        }
      }
#line 4106
      return (-1);
    } else
#line 4108
    if (res == 1) {
      {
#line 4109
      strncat((char * __restrict  )(checking), (char const   * __restrict  )" o",
              8192U);
      }
#line 4111
      goto RESET;
    }
    {
#line 4114
    res = check_send_data_start(sockfd, cur_host, rule___0);
    }
#line 4115
    if (res == -1) {
      {
#line 4116
      strncat((char * __restrict  )(checking), (char const   * __restrict  )" !",
              8192U);
      }
#line 4118
      if (f.verbose) {
        {
#line 4119
        printf((char const   * __restrict  )"%s\n", checking);
        }
      }
#line 4121
      return (-1);
    } else
#line 4123
    if (res == 1) {
      {
#line 4124
      strncat((char * __restrict  )(checking), (char const   * __restrict  )" o",
              8192U);
      }
#line 4126
      goto RESET;
    }
    {
#line 4129
    res = check_send_data(sockfd, cur_host, rule___0);
    }
#line 4130
    if (res == -1) {
      {
#line 4131
      strncat((char * __restrict  )(checking), (char const   * __restrict  )" !",
              8192U);
      }
#line 4133
      if (f.verbose) {
        {
#line 4134
        printf((char const   * __restrict  )"%s\n", checking);
        }
      }
#line 4136
      return (-1);
    } else
#line 4138
    if (res == 1) {
      {
#line 4139
      strncat((char * __restrict  )(checking), (char const   * __restrict  )" o",
              8192U);
      }
#line 4141
      goto RESET;
    }
    {
#line 4144
    strncat((char * __restrict  )(checking), (char const   * __restrict  )" x", 8192U);
#line 4145
    (*((*(hosts + cur_host))->smtp_check + rule___0))->failed = (unsigned char)1;
#line 4146
    suspected_open_relay(cur_host, rule___0);
    }
    RESET: 
    {
#line 4148
    res = reset_smtp(sockfd, cur_host, rule___0);
    }
#line 4149
    if (res == -1) {
      {
#line 4150
      strncat((char * __restrict  )(checking), (char const   * __restrict  )" !",
              8192U);
#line 4152
      printf((char const   * __restrict  )"%s\n", checking);
      }
#line 4153
      return (-1);
    }
    {
#line 4155
    rule___0 ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 4157
  res = quit_smtp(sockfd, cur_host, (int )o.no_rules);
  }
#line 4158
  if (res == -1) {
    {
#line 4159
    strncat((char * __restrict  )(checking), (char const   * __restrict  )" !", (unsigned int )padding);
#line 4160
    printf((char const   * __restrict  )"%s\n", checking);
    }
#line 4161
    return (-1);
  }
  {
#line 4163
  printf((char const   * __restrict  )"%s\n", checking);
  }
#line 4164
  return (0);
}
}
#line 4167
#pragma merger(0,"/tmp/cil-AnIOkWli.i","-Wall,-g,-pthread")
#line 4168 "smtprc_comb.c"
void fatal(char *fmt  , ...) 
{ 
  va_list ap ;

  {
  {
#line 4172
  __builtin_va_start(ap, fmt);
#line 4173
  fflush(stdout);
#line 4174
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"ERROR: ");
#line 4175
  vfprintf((FILE * __restrict  )stderr, (char const   * __restrict  )fmt, ap);
#line 4176
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\nQUITTING!\n");
#line 4177
  __builtin_va_end(ap);
#line 4178
  exit(1);
  }
#line 4179
  return;
}
}
#line 4182 "smtprc_comb.c"
void error(char *fmt  , ...) 
{ 
  va_list ap ;

  {
  {
#line 4186
  __builtin_va_start(ap, fmt);
#line 4187
  fflush(stdout);
#line 4188
  vfprintf((FILE * __restrict  )stderr, (char const   * __restrict  )fmt, ap);
#line 4189
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n");
#line 4190
  __builtin_va_end(ap);
  }
#line 4191
  return;
}
}
#line 4194
#pragma merger(0,"/tmp/cil-d6rPGVlq.i","-Wall,-g,-pthread")
#line 4195 "smtprc_comb.c"
void display_machine(void) 
{ 


  {
#line 4199
  return;
}
}
#line 4202
#pragma merger(0,"/tmp/cil-EuTtXGmx.i","-Wall,-g,-pthread")
#line 4203 "smtprc_comb.c"
void display_xml(void) 
{ 


  {
#line 4207
  return;
}
}
#line 4212
#pragma merger(0,"/tmp/cil-SKHJ9eww.i","-Wall,-g,-pthread")
#line 4213
extern char *optarg ;
#line 4214
extern int getopt(int ___argc , char **___argv , char const   *__shortopts )  __attribute__((__nothrow__)) ;
#line 4216
void usage(char *pname ) ;
#line 4219 "smtprc_comb.c"
void parse_args(int argc , char **argv ) 
{ 
  char c ;
  size_t___0 tmp ;
  void *tmp___0 ;
  size_t___0 tmp___1 ;
  size_t___0 tmp___2 ;
  size_t___0 tmp___3 ;
  void *tmp___4 ;
  size_t___0 tmp___5 ;
  size_t___0 tmp___6 ;
  size_t___0 tmp___7 ;
  void *tmp___8 ;
  size_t___0 tmp___9 ;
  size_t___0 tmp___10 ;
  size_t___0 tmp___11 ;
  void *tmp___12 ;
  size_t___0 tmp___13 ;
  size_t___0 tmp___14 ;
  size_t___0 tmp___15 ;
  void *tmp___16 ;
  size_t___0 tmp___17 ;
  size_t___0 tmp___18 ;
  size_t___0 tmp___19 ;
  void *tmp___20 ;
  size_t___0 tmp___21 ;
  size_t___0 tmp___22 ;
  size_t___0 tmp___23 ;
  void *tmp___24 ;
  size_t___0 tmp___25 ;
  size_t___0 tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  size_t___0 tmp___29 ;
  void *tmp___30 ;
  size_t___0 tmp___31 ;
  size_t___0 tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  size_t___0 tmp___35 ;
  void *tmp___36 ;
  size_t___0 tmp___37 ;
  size_t___0 tmp___38 ;
  size_t___0 tmp___39 ;
  void *tmp___40 ;
  size_t___0 tmp___41 ;
  size_t___0 tmp___42 ;
  size_t___0 tmp___43 ;
  void *tmp___44 ;
  size_t___0 tmp___45 ;
  size_t___0 tmp___46 ;
  size_t___0 tmp___47 ;
  void *tmp___48 ;
  size_t___0 tmp___49 ;
  size_t___0 tmp___50 ;
  size_t___0 tmp___51 ;
  void *tmp___52 ;
  size_t___0 tmp___53 ;
  size_t___0 tmp___54 ;
  size_t___0 tmp___55 ;
  void *tmp___56 ;
  size_t___0 tmp___57 ;
  size_t___0 tmp___58 ;
  int tmp___59 ;

  {
  {
#line 4284
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 4285
    tmp___59 = getopt(argc, argv, (char const   *)"ab:c:de:f:g:hi:j:k:l:m:no:p:qr:s:tu:vw:x:y:");
#line 4286
    c = (char )tmp___59;
    }
#line 4287
    if (! ((int )c != -1)) {
#line 4288
      goto while_break;
    }
    {
#line 4291
    if ((int )c == 97) {
#line 4291
      goto case_97;
    }
#line 4294
    if ((int )c == 98) {
#line 4294
      goto case_98;
    }
#line 4305
    if ((int )c == 99) {
#line 4305
      goto case_99;
    }
#line 4319
    if ((int )c == 100) {
#line 4319
      goto case_100;
    }
#line 4322
    if ((int )c == 101) {
#line 4322
      goto case_101;
    }
#line 4333
    if ((int )c == 102) {
#line 4333
      goto case_102;
    }
#line 4345
    if ((int )c == 104) {
#line 4345
      goto case_104;
    }
#line 4348
    if ((int )c == 105) {
#line 4348
      goto case_105;
    }
#line 4358
    if ((int )c == 106) {
#line 4358
      goto case_106;
    }
#line 4369
    if ((int )c == 107) {
#line 4369
      goto case_107;
    }
#line 4380
    if ((int )c == 108) {
#line 4380
      goto case_108;
    }
#line 4384
    if ((int )c == 109) {
#line 4384
      goto case_109;
    }
#line 4388
    if ((int )c == 110) {
#line 4388
      goto case_110;
    }
#line 4391
    if ((int )c == 111) {
#line 4391
      goto case_111;
    }
#line 4402
    if ((int )c == 112) {
#line 4402
      goto case_112;
    }
#line 4406
    if ((int )c == 113) {
#line 4406
      goto case_113;
    }
#line 4409
    if ((int )c == 114) {
#line 4409
      goto case_114;
    }
#line 4413
    if ((int )c == 115) {
#line 4413
      goto case_115;
    }
#line 4424
    if ((int )c == 117) {
#line 4424
      goto case_117;
    }
#line 4435
    if ((int )c == 118) {
#line 4435
      goto case_118;
    }
#line 4438
    if ((int )c == 119) {
#line 4438
      goto case_119;
    }
#line 4449
    if ((int )c == 120) {
#line 4449
      goto case_120;
    }
#line 4460
    if ((int )c == 121) {
#line 4460
      goto case_121;
    }
#line 4474
    if ((int )c == 122) {
#line 4474
      goto case_122;
    }
#line 4485
    if ((int )c == 63) {
#line 4485
      goto case_63;
    }
#line 4487
    goto switch_default;
    case_97: /* CIL Label */ 
    {
#line 4292
    f.display_all = (unsigned char)1;
    }
#line 4293
    goto switch_break;
    case_98: /* CIL Label */ 
    {
#line 4295
    f.send_email = (unsigned char)1;
#line 4296
    tmp = strlen((char const   *)optarg);
#line 4297
    tmp___0 = s_malloc((unsigned long )(tmp + 1U) * sizeof(char ));
#line 4298
    o.email_address = (char *)tmp___0;
#line 4299
    tmp___1 = strlen((char const   *)optarg);
#line 4300
    strncpy((char * __restrict  )o.email_address, (char const   * __restrict  )optarg,
            tmp___1);
#line 4302
    tmp___2 = strlen((char const   *)optarg);
#line 4303
    *(o.email_address + tmp___2) = (char )'\000';
    }
#line 4304
    goto switch_break;
    case_99: /* CIL Label */ 
    {
#line 4306
    f.config_file = (unsigned char)1;
#line 4307
    tmp___3 = strlen((char const   *)(optarg + 1));
#line 4308
    tmp___4 = realloc((void *)o.config_file, (size_t___0 )((unsigned long )tmp___3 * sizeof(char )));
#line 4309
    o.config_file = (char *)tmp___4;
    }
#line 4310
    if ((unsigned int )o.config_file == (unsigned int )((void *)0)) {
      {
#line 4311
      fatal("Realloc Error\n");
      }
    }
    {
#line 4313
    tmp___5 = strlen((char const   *)optarg);
#line 4314
    strncpy((char * __restrict  )o.config_file, (char const   * __restrict  )optarg,
            tmp___5);
#line 4316
    tmp___6 = strlen((char const   *)optarg);
#line 4317
    *(o.config_file + tmp___6) = (char )'\000';
    }
#line 4318
    goto switch_break;
    case_100: /* CIL Label */ 
    {
#line 4320
    f.debug = (unsigned char)1;
    }
#line 4321
    goto switch_break;
    case_101: /* CIL Label */ 
    {
#line 4323
    f.check_mailbox = (unsigned char)1;
#line 4324
    f.mbox = (unsigned char)1;
#line 4325
    tmp___7 = strlen((char const   *)optarg);
#line 4326
    tmp___8 = s_malloc((unsigned long )(tmp___7 + 1U) * sizeof(char ));
#line 4327
    o.mailbox = (char *)tmp___8;
#line 4328
    tmp___9 = strlen((char const   *)optarg);
#line 4329
    strncpy((char * __restrict  )o.mailbox, (char const   * __restrict  )optarg, tmp___9);
#line 4330
    tmp___10 = strlen((char const   *)optarg);
#line 4331
    *(o.mailbox + tmp___10) = (char )'\000';
    }
#line 4332
    goto switch_break;
    case_102: /* CIL Label */ 
    {
#line 4334
    not_implemented();
#line 4335
    f.output_text = (unsigned char)1;
#line 4336
    tmp___11 = strlen((char const   *)optarg);
#line 4337
    tmp___12 = s_malloc((unsigned long )(tmp___11 + 1U) * sizeof(char ));
#line 4338
    o.text_file = (char *)tmp___12;
#line 4339
    tmp___13 = strlen((char const   *)optarg);
#line 4340
    strncpy((char * __restrict  )o.text_file, (char const   * __restrict  )optarg,
            tmp___13);
#line 4342
    tmp___14 = strlen((char const   *)optarg);
#line 4343
    *(o.text_file + tmp___14) = (char )'\000';
    }
#line 4344
    goto switch_break;
    case_104: /* CIL Label */ 
    {
#line 4346
    usage((char *)*(argv + 0));
    }
#line 4347
    goto switch_break;
    case_105: /* CIL Label */ 
    {
#line 4349
    f.ip_list = (unsigned char)1;
#line 4350
    tmp___15 = strlen((char const   *)optarg);
#line 4351
    tmp___16 = s_malloc((unsigned long )(tmp___15 + 1U) * sizeof(char ));
#line 4352
    o.ip_list = (char *)tmp___16;
#line 4353
    tmp___17 = strlen((char const   *)optarg);
#line 4354
    strncpy((char * __restrict  )o.ip_list, (char const   * __restrict  )optarg, tmp___17);
#line 4355
    tmp___18 = strlen((char const   *)optarg);
#line 4356
    *(o.ip_list + tmp___18) = (char )'\000';
    }
#line 4357
    goto switch_break;
    case_106: /* CIL Label */ 
    {
#line 4359
    f.auto_config = (unsigned char)1;
#line 4360
    tmp___19 = strlen((char const   *)optarg);
#line 4361
    tmp___20 = s_malloc((unsigned long )(tmp___19 + 1U) * sizeof(char ));
#line 4362
    o.auto_config_file = (char *)tmp___20;
#line 4363
    tmp___21 = strlen((char const   *)optarg);
#line 4364
    strncpy((char * __restrict  )o.auto_config_file, (char const   * __restrict  )optarg,
            tmp___21);
#line 4366
    tmp___22 = strlen((char const   *)optarg);
#line 4367
    *(o.auto_config_file + tmp___22) = (char )'\000';
    }
#line 4368
    goto switch_break;
    case_107: /* CIL Label */ 
    {
#line 4370
    f.generate_config = (unsigned char)1;
#line 4371
    tmp___23 = strlen((char const   *)optarg);
#line 4372
    tmp___24 = s_malloc((unsigned long )(tmp___23 + 1U) * sizeof(char ));
#line 4373
    o.generate_file = (char *)tmp___24;
#line 4374
    tmp___25 = strlen((char const   *)optarg);
#line 4375
    strncpy((char * __restrict  )o.generate_file, (char const   * __restrict  )optarg,
            tmp___25);
#line 4377
    tmp___26 = strlen((char const   *)optarg);
#line 4378
    *(o.generate_file + tmp___26) = (char )'\000';
    }
#line 4379
    goto switch_break;
    case_108: /* CIL Label */ 
    {
#line 4381
    tmp___27 = atoi((char const   *)optarg);
#line 4382
    o.c_timeout = (unsigned short )tmp___27;
    }
#line 4383
    goto switch_break;
    case_109: /* CIL Label */ 
    {
#line 4385
    tmp___28 = atoi((char const   *)optarg);
#line 4386
    o.m_timeout = (unsigned short )tmp___28;
    }
#line 4387
    goto switch_break;
    case_110: /* CIL Label */ 
    {
#line 4389
    f.resolve_hostnames = (unsigned char)1;
    }
#line 4390
    goto switch_break;
    case_111: /* CIL Label */ 
    {
#line 4392
    f.output_machine = (unsigned char)1;
#line 4393
    tmp___29 = strlen((char const   *)optarg);
#line 4394
    tmp___30 = s_malloc((unsigned long )(tmp___29 + 1U) * sizeof(char ));
#line 4395
    o.machine_file = (char *)tmp___30;
#line 4396
    tmp___31 = strlen((char const   *)optarg);
#line 4397
    strncpy((char * __restrict  )o.machine_file, (char const   * __restrict  )optarg,
            tmp___31);
#line 4399
    tmp___32 = strlen((char const   *)optarg);
#line 4400
    *(o.machine_file + tmp___32) = (char )'\000';
    }
#line 4401
    goto switch_break;
    case_112: /* CIL Label */ 
    {
#line 4403
    tmp___33 = atoi((char const   *)optarg);
#line 4404
    o.number_of_threads = (unsigned short )tmp___33;
    }
#line 4405
    goto switch_break;
    case_113: /* CIL Label */ 
    {
#line 4407
    f.display_only_ips = (unsigned char)1;
    }
#line 4408
    goto switch_break;
    case_114: /* CIL Label */ 
    {
#line 4410
    tmp___34 = atoi((char const   *)optarg);
#line 4411
    o.r_timeout = (unsigned short )tmp___34;
    }
#line 4412
    goto switch_break;
    case_115: /* CIL Label */ 
    {
#line 4414
    f.ip_range = (unsigned char)1;
#line 4415
    tmp___35 = strlen((char const   *)optarg);
#line 4416
    tmp___36 = s_malloc((unsigned long )(tmp___35 + 1U) * sizeof(char ));
#line 4417
    o.ip_range = (char *)tmp___36;
#line 4418
    tmp___37 = strlen((char const   *)optarg);
#line 4419
    strncpy((char * __restrict  )o.ip_range, (char const   * __restrict  )optarg,
            tmp___37);
#line 4421
    tmp___38 = strlen((char const   *)optarg);
#line 4422
    *(o.ip_range + tmp___38) = (char )'\000';
    }
#line 4423
    goto switch_break;
    case_117: /* CIL Label */ 
    {
#line 4425
    f.check_mailbox = (unsigned char)1;
#line 4426
    f.maildir = (unsigned char)1;
#line 4427
    tmp___39 = strlen((char const   *)optarg);
#line 4428
    tmp___40 = s_malloc((unsigned long )(tmp___39 + 1U) * sizeof(char ));
#line 4429
    o.mailbox = (char *)tmp___40;
#line 4430
    tmp___41 = strlen((char const   *)optarg);
#line 4431
    strncpy((char * __restrict  )o.mailbox, (char const   * __restrict  )optarg, tmp___41);
#line 4432
    tmp___42 = strlen((char const   *)optarg);
#line 4433
    *(o.mailbox + tmp___42) = (char )'\000';
    }
#line 4434
    goto switch_break;
    case_118: /* CIL Label */ 
    {
#line 4436
    f.verbose = (unsigned char )((int )f.verbose + 1);
    }
#line 4437
    goto switch_break;
    case_119: /* CIL Label */ 
    {
#line 4439
    f.output_html = (unsigned char)1;
#line 4440
    tmp___43 = strlen((char const   *)optarg);
#line 4441
    tmp___44 = s_malloc((unsigned long )(tmp___43 + 1U) * sizeof(char ));
#line 4442
    o.html_file = (char *)tmp___44;
#line 4443
    tmp___45 = strlen((char const   *)optarg);
#line 4444
    strncpy((char * __restrict  )o.html_file, (char const   * __restrict  )optarg,
            tmp___45);
#line 4446
    tmp___46 = strlen((char const   *)optarg);
#line 4447
    *(o.html_file + tmp___46) = (char )'\000';
    }
#line 4448
    goto switch_break;
    case_120: /* CIL Label */ 
    {
#line 4450
    not_implemented();
#line 4451
    f.output_xml = (unsigned char)1;
#line 4452
    tmp___47 = strlen((char const   *)optarg);
#line 4453
    tmp___48 = s_malloc((unsigned long )(tmp___47 + 1U) * sizeof(char ));
#line 4454
    o.xml_file = (char *)tmp___48;
#line 4455
    tmp___49 = strlen((char const   *)optarg);
#line 4456
    strncpy((char * __restrict  )o.xml_file, (char const   * __restrict  )optarg,
            tmp___49);
#line 4458
    tmp___50 = strlen((char const   *)optarg);
#line 4459
    *(o.xml_file + tmp___50) = (char )'\000';
    }
    case_121: /* CIL Label */ 
    {
#line 4461
    f.email_template = (unsigned char)1;
#line 4462
    tmp___51 = strlen((char const   *)(optarg + 1));
#line 4463
    tmp___52 = realloc((void *)o.email_template, (size_t___0 )((unsigned long )tmp___51 * sizeof(char )));
#line 4464
    o.email_template = (char *)tmp___52;
    }
#line 4465
    if ((unsigned int )o.email_template == (unsigned int )((void *)0)) {
      {
#line 4466
      fatal("Realloc Error\n");
      }
    }
    {
#line 4468
    tmp___53 = strlen((char const   *)optarg);
#line 4469
    strncpy((char * __restrict  )o.email_template, (char const   * __restrict  )optarg,
            tmp___53);
#line 4471
    tmp___54 = strlen((char const   *)optarg);
#line 4472
    *(o.email_template + tmp___54) = (char )'\000';
    }
#line 4473
    goto switch_break;
    case_122: /* CIL Label */ 
    {
#line 4475
    not_implemented();
#line 4476
    f.output_machine = (unsigned char)1;
#line 4477
    tmp___55 = strlen((char const   *)optarg);
#line 4478
    tmp___56 = s_malloc((unsigned long )(tmp___55 + 1U) * sizeof(char ));
#line 4479
    o.machine_file = (char *)tmp___56;
#line 4480
    tmp___57 = strlen((char const   *)optarg);
#line 4481
    strncpy((char * __restrict  )o.machine_file, (char const   * __restrict  )optarg,
            tmp___57);
#line 4483
    tmp___58 = strlen((char const   *)optarg);
#line 4484
    *(o.machine_file + tmp___58) = (char )'\000';
    }
    case_63: /* CIL Label */ 
    {
#line 4486
    usage((char *)*(argv + 0));
    }
    switch_default: /* CIL Label */ 
    {
#line 4488
    usage((char *)*(argv + 0));
    }
    switch_break: /* CIL Label */ ;
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 4491
  return;
}
}
#line 4494 "smtprc_comb.c"
int get_domain(void) 
{ 
  char *p ;
  char *t ;
  size_t___0 tmp ;
  char *email ;
  unsigned int __lengthofemail ;
  void *tmp___0 ;
  int flag ;
  unsigned short const   **tmp___1 ;
  unsigned short const   **tmp___2 ;
  unsigned short const   **tmp___3 ;
  char *tmp___4 ;
  size_t___0 tmp___5 ;
  void *tmp___6 ;
  size_t___0 tmp___7 ;
  size_t___0 tmp___8 ;
  size_t___0 tmp___9 ;
  void *tmp___10 ;
  size_t___0 tmp___11 ;
  size_t___0 tmp___12 ;

  {
  {
#line 4516
  tmp = strlen((char const   *)o.email_address);
#line 4517
  __lengthofemail = tmp + 1U;
#line 4518
  tmp___0 = __builtin_alloca(sizeof(*email) * (unsigned long )__lengthofemail);
#line 4519
  email = (char *)tmp___0;
#line 4520
  flag = 0;
#line 4521
  strncpy((char * __restrict  )email, (char const   * __restrict  )o.email_address,
          (size_t___0 )(sizeof(*email) * (unsigned long )__lengthofemail));
#line 4523
  p = o.email_address;
  }
  {
#line 4524
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 4525
    tmp___4 = p;
#line 4526
    p ++;
    }
#line 4527
    if (! *tmp___4) {
#line 4528
      goto while_break;
    }
#line 4530
    if ((int )*p == 0) {
#line 4531
      goto _L;
    } else {
      {
#line 4533
      tmp___3 = __ctype_b_loc();
      }
#line 4534
      if ((int const   )*(*tmp___3 + (int )*p) & 8) {
#line 4535
        goto _L;
      } else
#line 4537
      if ((int )*p == 46) {
#line 4538
        goto _L;
      } else
#line 4540
      if ((int )*p == 45) {
#line 4541
        goto _L;
      } else
#line 4543
      if ((int )*p == 95) {
#line 4544
        goto _L;
      } else
#line 4546
      if ((int )*p == 64) {
        _L: 
#line 4548
        if ((int )*p == 64) {
          {
#line 4549
          flag ++;
#line 4550
          t = p;
#line 4551
          tmp___1 = __ctype_b_loc();
#line 4552
          t ++;
          }
#line 4553
          if (! ((int const   )*(*tmp___1 + (int )*t) & 8)) {
            {
#line 4554
            fatal("The email address you have supplied %s is incorrect!!\n", email);
            }
          }
          {
#line 4557
          t = p;
#line 4558
          tmp___2 = __ctype_b_loc();
#line 4559
          t --;
          }
#line 4560
          if (! ((int const   )*(*tmp___2 + (int )*t) & 8)) {
            {
#line 4561
            fatal("The email address you have supplied %s is incorrect!!\n", email);
            }
          }
          {
#line 4564
          t = p;
#line 4565
          *t = (char )'\000';
#line 4566
          t ++;
#line 4567
          p ++;
          }
        }
      } else {
        {
#line 4570
        fatal("The email address you have supplied %s is incorrect!!\n", email);
        }
      }
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 4579
  if (! flag) {
    {
#line 4580
    fatal("The email address you have supplied %s is incorrect!!\n", email);
    }
  } else
#line 4582
  if (flag > 2) {
    {
#line 4583
    fatal("The email address you have supplied %s is incorrect!!\n", email);
    }
  }
  {
#line 4586
  tmp___5 = strlen((char const   *)t);
#line 4587
  tmp___6 = s_malloc((unsigned long )(tmp___5 + 1U) * sizeof(char ));
#line 4588
  o.domain = (char *)tmp___6;
#line 4589
  tmp___7 = strlen((char const   *)t);
#line 4590
  strncpy((char * __restrict  )o.domain, (char const   * __restrict  )t, tmp___7);
#line 4591
  tmp___8 = strlen((char const   *)t);
#line 4592
  *(o.domain + tmp___8) = (char )'\000';
#line 4593
  tmp___9 = strlen((char const   *)o.email_address);
#line 4594
  tmp___10 = s_malloc((unsigned long )(tmp___9 + 1U) * sizeof(char ));
#line 4595
  o.name = (char *)tmp___10;
#line 4596
  tmp___11 = strlen((char const   *)o.email_address);
#line 4597
  strncpy((char * __restrict  )o.name, (char const   * __restrict  )o.email_address,
          tmp___11);
#line 4599
  tmp___12 = strlen((char const   *)o.email_address);
#line 4600
  *(o.name + tmp___12) = (char )'\000';
#line 4601
  debug("name: %s domain: %s\n", o.name, o.domain);
  }
#line 4602
  return (0);
}
}
#line 4605
#pragma merger(0,"/tmp/cil-pi4v49pL.i","-Wall,-g,-pthread")
#line 4606
extern ssize_t send(int __fd , void const   *__buf , size_t___0 __n , int __flags ) ;
#line 4607 "smtprc_comb.c"
int write_smtp(int *sockfd , char *string , long cur_host ) 
{ 
  int size ;
  size_t___0 tmp ;
  int ret ;
  int *tmp___0 ;

  {
  {
#line 4614
  tmp = strlen((char const   *)string);
#line 4615
  size = (int )tmp;
#line 4616
  ret = 0;
#line 4617
  ret = send(*sockfd, (void const   *)string, (unsigned int )size, 16384);
  }
#line 4618
  if (ret == -1) {
    {
#line 4619
    tmp___0 = __errno_location();
    }
#line 4620
    if (*tmp___0 == 16384) {
      {
#line 4621
      (*(hosts + cur_host))->fatal_error = (unsigned char)1;
      }
    } else
#line 4623
    if (ret != size) {
      {
#line 4624
      (*(hosts + cur_host))->fatal_error = (unsigned char)1;
      }
    } else {
      {
#line 4626
      (*(hosts + cur_host))->fatal_error = (unsigned char)2;
      }
    }
#line 4629
    return (-1);
  }
#line 4631
  return (0);
}
}
#line 4634 "smtprc_comb.c"
int read_smtp(int *sockfd , char *dest , long cur_host ) 
{ 
  int ret ;

  {
  {
#line 4638
  ret = read_timeo(*sockfd, dest, 8192, (int )o.r_timeout);
  }
#line 4639
  if (ret == -1) {
    {
#line 4640
    (*(hosts + cur_host))->fatal_error = (unsigned char)3;
    }
#line 4641
    return (-1);
  }
#line 4643
  if (! ret) {
    {
#line 4644
    (*(hosts + cur_host))->fatal_error = (unsigned char)4;
    }
#line 4645
    return (-1);
  }
#line 4647
  return (0);
}
}
#line 4650 "smtprc_comb.c"
int check_banner(int *sockfd , long cur_host , int rule___0 ) 
{ 
  char *buf ;
  int res ;
  void *tmp ;
  size_t___0 tmp___0 ;
  void *tmp___1 ;
  size_t___0 tmp___2 ;
  size_t___0 tmp___3 ;
  size_t___0 tmp___4 ;
  void *tmp___5 ;
  size_t___0 tmp___6 ;
  size_t___0 tmp___7 ;
  size_t___0 tmp___8 ;
  void *tmp___9 ;
  size_t___0 tmp___10 ;
  size_t___0 tmp___11 ;
  size_t___0 tmp___12 ;
  void *tmp___13 ;
  size_t___0 tmp___14 ;
  size_t___0 tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;

  {
  {
#line 4675
  res = 0;
#line 4676
  tmp = s_zmalloc((int )(8193UL * sizeof(char )));
#line 4677
  buf = (char *)tmp;
#line 4678
  res = read_smtp(sockfd, buf, cur_host);
  }
#line 4679
  if (res == -1) {
    {
#line 4680
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4681
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)1;
#line 4682
    free((void *)buf);
    }
#line 4683
    return (-1);
  }
  {
#line 4685
  tmp___18 = strncmp((char const   *)buf, (char const   *)"220", 3U);
  }
#line 4686
  if (tmp___18) {
    {
#line 4687
    tmp___17 = strncmp((char const   *)buf, (char const   *)"421", 3U);
    }
#line 4688
    if (tmp___17) {
      {
#line 4689
      tmp___16 = strncmp((char const   *)buf, (char const   *)"521", 3U);
      }
#line 4690
      if (tmp___16) {
        {
#line 4691
        (*(hosts + cur_host))->fatal_error = (unsigned char)6;
#line 4692
        (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4693
        (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)2;
#line 4694
        tmp___12 = strlen((char const   *)buf);
#line 4695
        tmp___13 = s_malloc((unsigned long )(tmp___12 + 1U) * sizeof(char ));
#line 4696
        (*((*(hosts + cur_host))->smtp_check + rule___0))->r_banner = (char *)tmp___13;
#line 4697
        tmp___14 = strlen((char const   *)buf);
#line 4698
        strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_banner,
                (char const   * __restrict  )buf, tmp___14);
#line 4700
        tmp___15 = strlen((char const   *)buf);
#line 4701
        *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_banner + tmp___15) = (char )'\000';
#line 4702
        free((void *)buf);
        }
#line 4703
        return (-1);
      } else {
        {
#line 4705
        (*(hosts + cur_host))->fatal_error = (unsigned char)5;
#line 4706
        (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4707
        (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)2;
#line 4708
        tmp___8 = strlen((char const   *)buf);
#line 4709
        tmp___9 = s_malloc((unsigned long )(tmp___8 + 1U) * sizeof(char ));
#line 4710
        (*((*(hosts + cur_host))->smtp_check + rule___0))->r_banner = (char *)tmp___9;
#line 4711
        tmp___10 = strlen((char const   *)buf);
#line 4712
        strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_banner,
                (char const   * __restrict  )buf, tmp___10);
#line 4714
        tmp___11 = strlen((char const   *)buf);
#line 4715
        *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_banner + tmp___11) = (char )'\000';
#line 4716
        free((void *)buf);
        }
#line 4717
        return (-1);
      }
    } else {
      {
#line 4720
      (*(hosts + cur_host))->fatal_error = (unsigned char)5;
#line 4721
      (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4722
      (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)2;
#line 4723
      tmp___4 = strlen((char const   *)buf);
#line 4724
      tmp___5 = s_malloc((unsigned long )(tmp___4 + 1U) * sizeof(char ));
#line 4725
      (*((*(hosts + cur_host))->smtp_check + rule___0))->r_banner = (char *)tmp___5;
#line 4726
      tmp___6 = strlen((char const   *)buf);
#line 4727
      strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_banner,
              (char const   * __restrict  )buf, tmp___6);
#line 4729
      tmp___7 = strlen((char const   *)buf);
#line 4730
      *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_banner + tmp___7) = (char )'\000';
#line 4731
      free((void *)buf);
      }
#line 4732
      return (-1);
    }
  } else {
    {
#line 4735
    tmp___0 = strlen((char const   *)buf);
#line 4736
    tmp___1 = s_malloc((unsigned long )(tmp___0 + 1U) * sizeof(char ));
#line 4737
    (*((*(hosts + cur_host))->smtp_check + rule___0))->r_banner = (char *)tmp___1;
#line 4738
    tmp___2 = strlen((char const   *)buf);
#line 4739
    strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_banner,
            (char const   * __restrict  )buf, tmp___2);
#line 4741
    tmp___3 = strlen((char const   *)buf);
#line 4742
    *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_banner + tmp___3) = (char )'\000';
#line 4743
    free((void *)buf);
    }
#line 4744
    return (0);
  }
  {
#line 4746
  free((void *)buf);
  }
#line 4747
  return (-1);
}
}
#line 4750 "smtprc_comb.c"
int check_helo(int *sockfd , long cur_host , int rule___0 ) 
{ 
  char *buf ;
  int res ;
  void *tmp ;
  size_t___0 tmp___0 ;
  void *tmp___1 ;
  size_t___0 tmp___2 ;
  size_t___0 tmp___3 ;
  int tmp___4 ;
  size_t___0 tmp___5 ;
  void *tmp___6 ;
  size_t___0 tmp___7 ;
  size_t___0 tmp___8 ;
  size_t___0 tmp___9 ;
  void *tmp___10 ;
  size_t___0 tmp___11 ;
  size_t___0 tmp___12 ;
  size_t___0 tmp___13 ;
  void *tmp___14 ;
  size_t___0 tmp___15 ;
  size_t___0 tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;

  {
  {
#line 4775
  res = 0;
#line 4776
  tmp = s_zmalloc((int )(8193UL * sizeof(char )));
#line 4777
  buf = (char *)tmp;
#line 4778
  swap_rule(buf, (char const   *)(*(rules + rule___0))->helo, (int )cur_host);
#line 4779
  convert_rule(buf, 1);
#line 4780
  tmp___0 = strlen((char const   *)buf);
#line 4781
  tmp___1 = s_malloc((unsigned long )(tmp___0 + 1U) * sizeof(char ));
#line 4782
  (*((*(hosts + cur_host))->smtp_check + rule___0))->helo = (char *)tmp___1;
#line 4783
  tmp___2 = strlen((char const   *)buf);
#line 4784
  strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->helo,
          (char const   * __restrict  )buf, tmp___2);
#line 4786
  tmp___3 = strlen((char const   *)buf);
#line 4787
  *((*((*(hosts + cur_host))->smtp_check + rule___0))->helo + tmp___3) = (char )'\000';
#line 4788
  tmp___4 = write_smtp(sockfd, buf, cur_host);
  }
#line 4789
  if (tmp___4 == -1) {
    {
#line 4790
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4791
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)3;
#line 4792
    free((void *)buf);
    }
#line 4793
    return (-1);
  }
  {
#line 4795
  memset((void *)buf, 0, 8192U);
#line 4796
  res = read_smtp(sockfd, buf, cur_host);
  }
#line 4797
  if (res == -1) {
    {
#line 4798
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4799
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)4;
#line 4800
    free((void *)buf);
    }
#line 4801
    return (-1);
  }
  {
#line 4803
  tmp___18 = strncmp((char const   *)buf, (char const   *)"250", 3U);
  }
#line 4804
  if (tmp___18) {
    {
#line 4805
    tmp___17 = strncmp((char const   *)buf, (char const   *)"421", 3U);
    }
#line 4806
    if (tmp___17) {
      {
#line 4807
      (*(hosts + cur_host))->fatal_error = (unsigned char)6;
#line 4808
      (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4809
      (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)5;
#line 4810
      tmp___13 = strlen((char const   *)buf);
#line 4811
      tmp___14 = s_malloc((unsigned long )(tmp___13 + 1U) * sizeof(char ));
#line 4812
      (*((*(hosts + cur_host))->smtp_check + rule___0))->r_helo = (char *)tmp___14;
#line 4813
      tmp___15 = strlen((char const   *)buf);
#line 4814
      strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_helo,
              (char const   * __restrict  )buf, tmp___15);
#line 4816
      tmp___16 = strlen((char const   *)buf);
#line 4817
      *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_helo + tmp___16) = (char )'\000';
#line 4818
      free((void *)buf);
      }
#line 4819
      return (-1);
    } else {
      {
#line 4821
      (*(hosts + cur_host))->fatal_error = (unsigned char)5;
#line 4822
      (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4823
      (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)5;
#line 4824
      tmp___9 = strlen((char const   *)buf);
#line 4825
      tmp___10 = s_malloc((unsigned long )(tmp___9 + 1U) * sizeof(char ));
#line 4826
      (*((*(hosts + cur_host))->smtp_check + rule___0))->r_helo = (char *)tmp___10;
#line 4827
      tmp___11 = strlen((char const   *)buf);
#line 4828
      strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_helo,
              (char const   * __restrict  )buf, tmp___11);
#line 4830
      tmp___12 = strlen((char const   *)buf);
#line 4831
      *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_helo + tmp___12) = (char )'\000';
#line 4832
      free((void *)buf);
      }
#line 4833
      return (-1);
    }
  } else {
    {
#line 4836
    tmp___5 = strlen((char const   *)buf);
#line 4837
    tmp___6 = s_malloc((unsigned long )(tmp___5 + 1U) * sizeof(char ));
#line 4838
    (*((*(hosts + cur_host))->smtp_check + rule___0))->r_helo = (char *)tmp___6;
#line 4839
    tmp___7 = strlen((char const   *)buf);
#line 4840
    strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_helo,
            (char const   * __restrict  )buf, tmp___7);
#line 4842
    tmp___8 = strlen((char const   *)buf);
#line 4843
    *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_helo + tmp___8) = (char )'\000';
#line 4844
    free((void *)buf);
    }
#line 4845
    return (0);
  }
  {
#line 4847
  free((void *)buf);
  }
#line 4848
  return (-1);
}
}
#line 4851 "smtprc_comb.c"
int check_mail_from(int *sockfd , long cur_host , int rule___0 ) 
{ 
  char *buf ;
  int res ;
  void *tmp ;
  size_t___0 tmp___0 ;
  void *tmp___1 ;
  size_t___0 tmp___2 ;
  size_t___0 tmp___3 ;
  int tmp___4 ;
  size_t___0 tmp___5 ;
  void *tmp___6 ;
  size_t___0 tmp___7 ;
  size_t___0 tmp___8 ;
  size_t___0 tmp___9 ;
  void *tmp___10 ;
  size_t___0 tmp___11 ;
  size_t___0 tmp___12 ;
  size_t___0 tmp___13 ;
  void *tmp___14 ;
  size_t___0 tmp___15 ;
  size_t___0 tmp___16 ;
  size_t___0 tmp___17 ;
  void *tmp___18 ;
  size_t___0 tmp___19 ;
  size_t___0 tmp___20 ;
  size_t___0 tmp___21 ;
  void *tmp___22 ;
  size_t___0 tmp___23 ;
  size_t___0 tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned short const   **tmp___28 ;
  unsigned short const   **tmp___29 ;
  int tmp___30 ;

  {
  {
#line 4888
  res = 0;
#line 4889
  tmp = s_zmalloc((int )(8193UL * sizeof(char )));
#line 4890
  buf = (char *)tmp;
#line 4891
  swap_rule(buf, (char const   *)(*(rules + rule___0))->mail_from, (int )cur_host);
#line 4892
  convert_rule(buf, 2);
#line 4893
  tmp___0 = strlen((char const   *)buf);
#line 4894
  tmp___1 = s_malloc((unsigned long )(tmp___0 + 1U) * sizeof(char ));
#line 4895
  (*((*(hosts + cur_host))->smtp_check + rule___0))->mail_from = (char *)tmp___1;
#line 4896
  tmp___2 = strlen((char const   *)buf);
#line 4897
  strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->mail_from,
          (char const   * __restrict  )buf, tmp___2);
#line 4899
  tmp___3 = strlen((char const   *)buf);
#line 4900
  *((*((*(hosts + cur_host))->smtp_check + rule___0))->mail_from + tmp___3) = (char )'\000';
#line 4901
  tmp___4 = write_smtp(sockfd, buf, cur_host);
  }
#line 4902
  if (tmp___4 == -1) {
    {
#line 4903
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4904
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)6;
#line 4905
    free((void *)buf);
    }
#line 4906
    return (-1);
  }
  {
#line 4908
  memset((void *)buf, 0, 8192U);
#line 4909
  res = read_smtp(sockfd, buf, cur_host);
  }
#line 4910
  if (res == -1) {
    {
#line 4911
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4912
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)7;
#line 4913
    free((void *)buf);
    }
#line 4914
    return (-1);
  }
  {
#line 4916
  tmp___30 = strncmp((char const   *)buf, (char const   *)"250", 3U);
  }
#line 4917
  if (tmp___30) {
#line 4918
    if ((int )*(buf + 0) == 53) {
      {
#line 4919
      tmp___28 = __ctype_b_loc();
      }
#line 4920
      if ((int const   )*(*tmp___28 + (int )*(buf + 1)) & 2048) {
        {
#line 4921
        tmp___29 = __ctype_b_loc();
        }
#line 4922
        if ((int const   )*(*tmp___29 + (int )*(buf + 2)) & 2048) {
          {
#line 4923
          (*((*(hosts + cur_host))->smtp_check + rule___0))->passed = (unsigned char)3;
#line 4924
          tmp___9 = strlen((char const   *)buf);
#line 4925
          tmp___10 = s_malloc((unsigned long )(tmp___9 + 1U) * sizeof(char ));
#line 4926
          (*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from = (char *)tmp___10;
#line 4927
          tmp___11 = strlen((char const   *)buf);
#line 4928
          strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from,
                  (char const   * __restrict  )buf, tmp___11);
#line 4930
          tmp___12 = strlen((char const   *)buf);
#line 4931
          *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from + tmp___12) = (char )'\000';
#line 4932
          free((void *)buf);
          }
#line 4933
          return (1);
        } else {
#line 4935
          goto _L___1;
        }
      } else {
#line 4938
        goto _L___1;
      }
    } else {
      _L___1: 
      {
#line 4942
      tmp___26 = strncmp((char const   *)buf, (char const   *)"451", 3U);
      }
#line 4943
      if (tmp___26) {
        {
#line 4944
        tmp___27 = strncmp((char const   *)buf, (char const   *)"452", 3U);
        }
#line 4945
        if (tmp___27) {
          {
#line 4946
          tmp___25 = strncmp((char const   *)buf, (char const   *)"421", 3U);
          }
#line 4947
          if (tmp___25) {
            {
#line 4948
            (*(hosts + cur_host))->fatal_error = (unsigned char)6;
#line 4949
            (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4950
            (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)8;
#line 4951
            tmp___21 = strlen((char const   *)buf);
#line 4952
            tmp___22 = s_malloc((unsigned long )(tmp___21 + 1U) * sizeof(char ));
#line 4953
            (*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from = (char *)tmp___22;
#line 4954
            tmp___23 = strlen((char const   *)buf);
#line 4955
            strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from,
                    (char const   * __restrict  )buf, tmp___23);
#line 4957
            tmp___24 = strlen((char const   *)buf);
#line 4958
            *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from + tmp___24) = (char )'\000';
#line 4959
            free((void *)buf);
            }
#line 4960
            return (-1);
          } else {
            {
#line 4962
            (*(hosts + cur_host))->fatal_error = (unsigned char)5;
#line 4963
            (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4964
            (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)8;
#line 4965
            tmp___17 = strlen((char const   *)buf);
#line 4966
            tmp___18 = s_malloc((unsigned long )(tmp___17 + 1U) * sizeof(char ));
#line 4967
            (*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from = (char *)tmp___18;
#line 4968
            tmp___19 = strlen((char const   *)buf);
#line 4969
            strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from,
                    (char const   * __restrict  )buf, tmp___19);
#line 4971
            tmp___20 = strlen((char const   *)buf);
#line 4972
            *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from + tmp___20) = (char )'\000';
#line 4973
            free((void *)buf);
            }
#line 4974
            return (-1);
          }
        } else {
          _L: 
          {
#line 4978
          (*(hosts + cur_host))->fatal_error = (unsigned char)7;
#line 4979
          (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 4980
          (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)8;
#line 4981
          tmp___13 = strlen((char const   *)buf);
#line 4982
          tmp___14 = s_malloc((unsigned long )(tmp___13 + 1U) * sizeof(char ));
#line 4983
          (*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from = (char *)tmp___14;
#line 4984
          tmp___15 = strlen((char const   *)buf);
#line 4985
          strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from,
                  (char const   * __restrict  )buf, tmp___15);
#line 4987
          tmp___16 = strlen((char const   *)buf);
#line 4988
          *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from + tmp___16) = (char )'\000';
#line 4989
          free((void *)buf);
          }
#line 4990
          return (-1);
        }
      } else {
#line 4993
        goto _L;
      }
    }
  } else {
    {
#line 4997
    tmp___5 = strlen((char const   *)buf);
#line 4998
    tmp___6 = s_malloc((unsigned long )(tmp___5 + 1U) * sizeof(char ));
#line 4999
    (*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from = (char *)tmp___6;
#line 5000
    tmp___7 = strlen((char const   *)buf);
#line 5001
    strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from,
            (char const   * __restrict  )buf, tmp___7);
#line 5003
    tmp___8 = strlen((char const   *)buf);
#line 5004
    *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_mail_from + tmp___8) = (char )'\000';
#line 5005
    free((void *)buf);
    }
#line 5006
    return (0);
  }
  {
#line 5008
  free((void *)buf);
  }
#line 5009
  return (-1);
}
}
#line 5012 "smtprc_comb.c"
int check_rcpt_to(int *sockfd , long cur_host , int rule___0 ) 
{ 
  char *buf ;
  int res ;
  void *tmp ;
  size_t___0 tmp___0 ;
  void *tmp___1 ;
  size_t___0 tmp___2 ;
  size_t___0 tmp___3 ;
  int tmp___4 ;
  size_t___0 tmp___5 ;
  void *tmp___6 ;
  size_t___0 tmp___7 ;
  size_t___0 tmp___8 ;
  size_t___0 tmp___9 ;
  void *tmp___10 ;
  size_t___0 tmp___11 ;
  size_t___0 tmp___12 ;
  size_t___0 tmp___13 ;
  void *tmp___14 ;
  size_t___0 tmp___15 ;
  size_t___0 tmp___16 ;
  size_t___0 tmp___17 ;
  void *tmp___18 ;
  size_t___0 tmp___19 ;
  size_t___0 tmp___20 ;
  size_t___0 tmp___21 ;
  void *tmp___22 ;
  size_t___0 tmp___23 ;
  size_t___0 tmp___24 ;
  size_t___0 tmp___25 ;
  void *tmp___26 ;
  size_t___0 tmp___27 ;
  size_t___0 tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  unsigned short const   **tmp___38 ;
  unsigned short const   **tmp___39 ;
  int tmp___40 ;

  {
  {
#line 5059
  res = 0;
#line 5060
  tmp = s_zmalloc((int )(8193UL * sizeof(char )));
#line 5061
  buf = (char *)tmp;
#line 5062
  swap_rule(buf, (char const   *)(*(rules + rule___0))->rcpt_to, (int )cur_host);
#line 5063
  convert_rule(buf, 3);
#line 5064
  tmp___0 = strlen((char const   *)buf);
#line 5065
  tmp___1 = s_malloc((unsigned long )(tmp___0 + 1U) * sizeof(char ));
#line 5066
  (*((*(hosts + cur_host))->smtp_check + rule___0))->rcpt_to = (char *)tmp___1;
#line 5067
  tmp___2 = strlen((char const   *)buf);
#line 5068
  strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->rcpt_to,
          (char const   * __restrict  )buf, tmp___2);
#line 5070
  tmp___3 = strlen((char const   *)buf);
#line 5071
  *((*((*(hosts + cur_host))->smtp_check + rule___0))->rcpt_to + tmp___3) = (char )'\000';
#line 5072
  debug("Check rcpt_to: sending %s", buf);
#line 5073
  tmp___4 = write_smtp(sockfd, buf, cur_host);
  }
#line 5074
  if (tmp___4 == -1) {
    {
#line 5075
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5076
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)9;
#line 5077
    free((void *)buf);
    }
#line 5078
    return (-1);
  }
  {
#line 5080
  memset((void *)buf, 0, 8192U);
#line 5081
  res = read_smtp(sockfd, buf, cur_host);
  }
#line 5082
  if (res == -1) {
    {
#line 5083
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5084
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)10;
#line 5085
    free((void *)buf);
    }
#line 5086
    return (-1);
  }
  {
#line 5088
  debug("Check rcpt_to: received %s", buf);
#line 5089
  tmp___40 = strncmp((char const   *)buf, (char const   *)"250", 3U);
  }
#line 5090
  if (tmp___40) {
#line 5091
    if ((int )*(buf + 0) == 53) {
      {
#line 5092
      tmp___38 = __ctype_b_loc();
      }
#line 5093
      if ((int const   )*(*tmp___38 + (int )*(buf + 1)) & 2048) {
        {
#line 5094
        tmp___39 = __ctype_b_loc();
        }
#line 5095
        if ((int const   )*(*tmp___39 + (int )*(buf + 2)) & 2048) {
          {
#line 5096
          (*((*(hosts + cur_host))->smtp_check + rule___0))->passed = (unsigned char)4;
#line 5097
          tmp___9 = strlen((char const   *)buf);
#line 5098
          tmp___10 = s_malloc((unsigned long )(tmp___9 + 1U) * sizeof(char ));
#line 5099
          (*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to = (char *)tmp___10;
#line 5100
          tmp___11 = strlen((char const   *)buf);
#line 5101
          strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to,
                  (char const   * __restrict  )buf, tmp___11);
#line 5103
          tmp___12 = strlen((char const   *)buf);
#line 5104
          *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to + tmp___12) = (char )'\000';
#line 5105
          free((void *)buf);
          }
#line 5106
          return (1);
        } else {
#line 5108
          goto _L___2;
        }
      } else {
#line 5111
        goto _L___2;
      }
    } else {
      _L___2: 
      {
#line 5115
      tmp___32 = strncmp((char const   *)buf, (char const   *)"450", 3U);
      }
#line 5116
      if (tmp___32) {
        {
#line 5117
        tmp___33 = strncmp((char const   *)buf, (char const   *)"473", 3U);
        }
#line 5118
        if (tmp___33) {
          {
#line 5119
          tmp___34 = strncmp((char const   *)buf, (char const   *)"500", 3U);
          }
#line 5120
          if (tmp___34) {
            {
#line 5121
            tmp___35 = strncmp((char const   *)buf, (char const   *)"521", 3U);
            }
#line 5122
            if (tmp___35) {
              {
#line 5123
              tmp___36 = strncmp((char const   *)buf, (char const   *)"530", 3U);
              }
#line 5124
              if (tmp___36) {
                {
#line 5125
                tmp___37 = strncmp((char const   *)buf, (char const   *)"554", 3U);
                }
#line 5126
                if (tmp___37) {
                  {
#line 5127
                  tmp___30 = strncmp((char const   *)buf, (char const   *)"451", 3U);
                  }
#line 5128
                  if (tmp___30) {
                    {
#line 5129
                    tmp___31 = strncmp((char const   *)buf, (char const   *)"452",
                                       3U);
                    }
#line 5130
                    if (tmp___31) {
                      {
#line 5131
                      tmp___29 = strncmp((char const   *)buf, (char const   *)"421",
                                         3U);
                      }
#line 5132
                      if (tmp___29) {
                        {
#line 5133
                        (*(hosts + cur_host))->fatal_error = (unsigned char)6;
#line 5134
                        (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5135
                        (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)11;
#line 5136
                        tmp___25 = strlen((char const   *)buf);
#line 5137
                        tmp___26 = s_malloc((unsigned long )(tmp___25 + 1U) * sizeof(char ));
#line 5138
                        (*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to = (char *)tmp___26;
#line 5139
                        tmp___27 = strlen((char const   *)buf);
#line 5140
                        strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to,
                                (char const   * __restrict  )buf, tmp___27);
#line 5142
                        tmp___28 = strlen((char const   *)buf);
#line 5143
                        *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to + tmp___28) = (char )'\000';
#line 5144
                        free((void *)buf);
                        }
#line 5145
                        return (-1);
                      } else {
                        {
#line 5147
                        (*(hosts + cur_host))->fatal_error = (unsigned char)5;
#line 5148
                        (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5149
                        (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)11;
#line 5150
                        tmp___21 = strlen((char const   *)buf);
#line 5151
                        tmp___22 = s_malloc((unsigned long )(tmp___21 + 1U) * sizeof(char ));
#line 5152
                        (*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to = (char *)tmp___22;
#line 5153
                        tmp___23 = strlen((char const   *)buf);
#line 5154
                        strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to,
                                (char const   * __restrict  )buf, tmp___23);
#line 5156
                        tmp___24 = strlen((char const   *)buf);
#line 5157
                        *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to + tmp___24) = (char )'\000';
#line 5158
                        free((void *)buf);
                        }
#line 5159
                        return (-1);
                      }
                    } else {
                      _L: 
                      {
#line 5163
                      (*(hosts + cur_host))->fatal_error = (unsigned char)7;
#line 5164
                      (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5165
                      (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)11;
#line 5166
                      tmp___17 = strlen((char const   *)buf);
#line 5167
                      tmp___18 = s_malloc((unsigned long )(tmp___17 + 1U) * sizeof(char ));
#line 5168
                      (*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to = (char *)tmp___18;
#line 5169
                      tmp___19 = strlen((char const   *)buf);
#line 5170
                      strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to,
                              (char const   * __restrict  )buf, tmp___19);
#line 5172
                      tmp___20 = strlen((char const   *)buf);
#line 5173
                      *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to + tmp___20) = (char )'\000';
#line 5174
                      free((void *)buf);
                      }
#line 5175
                      return (-1);
                    }
                  } else {
#line 5178
                    goto _L;
                  }
                } else {
                  _L___0: 
                  {
#line 5182
                  (*((*(hosts + cur_host))->smtp_check + rule___0))->passed = (unsigned char)4;
#line 5183
                  tmp___13 = strlen((char const   *)buf);
#line 5184
                  tmp___14 = s_malloc((unsigned long )(tmp___13 + 1U) * sizeof(char ));
#line 5185
                  (*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to = (char *)tmp___14;
#line 5186
                  tmp___15 = strlen((char const   *)buf);
#line 5187
                  strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to,
                          (char const   * __restrict  )buf, tmp___15);
#line 5189
                  tmp___16 = strlen((char const   *)buf);
#line 5190
                  *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to + tmp___16) = (char )'\000';
#line 5191
                  free((void *)buf);
                  }
#line 5192
                  return (1);
                }
              } else {
#line 5195
                goto _L___0;
              }
            } else {
#line 5198
              goto _L___0;
            }
          } else {
#line 5201
            goto _L___0;
          }
        } else {
#line 5204
          goto _L___0;
        }
      } else {
#line 5207
        goto _L___0;
      }
    }
  } else {
    {
#line 5211
    tmp___5 = strlen((char const   *)buf);
#line 5212
    tmp___6 = s_malloc((unsigned long )(tmp___5 + 1U) * sizeof(char ));
#line 5213
    (*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to = (char *)tmp___6;
#line 5214
    tmp___7 = strlen((char const   *)buf);
#line 5215
    strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to,
            (char const   * __restrict  )buf, tmp___7);
#line 5217
    tmp___8 = strlen((char const   *)buf);
#line 5218
    *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_rcpt_to + tmp___8) = (char )'\000';
#line 5219
    free((void *)buf);
    }
#line 5220
    return (0);
  }
  {
#line 5222
  free((void *)buf);
  }
#line 5223
  return (-1);
}
}
#line 5226 "smtprc_comb.c"
int check_send_data_start(int *sockfd , long cur_host , int rule___0 ) 
{ 
  char *buf ;
  int res ;
  void *tmp ;
  int tmp___0 ;
  size_t___0 tmp___1 ;
  void *tmp___2 ;
  size_t___0 tmp___3 ;
  size_t___0 tmp___4 ;
  size_t___0 tmp___5 ;
  void *tmp___6 ;
  size_t___0 tmp___7 ;
  size_t___0 tmp___8 ;
  size_t___0 tmp___9 ;
  void *tmp___10 ;
  size_t___0 tmp___11 ;
  size_t___0 tmp___12 ;
  size_t___0 tmp___13 ;
  void *tmp___14 ;
  size_t___0 tmp___15 ;
  size_t___0 tmp___16 ;
  size_t___0 tmp___17 ;
  void *tmp___18 ;
  size_t___0 tmp___19 ;
  size_t___0 tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned short const   **tmp___24 ;
  unsigned short const   **tmp___25 ;
  int tmp___26 ;

  {
  {
#line 5259
  res = 0;
#line 5260
  tmp = s_zmalloc((int )(8193UL * sizeof(char )));
#line 5261
  buf = (char *)tmp;
#line 5262
  tmp___0 = write_smtp(sockfd, "DATA\r\n", cur_host);
  }
#line 5263
  if (tmp___0 == -1) {
    {
#line 5264
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5265
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)12;
#line 5266
    free((void *)buf);
    }
#line 5267
    return (-1);
  }
  {
#line 5269
  res = read_smtp(sockfd, buf, cur_host);
  }
#line 5270
  if (res == -1) {
    {
#line 5271
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5272
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)13;
#line 5273
    free((void *)buf);
    }
#line 5274
    return (-1);
  }
  {
#line 5276
  tmp___26 = strncmp((char const   *)buf, (char const   *)"354", 3U);
  }
#line 5277
  if (tmp___26) {
#line 5278
    if ((int )*(buf + 0) == 53) {
      {
#line 5279
      tmp___24 = __ctype_b_loc();
      }
#line 5280
      if ((int const   )*(*tmp___24 + (int )*(buf + 1)) & 2048) {
        {
#line 5281
        tmp___25 = __ctype_b_loc();
        }
#line 5282
        if ((int const   )*(*tmp___25 + (int )*(buf + 2)) & 2048) {
          {
#line 5283
          (*((*(hosts + cur_host))->smtp_check + rule___0))->passed = (unsigned char)5;
#line 5284
          tmp___5 = strlen((char const   *)buf);
#line 5285
          tmp___6 = s_malloc((unsigned long )(tmp___5 + 1U) * sizeof(char ));
#line 5286
          (*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start = (char *)tmp___6;
#line 5287
          tmp___7 = strlen((char const   *)buf);
#line 5288
          strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start,
                  (char const   * __restrict  )buf, tmp___7);
#line 5290
          tmp___8 = strlen((char const   *)buf);
#line 5291
          *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start + tmp___8) = (char )'\000';
#line 5292
          free((void *)buf);
          }
#line 5293
          return (1);
        } else {
#line 5295
          goto _L___1;
        }
      } else {
#line 5298
        goto _L___1;
      }
    } else {
      _L___1: 
      {
#line 5302
      tmp___22 = strncmp((char const   *)buf, (char const   *)"451", 3U);
      }
#line 5303
      if (tmp___22) {
        {
#line 5304
        tmp___23 = strncmp((char const   *)buf, (char const   *)"452", 3U);
        }
#line 5305
        if (tmp___23) {
          {
#line 5306
          tmp___21 = strncmp((char const   *)buf, (char const   *)"421", 3U);
          }
#line 5307
          if (tmp___21) {
            {
#line 5308
            (*(hosts + cur_host))->fatal_error = (unsigned char)6;
#line 5309
            (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5310
            (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)14;
#line 5311
            tmp___17 = strlen((char const   *)buf);
#line 5312
            tmp___18 = s_malloc((unsigned long )(tmp___17 + 1U) * sizeof(char ));
#line 5313
            (*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start = (char *)tmp___18;
#line 5314
            tmp___19 = strlen((char const   *)buf);
#line 5315
            strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start,
                    (char const   * __restrict  )buf, tmp___19);
#line 5317
            tmp___20 = strlen((char const   *)buf);
#line 5318
            *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start + tmp___20) = (char )'\000';
#line 5319
            free((void *)buf);
            }
#line 5320
            return (-1);
          } else {
            {
#line 5322
            (*(hosts + cur_host))->fatal_error = (unsigned char)5;
#line 5323
            (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5324
            (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)14;
#line 5325
            tmp___13 = strlen((char const   *)buf);
#line 5326
            tmp___14 = s_malloc((unsigned long )(tmp___13 + 1U) * sizeof(char ));
#line 5327
            (*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start = (char *)tmp___14;
#line 5328
            tmp___15 = strlen((char const   *)buf);
#line 5329
            strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start,
                    (char const   * __restrict  )buf, tmp___15);
#line 5331
            tmp___16 = strlen((char const   *)buf);
#line 5332
            *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start + tmp___16) = (char )'\000';
#line 5333
            free((void *)buf);
            }
#line 5334
            return (-1);
          }
        } else {
          _L: 
          {
#line 5338
          (*(hosts + cur_host))->fatal_error = (unsigned char)7;
#line 5339
          (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5340
          (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)14;
#line 5341
          tmp___9 = strlen((char const   *)buf);
#line 5342
          tmp___10 = s_malloc((unsigned long )(tmp___9 + 1U) * sizeof(char ));
#line 5343
          (*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start = (char *)tmp___10;
#line 5344
          tmp___11 = strlen((char const   *)buf);
#line 5345
          strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start,
                  (char const   * __restrict  )buf, tmp___11);
#line 5347
          tmp___12 = strlen((char const   *)buf);
#line 5348
          *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start + tmp___12) = (char )'\000';
#line 5349
          free((void *)buf);
          }
#line 5350
          return (-1);
        }
      } else {
#line 5353
        goto _L;
      }
    }
  } else {
    {
#line 5357
    tmp___1 = strlen((char const   *)buf);
#line 5358
    tmp___2 = s_malloc((unsigned long )(tmp___1 + 1U) * sizeof(char ));
#line 5359
    (*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start = (char *)tmp___2;
#line 5360
    tmp___3 = strlen((char const   *)buf);
#line 5361
    strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start,
            (char const   * __restrict  )buf, tmp___3);
#line 5363
    tmp___4 = strlen((char const   *)buf);
#line 5364
    *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_start + tmp___4) = (char )'\000';
#line 5365
    free((void *)buf);
    }
#line 5366
    return (0);
  }
  {
#line 5368
  free((void *)buf);
  }
#line 5369
  return (-1);
}
}
#line 5372 "smtprc_comb.c"
int check_send_data(int *sockfd , long cur_host , int rule___0 ) 
{ 
  char *buf ;
  int res ;
  void *tmp ;
  int tmp___0 ;
  size_t___0 tmp___1 ;
  void *tmp___2 ;
  size_t___0 tmp___3 ;
  size_t___0 tmp___4 ;
  size_t___0 tmp___5 ;
  void *tmp___6 ;
  size_t___0 tmp___7 ;
  size_t___0 tmp___8 ;
  size_t___0 tmp___9 ;
  void *tmp___10 ;
  size_t___0 tmp___11 ;
  size_t___0 tmp___12 ;
  size_t___0 tmp___13 ;
  void *tmp___14 ;
  size_t___0 tmp___15 ;
  size_t___0 tmp___16 ;
  size_t___0 tmp___17 ;
  void *tmp___18 ;
  size_t___0 tmp___19 ;
  size_t___0 tmp___20 ;
  size_t___0 tmp___21 ;
  void *tmp___22 ;
  size_t___0 tmp___23 ;
  size_t___0 tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;

  {
  {
#line 5415
  res = 0;
#line 5416
  tmp = s_zmalloc((int )(8193UL * sizeof(char )));
#line 5417
  buf = (char *)tmp;
#line 5418
  return_data(cur_host, rule___0, buf);
#line 5419
  tmp___0 = write_smtp(sockfd, buf, cur_host);
  }
#line 5420
  if (tmp___0 == -1) {
    {
#line 5421
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5422
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)15;
#line 5423
    free((void *)buf);
    }
#line 5424
    return (-1);
  }
  {
#line 5426
  memset((void *)buf, 0, 8192U);
#line 5427
  res = read_smtp(sockfd, buf, cur_host);
  }
#line 5428
  if (res == -1) {
    {
#line 5429
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5430
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)16;
#line 5431
    free((void *)buf);
    }
#line 5432
    return (-1);
  }
  {
#line 5434
  tmp___36 = strncmp((char const   *)buf, (char const   *)"250", 3U);
  }
#line 5435
  if (tmp___36) {
    {
#line 5436
    tmp___33 = strncmp((char const   *)buf, (char const   *)"550", 3U);
    }
#line 5437
    if (tmp___33) {
      {
#line 5438
      tmp___34 = strncmp((char const   *)buf, (char const   *)"55", 2U);
      }
#line 5439
      if (tmp___34) {
        {
#line 5440
        tmp___35 = strncmp((char const   *)buf, (char const   *)"571", 3U);
        }
#line 5441
        if (tmp___35) {
          {
#line 5442
          tmp___28 = strncmp((char const   *)buf, (char const   *)"450", 3U);
          }
#line 5443
          if (tmp___28) {
            {
#line 5444
            tmp___29 = strncmp((char const   *)buf, (char const   *)"473", 3U);
            }
#line 5445
            if (tmp___29) {
              {
#line 5446
              tmp___30 = strncmp((char const   *)buf, (char const   *)"500", 3U);
              }
#line 5447
              if (tmp___30) {
                {
#line 5448
                tmp___31 = strncmp((char const   *)buf, (char const   *)"521", 3U);
                }
#line 5449
                if (tmp___31) {
                  {
#line 5450
                  tmp___32 = strncmp((char const   *)buf, (char const   *)"530", 3U);
                  }
#line 5451
                  if (tmp___32) {
                    {
#line 5452
                    tmp___26 = strncmp((char const   *)buf, (char const   *)"451",
                                       3U);
                    }
#line 5453
                    if (tmp___26) {
                      {
#line 5454
                      tmp___27 = strncmp((char const   *)buf, (char const   *)"452",
                                         3U);
                      }
#line 5455
                      if (tmp___27) {
                        {
#line 5456
                        tmp___25 = strncmp((char const   *)buf, (char const   *)"421",
                                           3U);
                        }
#line 5457
                        if (tmp___25) {
                          {
#line 5458
                          (*(hosts + cur_host))->fatal_error = (unsigned char)6;
#line 5459
                          (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5460
                          (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)17;
#line 5461
                          tmp___21 = strlen((char const   *)buf);
#line 5462
                          tmp___22 = s_malloc((unsigned long )(tmp___21 + 1U) * sizeof(char ));
#line 5463
                          (*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end = (char *)tmp___22;
#line 5464
                          tmp___23 = strlen((char const   *)buf);
#line 5465
                          strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end,
                                  (char const   * __restrict  )buf, tmp___23);
#line 5467
                          tmp___24 = strlen((char const   *)buf);
#line 5468
                          *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end + tmp___24) = (char )'\000';
#line 5469
                          free((void *)buf);
                          }
#line 5470
                          return (-1);
                        } else {
                          {
#line 5472
                          (*(hosts + cur_host))->fatal_error = (unsigned char)5;
#line 5473
                          (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5474
                          (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)17;
#line 5475
                          tmp___17 = strlen((char const   *)buf);
#line 5476
                          tmp___18 = s_malloc((unsigned long )(tmp___17 + 1U) * sizeof(char ));
#line 5477
                          (*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end = (char *)tmp___18;
#line 5478
                          tmp___19 = strlen((char const   *)buf);
#line 5479
                          strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end,
                                  (char const   * __restrict  )buf, tmp___19);
#line 5481
                          tmp___20 = strlen((char const   *)buf);
#line 5482
                          *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end + tmp___20) = (char )'\000';
#line 5483
                          free((void *)buf);
                          }
#line 5484
                          return (-1);
                        }
                      } else {
                        _L: 
                        {
#line 5488
                        (*(hosts + cur_host))->fatal_error = (unsigned char)7;
#line 5489
                        (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5490
                        (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)17;
#line 5491
                        tmp___13 = strlen((char const   *)buf);
#line 5492
                        tmp___14 = s_malloc((unsigned long )(tmp___13 + 1U) * sizeof(char ));
#line 5493
                        (*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end = (char *)tmp___14;
#line 5494
                        tmp___15 = strlen((char const   *)buf);
#line 5495
                        strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end,
                                (char const   * __restrict  )buf, tmp___15);
#line 5497
                        tmp___16 = strlen((char const   *)buf);
#line 5498
                        *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end + tmp___16) = (char )'\000';
#line 5499
                        free((void *)buf);
                        }
#line 5500
                        return (-1);
                      }
                    } else {
#line 5503
                      goto _L;
                    }
                  } else {
                    _L___0: 
                    {
#line 5507
                    (*((*(hosts + cur_host))->smtp_check + rule___0))->passed = (unsigned char)6;
#line 5508
                    tmp___9 = strlen((char const   *)buf);
#line 5509
                    tmp___10 = s_malloc((unsigned long )(tmp___9 + 1U) * sizeof(char ));
#line 5510
                    (*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end = (char *)tmp___10;
#line 5511
                    tmp___11 = strlen((char const   *)buf);
#line 5512
                    strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end,
                            (char const   * __restrict  )buf, tmp___11);
#line 5514
                    tmp___12 = strlen((char const   *)buf);
#line 5515
                    *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end + tmp___12) = (char )'\000';
#line 5516
                    free((void *)buf);
                    }
#line 5517
                    return (1);
                  }
                } else {
#line 5520
                  goto _L___0;
                }
              } else {
#line 5523
                goto _L___0;
              }
            } else {
#line 5526
              goto _L___0;
            }
          } else {
#line 5529
            goto _L___0;
          }
        } else {
          _L___1: 
          {
#line 5533
          (*((*(hosts + cur_host))->smtp_check + rule___0))->passed = (unsigned char)6;
#line 5534
          tmp___5 = strlen((char const   *)buf);
#line 5535
          tmp___6 = s_malloc((unsigned long )(tmp___5 + 1U) * sizeof(char ));
#line 5536
          (*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end = (char *)tmp___6;
#line 5537
          tmp___7 = strlen((char const   *)buf);
#line 5538
          strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end,
                  (char const   * __restrict  )buf, tmp___7);
#line 5540
          tmp___8 = strlen((char const   *)buf);
#line 5541
          *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end + tmp___8) = (char )'\000';
#line 5542
          free((void *)buf);
          }
#line 5543
          return (1);
        }
      } else {
#line 5546
        goto _L___1;
      }
    } else {
#line 5549
      goto _L___1;
    }
  } else {
    {
#line 5552
    tmp___1 = strlen((char const   *)buf);
#line 5553
    tmp___2 = s_malloc((unsigned long )(tmp___1 + 1U) * sizeof(char ));
#line 5554
    (*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end = (char *)tmp___2;
#line 5555
    tmp___3 = strlen((char const   *)buf);
#line 5556
    strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end,
            (char const   * __restrict  )buf, tmp___3);
#line 5558
    tmp___4 = strlen((char const   *)buf);
#line 5559
    *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_data_end + tmp___4) = (char )'\000';
#line 5560
    free((void *)buf);
    }
#line 5561
    return (0);
  }
  {
#line 5563
  free((void *)buf);
  }
#line 5564
  return (-1);
}
}
#line 5567 "smtprc_comb.c"
int suspected_open_relay(long cur_host , int rule___0 ) 
{ 


  {
#line 5571
  return (0);
}
}
#line 5574 "smtprc_comb.c"
int reset_smtp(int *sockfd , long cur_host , int rule___0 ) 
{ 
  char *buf ;
  int res ;
  void *tmp ;
  int tmp___0 ;
  size_t___0 tmp___1 ;
  void *tmp___2 ;
  size_t___0 tmp___3 ;
  size_t___0 tmp___4 ;
  size_t___0 tmp___5 ;
  void *tmp___6 ;
  size_t___0 tmp___7 ;
  size_t___0 tmp___8 ;
  int tmp___9 ;

  {
  {
#line 5590
  res = 0;
#line 5591
  tmp = s_zmalloc((int )(8193UL * sizeof(char )));
#line 5592
  buf = (char *)tmp;
#line 5593
  tmp___0 = write_smtp(sockfd, "RSET\r\n", cur_host);
  }
#line 5594
  if (tmp___0 == -1) {
    {
#line 5595
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5596
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)18;
#line 5597
    free((void *)buf);
    }
#line 5598
    return (-1);
  }
  {
#line 5600
  res = read_smtp(sockfd, buf, cur_host);
  }
#line 5601
  if (res == -1) {
    {
#line 5602
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5603
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)19;
#line 5604
    free((void *)buf);
    }
#line 5605
    return (-1);
  }
  {
#line 5607
  tmp___9 = strncmp((char const   *)buf, (char const   *)"250", 3U);
  }
#line 5608
  if (tmp___9) {
    {
#line 5609
    (*(hosts + cur_host))->fatal_error = (unsigned char)8;
#line 5610
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5611
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)20;
#line 5612
    tmp___1 = strlen((char const   *)buf);
#line 5613
    tmp___2 = s_malloc((unsigned long )(tmp___1 + 1U) * sizeof(char ));
#line 5614
    (*((*(hosts + cur_host))->smtp_check + rule___0))->r_reset = (char *)tmp___2;
#line 5615
    tmp___3 = strlen((char const   *)buf);
#line 5616
    strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_reset,
            (char const   * __restrict  )buf, tmp___3);
#line 5618
    tmp___4 = strlen((char const   *)buf);
#line 5619
    *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_reset + tmp___4) = (char )'\000';
#line 5620
    free((void *)buf);
    }
#line 5621
    return (-1);
  } else {
    {
#line 5623
    tmp___5 = strlen((char const   *)buf);
#line 5624
    tmp___6 = s_malloc((unsigned long )(tmp___5 + 1U) * sizeof(char ));
#line 5625
    (*((*(hosts + cur_host))->smtp_check + rule___0))->r_reset = (char *)tmp___6;
#line 5626
    tmp___7 = strlen((char const   *)buf);
#line 5627
    strncpy((char * __restrict  )(*((*(hosts + cur_host))->smtp_check + rule___0))->r_reset,
            (char const   * __restrict  )buf, tmp___7);
#line 5629
    tmp___8 = strlen((char const   *)buf);
#line 5630
    *((*((*(hosts + cur_host))->smtp_check + rule___0))->r_reset + tmp___8) = (char )'\000';
#line 5631
    free((void *)buf);
    }
#line 5632
    return (0);
  }
  {
#line 5634
  free((void *)buf);
  }
#line 5635
  return (0);
}
}
#line 5638 "smtprc_comb.c"
int quit_smtp(int *sockfd , long cur_host , int rule___0 ) 
{ 
  char *buf ;
  int res ;
  void *tmp ;
  int tmp___0 ;
  size_t___0 tmp___1 ;
  void *tmp___2 ;
  size_t___0 tmp___3 ;
  size_t___0 tmp___4 ;
  size_t___0 tmp___5 ;
  void *tmp___6 ;
  size_t___0 tmp___7 ;
  size_t___0 tmp___8 ;
  int tmp___9 ;

  {
  {
#line 5654
  res = 0;
#line 5655
  tmp = s_zmalloc((int )(8193UL * sizeof(char )));
#line 5656
  buf = (char *)tmp;
#line 5657
  tmp___0 = write_smtp(sockfd, "QUIT\r\n", cur_host);
  }
#line 5658
  if (tmp___0 == -1) {
    {
#line 5659
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5660
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)21;
#line 5661
    free((void *)buf);
    }
#line 5662
    return (-1);
  }
  {
#line 5664
  res = read_smtp(sockfd, buf, cur_host);
  }
#line 5665
  if (res == -1) {
    {
#line 5666
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5667
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)22;
#line 5668
    free((void *)buf);
    }
#line 5669
    return (-1);
  }
  {
#line 5671
  tmp___9 = strncmp((char const   *)buf, (char const   *)"221", 3U);
  }
#line 5672
  if (tmp___9) {
    {
#line 5673
    (*(hosts + cur_host))->fatal_error = (unsigned char)9;
#line 5674
    (*(hosts + cur_host))->fatal = (unsigned char )rule___0;
#line 5675
    (*((*(hosts + cur_host))->smtp_check + rule___0))->error_code = (unsigned char)23;
#line 5676
    tmp___1 = strlen((char const   *)buf);
#line 5677
    tmp___2 = s_malloc((unsigned long )(tmp___1 + 1U) * sizeof(char ));
#line 5678
    (*(hosts + cur_host))->r_quit = (char *)tmp___2;
#line 5679
    tmp___3 = strlen((char const   *)buf);
#line 5680
    strncpy((char * __restrict  )(*(hosts + cur_host))->r_quit, (char const   * __restrict  )buf,
            tmp___3);
#line 5682
    tmp___4 = strlen((char const   *)buf);
#line 5683
    *((*(hosts + cur_host))->r_quit + tmp___4) = (char )'\000';
#line 5684
    free((void *)buf);
    }
#line 5685
    return (-1);
  } else {
    {
#line 5687
    tmp___5 = strlen((char const   *)buf);
#line 5688
    tmp___6 = s_malloc((unsigned long )(tmp___5 + 1U) * sizeof(char ));
#line 5689
    (*(hosts + cur_host))->r_quit = (char *)tmp___6;
#line 5690
    tmp___7 = strlen((char const   *)buf);
#line 5691
    strncpy((char * __restrict  )(*(hosts + cur_host))->r_quit, (char const   * __restrict  )buf,
            tmp___7);
#line 5693
    tmp___8 = strlen((char const   *)buf);
#line 5694
    *((*(hosts + cur_host))->r_quit + tmp___8) = (char )'\000';
#line 5695
    free((void *)buf);
    }
#line 5696
    return (0);
  }
  {
#line 5698
  free((void *)buf);
  }
#line 5699
  return (0);
}
}
#line 5702
#pragma merger(0,"/tmp/cil-gbAoEKxk.i","-Wall,-g,-pthread")
#line 5703 "smtprc_comb.c"
void usage(char *pname ) 
{ 


  {
  {
#line 5707
  printf((char const   * __restrict  )"\n\nUsage: %s -c [config file] -s [iprange] -w [path to html file] -b [email address to relay to] -e [path to mbox]\n",
         pname);
#line 5709
  printf((char const   * __restrict  )"\nOptions:\n\n");
#line 5710
  printf((char const   * __restrict  )"-p [number of threads]\n");
#line 5711
  printf((char const   * __restrict  )"\t\tForks the specified number of threads\n");
#line 5712
  printf((char const   * __restrict  )"\t\tSet this to whatever works best for the machine\n");
#line 5713
  printf((char const   * __restrict  )"\t\tFreeBSD seems fine with 400+ The Linux test\n");
#line 5714
  printf((char const   * __restrict  )"\t\tmachine won\'t take anymore that 250\n");
#line 5715
  printf((char const   * __restrict  )"\n-b [email address]\n");
#line 5716
  printf((char const   * __restrict  )"\t\tWhen this option is supplied, SmtpRC will send email\n");
#line 5717
  printf((char const   * __restrict  )"\t\tthrough any servers that fail any tests. It must\n");
#line 5718
  printf((char const   * __restrict  )"\t\talso correspond with the configuration file. see the\n");
#line 5719
  printf((char const   * __restrict  )"\t\tREADME file for more info.\n");
#line 5720
  printf((char const   * __restrict  )"\n-e [path to mbox]\n");
#line 5721
  printf((char const   * __restrict  )"\t\tWhen this opton is used SmtpRC will check the mail file\n");
#line 5722
  printf((char const   * __restrict  )"\t\tspecified for relayed emails\n");
#line 5723
  printf((char const   * __restrict  )"\n-u [path to maildir]\n");
#line 5724
  printf((char const   * __restrict  )"\t\tWhen this opton is used SmtpRC will check the maildir\n");
#line 5725
  printf((char const   * __restrict  )"\t\tspecified for relayed emails\n");
#line 5726
  printf((char const   * __restrict  )"\n-w [filename]\n");
#line 5727
  printf((char const   * __restrict  )"\t\tPrints detailed HTML output of all failed\n");
#line 5728
  printf((char const   * __restrict  )"\t\tchecks to the filename specified. If used with the -a\n");
#line 5729
  printf((char const   * __restrict  )"\t\toption it will print all checks not just those that\n");
#line 5730
  printf((char const   * __restrict  )"\t\tfailed\n");
#line 5731
  printf((char const   * __restrict  )"\n-f [filename]\n");
#line 5732
  printf((char const   * __restrict  )"\t\tOutput results in text format\n");
#line 5733
  printf((char const   * __restrict  )"\n-o [filename]\n");
#line 5734
  printf((char const   * __restrict  )"\t\tOutput results in machine readable format (comma\n");
#line 5735
  printf((char const   * __restrict  )"\t\tseperated values)\n");
#line 5736
  printf((char const   * __restrict  )"\n-c [config file]\n");
#line 5737
  printf((char const   * __restrict  )"\t\tRead the checks from the specified filename.\n");
#line 5738
  printf((char const   * __restrict  )"\n-y [email template file]\n");
#line 5739
  printf((char const   * __restrict  )"\t\tSpecify an email template to use.\n");
#line 5740
  printf((char const   * __restrict  )"\n-s [ip address range]\n");
#line 5741
  printf((char const   * __restrict  )"\t\tYou can use this option to specify\n");
#line 5742
  printf((char const   * __restrict  )"\t\tthe ip address range (or single host) to scan for\n");
#line 5743
  printf((char const   * __restrict  )"\t\topen relay\'s. Must be in the format 127.0.*.1-200\n");
#line 5744
  printf((char const   * __restrict  )"\n-i [ip list file]\n");
#line 5745
  printf((char const   * __restrict  )"\t\tUse this option to specify a list of ip addresses or\n");
#line 5746
  printf((char const   * __restrict  )"\t\thostnames to scan\n");
#line 5747
  printf((char const   * __restrict  )"\n-k [config file to generate]\n");
#line 5748
  printf((char const   * __restrict  )"\t\tUse this option to generate an automatic config file with the options\n");
#line 5749
  printf((char const   * __restrict  )"\t\tused on the command line\n");
#line 5750
  printf((char const   * __restrict  )"\n-j [auto config file]\n");
#line 5751
  printf((char const   * __restrict  )"\t\tuse this option to use an automatic config file\n");
#line 5752
  printf((char const   * __restrict  )"\n-r [timeout]\n");
#line 5753
  printf((char const   * __restrict  )"\t\tSpecify a timeout value used for reading\n");
#line 5754
  printf((char const   * __restrict  )"\t\tdata from hosts. The default is 60 seconds but you\n");
#line 5755
  printf((char const   * __restrict  )"\t\tmay have to increase it up to 90+.\n");
#line 5756
  printf((char const   * __restrict  )"\n-m [time to wait]\n");
#line 5757
  printf((char const   * __restrict  )"\t\tUse this option to specify the time to wait before checking\n");
#line 5758
  printf((char const   * __restrict  )"\t\tthe mail file\n");
#line 5759
  printf((char const   * __restrict  )"\n-l [timeout]\n");
#line 5760
  printf((char const   * __restrict  )"\t\tSpecify a timeout value used for connecting\n");
#line 5761
  printf((char const   * __restrict  )"\t\tto hosts. The default is 30 seconds but you may\n");
#line 5762
  printf((char const   * __restrict  )"\t\tneed to increase it with slow networks\n");
#line 5763
  printf((char const   * __restrict  )"\n-n\t\tUsing this option will convert all IP addresses to\n");
#line 5764
  printf((char const   * __restrict  )"\t\tdomiain names\n");
#line 5765
  printf((char const   * __restrict  )"\n-a\t\tThis option will print all of the checks to the output file\n");
#line 5766
  printf((char const   * __restrict  )"\t\tspecified not just the tests that fail. Failed tests\n");
#line 5767
  printf((char const   * __restrict  )"\t\twill be highlighted in red\n");
#line 5768
  printf((char const   * __restrict  )"\n-v\t\tVerbose mode. This is not a rcommended option. It\n");
#line 5769
  printf((char const   * __restrict  )"\t\tdisplays more output about what\'s going on.\n");
#line 5770
  fflush(stdout);
#line 5771
  exit(0);
  }
}
}
#line 5774 "smtprc_comb.c"
void banner(void) 
{ 


  {
  {
#line 5778
  printf((char const   * __restrict  )"\n\n\n\n\t----------------------------\n");
#line 5779
  printf((char const   * __restrict  )"\t|    SMTP Relay Checker    |\n");
#line 5780
  printf((char const   * __restrict  )"\t|      Spencer Hardy       |\n");
#line 5781
  printf((char const   * __restrict  )"\t|   diceman@dircon.co.uk   |\n");
#line 5782
  printf((char const   * __restrict  )"\t|          2.0.3           |\n");
#line 5783
  printf((char const   * __restrict  )"\t----------------------------\n\n\n\n");
#line 5784
  fflush(stdout);
  }
#line 5785
  return;
}
}
