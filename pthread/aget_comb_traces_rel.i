/* Generated by CIL v. 1.8.2 */
/* print_CIL_Input is true */

#line 143 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef long ptrdiff_t;
#line 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef unsigned long size_t;
#line 321 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef int wchar_t;
#line 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
struct __anonstruct_max_align_t_896270833 {
   long long __max_align_ll  __attribute__((__aligned__(__alignof__(long long )))) ;
   long double __max_align_ld  __attribute__((__aligned__(__alignof__(long double )))) ;
};
#line 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h"
typedef struct __anonstruct_max_align_t_896270833 max_align_t;
#line 31 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned char __u_char;
#line 32 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned short __u_short;
#line 33 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __u_int;
#line 34 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __u_long;
#line 37 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef signed char __int8_t;
#line 38 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned char __uint8_t;
#line 39 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef short __int16_t;
#line 40 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned short __uint16_t;
#line 41 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __int32_t;
#line 42 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __uint32_t;
#line 44 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __int64_t;
#line 45 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __uint64_t;
#line 52 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int8_t __int_least8_t;
#line 53 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint8_t __uint_least8_t;
#line 54 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int16_t __int_least16_t;
#line 55 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint16_t __uint_least16_t;
#line 56 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int32_t __int_least32_t;
#line 57 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint32_t __uint_least32_t;
#line 58 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __int64_t __int_least64_t;
#line 59 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __uint64_t __uint_least64_t;
#line 63 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __quad_t;
#line 64 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __u_quad_t;
#line 72 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __intmax_t;
#line 73 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __uintmax_t;
#line 145 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __dev_t;
#line 146 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __uid_t;
#line 147 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __gid_t;
#line 148 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __ino_t;
#line 149 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __ino64_t;
#line 150 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __mode_t;
#line 151 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __nlink_t;
#line 152 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off_t;
#line 153 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off64_t;
#line 154 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __pid_t;
#line 155 "/usr/include/x86_64-linux-gnu/bits/types.h"
struct __anonstruct___fsid_t_109580352 {
   int __val[2] ;
};
#line 155 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef struct __anonstruct___fsid_t_109580352 __fsid_t;
#line 156 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __clock_t;
#line 157 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __rlim_t;
#line 158 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __rlim64_t;
#line 159 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __id_t;
#line 160 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __time_t;
#line 161 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __useconds_t;
#line 162 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __suseconds_t;
#line 163 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __suseconds64_t;
#line 165 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __daddr_t;
#line 166 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __key_t;
#line 169 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __clockid_t;
#line 172 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef void *__timer_t;
#line 175 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blksize_t;
#line 180 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blkcnt_t;
#line 181 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __blkcnt64_t;
#line 184 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsblkcnt_t;
#line 185 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsblkcnt64_t;
#line 188 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsfilcnt_t;
#line 189 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __fsfilcnt64_t;
#line 192 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __fsword_t;
#line 194 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __ssize_t;
#line 197 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __syscall_slong_t;
#line 199 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned long __syscall_ulong_t;
#line 203 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef __off64_t __loff_t;
#line 204 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef char *__caddr_t;
#line 207 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __intptr_t;
#line 210 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef unsigned int __socklen_t;
#line 215 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef int __sig_atomic_t;
#line 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h"
typedef __time_t time_t;
#line 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h"
struct timespec {
   __time_t tv_sec ;
   __syscall_slong_t tv_nsec ;
};
#line 38 "/usr/include/sched.h"
typedef __pid_t pid_t;
#line 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h"
struct sched_param {
   int sched_priority ;
};
#line 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
typedef unsigned long __cpu_mask;
#line 39 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
struct __anonstruct_cpu_set_t_826868708 {
   __cpu_mask __bits[1024UL / (8UL * sizeof(__cpu_mask ))] ;
};
#line 39 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
typedef struct __anonstruct_cpu_set_t_826868708 cpu_set_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h"
typedef __clock_t clock_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
struct tm {
   int tm_sec ;
   int tm_min ;
   int tm_hour ;
   int tm_mday ;
   int tm_mon ;
   int tm_year ;
   int tm_wday ;
   int tm_yday ;
   int tm_isdst ;
   long tm_gmtoff ;
   char const   *tm_zone ;
};
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h"
typedef __clockid_t clockid_t;
#line 7 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h"
typedef __timer_t timer_t;
#line 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h"
struct itimerspec {
   struct timespec it_interval ;
   struct timespec it_value ;
};
#line 49 "/usr/include/time.h"
struct sigevent ;
#line 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
struct __locale_data ;
#line 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
struct __locale_struct {
   struct __locale_data *__locales[13] ;
   unsigned short const   *__ctype_b ;
   int const   *__ctype_tolower ;
   int const   *__ctype_toupper ;
   char const   *__names[13] ;
};
#line 42 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h"
typedef struct __locale_struct *__locale_t;
#line 24 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h"
typedef __locale_t locale_t;
#line 49 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_internal_list {
   struct __pthread_internal_list *__prev ;
   struct __pthread_internal_list *__next ;
};
#line 49 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __pthread_internal_list __pthread_list_t;
#line 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_internal_slist {
   struct __pthread_internal_slist *__next ;
};
#line 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __pthread_internal_slist __pthread_slist_t;
#line 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h"
struct __pthread_mutex_s {
   int __lock ;
   unsigned int __count ;
   int __owner ;
   unsigned int __nusers ;
   int __kind ;
   short __spins ;
   short __elision ;
   __pthread_list_t __list ;
};
#line 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h"
struct __pthread_rwlock_arch_t {
   unsigned int __readers ;
   unsigned int __writers ;
   unsigned int __wrphase_futex ;
   unsigned int __writers_futex ;
   unsigned int __pad3 ;
   unsigned int __pad4 ;
   int __cur_writer ;
   int __shared ;
   signed char __rwelision ;
   unsigned char __pad1[7] ;
   unsigned long __pad2 ;
   unsigned int __flags ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___wseq32_817613185 {
   unsigned int __low ;
   unsigned int __high ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
union __anonunion____missing_field_name_930316680 {
   unsigned long long __wseq ;
   struct __anonstruct___wseq32_817613185 __wseq32 ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___g1_start32_817613186 {
   unsigned int __low ;
   unsigned int __high ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
union __anonunion____missing_field_name_397133489 {
   unsigned long long __g1_start ;
   struct __anonstruct___g1_start32_817613186 __g1_start32 ;
};
#line 92 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __pthread_cond_s {
   union __anonunion____missing_field_name_930316680 __annonCompField1 ;
   union __anonunion____missing_field_name_397133489 __annonCompField2 ;
   unsigned int __g_refs[2] ;
   unsigned int __g_size[2] ;
   unsigned int __g1_orig_size ;
   unsigned int __wrefs ;
   unsigned int __g_signals[2] ;
};
#line 119 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef unsigned int __tss_t;
#line 120 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef unsigned long __thrd_t;
#line 122 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
struct __anonstruct___once_flag_930316681 {
   int __data ;
};
#line 122 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h"
typedef struct __anonstruct___once_flag_930316681 __once_flag;
#line 27 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef unsigned long pthread_t;
#line 32 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_mutexattr_t_488594144 {
   char __size[4] ;
   int __align ;
};
#line 32 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_mutexattr_t_488594144 pthread_mutexattr_t;
#line 41 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_condattr_t_488594145 {
   char __size[4] ;
   int __align ;
};
#line 41 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_condattr_t_488594145 pthread_condattr_t;
#line 49 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef unsigned int pthread_key_t;
#line 53 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef int pthread_once_t;
#line 56 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union pthread_attr_t {
   char __size[56] ;
   long __align ;
};
#line 62 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union pthread_attr_t pthread_attr_t;
#line 67 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_mutex_t_335460617 {
   struct __pthread_mutex_s __data ;
   char __size[40] ;
   long __align ;
};
#line 67 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_mutex_t_335460617 pthread_mutex_t;
#line 75 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_cond_t_951761805 {
   struct __pthread_cond_s __data ;
   char __size[48] ;
   long long __align ;
};
#line 75 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_cond_t_951761805 pthread_cond_t;
#line 86 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_rwlock_t_656928968 {
   struct __pthread_rwlock_arch_t __data ;
   char __size[56] ;
   long __align ;
};
#line 86 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_rwlock_t_656928968 pthread_rwlock_t;
#line 93 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_rwlockattr_t_145707745 {
   char __size[8] ;
   long __align ;
};
#line 93 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_rwlockattr_t_145707745 pthread_rwlockattr_t;
#line 103 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef int volatile   pthread_spinlock_t;
#line 108 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_barrier_t_145707746 {
   char __size[32] ;
   long __align ;
};
#line 108 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_barrier_t_145707746 pthread_barrier_t;
#line 114 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
union __anonunion_pthread_barrierattr_t_951761806 {
   char __size[4] ;
   int __align ;
};
#line 114 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h"
typedef union __anonunion_pthread_barrierattr_t_951761806 pthread_barrierattr_t;
#line 31 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
typedef long __jmp_buf[8];
#line 5 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h"
struct __anonstruct___sigset_t_764561023 {
   unsigned long __val[1024UL / (8UL * sizeof(unsigned long ))] ;
};
#line 5 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h"
typedef struct __anonstruct___sigset_t_764561023 __sigset_t;
#line 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h"
struct __jmp_buf_tag {
   __jmp_buf __jmpbuf ;
   int __mask_was_saved ;
   __sigset_t __saved_mask ;
};
#line 37 "/usr/include/pthread.h"
enum __anonenum_34415463 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1
} ;
#line 47
enum __anonenum_508643754 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
    PTHREAD_MUTEX_NORMAL = 0,
    PTHREAD_MUTEX_RECURSIVE = 1,
    PTHREAD_MUTEX_ERRORCHECK = 2,
    PTHREAD_MUTEX_DEFAULT = 0
} ;
#line 69
enum __anonenum_931900394 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_STALLED_NP = 0,
    PTHREAD_MUTEX_ROBUST = 1,
    PTHREAD_MUTEX_ROBUST_NP = 1
} ;
#line 81
enum __anonenum_205214487 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2
} ;
#line 104
enum __anonenum_25043950 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
    PTHREAD_RWLOCK_DEFAULT_NP = 0
} ;
#line 124
enum __anonenum_436439511 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1
} ;
#line 134
enum __anonenum_998661166 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1
} ;
#line 144
enum __anonenum_146137331 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1
} ;
#line 159 "/usr/include/pthread.h"
struct _pthread_cleanup_buffer {
   void (*__routine)(void * ) ;
   void *__arg ;
   int __canceltype ;
   struct _pthread_cleanup_buffer *__prev ;
};
#line 168
enum __anonenum_53396917 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1
} ;
#line 175
enum __anonenum_904563783 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1
} ;
#line 538 "/usr/include/pthread.h"
struct __cancel_jmp_buf_tag {
   __jmp_buf __cancel_jmp_buf ;
   int __mask_was_saved ;
};
#line 544 "/usr/include/pthread.h"
struct __anonstruct___pthread_unwind_buf_t_530692248 {
   struct __cancel_jmp_buf_tag __cancel_jmp_buf[1] ;
   void *__pad[4] ;
};
#line 544 "/usr/include/pthread.h"
typedef struct __anonstruct___pthread_unwind_buf_t_530692248  __attribute__((__aligned__)) __pthread_unwind_buf_t;
#line 557 "/usr/include/pthread.h"
struct __pthread_cleanup_frame {
   void (*__cancel_routine)(void * ) ;
   void *__cancel_arg ;
   int __do_it ;
   int __cancel_type ;
};
#line 4 "aget_comb.c"
typedef unsigned int size_t___0;
#line 5 "aget_comb.c"
typedef long long __quad_t___0;
#line 7 "aget_comb.c"
typedef __quad_t___0 __off64_t___0;
#line 14 "aget_comb.c"
typedef __sigset_t sigset_t;
#line 16 "aget_comb.c"
union __anonunion_pthread_attr_t_9 {
   char __size[36] ;
   long __align ;
};
#line 20 "aget_comb.c"
typedef union __anonunion_pthread_attr_t_9 pthread_attr_t___0;
#line 21
struct _IO_FILE ;
#line 22 "aget_comb.c"
typedef struct _IO_FILE FILE;
#line 23 "aget_comb.c"
typedef void _IO_lock_t;
#line 24 "aget_comb.c"
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
#line 29 "aget_comb.c"
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t___0 _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t___0 __pad5 ;
   int _mode ;
   char _unused2[(15UL * sizeof(int ) - 4UL * sizeof(void *)) - sizeof(size_t___0 )] ;
};
#line 60 "aget_comb.c"
typedef unsigned short uint16_t;
#line 61 "aget_comb.c"
typedef unsigned int uint32_t;
#line 62 "aget_comb.c"
typedef unsigned short sa_family_t;
#line 63 "aget_comb.c"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14] ;
};
#line 67 "aget_comb.c"
typedef uint16_t in_port_t;
#line 68 "aget_comb.c"
typedef uint32_t in_addr_t;
#line 69 "aget_comb.c"
struct in_addr {
   in_addr_t s_addr ;
};
#line 72 "aget_comb.c"
struct sockaddr_in {
   sa_family_t sin_family ;
   in_port_t sin_port ;
   struct in_addr sin_addr ;
   unsigned char sin_zero[((sizeof(struct sockaddr ) - sizeof(unsigned short )) - sizeof(in_port_t )) - sizeof(struct in_addr )] ;
};
#line 78 "aget_comb.c"
struct request {
   char host[1024] ;
   char url[1024] ;
   char file[512] ;
   char lfile[512] ;
   char ip[16] ;
   char username[512] ;
   char password[512] ;
   int port ;
   int clength ;
   unsigned char proto ;
};
#line 90 "aget_comb.c"
struct thread_data {
   struct sockaddr_in sin ;
   char getstr[256] ;
   long soffset ;
   long foffset ;
   long offset ;
   long clength ;
   int fd ;
   pthread_t tid ;
   unsigned char status ;
};
#line 101 "aget_comb.c"
struct hist_data {
   struct request req ;
   int nthreads ;
   int bwritten ;
   struct thread_data wthread[25] ;
};
#line 107 "aget_comb.c"
typedef int __ssize_t___0;
#line 108 "aget_comb.c"
typedef __ssize_t___0 ssize_t;
#line 109 "aget_comb.c"
typedef __builtin_va_list __gnuc_va_list;
#line 110 "aget_comb.c"
typedef __gnuc_va_list va_list;
#line 112 "aget_comb.c"
typedef __socklen_t socklen_t;
#line 113 "aget_comb.c"
struct hostent {
   char *h_name ;
   char **h_aliases ;
   int h_addrtype ;
   int h_length ;
   char **h_addr_list ;
};
#line 124 "aget_comb.c"
union __anonunion____missing_field_name_19 {
   int __spins ;
   __pthread_slist_t __list ;
};
#line 128 "aget_comb.c"
struct __pthread_mutex_s___0 {
   int __lock ;
   unsigned int __count ;
   int __owner ;
   int __kind ;
   unsigned int __nusers ;
   union __anonunion____missing_field_name_19 __annonCompField1 ;
};
#line 136 "aget_comb.c"
union __anonunion_pthread_mutex_t_18 {
   struct __pthread_mutex_s___0 __data ;
   char __size[24] ;
   long __align ;
};
#line 141 "aget_comb.c"
typedef union __anonunion_pthread_mutex_t_18 pthread_mutex_t___0;
/* compiler builtin: 
   void __builtin_va_copy(__builtin_va_list  , __builtin_va_list  ) ;  */
/* compiler builtin: 
   void *__builtin_frob_return_address(void * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_and_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_or(...) ;  */
/* compiler builtin: 
   int __builtin_popcountll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch(...) ;  */
/* compiler builtin: 
   float __builtin_atanf(float  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_addps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   unsigned long __builtin_strcspn(char const   * , char const   * ) ;  */
/* compiler builtin: 
   float __builtin_asinf(float  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_maxps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpckhps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   double __builtin_acos(double  ) ;  */
/* compiler builtin: 
   int __builtin___sprintf_chk(char * , int  , unsigned long  , char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_16(...) ;  */
/* compiler builtin: 
   double __builtin_cosh(double  ) ;  */
/* compiler builtin: 
   float __builtin_tanhf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_16(...) ;  */
/* compiler builtin: 
   void *__builtin_mempcpy(void * , void const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_1(...) ;  */
/* compiler builtin: 
   long double __builtin_sqrtl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_parity(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or(...) ;  */
/* compiler builtin: 
   long double __builtin_coshl(long double  ) ;  */
/* compiler builtin: 
   long double __builtin_cosl(long double  ) ;  */
/* compiler builtin: 
   float __builtin_cosf(float  ) ;  */
/* compiler builtin: 
   void __sync_synchronize(...) ;  */
/* compiler builtin: 
   long double __builtin_acosl(long double  ) ;  */
/* compiler builtin: 
   void *__builtin___mempcpy_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_or_and_fetch(...) ;  */
/* compiler builtin: 
   int __builtin_clz(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_4(...) ;  */
/* compiler builtin: 
   double __builtin_log10(double  ) ;  */
/* compiler builtin: 
   char *__builtin___strcat_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_modff(float  , float * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_4(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_n(...) ;  */
/* compiler builtin: 
   double __builtin_sin(double  ) ;  */
/* compiler builtin: 
   double __builtin_frexp(double  , int * ) ;  */
/* compiler builtin: 
   float __builtin_acosf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_add_and_fetch(...) ;  */
/* compiler builtin: 
   long double __builtin_sinhl(long double  ) ;  */
/* compiler builtin: 
   char *__builtin___stpcpy_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __atomic_signal_fence(int  ) ;  */
/* compiler builtin: 
   double __builtin_fabs(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_nand(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_2(...) ;  */
/* compiler builtin: 
   void __atomic_thread_fence(int  ) ;  */
/* compiler builtin: 
   void __atomic_store_16(...) ;  */
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_8(...) ;  */
/* compiler builtin: 
   short __builtin_bswap16(short  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_2(...) ;  */
/* compiler builtin: 
   _Bool __atomic_test_and_set(void * , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_8(...) ;  */
/* compiler builtin: 
   int __builtin_ctz(unsigned int  ) ;  */
/* compiler builtin: 
   char *__builtin_strpbrk(char const   * , char const   * ) ;  */
/* compiler builtin: 
   char *__builtin_strcpy(char * , char const   * ) ;  */
/* compiler builtin: 
   double __builtin_sqrt(double  ) ;  */
/* compiler builtin: 
   __builtin_va_list __builtin_next_arg(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_16(...) ;  */
/* compiler builtin: 
   void __atomic_clear(_Bool * , int  ) ;  */
/* compiler builtin: 
   void __atomic_store(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_2(...) ;  */
/* compiler builtin: 
   float __builtin_log10f(float  ) ;  */
/* compiler builtin: 
   long double __builtin_fabsl(long double  ) ;  */
/* compiler builtin: 
   long double __builtin_floorl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch(...) ;  */
/* compiler builtin: 
   float __builtin_floorf(float  ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_4(...) ;  */
/* compiler builtin: 
   void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_sub_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_nand_and_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_16(...) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_subps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   int __builtin_parityll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __builtin_va_end(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __builtin_bzero(void * , unsigned long  ) ;  */
/* compiler builtin: 
   _Bool __atomic_always_lock_free(unsigned long  , void * ) ;  */
/* compiler builtin: 
   int __builtin_strncmp(char const   * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_xor_and_fetch(...) ;  */
/* compiler builtin: 
   int __builtin___vsprintf_chk(char * , int  , unsigned long  , char const   * ,
                                __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __builtin_sqrtf(float  ) ;  */
/* compiler builtin: 
   double __builtin_nans(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_8(...) ;  */
/* compiler builtin: 
   double __builtin_exp(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_1(...) ;  */
/* compiler builtin: 
   int __builtin_strcmp(char const   * , char const   * ) ;  */
/* compiler builtin: 
   float __builtin_ldexpf(float  , int  ) ;  */
/* compiler builtin: 
   float __builtin_powif(float  , int  ) ;  */
/* compiler builtin: 
   long double __builtin_log10l(long double  ) ;  */
/* compiler builtin: 
   void *__builtin___memmove_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_and(...) ;  */
/* compiler builtin: 
   void *__builtin_return_address(unsigned int  ) ;  */
/* compiler builtin: 
   void __atomic_feraiseexcept(int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_4(...) ;  */
/* compiler builtin: 
   float __builtin_fabsf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_1(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_object_size(void * , int  ) ;  */
/* compiler builtin: 
   void *__builtin_alloca(unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin_va_arg_pack_len(void) ;  */
/* compiler builtin: 
   long double __builtin_tanl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_2(...) ;  */
/* compiler builtin: 
   void __sync_lock_release(...) ;  */
/* compiler builtin: 
   long double __builtin_modfl(long double  , long double * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_8(...) ;  */
/* compiler builtin: 
   char *__builtin_stpcpy(char * , char const   * ) ;  */
/* compiler builtin: 
   long double __builtin_sinl(long double  ) ;  */
/* compiler builtin: 
   double __builtin_asin(double  ) ;  */
/* compiler builtin: 
   float __builtin_sinhf(float  ) ;  */
/* compiler builtin: 
   int __builtin_ctzl(unsigned long  ) ;  */
/* compiler builtin: 
   long double __builtin_tanhl(long double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add(...) ;  */
/* compiler builtin: 
   long __builtin_bswap64(long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_2(...) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_mulps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   double __builtin_tan(double  ) ;  */
/* compiler builtin: 
   char *__builtin_strncpy(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_inff(void) ;  */
/* compiler builtin: 
   void *__builtin___memset_chk(void * , int  , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_n(...) ;  */
/* compiler builtin: 
   double __builtin_huge_val(void) ;  */
/* compiler builtin: 
   int __builtin_clzl(unsigned long  ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_16(...) ;  */
/* compiler builtin: 
   float __builtin_frexpf(float  , int * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_n(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_1(...) ;  */
/* compiler builtin: 
   long double __builtin_fmodl(long double  ) ;  */
/* compiler builtin: 
   double __builtin_atan(double  ) ;  */
/* compiler builtin: 
   int __builtin___fprintf_chk(void * , int  , char const   *  , ...) ;  */
/* compiler builtin: 
   float __builtin_ceilf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_1(...) ;  */
/* compiler builtin: 
   void __builtin_return(void const   * ) ;  */
/* compiler builtin: 
   long double __builtin_asinl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_ffsll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_1(...) ;  */
/* compiler builtin: 
   int __builtin_va_arg_pack(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_4(...) ;  */
/* compiler builtin: 
   char *__builtin___strncpy_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   double __builtin_powi(double  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_2(...) ;  */
/* compiler builtin: 
   char *__builtin_strchr(char * , int  ) ;  */
/* compiler builtin: 
   char *__builtin___strncat_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __atomic_store_2(...) ;  */
/* compiler builtin: 
   long double __builtin_huge_vall(void) ;  */
/* compiler builtin: 
   int __builtin_ffsl(unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin___vprintf_chk(int  , char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpcklps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* compiler builtin: 
   char *__builtin_strncat(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   int __builtin_ctzll(unsigned long long  ) ;  */
/* compiler builtin: 
   void __builtin_stdarg_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_xor(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_4(...) ;  */
/* compiler builtin: 
   long double __builtin_frexpl(long double  , int * ) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange(...) ;  */
/* compiler builtin: 
   float __builtin_tanf(float  ) ;  */
/* compiler builtin: 
   long double __builtin_logl(long double  ) ;  */
/* compiler builtin: 
   void __builtin_va_arg(__builtin_va_list  , unsigned long  , void * ) ;  */
/* compiler builtin: 
   long __builtin_expect(long  , long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_1(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_1(...) ;  */
/* compiler builtin: 
   int __builtin___printf_chk(int  , char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_2(...) ;  */
/* compiler builtin: 
   int __builtin___vfprintf_chk(void * , int  , char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   void __builtin_prefetch(void const   *  , ...) ;  */
/* compiler builtin: 
   long double __builtin_nansl(char const   * ) ;  */
/* compiler builtin: 
   double __builtin_fmod(double  ) ;  */
/* compiler builtin: 
   void __atomic_load(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_16(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_val_compare_and_swap(...) ;  */
/* compiler builtin: 
   void __atomic_store_4(...) ;  */
/* compiler builtin: 
   double __builtin_tanh(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_nand_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_16(...) ;  */
/* compiler builtin: 
   void __builtin_unreachable(void) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_2(...) ;  */
/* compiler builtin: 
   long double __builtin_ldexpl(long double  , int  ) ;  */
/* compiler builtin: 
   void *__builtin_apply(void (*)() , void * , unsigned long  ) ;  */
/* compiler builtin: 
   float __builtin_sinf(float  ) ;  */
/* compiler builtin: 
   double __builtin_ceil(double  ) ;  */
/* compiler builtin: 
   void __atomic_exchange(...) ;  */
/* compiler builtin: 
   long double __builtin_powil(long double  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_8(...) ;  */
/* compiler builtin: 
   long double __builtin_expl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_constant_p(int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_16(...) ;  */
/* compiler builtin: 
   double __builtin_log(double  ) ;  */
/* compiler builtin: 
   float __builtin_expf(float  ) ;  */
/* compiler builtin: 
   int __builtin_types_compatible_p(unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   long double __builtin_atan2l(long double  , long double  ) ;  */
/* compiler builtin: 
   void *__builtin_apply_args(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_exchange_2(...) ;  */
/* compiler builtin: 
   float __builtin_logf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_2(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_strlen(char const   * ) ;  */
/* compiler builtin: 
   int __builtin_ffs(unsigned int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_16(...) ;  */
/* compiler builtin: 
   double __builtin_inf(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_16(...) ;  */
/* compiler builtin: 
   void *__builtin___memcpy_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_4(...) ;  */
/* compiler builtin: 
   void __atomic_store_n(...) ;  */
/* compiler builtin: 
   void __builtin_trap(void) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_4(...) ;  */
/* compiler builtin: 
   int __builtin_parityl(unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_lock_test_and_set(...) ;  */
/* compiler builtin: 
   unsigned long __builtin_strspn(char const   * , char const   * ) ;  */
/* compiler builtin: 
   void __builtin_varargs_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_and_16(...) ;  */
/* compiler builtin: 
   _Bool __atomic_compare_exchange_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_nand_fetch(...) ;  */
/* compiler builtin: 
   double __builtin_nan(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_load_8(...) ;  */
/* compiler builtin: 
   int __builtin___snprintf_chk(char * , unsigned long  , int  , unsigned long  ,
                                char const   *  , ...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch(...) ;  */
/* compiler builtin: 
   long double __builtin_atanl(long double  ) ;  */
/* compiler builtin: 
   int __builtin_clzll(unsigned long long  ) ;  */
/* compiler builtin: 
   float __builtin_huge_valf(void) ;  */
/* compiler builtin: 
   float __builtin_coshf(float  ) ;  */
/* compiler builtin: 
   float __builtin_nansf(char const   * ) ;  */
/* compiler builtin: 
   void __atomic_store_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_add(...) ;  */
/* compiler builtin: 
   int __builtin___vsnprintf_chk(char * , unsigned long  , int  , unsigned long  ,
                                 char const   * , __builtin_va_list  ) ;  */
/* compiler builtin: 
   float __builtin_nanf(char const   * ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_or_fetch_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_xor_4(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub_8(...) ;  */
/* compiler builtin: 
   _Bool __sync_bool_compare_and_swap(...) ;  */
/* compiler builtin: 
   double __builtin_atan2(double  , double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __builtin_tgmath(...) ;  */
/* compiler builtin: 
   int __builtin_popcountl(unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_1(...) ;  */
/* compiler builtin: 
   long double __builtin_ceill(long double  ) ;  */
/* compiler builtin: 
   void __atomic_store_1(...) ;  */
/* compiler builtin: 
   char *__builtin___strcpy_chk(char * , char const   * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_xor_fetch_1(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_or_2(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_sub_fetch_16(...) ;  */
/* compiler builtin: 
   double __builtin_floor(double  ) ;  */
/* compiler builtin: 
   double __builtin_cos(double  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __sync_fetch_and_sub(...) ;  */
/* compiler builtin: 
   void *__builtin_memset(void * , int  , int  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_add_2(...) ;  */
/* compiler builtin: 
   long double __builtin_nanl(char const   * ) ;  */
/* compiler builtin: 
   float __builtin_atan2f(float  , float  ) ;  */
/* compiler builtin: 
   _Bool __atomic_is_lock_free(unsigned long  , void * ) ;  */
/* compiler builtin: 
   int __builtin_popcount(unsigned int  ) ;  */
/* compiler builtin: 
   double __builtin_sinh(double  ) ;  */
/* compiler builtin: 
   void __builtin_bcopy(void const   * , void * , unsigned long  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_and_fetch_8(...) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_fetch_sub(...) ;  */
/* compiler builtin: 
   void *__builtin_extract_return_addr(void * ) ;  */
/* compiler builtin: 
   int __builtin_bswap32(int  ) ;  */
/* compiler builtin: 
   double __builtin_ldexp(double  , int  ) ;  */
/* compiler builtin: 
   long double __builtin_infl(void) ;  */
/* compiler builtin: 
   float __builtin_fmodf(float  ) ;  */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __atomic_add_fetch_4(...) ;  */
/* compiler builtin: 
   void *__builtin_frame_address(unsigned int  ) ;  */
#line 6 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 7
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 7 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void qsort(void *ptr , size_t count , size_t size , int (*comp)(void const   * , void const   * ) ) 
{ 
  size_t i ;
  size_t j ;
  size_t i___0 ;
  size_t j___0 ;
  int r ;
  size_t k ;
  char *a ;
  char *b ;
  char c ;

  {
  {
#line 9
  i = (size_t )0;
  }
  {
#line 9
  while (1) {
    while_continue: /* CIL Label */ ;
#line 9
    if (! (i < count)) {
#line 9
      goto while_break;
    }
    {
#line 10
    j = (size_t )0;
    }
    {
#line 10
    while (1) {
      while_continue___0: /* CIL Label */ ;
#line 10
      if (! (j < count)) {
#line 10
        goto while_break___0;
      }
      {
#line 11
      (*comp)((void const   *)(ptr + i * size), (void const   *)(ptr + j * size));
#line 10
      j ++;
      }
    }
    while_break___0: /* CIL Label */ ;
    }
    {
#line 9
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 16
  i___0 = (size_t )0;
  }
  {
#line 16
  while (1) {
    while_continue___1: /* CIL Label */ ;
#line 16
    if (! (i___0 < count)) {
#line 16
      goto while_break___1;
    }
    {
#line 17
    j___0 = (size_t )0;
    }
    {
#line 17
    while (1) {
      while_continue___2: /* CIL Label */ ;
#line 17
      if (! (j___0 < count)) {
#line 17
        goto while_break___2;
      }
#line 19
      if (r) {
        {
#line 21
        k = (size_t )0;
        }
        {
#line 21
        while (1) {
          while_continue___3: /* CIL Label */ ;
#line 21
          if (! (k < size)) {
#line 21
            goto while_break___3;
          }
          {
#line 22
          a = (char *)((ptr + i___0 * size) + k);
#line 23
          b = (char *)((ptr + j___0 * size) + k);
#line 24
          c = *a;
#line 25
          *a = *b;
#line 26
          *b = c;
#line 21
          k ++;
          }
        }
        while_break___3: /* CIL Label */ ;
        }
      }
      {
#line 17
      j___0 ++;
      }
    }
    while_break___2: /* CIL Label */ ;
    }
    {
#line 16
    i___0 ++;
    }
  }
  while_break___1: /* CIL Label */ ;
  }
#line 33
  return;
}
}
#line 37
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 38
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) )  __attribute__((__goblint_stub__)) ;
#line 38 "/home/simmo/dev/goblint/sv-comp/goblint/includes/stdlib.c"
void *bsearch(void const   *key , void const   *ptr , size_t count , size_t size ,
              int (*comp)(void const   * , void const   * ) ) 
{ 
  size_t i ;
  void const   *a ;
  int tmp ;

  {
  {
#line 40
  i = (size_t )0;
  }
  {
#line 40
  while (1) {
    while_continue: /* CIL Label */ ;
#line 40
    if (! (i < count)) {
#line 40
      goto while_break;
    }
    {
#line 41
    a = ptr + i * size;
#line 42
    tmp = (*comp)(key, a);
    }
#line 42
    if (tmp == 0) {
#line 43
      return ((void *)a);
    }
    {
#line 40
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 47
  return ((void *)0);
}
}
#line 117 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h"
extern int ( __attribute__((__leaf__)) __sched_cpucount)(size_t __setsize , cpu_set_t const   *__setp )  __attribute__((__nothrow__)) ;
#line 119
extern cpu_set_t *( __attribute__((__leaf__)) __sched_cpualloc)(size_t __count )  __attribute__((__nothrow__)) ;
#line 120
extern void ( __attribute__((__leaf__)) __sched_cpufree)(cpu_set_t *__set )  __attribute__((__nothrow__)) ;
#line 54 "/usr/include/sched.h"
extern int ( __attribute__((__leaf__)) sched_setparam)(__pid_t __pid , struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 58
extern int ( __attribute__((__leaf__)) sched_getparam)(__pid_t __pid , struct sched_param *__param )  __attribute__((__nothrow__)) ;
#line 61
extern int ( __attribute__((__leaf__)) sched_setscheduler)(__pid_t __pid , int __policy ,
                                                           struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 65
extern int ( __attribute__((__leaf__)) sched_getscheduler)(__pid_t __pid )  __attribute__((__nothrow__)) ;
#line 68
extern int ( __attribute__((__leaf__)) sched_yield)(void)  __attribute__((__nothrow__)) ;
#line 71
extern int ( __attribute__((__leaf__)) sched_get_priority_max)(int __algorithm )  __attribute__((__nothrow__)) ;
#line 74
extern int ( __attribute__((__leaf__)) sched_get_priority_min)(int __algorithm )  __attribute__((__nothrow__)) ;
#line 78
extern int ( __attribute__((__leaf__)) sched_rr_get_interval)(__pid_t __pid , struct timespec *__t )  __attribute__((__nothrow__)) ;
#line 72 "/usr/include/time.h"
extern clock_t ( __attribute__((__leaf__)) clock)(void)  __attribute__((__nothrow__)) ;
#line 76
extern time_t ( __attribute__((__leaf__)) time)(time_t *__timer )  __attribute__((__nothrow__)) ;
#line 79
extern double ( __attribute__((__leaf__)) difftime)(time_t __time1 , time_t __time0 )  __attribute__((__nothrow__,
__const__)) ;
#line 83
extern time_t ( __attribute__((__leaf__)) mktime)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 100
extern size_t ( __attribute__((__leaf__)) strftime)(char * __restrict  __s , size_t __maxsize ,
                                                    char const   * __restrict  __format ,
                                                    struct tm  const  * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 116
extern size_t ( __attribute__((__leaf__)) strftime_l)(char * __restrict  __s , size_t __maxsize ,
                                                      char const   * __restrict  __format ,
                                                      struct tm  const  * __restrict  __tp ,
                                                      locale_t __loc )  __attribute__((__nothrow__)) ;
#line 132
extern struct tm *( __attribute__((__leaf__)) gmtime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 136
extern struct tm *( __attribute__((__leaf__)) localtime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 154
extern struct tm *( __attribute__((__leaf__)) gmtime_r)(time_t const   * __restrict  __timer ,
                                                        struct tm * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 159
extern struct tm *( __attribute__((__leaf__)) localtime_r)(time_t const   * __restrict  __timer ,
                                                           struct tm * __restrict  __tp )  __attribute__((__nothrow__)) ;
#line 179
extern char *( __attribute__((__leaf__)) asctime)(struct tm  const  *__tp )  __attribute__((__nothrow__)) ;
#line 183
extern char *( __attribute__((__leaf__)) ctime)(time_t const   *__timer )  __attribute__((__nothrow__)) ;
#line 197
extern char *( __attribute__((__leaf__)) asctime_r)(struct tm  const  * __restrict  __tp ,
                                                    char * __restrict  __buf )  __attribute__((__nothrow__)) ;
#line 202
extern char *( __attribute__((__leaf__)) ctime_r)(time_t const   * __restrict  __timer ,
                                                  char * __restrict  __buf )  __attribute__((__nothrow__)) ;
#line 217
extern char *__tzname[2] ;
#line 218
extern int __daylight ;
#line 219
extern long __timezone ;
#line 224
extern char *tzname[2] ;
#line 228
extern void ( __attribute__((__leaf__)) tzset)(void)  __attribute__((__nothrow__)) ;
#line 232
extern int daylight ;
#line 233
extern long timezone ;
#line 249
extern time_t ( __attribute__((__leaf__)) timegm)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 251
extern time_t ( __attribute__((__leaf__)) timelocal)(struct tm *__tp )  __attribute__((__nothrow__)) ;
#line 262
extern int ( __attribute__((__leaf__)) dysize)(int __year )  __attribute__((__nothrow__,
__const__)) ;
#line 272
extern int nanosleep(struct timespec  const  *__requested_time , struct timespec *__remaining ) ;
#line 276
extern int ( __attribute__((__leaf__)) clock_getres)(clockid_t __clock_id , struct timespec *__res )  __attribute__((__nothrow__)) ;
#line 279
extern int ( __attribute__((__leaf__)) clock_gettime)(clockid_t __clock_id , struct timespec *__tp )  __attribute__((__nothrow__)) ;
#line 282
extern int ( __attribute__((__leaf__)) clock_settime)(clockid_t __clock_id , struct timespec  const  *__tp )  __attribute__((__nothrow__)) ;
#line 311
extern int clock_nanosleep(clockid_t __clock_id , int __flags , struct timespec  const  *__req ,
                           struct timespec *__rem ) ;
#line 326
extern int ( __attribute__((__leaf__)) clock_getcpuclockid)(pid_t __pid , clockid_t *__clock_id )  __attribute__((__nothrow__)) ;
#line 331
extern int ( __attribute__((__leaf__)) timer_create)(clockid_t __clock_id , struct sigevent * __restrict  __evp ,
                                                     timer_t * __restrict  __timerid )  __attribute__((__nothrow__)) ;
#line 336
extern int ( __attribute__((__leaf__)) timer_delete)(timer_t __timerid )  __attribute__((__nothrow__)) ;
#line 340
extern int ( __attribute__((__leaf__)) timer_settime)(timer_t __timerid , int __flags ,
                                                      struct itimerspec  const  * __restrict  __value ,
                                                      struct itimerspec * __restrict  __ovalue )  __attribute__((__nothrow__)) ;
#line 345
extern int ( __attribute__((__leaf__)) timer_gettime)(timer_t __timerid , struct itimerspec *__value )  __attribute__((__nothrow__)) ;
#line 364
extern int ( __attribute__((__leaf__)) timer_getoverrun)(timer_t __timerid )  __attribute__((__nothrow__)) ;
#line 371
extern int ( __attribute__((__nonnull__(1), __leaf__)) timespec_get)(struct timespec *__ts ,
                                                                     int __base )  __attribute__((__nothrow__)) ;
#line 202 "/usr/include/pthread.h"
extern int ( __attribute__((__nonnull__(1,3))) pthread_create)(pthread_t * __restrict  __newthread ,
                                                               pthread_attr_t const   * __restrict  __attr ,
                                                               void *(*__start_routine)(void * ) ,
                                                               void * __restrict  __arg )  __attribute__((__nothrow__)) ;
#line 211
extern void pthread_exit(void *__retval )  __attribute__((__noreturn__)) ;
#line 219
extern int pthread_join(pthread_t __th , void **__thread_return ) ;
#line 269
extern int ( __attribute__((__leaf__)) pthread_detach)(pthread_t __th )  __attribute__((__nothrow__)) ;
#line 273
extern pthread_t ( __attribute__((__leaf__)) pthread_self)(void)  __attribute__((__nothrow__,
__const__)) ;
#line 276
extern int ( __attribute__((__leaf__)) pthread_equal)(pthread_t __thread1 , pthread_t __thread2 )  __attribute__((__nothrow__,
__const__)) ;
#line 285
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_init)(pthread_attr_t *__attr )  __attribute__((__nothrow__)) ;
#line 288
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_destroy)(pthread_attr_t *__attr )  __attribute__((__nothrow__)) ;
#line 292
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getdetachstate)(pthread_attr_t const   *__attr ,
                                                                                      int *__detachstate )  __attribute__((__nothrow__)) ;
#line 297
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setdetachstate)(pthread_attr_t *__attr ,
                                                                                    int __detachstate )  __attribute__((__nothrow__)) ;
#line 303
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getguardsize)(pthread_attr_t const   *__attr ,
                                                                                    size_t *__guardsize )  __attribute__((__nothrow__)) ;
#line 308
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setguardsize)(pthread_attr_t *__attr ,
                                                                                  size_t __guardsize )  __attribute__((__nothrow__)) ;
#line 314
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getschedparam)(pthread_attr_t const   * __restrict  __attr ,
                                                                                     struct sched_param * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 319
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_setschedparam)(pthread_attr_t * __restrict  __attr ,
                                                                                     struct sched_param  const  * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 324
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getschedpolicy)(pthread_attr_t const   * __restrict  __attr ,
                                                                                      int * __restrict  __policy )  __attribute__((__nothrow__)) ;
#line 329
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setschedpolicy)(pthread_attr_t *__attr ,
                                                                                    int __policy )  __attribute__((__nothrow__)) ;
#line 333
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getinheritsched)(pthread_attr_t const   * __restrict  __attr ,
                                                                                       int * __restrict  __inherit )  __attribute__((__nothrow__)) ;
#line 338
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setinheritsched)(pthread_attr_t *__attr ,
                                                                                     int __inherit )  __attribute__((__nothrow__)) ;
#line 344
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getscope)(pthread_attr_t const   * __restrict  __attr ,
                                                                                int * __restrict  __scope )  __attribute__((__nothrow__)) ;
#line 349
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setscope)(pthread_attr_t *__attr ,
                                                                              int __scope )  __attribute__((__nothrow__)) ;
#line 353
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getstackaddr)(pthread_attr_t const   * __restrict  __attr ,
                                                                                    void ** __restrict  __stackaddr )  __attribute__((__nothrow__,
__deprecated__)) ;
#line 361
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstackaddr)(pthread_attr_t *__attr ,
                                                                                  void *__stackaddr )  __attribute__((__nothrow__,
__deprecated__)) ;
#line 366
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_attr_getstacksize)(pthread_attr_t const   * __restrict  __attr ,
                                                                                    size_t * __restrict  __stacksize )  __attribute__((__nothrow__)) ;
#line 373
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstacksize)(pthread_attr_t *__attr ,
                                                                                  size_t __stacksize )  __attribute__((__nothrow__)) ;
#line 379
extern int ( __attribute__((__nonnull__(1,2,3), __leaf__)) pthread_attr_getstack)(pthread_attr_t const   * __restrict  __attr ,
                                                                                  void ** __restrict  __stackaddr ,
                                                                                  size_t * __restrict  __stacksize )  __attribute__((__nothrow__)) ;
#line 387
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_attr_setstack)(pthread_attr_t *__attr ,
                                                                              void *__stackaddr ,
                                                                              size_t __stacksize )  __attribute__((__nothrow__)) ;
#line 441
extern int ( __attribute__((__nonnull__(3), __leaf__)) pthread_setschedparam)(pthread_t __target_thread ,
                                                                              int __policy ,
                                                                              struct sched_param  const  *__param )  __attribute__((__nothrow__)) ;
#line 446
extern int ( __attribute__((__nonnull__(2,3), __leaf__)) pthread_getschedparam)(pthread_t __target_thread ,
                                                                                int * __restrict  __policy ,
                                                                                struct sched_param * __restrict  __param )  __attribute__((__nothrow__)) ;
#line 452
extern int ( __attribute__((__leaf__)) pthread_setschedprio)(pthread_t __target_thread ,
                                                             int __prio )  __attribute__((__nothrow__)) ;
#line 509
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) )  __attribute__((__goblint_stub__)) ;
#line 521
extern int pthread_setcancelstate(int __state , int *__oldstate ) ;
#line 525
extern int pthread_setcanceltype(int __type , int *__oldtype ) ;
#line 528
extern int pthread_cancel(pthread_t __th ) ;
#line 533
extern void pthread_testcancel(void) ;
#line 697
extern void __pthread_register_cancel(__pthread_unwind_buf_t *__buf ) ;
#line 709
extern void __pthread_unregister_cancel(__pthread_unwind_buf_t *__buf ) ;
#line 750
extern void __pthread_unwind_next(__pthread_unwind_buf_t *__buf )  __attribute__((__weak__,
__noreturn__)) ;
#line 766
extern int __sigsetjmp_cancel(struct __cancel_jmp_buf_tag *__env , int __savemask )  __asm__("__sigsetjmp") __attribute__((__returns_twice__,
__nothrow__)) ;
#line 781
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_init)(pthread_mutex_t *__mutex ,
                                                                           pthread_mutexattr_t const   *__mutexattr )  __attribute__((__nothrow__)) ;
#line 786
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_destroy)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 790
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_trylock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 794
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_lock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 800
extern int ( __attribute__((__nonnull__(1,2))) pthread_mutex_timedlock)(pthread_mutex_t * __restrict  __mutex ,
                                                                        struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 835
extern int ( __attribute__((__nonnull__(1))) pthread_mutex_unlock)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 840
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutex_getprioceiling)(pthread_mutex_t const   * __restrict  __mutex ,
                                                                                       int * __restrict  __prioceiling )  __attribute__((__nothrow__)) ;
#line 847
extern int ( __attribute__((__nonnull__(1,3), __leaf__)) pthread_mutex_setprioceiling)(pthread_mutex_t * __restrict  __mutex ,
                                                                                       int __prioceiling ,
                                                                                       int * __restrict  __old_ceiling )  __attribute__((__nothrow__)) ;
#line 855
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutex_consistent)(pthread_mutex_t *__mutex )  __attribute__((__nothrow__)) ;
#line 874
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_init)(pthread_mutexattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 878
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_destroy)(pthread_mutexattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 882
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getpshared)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                       int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 888
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setpshared)(pthread_mutexattr_t *__attr ,
                                                                                     int __pshared )  __attribute__((__nothrow__)) ;
#line 894
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_gettype)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                    int * __restrict  __kind )  __attribute__((__nothrow__)) ;
#line 901
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_settype)(pthread_mutexattr_t *__attr ,
                                                                                  int __kind )  __attribute__((__nothrow__)) ;
#line 906
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getprotocol)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __protocol )  __attribute__((__nothrow__)) ;
#line 913
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setprotocol)(pthread_mutexattr_t *__attr ,
                                                                                      int __protocol )  __attribute__((__nothrow__)) ;
#line 918
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getprioceiling)(pthread_mutexattr_t const   * __restrict  __attr ,
                                                                                           int * __restrict  __prioceiling )  __attribute__((__nothrow__)) ;
#line 924
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setprioceiling)(pthread_mutexattr_t *__attr ,
                                                                                         int __prioceiling )  __attribute__((__nothrow__)) ;
#line 930
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_mutexattr_getrobust)(pthread_mutexattr_t const   *__attr ,
                                                                                      int *__robustness )  __attribute__((__nothrow__)) ;
#line 946
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_mutexattr_setrobust)(pthread_mutexattr_t *__attr ,
                                                                                    int __robustness )  __attribute__((__nothrow__)) ;
#line 967
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlock_init)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                            pthread_rwlockattr_t const   * __restrict  __attr )  __attribute__((__nothrow__)) ;
#line 972
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlock_destroy)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 976
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_rdlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 980
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_tryrdlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 986
extern int ( __attribute__((__nonnull__(1,2))) pthread_rwlock_timedrdlock)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                           struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 1023
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_wrlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1027
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_trywrlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1033
extern int ( __attribute__((__nonnull__(1,2))) pthread_rwlock_timedwrlock)(pthread_rwlock_t * __restrict  __rwlock ,
                                                                           struct timespec  const  * __restrict  __abstime )  __attribute__((__nothrow__)) ;
#line 1071
extern int ( __attribute__((__nonnull__(1))) pthread_rwlock_unlock)(pthread_rwlock_t *__rwlock )  __attribute__((__nothrow__)) ;
#line 1078
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_init)(pthread_rwlockattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1082
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_destroy)(pthread_rwlockattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1086
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_rwlockattr_getpshared)(pthread_rwlockattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1092
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_setpshared)(pthread_rwlockattr_t *__attr ,
                                                                                      int __pshared )  __attribute__((__nothrow__)) ;
#line 1097
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_rwlockattr_getkind_np)(pthread_rwlockattr_t const   * __restrict  __attr ,
                                                                                        int * __restrict  __pref )  __attribute__((__nothrow__)) ;
#line 1103
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_rwlockattr_setkind_np)(pthread_rwlockattr_t *__attr ,
                                                                                      int __pref )  __attribute__((__nothrow__)) ;
#line 1112
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_cond_init)(pthread_cond_t * __restrict  __cond ,
                                                                          pthread_condattr_t const   * __restrict  __cond_attr )  __attribute__((__nothrow__)) ;
#line 1117
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_cond_destroy)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1121
extern int ( __attribute__((__nonnull__(1))) pthread_cond_signal)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1125
extern int ( __attribute__((__nonnull__(1))) pthread_cond_broadcast)(pthread_cond_t *__cond )  __attribute__((__nothrow__)) ;
#line 1133
extern int ( __attribute__((__nonnull__(1,2))) pthread_cond_wait)(pthread_cond_t * __restrict  __cond ,
                                                                  pthread_mutex_t * __restrict  __mutex ) ;
#line 1145
extern int ( __attribute__((__nonnull__(1,2,3))) pthread_cond_timedwait)(pthread_cond_t * __restrict  __cond ,
                                                                         pthread_mutex_t * __restrict  __mutex ,
                                                                         struct timespec  const  * __restrict  __abstime ) ;
#line 1194
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_init)(pthread_condattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1198
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_destroy)(pthread_condattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1202
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_condattr_getpshared)(pthread_condattr_t const   * __restrict  __attr ,
                                                                                      int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1208
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_setpshared)(pthread_condattr_t *__attr ,
                                                                                    int __pshared )  __attribute__((__nothrow__)) ;
#line 1213
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_condattr_getclock)(pthread_condattr_t const   * __restrict  __attr ,
                                                                                    __clockid_t * __restrict  __clock_id )  __attribute__((__nothrow__)) ;
#line 1219
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_condattr_setclock)(pthread_condattr_t *__attr ,
                                                                                  __clockid_t __clock_id )  __attribute__((__nothrow__)) ;
#line 1230
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_spin_init)(pthread_spinlock_t *__lock ,
                                                                          int __pshared )  __attribute__((__nothrow__)) ;
#line 1234
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_spin_destroy)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1238
extern int ( __attribute__((__nonnull__(1))) pthread_spin_lock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1242
extern int ( __attribute__((__nonnull__(1))) pthread_spin_trylock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1246
extern int ( __attribute__((__nonnull__(1))) pthread_spin_unlock)(pthread_spinlock_t *__lock )  __attribute__((__nothrow__)) ;
#line 1254
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrier_init)(pthread_barrier_t * __restrict  __barrier ,
                                                                             pthread_barrierattr_t const   * __restrict  __attr ,
                                                                             unsigned int __count )  __attribute__((__nothrow__)) ;
#line 1260
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrier_destroy)(pthread_barrier_t *__barrier )  __attribute__((__nothrow__)) ;
#line 1264
extern int ( __attribute__((__nonnull__(1))) pthread_barrier_wait)(pthread_barrier_t *__barrier )  __attribute__((__nothrow__)) ;
#line 1269
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_init)(pthread_barrierattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1273
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_destroy)(pthread_barrierattr_t *__attr )  __attribute__((__nothrow__)) ;
#line 1277
extern int ( __attribute__((__nonnull__(1,2), __leaf__)) pthread_barrierattr_getpshared)(pthread_barrierattr_t const   * __restrict  __attr ,
                                                                                         int * __restrict  __pshared )  __attribute__((__nothrow__)) ;
#line 1283
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_barrierattr_setpshared)(pthread_barrierattr_t *__attr ,
                                                                                       int __pshared )  __attribute__((__nothrow__)) ;
#line 1297
extern int ( __attribute__((__nonnull__(1), __leaf__)) pthread_key_create)(pthread_key_t *__key ,
                                                                           void (*__destr_function)(void * ) )  __attribute__((__nothrow__)) ;
#line 1302
extern int ( __attribute__((__leaf__)) pthread_key_delete)(pthread_key_t __key )  __attribute__((__nothrow__)) ;
#line 1305
extern void *( __attribute__((__leaf__)) pthread_getspecific)(pthread_key_t __key )  __attribute__((__nothrow__)) ;
#line 1308
extern int ( __attribute__((__leaf__)) pthread_setspecific)(pthread_key_t __key ,
                                                            void const   *__pointer )  __attribute__((__nothrow__,
__access__(__none__,2))) ;
#line 1315
extern int ( __attribute__((__nonnull__(2), __leaf__)) pthread_getcpuclockid)(pthread_t __thread_id ,
                                                                              __clockid_t *__clock_id )  __attribute__((__nothrow__)) ;
#line 1332
extern int ( __attribute__((__leaf__)) pthread_atfork)(void (*__prepare)(void) , void (*__parent)(void) ,
                                                       void (*__child)(void) )  __attribute__((__nothrow__)) ;
#line 5 "/home/simmo/dev/goblint/sv-comp/goblint/includes/pthread.c"
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) )  __attribute__((__goblint_stub__)) ;
#line 5 "/home/simmo/dev/goblint/sv-comp/goblint/includes/pthread.c"
int ( __attribute__((__nonnull__(1,2))) pthread_once)(pthread_once_t *once_control ,
                                                      void (*init_routine)(void) ) 
{ 
  int top ;

  {
  {
#line 8
  (*init_routine)();
  }
#line 9
  return (top);
}
}
#line 142 "aget_comb.c"
#pragma merger(0,"/tmp/cil-96Ono5Br.i","-g,-Wall,-W,-pedantic")
#line 143
extern int *__errno_location(void)  __attribute__((__nothrow__, __const__)) ;
#line 144
extern char *optarg ;
#line 145
extern int optind ;
#line 146
extern int getopt(int ___argc , char **___argv , char const   *__shortopts )  __attribute__((__nothrow__)) ;
#line 148
extern int ( __attribute__((__nonnull__(1))) atoi)(char const   *__nptr )  __attribute__((__pure__,
__nothrow__)) ;
#line 150
extern void *calloc(size_t___0 __nmemb , size_t___0 __size )  __attribute__((__nothrow__,
__malloc__)) ;
#line 151
extern void exit(int __status )  __attribute__((__nothrow__, __noreturn__)) ;
#line 152
extern struct _IO_FILE *stderr ;
#line 153
extern int fprintf(FILE * __restrict  __stream , char const   * __restrict  __format 
                   , ...) ;
#line 155
extern int printf(char const   * __restrict  __format  , ...) ;
#line 156
extern char *( __attribute__((__nonnull__(1,2))) strncpy)(char * __restrict  __dest ,
                                                          char const   * __restrict  __src ,
                                                          size_t___0 __n )  __attribute__((__nothrow__)) ;
#line 158
extern char *( __attribute__((__nonnull__(1))) strdup)(char const   *__s )  __attribute__((__nothrow__,
__malloc__)) ;
#line 160
extern char *strerror(int __errnum )  __attribute__((__nothrow__)) ;
#line 161
extern int ( __attribute__((__nonnull__(1))) sigemptyset)(sigset_t *__set )  __attribute__((__nothrow__)) ;
#line 162
extern int ( __attribute__((__nonnull__(1))) sigaddset)(sigset_t *__set , int __signo )  __attribute__((__nothrow__)) ;
#line 163
extern int pthread_sigmask(int __how , __sigset_t const   * __restrict  __newmask ,
                           __sigset_t * __restrict  __oldmask )  __attribute__((__nothrow__)) ;
#line 169
void parse_url(char *url , struct request *req___0 ) ;
#line 170
void usage(void) ;
#line 171
void Log(char *fmt  , ...) ;
#line 172 "aget_comb.c"
time_t t_start  ;
#line 173 "aget_comb.c"
time_t t_finish  ;
#line 174
int read_log(struct hist_data *h ) ;
#line 175
void get(struct request *req___0 ) ;
#line 176
void resume_get(struct hist_data *h ) ;
#line 177 "aget_comb.c"
sigset_t signal_set  ;
#line 178
void *signal_waiter(void *arg ) ;
#line 179 "aget_comb.c"
char *fullurl  ;
#line 180 "aget_comb.c"
int nthreads  ;
#line 181 "aget_comb.c"
int fsuggested  =    0;
#line 182 "aget_comb.c"
struct request *req  ;
#line 183 "aget_comb.c"
pthread_t hthread  ;
#line 184 "aget_comb.c"
struct thread_data *wthread  ;
#line 185 "aget_comb.c"
int main(int argc , char **argv ) 
{ 
  int c ;
  int error ;
  int ret ;
  struct hist_data h ;
  int retlog ;
  void *tmp ;
  int *tmp___0 ;
  char *tmp___1 ;

  {
  {
#line 196
  error = 0;
#line 197
  tmp = calloc(1U, (size_t___0 )sizeof(struct request ));
#line 198
  req = (struct request *)tmp;
#line 199
  sigemptyset(& signal_set);
#line 200
  sigaddset(& signal_set, 2);
#line 201
  sigaddset(& signal_set, 14);
#line 202
  pthread_sigmask(0, (__sigset_t const   * __restrict  )(& signal_set), (__sigset_t * __restrict  )((void *)0));
#line 203
  ret = pthread_create((pthread_t * __restrict  )(& hthread), (pthread_attr_t___0 const   * __restrict  )((void *)0),
                       & signal_waiter, (void * __restrict  )((void *)0));
  }
#line 205
  if (ret != 0) {
    {
#line 206
    tmp___0 = __errno_location();
#line 207
    tmp___1 = strerror(*tmp___0);
#line 208
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"main: cannot create signal_waiter thread: %s, exiting...\n",
            tmp___1);
#line 210
    exit(-1);
    }
  }
  {
#line 212
  while (1) {
    while_continue: /* CIL Label */ ;
#line 213
    if (! error) {
      {
#line 214
      c = getopt(argc, (char **)argv, (char const   *)"p:l:n:hfv");
      }
#line 215
      if (! (c != -1)) {
#line 216
        goto while_break;
      }
    } else {
#line 219
      goto while_break;
    }
    {
#line 222
    if (c == 112) {
#line 222
      goto case_112;
    }
#line 225
    if (c == 102) {
#line 225
      goto case_102;
    }
#line 228
    if (c == 108) {
#line 228
      goto case_108;
    }
#line 232
    if (c == 110) {
#line 232
      goto case_110;
    }
#line 239
    if (c == 104) {
#line 239
      goto case_104;
    }
#line 244
    if (c == 118) {
#line 244
      goto case_118;
    }
#line 249
    goto switch_default;
    case_112: /* CIL Label */ 
    {
#line 223
    req->port = atoi((char const   *)optarg);
    }
#line 224
    goto switch_break;
    case_102: /* CIL Label */ 
    {
#line 226
    fsuggested = 1;
    }
#line 227
    goto switch_break;
    case_108: /* CIL Label */ 
    {
#line 229
    strncpy((char * __restrict  )(req->lfile), (char const   * __restrict  )optarg,
            512U);
    }
#line 231
    goto switch_break;
    case_110: /* CIL Label */ 
    {
#line 233
    nthreads = atoi((char const   *)optarg);
    }
#line 234
    if (nthreads > 25) {
      {
#line 235
      Log("Error: Maximum # of threads allowed is %d\n", 25);
#line 236
      nthreads = 0;
      }
    }
#line 238
    goto switch_break;
    case_104: /* CIL Label */ 
    {
#line 240
    printf((char const   * __restrict  )"%s\n", "EnderUNIX Aget v0.4");
#line 241
    usage();
#line 242
    exit(0);
    }
#line 243
    goto switch_break;
    case_118: /* CIL Label */ 
    {
#line 245
    printf((char const   * __restrict  )"%s\nby Murat BALABAN <murat@enderunix.org>\n",
           "EnderUNIX Aget v0.4");
#line 247
    exit(0);
    }
#line 248
    goto switch_break;
    switch_default: /* CIL Label */ 
    {
#line 250
    error = 1;
#line 251
    usage();
#line 252
    exit(1);
    }
#line 253
    goto switch_break;
    switch_break: /* CIL Label */ ;
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 256
  if (error) {
    {
#line 257
    usage();
#line 258
    exit(1);
    }
  }
#line 260
  if (fsuggested == 1) {
#line 261
    if (nthreads == 0) {
      {
#line 262
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\nERROR: -f and -n should be used together!, exiting...\n\n");
#line 263
      usage();
#line 264
      exit(1);
      }
    }
  }
#line 267
  if (argc == 2) {
    {
#line 268
    fullurl = strdup((char const   *)*(argv + 1));
    }
  } else
#line 270
  if (optind < argc) {
#line 271
    if (argc > 2) {
      {
#line 272
      fullurl = strdup((char const   *)*(argv + optind));
      }
    } else {
      {
#line 274
      usage();
#line 275
      exit(1);
      }
    }
  } else
#line 278
  if (optind == argc) {
    {
#line 279
    usage();
#line 280
    exit(1);
    }
  }
  {
#line 284
  parse_url(fullurl, req);
#line 285
  retlog = read_log(& h);
  }
#line 286
  if (retlog != -1) {
    {
#line 287
    resume_get(& h);
    }
  } else {
    {
#line 289
    get(req);
    }
  }
#line 291
  return (0);
}
}
#line 294
#pragma merger(0,"/tmp/cil-vCwIYZEB.i","-g,-Wall,-W,-pedantic")
#line 295
extern int snprintf(char * __restrict  __s , size_t___0 __maxlen , char const   * __restrict  __format 
                    , ...)  __attribute__((__nothrow__)) ;
#line 299
extern void *malloc(size_t___0 __size )  __attribute__((__nothrow__, __malloc__)) ;
#line 300
extern void free(void *__ptr )  __attribute__((__nothrow__)) ;
#line 301
extern void *( __attribute__((__nonnull__(1,2))) memcpy)(void * __restrict  __dest ,
                                                         void const   * __restrict  __src ,
                                                         size_t___0 __n )  __attribute__((__nothrow__)) ;
#line 303
extern size_t___0 ( __attribute__((__nonnull__(1))) strlen)(char const   *__s )  __attribute__((__pure__,
__nothrow__)) ;
#line 308
extern __off_t lseek(int __fd , __off_t __offset , int __whence )  __attribute__((__nothrow__)) ;
#line 309
extern int close(int __fd ) ;
#line 310
extern ssize_t write(int __fd , void const   *__buf , size_t___0 __n ) ;
#line 311
extern int dup(int __fd )  __attribute__((__nothrow__)) ;
#line 312
extern int ( __attribute__((__nonnull__(1))) open)(char const   *__file , int __oflag 
                                                   , ...) ;
#line 313
extern uint16_t htons(uint16_t __hostshort )  __attribute__((__nothrow__, __const__)) ;
#line 314
extern in_addr_t inet_addr(char const   *__cp )  __attribute__((__nothrow__)) ;
#line 315
void http_head_req(struct request *req___0 ) ;
#line 316
int calc_offset(int total , int part , int nthreads___0 ) ;
#line 317
int numofthreads(int size ) ;
#line 318
void *http_get(void *arg ) ;
#line 319 "aget_comb.c"
void get(struct request *req___0 ) 
{ 
  int i ;
  int ret ;
  int fd ;
  int diff_sec ;
  int nok ;
  long soffset ;
  long foffset ;
  char *fmt ;
  void *tmp ;
  int *tmp___0 ;
  char *tmp___1 ;
  int *tmp___2 ;
  char *tmp___3 ;
  size_t___0 tmp___4 ;
  int *tmp___5 ;
  char *tmp___6 ;
  __off_t tmp___7 ;
  int *tmp___8 ;
  char *tmp___9 ;
  ssize_t tmp___10 ;
  void *tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
  {
#line 345
  nok = 0;
  }
#line 346
  if ((int )req___0->proto == 255) {
    {
#line 347
    http_head_req(req___0);
    }
  }
  {
#line 349
  ret = numofthreads(req___0->clength);
  }
#line 350
  if (fsuggested == 0) {
#line 351
    if (ret == 0) {
      {
#line 352
      nthreads = 1;
      }
    } else {
      {
#line 354
      nthreads = ret;
      }
    }
  }
  {
#line 357
  tmp = malloc((size_t___0 )((unsigned long )((unsigned int )nthreads) * sizeof(struct thread_data )));
#line 358
  wthread = (struct thread_data *)tmp;
#line 359
  Log("Downloading %s (%d bytes) from site %s(%s:%d). Number of Threads: %d", req___0->url,
      req___0->clength, req___0->host, req___0->ip, req___0->port, nthreads);
#line 361
  tmp___4 = strlen((char const   *)(req___0->lfile));
  }
#line 362
  if (tmp___4 != 0U) {
    {
#line 363
    fd = open((char const   *)(req___0->lfile), 66, 448);
    }
#line 364
    if (fd == -1) {
      {
#line 365
      tmp___0 = __errno_location();
#line 366
      tmp___1 = strerror(*tmp___0);
#line 367
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"get: cannot open file %s for writing: %s\n",
              req___0->lfile, tmp___1);
#line 369
      exit(1);
      }
    }
  } else {
    {
#line 372
    fd = open((char const   *)(req___0->file), 66, 448);
    }
#line 373
    if (fd == -1) {
      {
#line 374
      tmp___2 = __errno_location();
#line 375
      tmp___3 = strerror(*tmp___2);
#line 376
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"get: cannot open file %s for writing: %s\n",
              req___0->lfile, tmp___3);
#line 378
      exit(1);
      }
    }
  }
  {
#line 381
  tmp___7 = lseek(fd, (long )(req___0->clength - 1), 0);
  }
#line 382
  if (tmp___7 == -1L) {
    {
#line 383
    tmp___5 = __errno_location();
#line 384
    tmp___6 = strerror(*tmp___5);
#line 385
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"get: couldn\'t lseek:  %s\n",
            tmp___6);
#line 387
    exit(1);
    }
  }
  {
#line 389
  tmp___10 = write(fd, (void const   *)"0", 1U);
  }
#line 390
  if (tmp___10 == -1) {
    {
#line 391
    tmp___8 = __errno_location();
#line 392
    tmp___9 = strerror(*tmp___8);
#line 393
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"get: couldn\'t allocate space for download file: %s\n",
            tmp___9);
#line 395
    exit(1);
    }
  }
  {
#line 397
  tmp___11 = calloc(254U, (size_t___0 )sizeof(char ));
#line 398
  fmt = (char *)tmp___11;
#line 399
  time(& t_start);
#line 400
  i = 0;
  }
  {
#line 401
  while (1) {
    while_continue: /* CIL Label */ ;
#line 401
    if (! (i < nthreads)) {
#line 401
      goto while_break;
    }
    {
#line 402
    tmp___12 = calc_offset(req___0->clength, i, nthreads);
#line 403
    soffset = (long )tmp___12;
#line 404
    tmp___13 = calc_offset(req___0->clength, i + 1, nthreads);
#line 405
    foffset = (long )tmp___13;
#line 406
    (wthread + i)->soffset = soffset;
    }
#line 407
    if (i == nthreads - 1) {
      {
#line 408
      (wthread + i)->foffset = (long )req___0->clength;
      }
    } else {
      {
#line 410
      (wthread + i)->foffset = foffset;
      }
    }
    {
#line 412
    (wthread + i)->sin.sin_family = (unsigned short)2;
#line 413
    (wthread + i)->sin.sin_addr.s_addr = inet_addr((char const   *)(req___0->ip));
#line 414
    (wthread + i)->sin.sin_port = htons((unsigned short )req___0->port);
#line 415
    (wthread + i)->fd = dup(fd);
#line 416
    (wthread + i)->clength = (long )req___0->clength;
#line 417
    snprintf((char * __restrict  )fmt, 256U, (char const   * __restrict  )"GET %s HTTP/1.1\r\nHost: %s\r\nUser-Agent: %s\r\nRange: bytes=%ld-\r\nConnection: close\r\n\r\n",
             req___0->url, req___0->host, "EnderUNIX Aget v0.4", soffset);
#line 419
    strncpy((char * __restrict  )((wthread + i)->getstr), (char const   * __restrict  )fmt,
            256U);
#line 421
    pthread_create((pthread_t * __restrict  )(& (wthread + i)->tid), (pthread_attr_t___0 const   * __restrict  )((void *)0),
                   & http_get, (void * __restrict  )(wthread + i));
#line 423
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 425
  free((void *)fmt);
#line 426
  i = 0;
  }
  {
#line 427
  while (1) {
    while_continue___0: /* CIL Label */ ;
#line 427
    if (! (i < nthreads)) {
#line 427
      goto while_break___0;
    }
    {
#line 428
    pthread_join((wthread + i)->tid, (void **)((void *)0));
    }
#line 429
    if ((int )(wthread + i)->status == 255) {
      {
#line 430
      nok ++;
      }
    }
    {
#line 432
    i ++;
    }
  }
  while_break___0: /* CIL Label */ ;
  }
#line 434
  if (nok == nthreads) {
    {
#line 435
    pthread_cancel(hthread);
    }
  } else {
    {
#line 437
    pthread_join(hthread, (void **)((void *)0));
    }
  }
  {
#line 439
  time(& t_finish);
#line 440
  diff_sec = (int )(t_finish - t_start);
  }
#line 441
  if (diff_sec == 0) {
    {
#line 442
    diff_sec = 1;
    }
  }
  {
#line 444
  Log("Download completed, job completed in %d seconds. (%d Kb/sec)", diff_sec, (req___0->clength / diff_sec) / 1024);
#line 446
  Log("Shutting down...");
#line 447
  close(fd);
  }
#line 448
  return;
}
}
#line 451 "aget_comb.c"
void resume_get(struct hist_data *h ) 
{ 
  int i ;
  int fd ;
  int diff_sec ;
  int nok ;
  char *fmt ;
  void *tmp ;
  void *tmp___0 ;
  int *tmp___1 ;
  char *tmp___2 ;
  int *tmp___3 ;
  char *tmp___4 ;
  size_t___0 tmp___5 ;

  {
  {
#line 466
  nok = 0;
#line 467
  nthreads = h->nthreads;
#line 468
  tmp = calloc(254U, (size_t___0 )sizeof(char ));
#line 469
  fmt = (char *)tmp;
#line 470
  tmp___0 = malloc((size_t___0 )((unsigned long )((unsigned int )nthreads) * sizeof(struct thread_data )));
#line 471
  wthread = (struct thread_data *)tmp___0;
#line 472
  memcpy((void * __restrict  )req, (void const   * __restrict  )(& h->req), (size_t___0 )sizeof(struct request ));
#line 473
  memcpy((void * __restrict  )wthread, (void const   * __restrict  )(h->wthread),
         (size_t___0 )(sizeof(struct thread_data ) * (unsigned long )((unsigned int )nthreads)));
#line 475
  Log("Resuming download %s (%d bytes) from site %s(%s:%d). Number of Threads: %d",
      req->url, req->clength, req->host, req->ip, req->port, nthreads);
#line 477
  tmp___5 = strlen((char const   *)(req->lfile));
  }
#line 478
  if (tmp___5 != 0U) {
    {
#line 479
    fd = open((char const   *)(req->lfile), 2, 448);
    }
#line 480
    if (fd == -1) {
      {
#line 481
      tmp___1 = __errno_location();
#line 482
      tmp___2 = strerror(*tmp___1);
#line 483
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"get: cannot open file %s for writing: %s\n",
              req->lfile, tmp___2);
#line 485
      exit(1);
      }
    }
  } else {
    {
#line 488
    fd = open((char const   *)(req->file), 2, 448);
    }
#line 489
    if (fd == -1) {
      {
#line 490
      tmp___3 = __errno_location();
#line 491
      tmp___4 = strerror(*tmp___3);
#line 492
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"get: cannot open file %s for writing: %s\n",
              req->lfile, tmp___4);
#line 494
      exit(1);
      }
    }
  }
  {
#line 497
  time(& t_start);
#line 498
  i = 0;
  }
  {
#line 499
  while (1) {
    while_continue: /* CIL Label */ ;
#line 499
    if (! (i < nthreads)) {
#line 499
      goto while_break;
    }
    {
#line 500
    (wthread + i)->soffset = (wthread + i)->offset;
#line 501
    (wthread + i)->fd = dup(fd);
#line 502
    snprintf((char * __restrict  )fmt, 256U, (char const   * __restrict  )"GET %s HTTP/1.1\r\nHost: %s\r\nUser-Agent: %s\r\nRange: bytes=%ld-\r\nConnection: close\r\n\r\n",
             req->url, req->host, "EnderUNIX Aget v0.4", (wthread + i)->offset);
#line 504
    strncpy((char * __restrict  )((wthread + i)->getstr), (char const   * __restrict  )fmt,
            256U);
#line 506
    pthread_create((pthread_t * __restrict  )(& (wthread + i)->tid), (pthread_attr_t___0 const   * __restrict  )((void *)0),
                   & http_get, (void * __restrict  )(wthread + i));
#line 508
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 510
  i = 0;
  }
  {
#line 511
  while (1) {
    while_continue___0: /* CIL Label */ ;
#line 511
    if (! (i < nthreads)) {
#line 511
      goto while_break___0;
    }
    {
#line 512
    pthread_join((wthread + i)->tid, (void **)((void *)0));
#line 513
    i ++;
    }
  }
  while_break___0: /* CIL Label */ ;
  }
  {
#line 515
  i = 0;
  }
  {
#line 516
  while (1) {
    while_continue___1: /* CIL Label */ ;
#line 516
    if (! (i < nthreads)) {
#line 516
      goto while_break___1;
    }
    {
#line 517
    pthread_join((wthread + i)->tid, (void **)((void *)0));
    }
#line 518
    if ((int )(wthread + i)->status == 255) {
      {
#line 519
      nok ++;
      }
    }
    {
#line 521
    i ++;
    }
  }
  while_break___1: /* CIL Label */ ;
  }
#line 523
  if (nok == nthreads) {
    {
#line 524
    pthread_cancel(hthread);
    }
  } else {
    {
#line 526
    pthread_join(hthread, (void **)((void *)0));
    }
  }
  {
#line 528
  time(& t_finish);
#line 529
  diff_sec = (int )(t_finish - t_start);
  }
#line 530
  if (diff_sec == 0) {
    {
#line 531
    diff_sec = 1;
    }
  }
  {
#line 533
  Log("Download completed, job completed in %d seconds. (%d Kb/sec)", diff_sec, ((req->clength - h->bwritten) / diff_sec) / 1024);
#line 535
  Log("Shutting down...");
#line 536
  close(fd);
  }
#line 537
  return;
}
}
#line 544
#pragma merger(0,"/tmp/cil-rsiEkcjk.i","-g,-Wall,-W,-pedantic")
#line 545
extern struct _IO_FILE *stdout ;
#line 546
extern int fflush(FILE *__stream ) ;
#line 547
extern int sprintf(char * __restrict  __s , char const   * __restrict  __format  , ...)  __attribute__((__nothrow__)) ;
#line 549
extern int vfprintf(FILE * __restrict  __s , char const   * __restrict  __format ,
                    __gnuc_va_list __arg ) ;
#line 551
extern int putchar(int __c ) ;
#line 552
extern void *( __attribute__((__nonnull__(1))) memset)(void *__s , int __c , size_t___0 __n )  __attribute__((__nothrow__)) ;
#line 553
extern int ( __attribute__((__nonnull__(1,2))) strncmp)(char const   *__s1 , char const   *__s2 ,
                                                        size_t___0 __n )  __attribute__((__pure__,
__nothrow__)) ;
#line 556
extern char *( __attribute__((__nonnull__(1,2))) strstr)(char const   *__haystack ,
                                                         char const   *__needle )  __attribute__((__pure__,
__nothrow__)) ;
#line 558
void revstr(char *str ) ;
#line 559
void updateProgressBar(float cur , float tot ) ;
#line 560
void handleHttpRetcode(char *rbuf ) ;
#line 561 "aget_comb.c"
void parse_url(char *url , struct request *req___0 ) 
{ 
  char *s ;
  int i ;
  int j ;
  int k ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  {
#line 572
  k = 0;
#line 573
  j = k;
#line 574
  i = j;
#line 575
  s = url;
#line 576
  tmp___0 = strncmp((char const   *)url, (char const   *)"ftp://", 6U);
  }
#line 577
  if (tmp___0 == 0) {
    {
#line 578
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Error: Currently Aget doesn\'t support FTP requests...\n");
#line 579
    exit(1);
    }
  } else {
    {
#line 581
    tmp = strncmp((char const   *)url, (char const   *)"http://", 7U);
    }
#line 582
    if (tmp != 0) {
      {
#line 583
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Error: URL should be of the form http://...\n");
#line 584
      exit(1);
      }
    }
  }
#line 587
  if (req___0->port == 0) {
    {
#line 588
    req___0->port = 80;
#line 589
    req___0->proto = (unsigned char)255;
    }
  }
  {
#line 591
  s = url + 7;
#line 592
  i = 0;
  }
  {
#line 593
  while (1) {
    while_continue: /* CIL Label */ ;
#line 593
    if (! ((int )*s != 47)) {
#line 593
      goto while_break;
    }
#line 594
    if (i > 1024) {
      {
#line 595
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Error: Cannot get hostname from URL...\n");
#line 596
      exit(1);
      }
    }
#line 598
    if ((int )*s == 58) {
      {
#line 599
      while (1) {
        while_continue___0: /* CIL Label */ ;
#line 599
        if (! ((int )*s != 47)) {
#line 599
          goto while_break___0;
        }
        {
#line 600
        tmp___1 = j;
#line 601
        j ++;
#line 602
        s --;
#line 603
        req___0->username[tmp___1] = *s;
#line 604
        i --;
        }
      }
      while_break___0: /* CIL Label */ ;
      }
      {
#line 606
      j --;
#line 607
      req___0->username[j] = (char )'\000';
#line 608
      revstr(req___0->username);
      }
      {
#line 609
      while (1) {
        while_continue___1: /* CIL Label */ ;
#line 610
        if ((int )*s == 58) {
          {
#line 611
          while (1) {
            while_continue___2: /* CIL Label */ ;
#line 611
            if (! ((int )*s != 64)) {
#line 611
              goto while_break___2;
            }
#line 612
            if (k > 512) {
              {
#line 613
              fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Error: Cannot get password from URL...\n");
#line 614
              exit(1);
              }
            }
            {
#line 616
            tmp___2 = k;
#line 617
            k ++;
#line 618
            s ++;
#line 619
            req___0->password[tmp___2] = *s;
            }
          }
          while_break___2: /* CIL Label */ ;
          }
#line 621
          goto while_break___1;
        }
        {
#line 623
        s ++;
        }
      }
      while_break___1: /* CIL Label */ ;
      }
      {
#line 625
      k --;
#line 626
      req___0->password[k] = (char )'\000';
      }
    }
    {
#line 628
    req___0->host[i] = *s;
#line 629
    i ++;
#line 630
    s ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 632
  req___0->host[i] = (char )'\000';
#line 633
  i = 0;
  }
  {
#line 634
  while (1) {
    while_continue___3: /* CIL Label */ ;
#line 634
    if (! ((int )*s != 0)) {
#line 634
      goto while_break___3;
    }
#line 635
    if (i > 1024) {
      {
#line 636
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Error: Cannot get remote file name from URL...\n");
#line 637
      exit(1);
      }
    }
    {
#line 639
    req___0->url[i] = *s;
#line 640
    i ++;
#line 641
    s ++;
    }
  }
  while_break___3: /* CIL Label */ ;
  }
  {
#line 643
  req___0->url[i] = (char )'\000';
#line 644
  s --;
#line 645
  i = 0;
  }
  {
#line 646
  while (1) {
    while_continue___4: /* CIL Label */ ;
#line 646
    if (! ((int )*s != 47)) {
#line 646
      goto while_break___4;
    }
#line 647
    if (i > 512) {
      {
#line 648
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Error: Cannot get local file name from URL...\n");
#line 649
      exit(1);
      }
    }
    {
#line 651
    req___0->file[i] = *s;
#line 652
    i ++;
#line 653
    s --;
    }
  }
  while_break___4: /* CIL Label */ ;
  }
  {
#line 655
  req___0->file[i] = (char )'\000';
#line 656
  revstr(req___0->file);
  }
#line 657
  return;
}
}
#line 660 "aget_comb.c"
int numofthreads(int size ) 
{ 


  {
#line 664
  if (size == 0) {
#line 665
    return (0);
  } else
#line 667
  if (size < 16384) {
#line 668
    return (1);
  } else
#line 670
  if (size >= 16384) {
#line 671
    if (size < 32768) {
#line 672
      return (2);
    } else {
#line 674
      goto _L___5;
    }
  } else
  _L___5: 
#line 678
  if (size >= 32768) {
#line 679
    if (size < 65536) {
#line 680
      return (3);
    } else {
#line 682
      goto _L___4;
    }
  } else
  _L___4: 
#line 686
  if (size >= 65536) {
#line 687
    if (size < 131072) {
#line 688
      return (4);
    } else {
#line 690
      goto _L___3;
    }
  } else
  _L___3: 
#line 694
  if (size >= 131072) {
#line 695
    if (size < 262144) {
#line 696
      return (5);
    } else {
#line 698
      goto _L___2;
    }
  } else
  _L___2: 
#line 702
  if (size >= 262144) {
#line 703
    if (size < 524288) {
#line 704
      return (6);
    } else {
#line 706
      goto _L___1;
    }
  } else
  _L___1: 
#line 710
  if (size >= 524288) {
#line 711
    if (size < 1048576) {
#line 712
      return (7);
    } else {
#line 714
      goto _L___0;
    }
  } else
  _L___0: 
#line 718
  if (size >= 1048576) {
#line 719
    if (size < 2097152) {
#line 720
      return (8);
    } else {
#line 722
      goto _L;
    }
  } else
  _L: 
#line 726
  if (size >= 2097152) {
#line 727
    if (size < 4194304) {
#line 728
      return (9);
    } else {
#line 730
      return (10);
    }
  } else {
#line 733
    return (10);
  }
}
}
#line 746 "aget_comb.c"
int calc_offset(int total , int part , int nthreads___0 ) 
{ 


  {
#line 750
  return (part * (total / nthreads___0));
}
}
#line 753 "aget_comb.c"
void usage(void) 
{ 


  {
  {
#line 757
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"usage: aget [options] url\n");
#line 758
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\toptions:\n");
#line 759
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\t\t-p port number\n");
#line 760
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\t\t-l local file name\n");
#line 761
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\t\t-n suggested number of threads\n");
#line 762
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\t\t-f force using suggested number of threads\n");
#line 763
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\t\t-h this screen\n");
#line 764
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\t\t-v version info\n");
#line 765
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n");
#line 766
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"http//www.enderunix.org/aget/\n");
  }
#line 767
  return;
}
}
#line 770 "aget_comb.c"
void revstr(char *str ) 
{ 
  char *p ;
  char *s ;
  int i ;
  int size ;
  size_t___0 tmp ;
  void *tmp___0 ;

  {
  {
#line 779
  tmp = strlen((char const   *)str);
#line 780
  size = (int )tmp;
  }
#line 781
  if (size == 0) {
#line 782
    return;
  }
  {
#line 784
  tmp___0 = calloc((unsigned int )size, (size_t___0 )sizeof(char ));
#line 785
  p = (char *)tmp___0;
#line 786
  s = p;
#line 787
  i = size;
  }
  {
#line 788
  while (1) {
    while_continue: /* CIL Label */ ;
#line 788
    if (! (i >= 0)) {
#line 788
      goto while_break;
    }
    {
#line 789
    *s = *((str + i) - 1);
#line 790
    i --;
#line 791
    s ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 793
  *s = (char )'\000';
#line 794
  memset((void *)str, 0, (unsigned int )size);
#line 795
  strncpy((char * __restrict  )str, (char const   * __restrict  )p, (unsigned int )size);
#line 796
  free((void *)p);
  }
#line 797
  return;
}
}
#line 800 "aget_comb.c"
void Log(char *fmt  , ...) 
{ 
  va_list ap ;
  char *lfmt ;
  size_t___0 tmp ;
  void *tmp___0 ;
  int *tmp___1 ;
  char *tmp___2 ;
  size_t___0 tmp___3 ;

  {
  {
#line 810
  tmp = strlen((char const   *)fmt);
#line 811
  tmp___0 = calloc(7U + tmp, (size_t___0 )sizeof(char ));
#line 812
  lfmt = (char *)tmp___0;
#line 813
  sprintf((char * __restrict  )lfmt, (char const   * __restrict  )"<LOG> %s", fmt);
#line 814
  fflush(stdout);
#line 815
  __builtin_va_start(ap, fmt);
#line 816
  vfprintf((FILE * __restrict  )stderr, (char const   * __restrict  )lfmt, ap);
#line 817
  __builtin_va_end(ap);
  }
#line 818
  if ((int )*(fmt + 0) != 0) {
    {
#line 819
    tmp___3 = strlen((char const   *)fmt);
    }
#line 820
    if ((int )*(fmt + (tmp___3 - 1U)) == 58) {
      {
#line 821
      tmp___1 = __errno_location();
#line 822
      tmp___2 = strerror(*tmp___1);
#line 823
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )" %s", tmp___2);
      }
    }
  }
  {
#line 826
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n");
#line 827
  free((void *)lfmt);
  }
#line 828
  return;
}
}
#line 831 "aget_comb.c"
static float prev  =    (float )-1;
#line 832 "aget_comb.c"
void updateProgressBar(float cur , float tot ) 
{ 
  float rat ;
  int ndot ;
  int i ;

  {
  {
#line 838
  rat = cur / tot;
#line 839
  ndot = (int )(rat * (float )100);
  }
#line 840
  if ((float )ndot < prev + (float )5) {
#line 841
    if (ndot != 100) {
#line 842
      return;
    }
  }
  {
#line 845
  i = 0;
  }
  {
#line 846
  while (1) {
    while_continue: /* CIL Label */ ;
#line 846
    if (! (i < ndot)) {
#line 846
      goto while_break;
    }
    {
#line 847
    putchar('.');
#line 848
    i += 2;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 850
  i = ndot - 1;
  }
  {
#line 851
  while (1) {
    while_continue___0: /* CIL Label */ ;
#line 851
    if (! (i < 100)) {
#line 851
      goto while_break___0;
    }
    {
#line 852
    putchar(' ');
#line 853
    i += 2;
    }
  }
  while_break___0: /* CIL Label */ ;
  }
  {
#line 855
  printf((char const   * __restrict  )"[%d%% completed]\n", ndot);
#line 856
  prev = (float )ndot;
  }
#line 857
  return;
}
}
#line 860 "aget_comb.c"
void handleHttpRetcode(char *rbuf ) 
{ 
  char *tmp ;
  char *tmp___0 ;
  char *tmp___1 ;

  {
  {
#line 866
  tmp___1 = strstr((char const   *)rbuf, (char const   *)"HTTP/1.1 416");
  }
#line 867
  if ((unsigned int )tmp___1 != (unsigned int )((void *)0)) {
    {
#line 868
    Log("Server returned HTTP/1.1 416 - Requested Range Not Satisfiable\n");
#line 869
    exit(1);
    }
  } else {
    {
#line 871
    tmp___0 = strstr((char const   *)rbuf, (char const   *)"HTTP/1.1 403");
    }
#line 872
    if ((unsigned int )tmp___0 != (unsigned int )((void *)0)) {
      {
#line 873
      Log("<Server returned HTTP/1.1 403 - Permission Denied\n");
#line 874
      exit(1);
      }
    } else {
      {
#line 876
      tmp = strstr((char const   *)rbuf, (char const   *)"HTTP/1.1 404");
      }
#line 877
      if ((unsigned int )tmp != (unsigned int )((void *)0)) {
        {
#line 878
        Log("<Server returned HTTP/1.1 404 - File Not Found\n");
#line 879
        exit(1);
        }
      }
    }
  }
#line 883
  return;
}
}
#line 886
#pragma merger(0,"/tmp/cil-vVPZxX0H.i","-g,-Wall,-W,-pedantic")
#line 887
extern char *( __attribute__((__nonnull__(2))) strtok)(char * __restrict  __s , char const   * __restrict  __delim )  __attribute__((__nothrow__)) ;
#line 888
extern void ( __attribute__((__nonnull__(1))) bzero)(void *__s , size_t___0 __n )  __attribute__((__nothrow__)) ;
#line 889
extern int socket(int __domain , int __type , int __protocol )  __attribute__((__nothrow__)) ;
#line 890
extern int connect(int __fd , struct sockaddr  const  *__addr , socklen_t __len ) ;
#line 891
extern ssize_t send(int __fd , void const   *__buf , size_t___0 __n , int __flags ) ;
#line 892
extern ssize_t recv(int __fd , void *__buf , size_t___0 __n , int __flags ) ;
#line 893
extern int *__h_errno_location(void)  __attribute__((__nothrow__, __const__)) ;
#line 894
extern char const   *hstrerror(int __err_num )  __attribute__((__nothrow__)) ;
#line 895
extern struct hostent *gethostbyname(char const   *__name ) ;
#line 896
extern char *inet_ntoa(struct in_addr __in )  __attribute__((__nothrow__)) ;
#line 897 "aget_comb.c"
void http_head_req(struct request *req___0 ) 
{ 
  struct sockaddr_in sin ;
  struct hostent *he ;
  int sd ;
  char *sbuf ;
  char *rbuf ;
  char *tok ;
  char *s ;
  int clength ;
  size_t___0 tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int *tmp___2 ;
  char const   *tmp___3 ;
  char *tmp___4 ;
  int *tmp___5 ;
  char *tmp___6 ;
  int *tmp___7 ;
  char *tmp___8 ;
  int tmp___9 ;
  int *tmp___10 ;
  char *tmp___11 ;
  size_t___0 tmp___12 ;
  ssize_t tmp___13 ;
  int *tmp___14 ;
  char *tmp___15 ;
  ssize_t tmp___16 ;
  size_t___0 tmp___17 ;
  char *tmp___18 ;
  char *tmp___19 ;

  {
  {
#line 929
  tmp = strlen((char const   *)(req___0->url));
#line 930
  tmp___0 = calloc(512U + tmp, (size_t___0 )sizeof(char ));
#line 931
  sbuf = (char *)tmp___0;
#line 932
  tmp___1 = calloc(512U, (size_t___0 )sizeof(char ));
#line 933
  rbuf = (char *)tmp___1;
#line 934
  he = gethostbyname((char const   *)(req___0->host));
  }
#line 935
  if ((unsigned int )he == (unsigned int )((void *)0)) {
    {
#line 936
    tmp___2 = __h_errno_location();
#line 937
    tmp___3 = hstrerror(*tmp___2);
#line 938
    Log("Error: Cannot resolve hostname for %s: %s", req___0->host, tmp___3);
#line 939
    exit(1);
    }
  }
  {
#line 941
  tmp___4 = inet_ntoa(*((struct in_addr *)*(he->h_addr_list + 0)));
#line 942
  strncpy((char * __restrict  )(req___0->ip), (char const   * __restrict  )tmp___4,
          16U);
#line 944
  time(& t_start);
#line 945
  bzero((void *)(& sin), (size_t___0 )sizeof(sin));
#line 946
  sin.sin_family = (unsigned short)2;
#line 947
  sin.sin_addr.s_addr = inet_addr((char const   *)(req___0->ip));
#line 948
  sin.sin_port = htons((unsigned short )req___0->port);
#line 949
  sd = socket(2, 1, 0);
  }
#line 950
  if (sd == -1) {
    {
#line 951
    tmp___5 = __errno_location();
#line 952
    tmp___6 = strerror(*tmp___5);
#line 953
    Log("Socket creation failed for Head Request: %s", tmp___6);
#line 954
    exit(1);
    }
  }
  {
#line 956
  tmp___9 = connect(sd, (struct sockaddr  const  *)(& sin), (socklen_t )sizeof(sin));
  }
#line 957
  if (tmp___9 == -1) {
    {
#line 958
    tmp___7 = __errno_location();
#line 959
    tmp___8 = strerror(*tmp___7);
#line 960
    Log("Connection failed for Head Request: %s", tmp___8);
#line 961
    exit(1);
    }
  }
  {
#line 963
  Log("Head-Request Connection established");
#line 964
  sprintf((char * __restrict  )sbuf, (char const   * __restrict  )"HEAD %s HTTP/1.1\r\nHost: %s\r\nUser-Agent: %s\r\n\r\n",
          req___0->url, req___0->host, "EnderUNIX Aget v0.4");
#line 966
  tmp___12 = strlen((char const   *)sbuf);
#line 967
  tmp___13 = send(sd, (void const   *)sbuf, tmp___12, 0);
  }
#line 968
  if (tmp___13 == -1) {
    {
#line 969
    tmp___10 = __errno_location();
#line 970
    tmp___11 = strerror(*tmp___10);
#line 971
    Log("send failed for Head Request: %s", tmp___11);
#line 972
    exit(1);
    }
  }
  {
#line 974
  tmp___16 = recv(sd, (void *)rbuf, 512U, 0);
  }
#line 975
  if (tmp___16 == -1) {
    {
#line 976
    tmp___14 = __errno_location();
#line 977
    tmp___15 = strerror(*tmp___14);
#line 978
    Log("recv failed for Head Request: %s", tmp___15);
#line 979
    exit(1);
    }
  }
  {
#line 981
  handleHttpRetcode(rbuf);
#line 982
  tok = strtok((char * __restrict  )rbuf, (char const   * __restrict  )"\r\n");
#line 983
  tmp___19 = strstr((char const   *)tok, (char const   *)"HTTP/1.1 200");
  }
#line 984
  if ((unsigned int )tmp___19 != (unsigned int )((void *)0)) {
    {
#line 985
    while (1) {
      while_continue: /* CIL Label */ ;
      {
#line 986
      tok = strtok((char * __restrict  )((void *)0), (char const   * __restrict  )"\r\n");
      }
#line 987
      if (! ((unsigned int )tok != (unsigned int )((void *)0))) {
#line 988
        goto while_break;
      }
      {
#line 990
      tmp___18 = strstr((char const   *)tok, (char const   *)"Content-Length");
      }
#line 991
      if ((unsigned int )tmp___18 != (unsigned int )((void *)0)) {
        {
#line 992
        tmp___17 = strlen((char const   *)"Content-Length: ");
#line 993
        s = tok + tmp___17;
#line 994
        clength = atoi((char const   *)s);
#line 995
        req___0->clength = clength;
        }
      }
    }
    while_break: /* CIL Label */ ;
    }
  }
  {
#line 999
  free((void *)sbuf);
#line 1000
  free((void *)rbuf);
  }
#line 1001
  return;
}
}
#line 1004
#pragma merger(0,"/tmp/cil-R4CIbMeC.i","-g,-Wall,-W,-pedantic")
#line 1005
extern int ( __attribute__((__nonnull__(1,2))) sigwait)(sigset_t const   * __restrict  __set ,
                                                        int * __restrict  __sig ) ;
#line 1006
extern unsigned int alarm(unsigned int __seconds )  __attribute__((__nothrow__)) ;
#line 1007
void sigint_handler(void) ;
#line 1008
void sigalrm_handler(void) ;
#line 1009
void save_log(void) ;
#line 1010
unsigned int bwritten ;
#line 1011 "aget_comb.c"
void *signal_waiter(void *arg ) 
{ 
  int signal___0 ;

  {
  {
#line 1015
  arg = (void *)0;
#line 1016
  pthread_sigmask(1, (__sigset_t const   * __restrict  )(& signal_set), (__sigset_t * __restrict  )((void *)0));
  }
  {
#line 1017
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 1018
    sigwait((sigset_t const   * __restrict  )(& signal_set), (int * __restrict  )(& signal___0));
    }
    {
#line 1020
    if (signal___0 == 2) {
#line 1020
      goto case_2;
    }
#line 1023
    if (signal___0 == 14) {
#line 1023
      goto case_14;
    }
#line 1019
    goto switch_break;
    case_2: /* CIL Label */ 
    {
#line 1021
    sigint_handler();
    }
#line 1022
    goto switch_break;
    case_14: /* CIL Label */ 
    {
#line 1024
    sigalrm_handler();
    }
#line 1025
    goto switch_break;
    switch_break: /* CIL Label */ ;
    }
  }
  while_break: /* CIL Label */ ;
  }
}
}
#line 1030 "aget_comb.c"
void sigint_handler(void) 
{ 
  int i ;

  {
  {
#line 1034
  printf((char const   * __restrict  )"^C caught, saving download job...\n");
#line 1035
  i = 0;
  }
  {
#line 1036
  while (1) {
    while_continue: /* CIL Label */ ;
#line 1036
    if (! (i < nthreads)) {
#line 1036
      goto while_break;
    }
    {
#line 1037
    pthread_cancel((wthread + i)->tid);
#line 1038
    (wthread + i)->status = (unsigned char )((int )(wthread + i)->status & 15);
#line 1039
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 1041
  save_log();
#line 1042
  exit(0);
  }
}
}
#line 1045 "aget_comb.c"
void sigalrm_handler(void) 
{ 


  {
  {
#line 1049
  printf((char const   * __restrict  )"Signal Alarm came\n");
#line 1050
  updateProgressBar((float )bwritten, (float )req->clength);
#line 1051
  alarm(1U);
  }
#line 1052
  return;
}
}
#line 1055
#pragma merger(0,"/tmp/cil-msdqRXZR.i","-g,-Wall,-W,-pedantic")
#line 1061 "aget_comb.c"
unsigned int bwritten  =    0U;
#line 1062 "aget_comb.c"
pthread_mutex_t___0 bwritten_mutex  =    {{0, 0U, 0, 0, 0U, {0}}};
#line 1063
extern int pwrite() ;
#line 1064 "aget_comb.c"
void *http_get(void *arg ) 
{ 
  struct thread_data *td ;
  int sd ;
  char *rbuf ;
  char *s ;
  int dr ;
  int dw ;
  int i ;
  long foffset ;
  pthread_t tid ;
  void *tmp ;
  int *tmp___0 ;
  char *tmp___1 ;
  int *tmp___2 ;
  char *tmp___3 ;
  int tmp___4 ;
  int *tmp___5 ;
  char *tmp___6 ;
  size_t___0 tmp___7 ;
  ssize_t tmp___8 ;
  int *tmp___9 ;
  char *tmp___10 ;
  char *tmp___11 ;

  {
  {
#line 1089
  tid = pthread_self();
#line 1090
  pthread_sigmask(0, (__sigset_t const   * __restrict  )(& signal_set), (__sigset_t * __restrict  )((void *)0));
#line 1091
  pthread_setcanceltype(1, (int *)((void *)0));
#line 1092
  td = (struct thread_data *)arg;
#line 1093
  foffset = td->foffset;
#line 1094
  tmp = calloc(8192U, (size_t___0 )sizeof(char ));
#line 1095
  rbuf = (char *)tmp;
#line 1096
  sd = socket(2, 1, 0);
  }
#line 1097
  if (sd == -1) {
    {
#line 1098
    tmp___0 = __errno_location();
#line 1099
    tmp___1 = strerror(*tmp___0);
#line 1100
    Log("<THREAD #%ld> socket creation failed: %s", tid, tmp___1);
#line 1101
    pthread_exit((void *)1);
    }
  }
  {
#line 1103
  tmp___4 = connect(sd, (struct sockaddr  const  *)(& td->sin), (socklen_t )sizeof(struct sockaddr ));
  }
#line 1104
  if (tmp___4 == -1) {
    {
#line 1105
    tmp___2 = __errno_location();
#line 1106
    tmp___3 = strerror(*tmp___2);
#line 1107
    Log("<THREAD #%ld> connection failed: %s", tid, tmp___3);
#line 1108
    pthread_exit((void *)1);
    }
  }
  {
#line 1110
  tmp___7 = strlen((char const   *)(td->getstr));
#line 1111
  tmp___8 = send(sd, (void const   *)(td->getstr), tmp___7, 0);
  }
#line 1112
  if (tmp___8 == -1) {
    {
#line 1113
    tmp___5 = __errno_location();
#line 1114
    tmp___6 = strerror(*tmp___5);
#line 1115
    Log("<THREAD #%ld> send failed: %s", tid, tmp___6);
#line 1116
    pthread_exit((void *)1);
    }
  }
  {
#line 1118
  dr = recv(sd, (void *)rbuf, 8192U, 0);
  }
#line 1119
  if (dr == -1) {
    {
#line 1120
    tmp___9 = __errno_location();
#line 1121
    tmp___10 = strerror(*tmp___9);
#line 1122
    Log("<THREAD #%ld> recv failed: %s", tid, tmp___10);
#line 1123
    pthread_exit((void *)1);
    }
  }
  {
#line 1125
  handleHttpRetcode(rbuf);
#line 1126
  tmp___11 = strstr((char const   *)rbuf, (char const   *)"HTTP/1.1 206");
  }
#line 1127
  if ((unsigned int )tmp___11 == (unsigned int )((void *)0)) {
    {
#line 1128
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Something unhandled happened, shutting down...\n");
#line 1129
    exit(1);
    }
  }
  {
#line 1131
  s = rbuf;
#line 1132
  i = 0;
  }
  {
#line 1133
  while (1) {
    while_continue: /* CIL Label */ ;
#line 1134
    if ((int )*s == 10) {
#line 1135
      if ((int )*(s - 1) == 13) {
#line 1136
        if ((int )*(s - 2) == 10) {
#line 1137
          if ((int )*(s - 3) == 13) {
            {
#line 1138
            s ++;
#line 1139
            i ++;
            }
#line 1140
            goto while_break;
          }
        }
      }
    }
    {
#line 1145
    s ++;
#line 1146
    i ++;
    }
  }
  while_break: /* CIL Label */ ;
  }
  {
#line 1148
  td->offset = td->soffset;
  }
#line 1149
  if ((long )(dr - i) > foffset) {
    {
#line 1150
    dw = pwrite(td->fd, s, foffset - (long )i, td->soffset);
    }
  } else {
    {
#line 1152
    dw = pwrite(td->fd, s, dr - i, td->soffset);
    }
  }
  {
#line 1154
  td->offset = td->soffset + (long )dw;
#line 1155
  pthread_mutex_lock(& bwritten_mutex);
#line 1156
  bwritten += (unsigned int )dw;
#line 1157
  pthread_mutex_unlock(& bwritten_mutex);
  }
  {
#line 1158
  while (1) {
    while_continue___0: /* CIL Label */ ;
#line 1158
    if (! (td->offset < foffset)) {
#line 1158
      goto while_break___0;
    }
    {
#line 1159
    memset((void *)rbuf, 8192, 0U);
#line 1160
    dr = recv(sd, (void *)rbuf, 8192U, 0);
    }
#line 1161
    if (td->offset + (long )dr > foffset) {
      {
#line 1162
      dw = pwrite(td->fd, rbuf, foffset - td->offset, td->offset);
      }
    } else {
      {
#line 1164
      dw = pwrite(td->fd, rbuf, dr, td->offset);
      }
    }
    {
#line 1166
    td->offset += (long )dw;
#line 1167
    pthread_mutex_lock(& bwritten_mutex);
#line 1168
    bwritten += (unsigned int )dw;
#line 1169
    pthread_mutex_unlock(& bwritten_mutex);
#line 1170
    updateProgressBar((float )bwritten, (float )td->clength);
    }
  }
  while_break___0: /* CIL Label */ ;
  }
#line 1172
  if (td->offset == td->foffset) {
    {
#line 1173
    td->status = (unsigned char)255;
    }
  }
  {
#line 1175
  close(sd);
#line 1176
  pthread_exit((void *)0);
  }
#line 1177
  return ((void *)0);
}
}
#line 1180
#pragma merger(0,"/tmp/cil-qIg3LbHM.i","-g,-Wall,-W,-pedantic")
#line 1181
extern int fclose(FILE *__stream ) ;
#line 1182
extern FILE *fopen(char const   * __restrict  __filename , char const   * __restrict  __modes ) ;
#line 1183
extern size_t___0 fread(void * __restrict  __ptr , size_t___0 __size , size_t___0 __n ,
                        FILE * __restrict  __stream ) ;
#line 1184
extern size_t___0 fwrite(void const   * __restrict  __ptr , size_t___0 __size , size_t___0 __n ,
                         FILE * __restrict  __s ) ;
#line 1186
extern int ( __attribute__((__nonnull__(1))) unlink)(char const   *__name )  __attribute__((__nothrow__)) ;
#line 1187 "aget_comb.c"
void save_log(void) 
{ 
  char *logfile ;
  struct hist_data h ;
  FILE *fp ;
  void *tmp ;
  size_t___0 tmp___0 ;
  int *tmp___1 ;
  char *tmp___2 ;

  {
  {
#line 1197
  tmp = calloc(255U, (size_t___0 )sizeof(char ));
#line 1198
  logfile = (char *)tmp;
#line 1199
  tmp___0 = strlen((char const   *)((req + 0)->lfile));
  }
#line 1200
  if (tmp___0 == 0U) {
    {
#line 1201
    snprintf((char * __restrict  )logfile, 255U, (char const   * __restrict  )"aget-%s.log",
             (req + 0)->file);
    }
  } else {
    {
#line 1204
    snprintf((char * __restrict  )logfile, 255U, (char const   * __restrict  )"aget-%s.log",
             (req + 0)->lfile);
    }
  }
  {
#line 1207
  fp = fopen((char const   * __restrict  )logfile, (char const   * __restrict  )"w");
  }
#line 1208
  if ((unsigned int )fp == (unsigned int )((void *)0)) {
    {
#line 1209
    tmp___1 = __errno_location();
#line 1210
    tmp___2 = strerror(*tmp___1);
#line 1211
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"cannot open log file %s for writing: %s\n",
            logfile, tmp___2);
#line 1213
    exit(1);
    }
  }
  {
#line 1215
  memcpy((void * __restrict  )(& h.req), (void const   * __restrict  )req, (size_t___0 )sizeof(struct request ));
#line 1216
  memcpy((void * __restrict  )(& h.wthread), (void const   * __restrict  )wthread,
         (size_t___0 )(sizeof(struct thread_data ) * (unsigned long )((unsigned int )nthreads)));
#line 1218
  h.nthreads = nthreads;
#line 1219
  h.bwritten = (int )bwritten;
#line 1220
  printf((char const   * __restrict  )"--> Logfile is: %s, so far %d bytes have been transferred\n",
         logfile, h.bwritten);
#line 1222
  fwrite((void const   * __restrict  )(& h), (size_t___0 )sizeof(struct hist_data ),
         1U, (FILE * __restrict  )fp);
#line 1223
  fclose(fp);
#line 1224
  free((void *)logfile);
  }
#line 1225
  return;
}
}
#line 1228 "aget_comb.c"
int read_log(struct hist_data *h ) 
{ 
  char *logfile ;
  FILE *fp ;
  void *tmp ;
  size_t___0 tmp___0 ;
  int *tmp___1 ;
  char *tmp___2 ;
  int *tmp___3 ;
  int *tmp___4 ;
  char *tmp___5 ;
  int tmp___6 ;

  {
  {
#line 1241
  tmp = calloc(255U, (size_t___0 )sizeof(char ));
#line 1242
  logfile = (char *)tmp;
#line 1243
  tmp___0 = strlen((char const   *)((req + 0)->lfile));
  }
#line 1244
  if (tmp___0 == 0U) {
    {
#line 1245
    snprintf((char * __restrict  )logfile, 255U, (char const   * __restrict  )"aget-%s.log",
             (req + 0)->file);
    }
  } else {
    {
#line 1248
    snprintf((char * __restrict  )logfile, 255U, (char const   * __restrict  )"aget-%s.log",
             (req + 0)->lfile);
    }
  }
  {
#line 1251
  Log("Attempting to read log file %s for resuming download job...", logfile);
#line 1252
  fp = fopen((char const   * __restrict  )logfile, (char const   * __restrict  )"r");
  }
#line 1253
  if ((unsigned int )fp == (unsigned int )((void *)0)) {
    {
#line 1254
    tmp___3 = __errno_location();
    }
#line 1255
    if (*tmp___3 == 2) {
      {
#line 1256
      Log("Couldn\'t find log file for this download, starting a clean job...");
      }
#line 1257
      return (-1);
    } else {
      {
#line 1259
      tmp___1 = __errno_location();
#line 1260
      tmp___2 = strerror(*tmp___1);
#line 1261
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"cannot open log file %s for reading: %s\n",
              logfile, tmp___2);
#line 1263
      exit(1);
      }
    }
  }
  {
#line 1266
  fread((void * __restrict  )h, (size_t___0 )sizeof(struct hist_data ), 1U, (FILE * __restrict  )fp);
#line 1267
  bwritten = (unsigned int )h->bwritten;
#line 1268
  fclose(fp);
#line 1269
  Log("%d bytes already transferred", bwritten);
#line 1270
  tmp___6 = unlink((char const   *)logfile);
  }
#line 1271
  if (tmp___6 == -1) {
    {
#line 1272
    tmp___4 = __errno_location();
#line 1273
    tmp___5 = strerror(*tmp___4);
#line 1274
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"read_log: cannot remove stale log file %s: %s\n",
            logfile, tmp___5);
    }
  }
  {
#line 1277
  free((void *)logfile);
  }
#line 1278
  return (0);
}
}
